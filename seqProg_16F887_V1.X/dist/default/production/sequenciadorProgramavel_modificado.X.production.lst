

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sun Oct 24 16:16:04 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     8                           	psect	strings,global,class=STRING,delta=2,noexec
     9                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	maintext,global,class=CODE,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2,group=1
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	intentry,global,class=CODE,delta=2
    91                           	psect	text67,local,class=CODE,merge=1,delta=2
    92                           	psect	functab,global,class=ENTRY,delta=2
    93                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    94                           	psect	maintext_split_1,global,class=CODE,split=1,delta=2
    95                           	psect	maintext_split_2,global,class=CODE,split=1,delta=2
    96                           	psect	maintext_split_3,global,class=CODE,split=1,delta=2
    97                           	psect	maintext_split_4,global,class=CODE,split=1,delta=2
    98                           	dabs	1,0x7E,2
    99  0000                     
   100                           ; Version 2.20
   101                           ; Generated 12/02/2020 GMT
   102                           ; 
   103                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   104                           ; All rights reserved.
   105                           ; 
   106                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   107                           ; 
   108                           ; Redistribution and use in source and binary forms, with or without modification, are
   109                           ; permitted provided that the following conditions are met:
   110                           ; 
   111                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   112                           ;        conditions and the following disclaimer.
   113                           ; 
   114                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   115                           ;        of conditions and the following disclaimer in the documentation and/or other
   116                           ;        materials provided with the distribution.
   117                           ; 
   118                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   119                           ;        software without specific prior written permission.
   120                           ; 
   121                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   122                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   123                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   124                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   125                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   126                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   127                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   128                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   129                           ; 
   130                           ; 
   131                           ; Code-generator required, PIC16F887 Definitions
   132                           ; 
   133                           ; SFR Addresses
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0013                     	;# 
   155  0014                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001D                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  0081                     	;# 
   170  0085                     	;# 
   171  0086                     	;# 
   172  0087                     	;# 
   173  0088                     	;# 
   174  0089                     	;# 
   175  008C                     	;# 
   176  008D                     	;# 
   177  008E                     	;# 
   178  008F                     	;# 
   179  0090                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0094                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  009F                     	;# 
   197  0105                     	;# 
   198  0107                     	;# 
   199  0108                     	;# 
   200  0109                     	;# 
   201  010C                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  010F                     	;# 
   206  0185                     	;# 
   207  0187                     	;# 
   208  0188                     	;# 
   209  0189                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  0000                     	;# 
   213  0001                     	;# 
   214  0002                     	;# 
   215  0003                     	;# 
   216  0004                     	;# 
   217  0005                     	;# 
   218  0006                     	;# 
   219  0007                     	;# 
   220  0008                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0088                     	;# 
   252  0089                     	;# 
   253  008C                     	;# 
   254  008D                     	;# 
   255  008E                     	;# 
   256  008F                     	;# 
   257  0090                     	;# 
   258  0091                     	;# 
   259  0092                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0094                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009B                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  0105                     	;# 
   276  0107                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0187                     	;# 
   286  0188                     	;# 
   287  0189                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0008                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000D                     	;# 
   304  000E                     	;# 
   305  000E                     	;# 
   306  000F                     	;# 
   307  0010                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0013                     	;# 
   311  0014                     	;# 
   312  0015                     	;# 
   313  0015                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001B                     	;# 
   321  001C                     	;# 
   322  001D                     	;# 
   323  001E                     	;# 
   324  001F                     	;# 
   325  0081                     	;# 
   326  0085                     	;# 
   327  0086                     	;# 
   328  0087                     	;# 
   329  0088                     	;# 
   330  0089                     	;# 
   331  008C                     	;# 
   332  008D                     	;# 
   333  008E                     	;# 
   334  008F                     	;# 
   335  0090                     	;# 
   336  0091                     	;# 
   337  0092                     	;# 
   338  0093                     	;# 
   339  0093                     	;# 
   340  0093                     	;# 
   341  0094                     	;# 
   342  0095                     	;# 
   343  0096                     	;# 
   344  0097                     	;# 
   345  0098                     	;# 
   346  0099                     	;# 
   347  009A                     	;# 
   348  009B                     	;# 
   349  009C                     	;# 
   350  009D                     	;# 
   351  009E                     	;# 
   352  009F                     	;# 
   353  0105                     	;# 
   354  0107                     	;# 
   355  0108                     	;# 
   356  0109                     	;# 
   357  010C                     	;# 
   358  010C                     	;# 
   359  010D                     	;# 
   360  010E                     	;# 
   361  010F                     	;# 
   362  0185                     	;# 
   363  0187                     	;# 
   364  0188                     	;# 
   365  0189                     	;# 
   366  018C                     	;# 
   367  018D                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0008                     	;# 
   377  0009                     	;# 
   378  000A                     	;# 
   379  000B                     	;# 
   380  000C                     	;# 
   381  000D                     	;# 
   382  000E                     	;# 
   383  000E                     	;# 
   384  000F                     	;# 
   385  0010                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0013                     	;# 
   389  0014                     	;# 
   390  0015                     	;# 
   391  0015                     	;# 
   392  0016                     	;# 
   393  0017                     	;# 
   394  0018                     	;# 
   395  0019                     	;# 
   396  001A                     	;# 
   397  001B                     	;# 
   398  001B                     	;# 
   399  001C                     	;# 
   400  001D                     	;# 
   401  001E                     	;# 
   402  001F                     	;# 
   403  0081                     	;# 
   404  0085                     	;# 
   405  0086                     	;# 
   406  0087                     	;# 
   407  0088                     	;# 
   408  0089                     	;# 
   409  008C                     	;# 
   410  008D                     	;# 
   411  008E                     	;# 
   412  008F                     	;# 
   413  0090                     	;# 
   414  0091                     	;# 
   415  0092                     	;# 
   416  0093                     	;# 
   417  0093                     	;# 
   418  0093                     	;# 
   419  0094                     	;# 
   420  0095                     	;# 
   421  0096                     	;# 
   422  0097                     	;# 
   423  0098                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  009F                     	;# 
   431  0105                     	;# 
   432  0107                     	;# 
   433  0108                     	;# 
   434  0109                     	;# 
   435  010C                     	;# 
   436  010C                     	;# 
   437  010D                     	;# 
   438  010E                     	;# 
   439  010F                     	;# 
   440  0185                     	;# 
   441  0187                     	;# 
   442  0188                     	;# 
   443  0189                     	;# 
   444  018C                     	;# 
   445  018D                     	;# 
   446  0000                     	;# 
   447  0001                     	;# 
   448  0002                     	;# 
   449  0003                     	;# 
   450  0004                     	;# 
   451  0005                     	;# 
   452  0006                     	;# 
   453  0007                     	;# 
   454  0008                     	;# 
   455  0009                     	;# 
   456  000A                     	;# 
   457  000B                     	;# 
   458  000C                     	;# 
   459  000D                     	;# 
   460  000E                     	;# 
   461  000E                     	;# 
   462  000F                     	;# 
   463  0010                     	;# 
   464  0011                     	;# 
   465  0012                     	;# 
   466  0013                     	;# 
   467  0014                     	;# 
   468  0015                     	;# 
   469  0015                     	;# 
   470  0016                     	;# 
   471  0017                     	;# 
   472  0018                     	;# 
   473  0019                     	;# 
   474  001A                     	;# 
   475  001B                     	;# 
   476  001B                     	;# 
   477  001C                     	;# 
   478  001D                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  0081                     	;# 
   482  0085                     	;# 
   483  0086                     	;# 
   484  0087                     	;# 
   485  0088                     	;# 
   486  0089                     	;# 
   487  008C                     	;# 
   488  008D                     	;# 
   489  008E                     	;# 
   490  008F                     	;# 
   491  0090                     	;# 
   492  0091                     	;# 
   493  0092                     	;# 
   494  0093                     	;# 
   495  0093                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0095                     	;# 
   499  0096                     	;# 
   500  0097                     	;# 
   501  0098                     	;# 
   502  0099                     	;# 
   503  009A                     	;# 
   504  009B                     	;# 
   505  009C                     	;# 
   506  009D                     	;# 
   507  009E                     	;# 
   508  009F                     	;# 
   509  0105                     	;# 
   510  0107                     	;# 
   511  0108                     	;# 
   512  0109                     	;# 
   513  010C                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  010F                     	;# 
   518  0185                     	;# 
   519  0187                     	;# 
   520  0188                     	;# 
   521  0189                     	;# 
   522  018C                     	;# 
   523  018D                     	;# 
   524  0000                     	;# 
   525  0001                     	;# 
   526  0002                     	;# 
   527  0003                     	;# 
   528  0004                     	;# 
   529  0005                     	;# 
   530  0006                     	;# 
   531  0007                     	;# 
   532  0008                     	;# 
   533  0009                     	;# 
   534  000A                     	;# 
   535  000B                     	;# 
   536  000C                     	;# 
   537  000D                     	;# 
   538  000E                     	;# 
   539  000E                     	;# 
   540  000F                     	;# 
   541  0010                     	;# 
   542  0011                     	;# 
   543  0012                     	;# 
   544  0013                     	;# 
   545  0014                     	;# 
   546  0015                     	;# 
   547  0015                     	;# 
   548  0016                     	;# 
   549  0017                     	;# 
   550  0018                     	;# 
   551  0019                     	;# 
   552  001A                     	;# 
   553  001B                     	;# 
   554  001B                     	;# 
   555  001C                     	;# 
   556  001D                     	;# 
   557  001E                     	;# 
   558  001F                     	;# 
   559  0081                     	;# 
   560  0085                     	;# 
   561  0086                     	;# 
   562  0087                     	;# 
   563  0088                     	;# 
   564  0089                     	;# 
   565  008C                     	;# 
   566  008D                     	;# 
   567  008E                     	;# 
   568  008F                     	;# 
   569  0090                     	;# 
   570  0091                     	;# 
   571  0092                     	;# 
   572  0093                     	;# 
   573  0093                     	;# 
   574  0093                     	;# 
   575  0094                     	;# 
   576  0095                     	;# 
   577  0096                     	;# 
   578  0097                     	;# 
   579  0098                     	;# 
   580  0099                     	;# 
   581  009A                     	;# 
   582  009B                     	;# 
   583  009C                     	;# 
   584  009D                     	;# 
   585  009E                     	;# 
   586  009F                     	;# 
   587  0105                     	;# 
   588  0107                     	;# 
   589  0108                     	;# 
   590  0109                     	;# 
   591  010C                     	;# 
   592  010C                     	;# 
   593  010D                     	;# 
   594  010E                     	;# 
   595  010F                     	;# 
   596  0185                     	;# 
   597  0187                     	;# 
   598  0188                     	;# 
   599  0189                     	;# 
   600  018C                     	;# 
   601  018D                     	;# 
   602  0000                     	;# 
   603  0001                     	;# 
   604  0002                     	;# 
   605  0003                     	;# 
   606  0004                     	;# 
   607  0005                     	;# 
   608  0006                     	;# 
   609  0007                     	;# 
   610  0008                     	;# 
   611  0009                     	;# 
   612  000A                     	;# 
   613  000B                     	;# 
   614  000C                     	;# 
   615  000D                     	;# 
   616  000E                     	;# 
   617  000E                     	;# 
   618  000F                     	;# 
   619  0010                     	;# 
   620  0011                     	;# 
   621  0012                     	;# 
   622  0013                     	;# 
   623  0014                     	;# 
   624  0015                     	;# 
   625  0015                     	;# 
   626  0016                     	;# 
   627  0017                     	;# 
   628  0018                     	;# 
   629  0019                     	;# 
   630  001A                     	;# 
   631  001B                     	;# 
   632  001B                     	;# 
   633  001C                     	;# 
   634  001D                     	;# 
   635  001E                     	;# 
   636  001F                     	;# 
   637  0081                     	;# 
   638  0085                     	;# 
   639  0086                     	;# 
   640  0087                     	;# 
   641  0088                     	;# 
   642  0089                     	;# 
   643  008C                     	;# 
   644  008D                     	;# 
   645  008E                     	;# 
   646  008F                     	;# 
   647  0090                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0093                     	;# 
   651  0093                     	;# 
   652  0093                     	;# 
   653  0094                     	;# 
   654  0095                     	;# 
   655  0096                     	;# 
   656  0097                     	;# 
   657  0098                     	;# 
   658  0099                     	;# 
   659  009A                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  009F                     	;# 
   665  0105                     	;# 
   666  0107                     	;# 
   667  0108                     	;# 
   668  0109                     	;# 
   669  010C                     	;# 
   670  010C                     	;# 
   671  010D                     	;# 
   672  010E                     	;# 
   673  010F                     	;# 
   674  0185                     	;# 
   675  0187                     	;# 
   676  0188                     	;# 
   677  0189                     	;# 
   678  018C                     	;# 
   679  018D                     	;# 
   680  0000                     	;# 
   681  0001                     	;# 
   682  0002                     	;# 
   683  0003                     	;# 
   684  0004                     	;# 
   685  0005                     	;# 
   686  0006                     	;# 
   687  0007                     	;# 
   688  0008                     	;# 
   689  0009                     	;# 
   690  000A                     	;# 
   691  000B                     	;# 
   692  000C                     	;# 
   693  000D                     	;# 
   694  000E                     	;# 
   695  000E                     	;# 
   696  000F                     	;# 
   697  0010                     	;# 
   698  0011                     	;# 
   699  0012                     	;# 
   700  0013                     	;# 
   701  0014                     	;# 
   702  0015                     	;# 
   703  0015                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001B                     	;# 
   711  001C                     	;# 
   712  001D                     	;# 
   713  001E                     	;# 
   714  001F                     	;# 
   715  0081                     	;# 
   716  0085                     	;# 
   717  0086                     	;# 
   718  0087                     	;# 
   719  0088                     	;# 
   720  0089                     	;# 
   721  008C                     	;# 
   722  008D                     	;# 
   723  008E                     	;# 
   724  008F                     	;# 
   725  0090                     	;# 
   726  0091                     	;# 
   727  0092                     	;# 
   728  0093                     	;# 
   729  0093                     	;# 
   730  0093                     	;# 
   731  0094                     	;# 
   732  0095                     	;# 
   733  0096                     	;# 
   734  0097                     	;# 
   735  0098                     	;# 
   736  0099                     	;# 
   737  009A                     	;# 
   738  009B                     	;# 
   739  009C                     	;# 
   740  009D                     	;# 
   741  009E                     	;# 
   742  009F                     	;# 
   743  0105                     	;# 
   744  0107                     	;# 
   745  0108                     	;# 
   746  0109                     	;# 
   747  010C                     	;# 
   748  010C                     	;# 
   749  010D                     	;# 
   750  010E                     	;# 
   751  010F                     	;# 
   752  0185                     	;# 
   753  0187                     	;# 
   754  0188                     	;# 
   755  0189                     	;# 
   756  018C                     	;# 
   757  018D                     	;# 
   758                           
   759 ;; Function _receita_livre is unused but had its address taken
   760  0000                     
   761 ;; Function _formatar_receitas is unused but had its address taken
   762  0000                     
   763                           	psect	idataCOMMON
   764  0003                     __pidataCOMMON:
   765                           
   766                           ;initializer for _indice_passos
   767  0003  3402               	retlw	2
   768                           
   769                           	psect	idataBANK0
   770  1B0F                     __pidataBANK0:
   771                           
   772                           ;initializer for _ind_print
   773  1B0F  3402               	retlw	2
   774                           
   775                           ;initializer for _ind_fila
   776  1B10  3402               	retlw	2
   777                           
   778                           	psect	idataBANK1
   779  1CF5                     __pidataBANK1:
   780                           
   781                           ;initializer for main@F1486
   782  1CF5  344D               	retlw	77
   783  1CF6  3475               	retlw	117
   784  1CF7  346E               	retlw	110
   785  1CF8  3464               	retlw	100
   786  1CF9  346F               	retlw	111
   787  1CFA  3420               	retlw	32
   788  1CFB  3461               	retlw	97
   789  1CFC  346F               	retlw	111
   790  1CFD  3420               	retlw	32
   791  1CFE  3473               	retlw	115
   792  1CFF  3465               	retlw	101
   793  1D00  3475               	retlw	117
   794  1D01  3420               	retlw	32
   795  1D02  3463               	retlw	99
   796  1D03  346F               	retlw	111
   797  1D04  346D               	retlw	109
   798  1D05  3461               	retlw	97
   799  1D06  346E               	retlw	110
   800  1D07  3464               	retlw	100
   801  1D08  346F               	retlw	111
   802                           
   803                           ;initializer for _teclas
   804  1D09  3431               	retlw	49
   805  1D0A  3432               	retlw	50
   806  1D0B  3433               	retlw	51
   807  1D0C  3441               	retlw	65
   808  1D0D  3434               	retlw	52
   809  1D0E  3435               	retlw	53
   810  1D0F  3436               	retlw	54
   811  1D10  3442               	retlw	66
   812  1D11  3437               	retlw	55
   813  1D12  3438               	retlw	56
   814  1D13  3439               	retlw	57
   815  1D14  3443               	retlw	67
   816  1D15  342A               	retlw	42
   817  1D16  3430               	retlw	48
   818  1D17  3423               	retlw	35
   819  1D18  3444               	retlw	68
   820                           
   821                           	psect	idataBANK3
   822  1B4F                     __pidataBANK3:
   823                           
   824                           ;initializer for _IHM
   825  1B4F  340D               	retlw	low (fp__dispLCD_init-fpbase)
   826  1B50  3410               	retlw	low (fp__dispLCD_str-fpbase)
   827  1B51  3407               	retlw	low (fp__dispLCD-fpbase)
   828  1B52  3413               	retlw	low (fp__dispLCD_num-fpbase)
   829  1B53  340A               	retlw	low (fp__dispLCD_clr-fpbase)
   830                           
   831                           ;initializer for _EEPROM
   832  1B54  3416               	retlw	low (fp__salvar_receita-fpbase)
   833  1B55  3401               	retlw	low (fp__buscar_receita-fpbase)
   834  1B56  3404               	retlw	low (fp__deletar_receita-fpbase)
   835  1B57  3400               	retlw	0
   836  1B58  3400               	retlw	0
   837  000C                     _PIR1bits	set	12
   838  0010                     _T1CONbits	set	16
   839  000E                     _TMR1L	set	14
   840  000F                     _TMR1H	set	15
   841  0008                     _PORTD	set	8
   842  0005                     _SERIALIO	set	5
   843  0005                     _PORTAbits	set	5
   844  000B                     _INTCONbits	set	11
   845  0006                     _LCDbits	set	6
   846  008C                     _PIE1bits	set	140
   847  0088                     _TRISD	set	136
   848  0085                     _TRISAbits	set	133
   849  0086                     _TRISBbits	set	134
   850  010C                     _EEDAT	set	268
   851  010D                     _EEADR	set	269
   852  010F                     _EEADRH	set	271
   853  0188                     _ANSELbits	set	392
   854  018D                     _EECON2	set	397
   855  018C                     _EECON1bits	set	396
   856  0189                     _ANSELH	set	393
   857                           
   858                           	psect	strings
   859  1800                     __pstrings:
   860  1800                     stringtab:
   861  1800                     __stringtab:
   862                           
   863                           ;	String table - string pointers are 2 bytes each
   864  1800  1BFF               	btfsc	btemp+1,7
   865  1801  280A               	ljmp	stringcode
   866  1802  1383               	bcf	3,7
   867  1803  187F               	btfsc	btemp+1,0
   868  1804  1783               	bsf	3,7
   869  1805  0800               	movf	0,w
   870  1806  0A84               	incf	4,f
   871  1807  1903               	skipnz
   872  1808  0AFF               	incf	btemp+1,f
   873  1809  0008               	return
   874  180A                     stringcode:
   875  180A  087F               	movf	btemp+1,w
   876  180B  397F               	andlw	127
   877  180C  008A               	movwf	10
   878  180D  0804               	movf	4,w
   879  180E  0A84               	incf	4,f
   880  180F  1903               	skipnz
   881  1810  0AFF               	incf	btemp+1,f
   882  1811  0082               	movwf	2
   883  1812                     __stringbase:
   884  1812                     __end_of__stringtab:
   885                           
   886                           	psect	stringtext
   887  1000                     __pstringtext:
   888  1000                     STR_4:
   889  1000  3431               	retlw	49	;'1'
   890  1001  343A               	retlw	58	;':'
   891  1002  3420               	retlw	32	;' '
   892  1003  3449               	retlw	73	;'I'
   893  1004  344E               	retlw	78	;'N'
   894  1005  3453               	retlw	83	;'S'
   895  1006  3445               	retlw	69	;'E'
   896  1007  3452               	retlw	82	;'R'
   897  1008  3449               	retlw	73	;'I'
   898  1009  3452               	retlw	82	;'R'
   899  100A  3420               	retlw	32	;' '
   900  100B  3453               	retlw	83	;'S'
   901  100C  3445               	retlw	69	;'E'
   902  100D  3451               	retlw	81	;'Q'
   903  100E  3455               	retlw	85	;'U'
   904  100F  3445               	retlw	69	;'E'
   905  1010  344E               	retlw	78	;'N'
   906  1011  3443               	retlw	67	;'C'
   907  1012  3449               	retlw	73	;'I'
   908  1013  3441               	retlw	65	;'A'
   909  1014  340A               	retlw	10
   910  1015  3432               	retlw	50	;'2'
   911  1016  343A               	retlw	58	;':'
   912  1017  3420               	retlw	32	;' '
   913  1018  3442               	retlw	66	;'B'
   914  1019  3455               	retlw	85	;'U'
   915  101A  3453               	retlw	83	;'S'
   916  101B  3443               	retlw	67	;'C'
   917  101C  3441               	retlw	65	;'A'
   918  101D  3452               	retlw	82	;'R'
   919  101E  3420               	retlw	32	;' '
   920  101F  3453               	retlw	83	;'S'
   921  1020  3445               	retlw	69	;'E'
   922  1021  3451               	retlw	81	;'Q'
   923  1022  3455               	retlw	85	;'U'
   924  1023  3445               	retlw	69	;'E'
   925  1024  344E               	retlw	78	;'N'
   926  1025  3443               	retlw	67	;'C'
   927  1026  3449               	retlw	73	;'I'
   928  1027  3441               	retlw	65	;'A'
   929  1028  340A               	retlw	10
   930  1029  3433               	retlw	51	;'3'
   931  102A  343A               	retlw	58	;':'
   932  102B  3420               	retlw	32	;' '
   933  102C  3452               	retlw	82	;'R'
   934  102D  3445               	retlw	69	;'E'
   935  102E  3450               	retlw	80	;'P'
   936  102F  3445               	retlw	69	;'E'
   937  1030  3454               	retlw	84	;'T'
   938  1031  3449               	retlw	73	;'I'
   939  1032  3452               	retlw	82	;'R'
   940  1033  3420               	retlw	32	;' '
   941  1034  3455               	retlw	85	;'U'
   942  1035  344C               	retlw	76	;'L'
   943  1036  3454               	retlw	84	;'T'
   944  1037  342E               	retlw	46	;'.'
   945  1038  3420               	retlw	32	;' '
   946  1039  3453               	retlw	83	;'S'
   947  103A  3445               	retlw	69	;'E'
   948  103B  3451               	retlw	81	;'Q'
   949  103C  3455               	retlw	85	;'U'
   950  103D  340A               	retlw	10
   951  103E  3434               	retlw	52	;'4'
   952  103F  343A               	retlw	58	;':'
   953  1040  3420               	retlw	32	;' '
   954  1041  3443               	retlw	67	;'C'
   955  1042  344F               	retlw	79	;'O'
   956  1043  344E               	retlw	78	;'N'
   957  1044  3446               	retlw	70	;'F'
   958  1045  3449               	retlw	73	;'I'
   959  1046  3447               	retlw	71	;'G'
   960  1047  3455               	retlw	85	;'U'
   961  1048  3452               	retlw	82	;'R'
   962  1049  3441               	retlw	65	;'A'
   963  104A  3443               	retlw	67	;'C'
   964  104B  344F               	retlw	79	;'O'
   965  104C  3445               	retlw	69	;'E'
   966  104D  3453               	retlw	83	;'S'
   967  104E  3420               	retlw	32	;' '
   968  104F  3420               	retlw	32	;' '
   969  1050  3420               	retlw	32	;' '
   970  1051  3420               	retlw	32	;' '
   971  1052  3400               	retlw	0
   972  1053                     STR_5:
   973  1053  3420               	retlw	32	;' '
   974  1054  3445               	retlw	69	;'E'
   975  1055  3453               	retlw	83	;'S'
   976  1056  3443               	retlw	67	;'C'
   977  1057  344F               	retlw	79	;'O'
   978  1058  344C               	retlw	76	;'L'
   979  1059  3448               	retlw	72	;'H'
   980  105A  3441               	retlw	65	;'A'
   981  105B  3420               	retlw	32	;' '
   982  105C  3441               	retlw	65	;'A'
   983  105D  3420               	retlw	32	;' '
   984  105E  344D               	retlw	77	;'M'
   985  105F  3445               	retlw	69	;'E'
   986  1060  344D               	retlw	77	;'M'
   987  1061  344F               	retlw	79	;'O'
   988  1062  3452               	retlw	82	;'R'
   989  1063  3449               	retlw	73	;'I'
   990  1064  3441               	retlw	65	;'A'
   991  1065  3420               	retlw	32	;' '
   992  1066  340A               	retlw	10
   993  1067  3451               	retlw	81	;'Q'
   994  1068  3455               	retlw	85	;'U'
   995  1069  3445               	retlw	69	;'E'
   996  106A  3420               	retlw	32	;' '
   997  106B  3444               	retlw	68	;'D'
   998  106C  3445               	retlw	69	;'E'
   999  106D  3453               	retlw	83	;'S'
  1000  106E  3445               	retlw	69	;'E'
  1001  106F  344A               	retlw	74	;'J'
  1002  1070  3441               	retlw	65	;'A'
  1003  1071  3420               	retlw	32	;' '
  1004  1072  3445               	retlw	69	;'E'
  1005  1073  3458               	retlw	88	;'X'
  1006  1074  3445               	retlw	69	;'E'
  1007  1075  3443               	retlw	67	;'C'
  1008  1076  3455               	retlw	85	;'U'
  1009  1077  3454               	retlw	84	;'T'
  1010  1078  3441               	retlw	65	;'A'
  1011  1079  3452               	retlw	82	;'R'
  1012  107A  340A               	retlw	10
  1013  107B  3420               	retlw	32	;' '
  1014  107C  3430               	retlw	48	;'0'
  1015  107D  3420               	retlw	32	;' '
  1016  107E  3420               	retlw	32	;' '
  1017  107F  3420               	retlw	32	;' '
  1018  1080  3431               	retlw	49	;'1'
  1019  1081  3420               	retlw	32	;' '
  1020  1082  3420               	retlw	32	;' '
  1021  1083  3420               	retlw	32	;' '
  1022  1084  3432               	retlw	50	;'2'
  1023  1085  3420               	retlw	32	;' '
  1024  1086  3420               	retlw	32	;' '
  1025  1087  3420               	retlw	32	;' '
  1026  1088  3433               	retlw	51	;'3'
  1027  1089  3420               	retlw	32	;' '
  1028  108A  3420               	retlw	32	;' '
  1029  108B  3420               	retlw	32	;' '
  1030  108C  3434               	retlw	52	;'4'
  1031  108D  3420               	retlw	32	;' '
  1032  108E  340A               	retlw	10
  1033  108F  3420               	retlw	32	;' '
  1034  1090  3435               	retlw	53	;'5'
  1035  1091  3420               	retlw	32	;' '
  1036  1092  3420               	retlw	32	;' '
  1037  1093  3420               	retlw	32	;' '
  1038  1094  3436               	retlw	54	;'6'
  1039  1095  3420               	retlw	32	;' '
  1040  1096  3420               	retlw	32	;' '
  1041  1097  3420               	retlw	32	;' '
  1042  1098  3437               	retlw	55	;'7'
  1043  1099  3420               	retlw	32	;' '
  1044  109A  3420               	retlw	32	;' '
  1045  109B  3420               	retlw	32	;' '
  1046  109C  3438               	retlw	56	;'8'
  1047  109D  3420               	retlw	32	;' '
  1048  109E  3420               	retlw	32	;' '
  1049  109F  3420               	retlw	32	;' '
  1050  10A0  3439               	retlw	57	;'9'
  1051  10A1  3420               	retlw	32	;' '
  1052  10A2  340A               	retlw	10
  1053  10A3  3400               	retlw	0
  1054  10A4                     STR_17:
  1055  10A4  3420               	retlw	32	;' '
  1056  10A5  3445               	retlw	69	;'E'
  1057  10A6  3453               	retlw	83	;'S'
  1058  10A7  3443               	retlw	67	;'C'
  1059  10A8  344F               	retlw	79	;'O'
  1060  10A9  344C               	retlw	76	;'L'
  1061  10AA  3448               	retlw	72	;'H'
  1062  10AB  3441               	retlw	65	;'A'
  1063  10AC  3420               	retlw	32	;' '
  1064  10AD  3441               	retlw	65	;'A'
  1065  10AE  3420               	retlw	32	;' '
  1066  10AF  344D               	retlw	77	;'M'
  1067  10B0  3445               	retlw	69	;'E'
  1068  10B1  344D               	retlw	77	;'M'
  1069  10B2  344F               	retlw	79	;'O'
  1070  10B3  3452               	retlw	82	;'R'
  1071  10B4  3449               	retlw	73	;'I'
  1072  10B5  3441               	retlw	65	;'A'
  1073  10B6  340A               	retlw	10
  1074  10B7  3420               	retlw	32	;' '
  1075  10B8  3451               	retlw	81	;'Q'
  1076  10B9  3455               	retlw	85	;'U'
  1077  10BA  3445               	retlw	69	;'E'
  1078  10BB  3420               	retlw	32	;' '
  1079  10BC  3444               	retlw	68	;'D'
  1080  10BD  3445               	retlw	69	;'E'
  1081  10BE  3453               	retlw	83	;'S'
  1082  10BF  3445               	retlw	69	;'E'
  1083  10C0  344A               	retlw	74	;'J'
  1084  10C1  3441               	retlw	65	;'A'
  1085  10C2  3420               	retlw	32	;' '
  1086  10C3  3453               	retlw	83	;'S'
  1087  10C4  3441               	retlw	65	;'A'
  1088  10C5  344C               	retlw	76	;'L'
  1089  10C6  3456               	retlw	86	;'V'
  1090  10C7  3441               	retlw	65	;'A'
  1091  10C8  3452               	retlw	82	;'R'
  1092  10C9  340A               	retlw	10
  1093  10CA  3420               	retlw	32	;' '
  1094  10CB  3430               	retlw	48	;'0'
  1095  10CC  3420               	retlw	32	;' '
  1096  10CD  3420               	retlw	32	;' '
  1097  10CE  3420               	retlw	32	;' '
  1098  10CF  3431               	retlw	49	;'1'
  1099  10D0  3420               	retlw	32	;' '
  1100  10D1  3420               	retlw	32	;' '
  1101  10D2  3420               	retlw	32	;' '
  1102  10D3  3432               	retlw	50	;'2'
  1103  10D4  3420               	retlw	32	;' '
  1104  10D5  3420               	retlw	32	;' '
  1105  10D6  3420               	retlw	32	;' '
  1106  10D7  3433               	retlw	51	;'3'
  1107  10D8  3420               	retlw	32	;' '
  1108  10D9  3420               	retlw	32	;' '
  1109  10DA  3420               	retlw	32	;' '
  1110  10DB  3434               	retlw	52	;'4'
  1111  10DC  340A               	retlw	10
  1112  10DD  3420               	retlw	32	;' '
  1113  10DE  3435               	retlw	53	;'5'
  1114  10DF  3420               	retlw	32	;' '
  1115  10E0  3420               	retlw	32	;' '
  1116  10E1  3420               	retlw	32	;' '
  1117  10E2  3436               	retlw	54	;'6'
  1118  10E3  3420               	retlw	32	;' '
  1119  10E4  3420               	retlw	32	;' '
  1120  10E5  3420               	retlw	32	;' '
  1121  10E6  3437               	retlw	55	;'7'
  1122  10E7  3420               	retlw	32	;' '
  1123  10E8  3420               	retlw	32	;' '
  1124  10E9  3420               	retlw	32	;' '
  1125  10EA  3438               	retlw	56	;'8'
  1126  10EB  3420               	retlw	32	;' '
  1127  10EC  3420               	retlw	32	;' '
  1128  10ED  3420               	retlw	32	;' '
  1129  10EE  3439               	retlw	57	;'9'
  1130  10EF  3420               	retlw	32	;' '
  1131  10F0  3420               	retlw	32	;' '
  1132  10F1  3400               	retlw	0
  1133  10F2                     STR_16:
  1134  10F2  3420               	retlw	32	;' '
  1135  10F3  3420               	retlw	32	;' '
  1136  10F4  3420               	retlw	32	;' '
  1137  10F5  3420               	retlw	32	;' '
  1138  10F6  3444               	retlw	68	;'D'
  1139  10F7  3445               	retlw	69	;'E'
  1140  10F8  3453               	retlw	83	;'S'
  1141  10F9  3445               	retlw	69	;'E'
  1142  10FA  344A               	retlw	74	;'J'
  1143  10FB  3441               	retlw	65	;'A'
  1144  10FC  3420               	retlw	32	;' '
  1145  10FD  3453               	retlw	83	;'S'
  1146  10FE  3441               	retlw	65	;'A'
  1147  10FF  344C               	retlw	76	;'L'
  1148  1100  3456               	retlw	86	;'V'
  1149  1101  3441               	retlw	65	;'A'
  1150  1102  3452               	retlw	82	;'R'
  1151  1103  340A               	retlw	10
  1152  1104  3420               	retlw	32	;' '
  1153  1105  3420               	retlw	32	;' '
  1154  1106  3420               	retlw	32	;' '
  1155  1107  3420               	retlw	32	;' '
  1156  1108  3420               	retlw	32	;' '
  1157  1109  3453               	retlw	83	;'S'
  1158  110A  3445               	retlw	69	;'E'
  1159  110B  3451               	retlw	81	;'Q'
  1160  110C  3455               	retlw	85	;'U'
  1161  110D  3445               	retlw	69	;'E'
  1162  110E  344E               	retlw	78	;'N'
  1163  110F  3443               	retlw	67	;'C'
  1164  1110  3449               	retlw	73	;'I'
  1165  1111  3441               	retlw	65	;'A'
  1166  1112  3420               	retlw	32	;' '
  1167  1113  343F               	retlw	63	;'?'
  1168  1114  340A               	retlw	10
  1169  1115  340A               	retlw	10
  1170  1116  3423               	retlw	35	;'#'
  1171  1117  3420               	retlw	32	;' '
  1172  1118  342D               	retlw	45	;'-'
  1173  1119  3420               	retlw	32	;' '
  1174  111A  3453               	retlw	83	;'S'
  1175  111B  3449               	retlw	73	;'I'
  1176  111C  344D               	retlw	77	;'M'
  1177  111D  3420               	retlw	32	;' '
  1178  111E  3420               	retlw	32	;' '
  1179  111F  3420               	retlw	32	;' '
  1180  1120  3420               	retlw	32	;' '
  1181  1121  3420               	retlw	32	;' '
  1182  1122  3420               	retlw	32	;' '
  1183  1123  342A               	retlw	42	;'*'
  1184  1124  3420               	retlw	32	;' '
  1185  1125  342D               	retlw	45	;'-'
  1186  1126  3420               	retlw	32	;' '
  1187  1127  344E               	retlw	78	;'N'
  1188  1128  3441               	retlw	65	;'A'
  1189  1129  344F               	retlw	79	;'O'
  1190  112A  3400               	retlw	0
  1191  112B                     STR_14:
  1192  112B  3443               	retlw	67	;'C'
  1193  112C  3469               	retlw	105	;'i'
  1194  112D  3463               	retlw	99	;'c'
  1195  112E  346C               	retlw	108	;'l'
  1196  112F  346F               	retlw	111	;'o'
  1197  1130  3473               	retlw	115	;'s'
  1198  1131  343A               	retlw	58	;':'
  1199  1132  3420               	retlw	32	;' '
  1200  1133  3420               	retlw	32	;' '
  1201  1134  3420               	retlw	32	;' '
  1202  1135  3420               	retlw	32	;' '
  1203  1136  3420               	retlw	32	;' '
  1204  1137  3420               	retlw	32	;' '
  1205  1138  3420               	retlw	32	;' '
  1206  1139  3420               	retlw	32	;' '
  1207  113A  3420               	retlw	32	;' '
  1208  113B  3420               	retlw	32	;' '
  1209  113C  3420               	retlw	32	;' '
  1210  113D  3420               	retlw	32	;' '
  1211  113E  3420               	retlw	32	;' '
  1212  113F  3400               	retlw	0
  1213  1140                     STR_12:
  1214  1140  343C               	retlw	60	;'<'
  1215  1141  3420               	retlw	32	;' '
  1216  1142  3420               	retlw	32	;' '
  1217  1143  342F               	retlw	47	;'/'
  1218  1144  3420               	retlw	32	;' '
  1219  1145  3420               	retlw	32	;' '
  1220  1146  343E               	retlw	62	;'>'
  1221  1147  3420               	retlw	32	;' '
  1222  1148  3463               	retlw	99	;'c'
  1223  1149  343A               	retlw	58	;':'
  1224  114A  3420               	retlw	32	;' '
  1225  114B  3420               	retlw	32	;' '
  1226  114C  3420               	retlw	32	;' '
  1227  114D  3420               	retlw	32	;' '
  1228  114E  3420               	retlw	32	;' '
  1229  114F  3420               	retlw	32	;' '
  1230  1150  3420               	retlw	32	;' '
  1231  1151  3420               	retlw	32	;' '
  1232  1152  3420               	retlw	32	;' '
  1233  1153  3420               	retlw	32	;' '
  1234  1154  3400               	retlw	0
  1235  1155                     STR_21:
  1236  1155  3420               	retlw	32	;' '
  1237  1156  3420               	retlw	32	;' '
  1238  1157  3420               	retlw	32	;' '
  1239  1158  3420               	retlw	32	;' '
  1240  1159  3420               	retlw	32	;' '
  1241  115A  3420               	retlw	32	;' '
  1242  115B  3420               	retlw	32	;' '
  1243  115C  3420               	retlw	32	;' '
  1244  115D  3453               	retlw	83	;'S'
  1245  115E  3441               	retlw	65	;'A'
  1246  115F  344C               	retlw	76	;'L'
  1247  1160  3456               	retlw	86	;'V'
  1248  1161  3441               	retlw	65	;'A'
  1249  1162  3420               	retlw	32	;' '
  1250  1163  3420               	retlw	32	;' '
  1251  1164  3420               	retlw	32	;' '
  1252  1165  3420               	retlw	32	;' '
  1253  1166  3420               	retlw	32	;' '
  1254  1167  3420               	retlw	32	;' '
  1255  1168  3420               	retlw	32	;' '
  1256  1169  3400               	retlw	0
  1257  116A                     STR_3:
  1258  116A  3420               	retlw	32	;' '
  1259  116B  3420               	retlw	32	;' '
  1260  116C  3420               	retlw	32	;' '
  1261  116D  3420               	retlw	32	;' '
  1262  116E  3420               	retlw	32	;' '
  1263  116F  3420               	retlw	32	;' '
  1264  1170  3453               	retlw	83	;'S'
  1265  1171  3445               	retlw	69	;'E'
  1266  1172  3447               	retlw	71	;'G'
  1267  1173  3447               	retlw	71	;'G'
  1268  1174  3454               	retlw	84	;'T'
  1269  1175  3454               	retlw	84	;'T'
  1270  1176  3449               	retlw	73	;'I'
  1271  1177  3420               	retlw	32	;' '
  1272  1178  3420               	retlw	32	;' '
  1273  1179  3420               	retlw	32	;' '
  1274  117A  3420               	retlw	32	;' '
  1275  117B  3420               	retlw	32	;' '
  1276  117C  3420               	retlw	32	;' '
  1277  117D  3420               	retlw	32	;' '
  1278  117E  3400               	retlw	0
  1279  117F                     STR_11:
  1280  117F  3420               	retlw	32	;' '
  1281  1180  3420               	retlw	32	;' '
  1282  1181  3420               	retlw	32	;' '
  1283  1182  3420               	retlw	32	;' '
  1284  1183  3420               	retlw	32	;' '
  1285  1184  3420               	retlw	32	;' '
  1286  1185  3420               	retlw	32	;' '
  1287  1186  345B               	retlw	91	;'['
  1288  1187  3420               	retlw	32	;' '
  1289  1188  3420               	retlw	32	;' '
  1290  1189  3420               	retlw	32	;' '
  1291  118A  3420               	retlw	32	;' '
  1292  118B  345D               	retlw	93	;']'
  1293  118C  3420               	retlw	32	;' '
  1294  118D  3420               	retlw	32	;' '
  1295  118E  3420               	retlw	32	;' '
  1296  118F  3420               	retlw	32	;' '
  1297  1190  3420               	retlw	32	;' '
  1298  1191  3420               	retlw	32	;' '
  1299  1192  3420               	retlw	32	;' '
  1300  1193  3400               	retlw	0
  1301  1194                     STR_20:
  1302  1194  3420               	retlw	32	;' '
  1303  1195  3420               	retlw	32	;' '
  1304  1196  3420               	retlw	32	;' '
  1305  1197  3420               	retlw	32	;' '
  1306  1198  3420               	retlw	32	;' '
  1307  1199  3420               	retlw	32	;' '
  1308  119A  3453               	retlw	83	;'S'
  1309  119B  3445               	retlw	69	;'E'
  1310  119C  3451               	retlw	81	;'Q'
  1311  119D  3455               	retlw	85	;'U'
  1312  119E  3445               	retlw	69	;'E'
  1313  119F  344E               	retlw	78	;'N'
  1314  11A0  3443               	retlw	67	;'C'
  1315  11A1  3449               	retlw	73	;'I'
  1316  11A2  3441               	retlw	65	;'A'
  1317  11A3  3420               	retlw	32	;' '
  1318  11A4  3420               	retlw	32	;' '
  1319  11A5  3420               	retlw	32	;' '
  1320  11A6  3420               	retlw	32	;' '
  1321  11A7  3420               	retlw	32	;' '
  1322  11A8  3400               	retlw	0
  1323  11A9                     STR_7:
  1324  11A9  3420               	retlw	32	;' '
  1325  11AA  3420               	retlw	32	;' '
  1326  11AB  3420               	retlw	32	;' '
  1327  11AC  3420               	retlw	32	;' '
  1328  11AD  3420               	retlw	32	;' '
  1329  11AE  3444               	retlw	68	;'D'
  1330  11AF  344F               	retlw	79	;'O'
  1331  11B0  3420               	retlw	32	;' '
  1332  11B1  3453               	retlw	83	;'S'
  1333  11B2  3449               	retlw	73	;'I'
  1334  11B3  3453               	retlw	83	;'S'
  1335  11B4  3454               	retlw	84	;'T'
  1336  11B5  3445               	retlw	69	;'E'
  1337  11B6  344D               	retlw	77	;'M'
  1338  11B7  3441               	retlw	65	;'A'
  1339  11B8  3420               	retlw	32	;' '
  1340  11B9  3420               	retlw	32	;' '
  1341  11BA  3420               	retlw	32	;' '
  1342  11BB  3420               	retlw	32	;' '
  1343  11BC  3420               	retlw	32	;' '
  1344  11BD  3400               	retlw	0
  1345  11BE                     STR_8:
  1346  11BE  3420               	retlw	32	;' '
  1347  11BF  3420               	retlw	32	;' '
  1348  11C0  3420               	retlw	32	;' '
  1349  11C1  3441               	retlw	65	;'A'
  1350  11C2  3420               	retlw	32	;' '
  1351  11C3  3420               	retlw	32	;' '
  1352  11C4  3420               	retlw	32	;' '
  1353  11C5  3442               	retlw	66	;'B'
  1354  11C6  3420               	retlw	32	;' '
  1355  11C7  3420               	retlw	32	;' '
  1356  11C8  3420               	retlw	32	;' '
  1357  11C9  3443               	retlw	67	;'C'
  1358  11CA  3420               	retlw	32	;' '
  1359  11CB  3420               	retlw	32	;' '
  1360  11CC  3420               	retlw	32	;' '
  1361  11CD  3444               	retlw	68	;'D'
  1362  11CE  3420               	retlw	32	;' '
  1363  11CF  3420               	retlw	32	;' '
  1364  11D0  3420               	retlw	32	;' '
  1365  11D1  3420               	retlw	32	;' '
  1366  11D2  3400               	retlw	0
  1367  11D3                     STR_6:
  1368  11D3  3420               	retlw	32	;' '
  1369  11D4  3420               	retlw	32	;' '
  1370  11D5  3420               	retlw	32	;' '
  1371  11D6  3441               	retlw	65	;'A'
  1372  11D7  344A               	retlw	74	;'J'
  1373  11D8  3455               	retlw	85	;'U'
  1374  11D9  3453               	retlw	83	;'S'
  1375  11DA  3454               	retlw	84	;'T'
  1376  11DB  3445               	retlw	69	;'E'
  1377  11DC  3420               	retlw	32	;' '
  1378  11DD  344F               	retlw	79	;'O'
  1379  11DE  3420               	retlw	32	;' '
  1380  11DF  3449               	retlw	73	;'I'
  1381  11E0  344E               	retlw	78	;'N'
  1382  11E1  3449               	retlw	73	;'I'
  1383  11E2  3443               	retlw	67	;'C'
  1384  11E3  3449               	retlw	73	;'I'
  1385  11E4  344F               	retlw	79	;'O'
  1386  11E5  3420               	retlw	32	;' '
  1387  11E6  3420               	retlw	32	;' '
  1388  11E7  3400               	retlw	0
  1389  11E8                     STR_9:
  1390  11E8  3420               	retlw	32	;' '
  1391  11E9  3420               	retlw	32	;' '
  1392  11EA  3449               	retlw	73	;'I'
  1393  11EB  344E               	retlw	78	;'N'
  1394  11EC  3453               	retlw	83	;'S'
  1395  11ED  3449               	retlw	73	;'I'
  1396  11EE  3452               	retlw	82	;'R'
  1397  11EF  3441               	retlw	65	;'A'
  1398  11F0  3420               	retlw	32	;' '
  1399  11F1  344F               	retlw	79	;'O'
  1400  11F2  3453               	retlw	83	;'S'
  1401  11F3  3420               	retlw	32	;' '
  1402  11F4  3450               	retlw	80	;'P'
  1403  11F5  3441               	retlw	65	;'A'
  1404  11F6  3453               	retlw	83	;'S'
  1405  11F7  3453               	retlw	83	;'S'
  1406  11F8  344F               	retlw	79	;'O'
  1407  11F9  3453               	retlw	83	;'S'
  1408  11FA  3420               	retlw	32	;' '
  1409  11FB  3420               	retlw	32	;' '
  1410  11FC  3400               	retlw	0
  1411  11FD                     STR_15:
  1412  11FD  3430               	retlw	48	;'0'
  1413  11FE  3420               	retlw	32	;' '
  1414  11FF  342D               	retlw	45	;'-'
  1415  1200  3420               	retlw	32	;' '
  1416  1201  3443               	retlw	67	;'C'
  1417  1202  3469               	retlw	105	;'i'
  1418  1203  3463               	retlw	99	;'c'
  1419  1204  346C               	retlw	108	;'l'
  1420  1205  346F               	retlw	111	;'o'
  1421  1206  3420               	retlw	32	;' '
  1422  1207  3463               	retlw	99	;'c'
  1423  1208  346F               	retlw	111	;'o'
  1424  1209  346E               	retlw	110	;'n'
  1425  120A  3474               	retlw	116	;'t'
  1426  120B  3469               	retlw	105	;'i'
  1427  120C  346E               	retlw	110	;'n'
  1428  120D  3475               	retlw	117	;'u'
  1429  120E  346F               	retlw	111	;'o'
  1430  120F  3420               	retlw	32	;' '
  1431  1210  3420               	retlw	32	;' '
  1432  1211  3400               	retlw	0
  1433  1212                     STR_22:
  1434  1212  3463               	retlw	99	;'c'
  1435  1213  346F               	retlw	111	;'o'
  1436  1214  346E               	retlw	110	;'n'
  1437  1215  3466               	retlw	102	;'f'
  1438  1216  3469               	retlw	105	;'i'
  1439  1217  3467               	retlw	103	;'g'
  1440  1218  3420               	retlw	32	;' '
  1441  1219  3463               	retlw	99	;'c'
  1442  121A  346F               	retlw	111	;'o'
  1443  121B  346E               	retlw	110	;'n'
  1444  121C  3474               	retlw	116	;'t'
  1445  121D  3472               	retlw	114	;'r'
  1446  121E  346C               	retlw	108	;'l'
  1447  121F  343A               	retlw	58	;':'
  1448  1220  3420               	retlw	32	;' '
  1449  1221  3420               	retlw	32	;' '
  1450  1222  3420               	retlw	32	;' '
  1451  1223  3420               	retlw	32	;' '
  1452  1224  3420               	retlw	32	;' '
  1453  1225  3425               	retlw	37	;'%'
  1454  1226  3400               	retlw	0
  1455  1227                     STR_13:
  1456  1227  3463               	retlw	99	;'c'
  1457  1228  346F               	retlw	111	;'o'
  1458  1229  346E               	retlw	110	;'n'
  1459  122A  3466               	retlw	102	;'f'
  1460  122B  3469               	retlw	105	;'i'
  1461  122C  3467               	retlw	103	;'g'
  1462  122D  3420               	retlw	32	;' '
  1463  122E  3474               	retlw	116	;'t'
  1464  122F  3465               	retlw	101	;'e'
  1465  1230  346D               	retlw	109	;'m'
  1466  1231  3470               	retlw	112	;'p'
  1467  1232  346F               	retlw	111	;'o'
  1468  1233  343A               	retlw	58	;':'
  1469  1234  3420               	retlw	32	;' '
  1470  1235  3420               	retlw	32	;' '
  1471  1236  3420               	retlw	32	;' '
  1472  1237  3420               	retlw	32	;' '
  1473  1238  3420               	retlw	32	;' '
  1474  1239  3420               	retlw	32	;' '
  1475  123A  3473               	retlw	115	;'s'
  1476  123B  3400               	retlw	0
  1477  123C                     STR_10:
  1478  123C  343C               	retlw	60	;'<'
  1479  123D  3420               	retlw	32	;' '
  1480  123E  3420               	retlw	32	;' '
  1481  123F  342F               	retlw	47	;'/'
  1482  1240  3420               	retlw	32	;' '
  1483  1241  3420               	retlw	32	;' '
  1484  1242  343E               	retlw	62	;'>'
  1485  1243  3400               	retlw	0
  1486  1244                     STR_1:
  1487  1244  34FF               	retlw	-1
  1488  1245  3400               	retlw	0
  1489  1244                     
  1490                           	psect	cinit
  1491  000F                     start_initialization:	
  1492                           ; #config settings
  1493                           
  1494  000F                     __initialization:
  1495                           
  1496                           ; Initialize objects allocated to BANK3
  1497  000F  1783               	bsf	3,7	;select IRP bank2
  1498  0010  30EC               	movlw	low (__pdataBANK3+10)
  1499  0011  00FD               	movwf	btemp+-1
  1500  0012  301B               	movlw	high __pidataBANK3
  1501  0013  00FE               	movwf	btemp
  1502  0014  304F               	movlw	low __pidataBANK3
  1503  0015  00FF               	movwf	btemp+1
  1504  0016  30E2               	movlw	low __pdataBANK3
  1505  0017  0084               	movwf	4
  1506  0018  160A  158A  23A6  120A  118A  	fcall	init_ram0
  1507                           
  1508                           ; Initialize objects allocated to BANK1
  1509  001D  1383               	bcf	3,7	;select IRP bank0
  1510  001E  30C4               	movlw	low (__pdataBANK1+36)
  1511  001F  00FD               	movwf	btemp+-1
  1512  0020  301C               	movlw	high __pidataBANK1
  1513  0021  00FE               	movwf	btemp
  1514  0022  30F5               	movlw	low __pidataBANK1
  1515  0023  00FF               	movwf	btemp+1
  1516  0024  30A0               	movlw	low __pdataBANK1
  1517  0025  0084               	movwf	4
  1518  0026  160A  158A  23A6  120A  118A  	fcall	init_ram0
  1519                           
  1520                           ; Initialize objects allocated to BANK0
  1521  002B  160A  158A  230F  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1522  0030  00E6               	movwf	__pdataBANK0& (0+127)
  1523  0031  160A  158A  2310  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
  1524  0036  00E7               	movwf	(__pdataBANK0+1)& (0+127)
  1525                           
  1526                           ; Initialize objects allocated to COMMON
  1527  0037  120A  118A  2003  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1528  003C  00FB               	movwf	__pdataCOMMON& (0+127)
  1529                           
  1530                           ; Clear objects allocated to BANK3
  1531  003D  1683               	bsf	3,5	;RP0=1, select bank3
  1532  003E  1703               	bsf	3,6	;RP1=1, select bank3
  1533  003F  01EC               	clrf	__pbssBANK3& (0+127)
  1534  0040  01ED               	clrf	(__pbssBANK3+1)& (0+127)
  1535                           
  1536                           ; Clear objects allocated to BANK0
  1537  0041  3048               	movlw	low __pbssBANK0
  1538  0042  0084               	movwf	4
  1539  0043  3066               	movlw	low (__pbssBANK0+30)
  1540  0044  160A  118A  2246  120A  118A  	fcall	clear_ram0
  1541                           
  1542                           ; Clear objects allocated to COMMON
  1543  0049  01F6               	clrf	__pbssCOMMON& (0+127)
  1544  004A  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1545  004B  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1546  004C  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1547  004D  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  1548  004E                     end_of_initialization:	
  1549                           ;End of C runtime variable initialization code
  1550                           
  1551  004E                     __end_of__initialization:
  1552  004E  0183               	clrf	3
  1553  004F  120A  118A  2D8B   	ljmp	_main	;jump to C main() function
  1554                           
  1555                           	psect	bssCOMMON
  1556  0076                     __pbssCOMMON:
  1557  0076                     _cont_ciclos:
  1558  0076                     	ds	2
  1559  0078                     _ciclos:
  1560  0078                     	ds	2
  1561  007A                     _atuador:
  1562  007A                     	ds	1
  1563                           
  1564                           	psect	dataCOMMON
  1565  007B                     __pdataCOMMON:
  1566  007B                     _indice_passos:
  1567  007B                     	ds	1
  1568                           
  1569                           	psect	bssBANK0
  1570  0048                     __pbssBANK0:
  1571  0048                     _t1cont:
  1572  0048                     	ds	4
  1573  004C                     salva_atuadores_init@F103:
  1574  004C                     	ds	4
  1575  0050                     _teclaAnterior:
  1576  0050                     	ds	1
  1577  0051                     _lenSerialIO:
  1578  0051                     	ds	1
  1579  0052                     _ptrSerialOut:
  1580  0052                     	ds	1
  1581  0053                     _ptrSerialIn:
  1582  0053                     	ds	1
  1583  0054                     _fila:
  1584  0054                     	ds	18
  1585                           
  1586                           	psect	dataBANK0
  1587  0066                     __pdataBANK0:
  1588  0066                     _ind_print:
  1589  0066                     	ds	1
  1590  0067                     _ind_fila:
  1591  0067                     	ds	1
  1592                           
  1593                           	psect	dataBANK1
  1594  00A0                     __pdataBANK1:
  1595  00A0                     main@F1486:
  1596  00A0                     	ds	20
  1597  00B4                     _teclas:
  1598  00B4                     	ds	16
  1599                           
  1600                           	psect	bssBANK3
  1601  01EC                     __pbssBANK3:
  1602  01EC                     main@F1462:
  1603  01EC                     	ds	1
  1604  01ED                     main@F1460:
  1605  01ED                     	ds	1
  1606                           
  1607                           	psect	dataBANK3
  1608  01E2                     __pdataBANK3:
  1609  01E2                     _IHM:
  1610  01E2                     	ds	5
  1611  01E7                     _EEPROM:
  1612  01E7                     	ds	5
  1613                           
  1614                           	psect	inittext
  1615  1BA2                     init_fetch0:	
  1616                           ;	Called with low address in FSR and high address in W
  1617                           
  1618  1BA2  087E               	movf	btemp,w
  1619  1BA3  008A               	movwf	10
  1620  1BA4  087F               	movf	btemp+1,w
  1621  1BA5  0082               	movwf	2
  1622  1BA6                     init_ram0:	
  1623                           ;Called with:
  1624                           ;	high address of idata address in btemp 
  1625                           ;	low address of idata address in btemp+1 
  1626                           ;	low address of data in FSR
  1627                           ;	high address + 1 of data in btemp-1
  1628                           
  1629  1BA6  160A  158A  23A2  160A  158A  	fcall	init_fetch0
  1630  1BAB  0080               	movwf	0
  1631  1BAC  0A84               	incf	4,f
  1632  1BAD  0804               	movf	4,w
  1633  1BAE  067D               	xorwf	btemp+-1,w
  1634  1BAF  1903               	btfsc	3,2
  1635  1BB0  3400               	retlw	0
  1636  1BB1  0AFF               	incf	btemp+1,f
  1637  1BB2  1903               	btfsc	3,2
  1638  1BB3  0AFE               	incf	btemp,f
  1639  1BB4  2BA6               	goto	init_ram0
  1640                           
  1641                           	psect	clrtext
  1642  1246                     clear_ram0:	
  1643                           ;	Called with FSR containing the base address, and
  1644                           ;	W with the last address+1
  1645                           
  1646  1246  0064               	clrwdt	;clear the watchdog before getting into this loop
  1647  1247                     clrloop0:
  1648  1247  0180               	clrf	0	;clear RAM location pointed to by FSR
  1649  1248  0A84               	incf	4,f	;increment pointer
  1650  1249  0604               	xorwf	4,w	;XOR with final address
  1651  124A  1903               	btfsc	3,2	;have we reached the end yet?
  1652  124B  3400               	retlw	0	;all done for this memory range, return
  1653  124C  0604               	xorwf	4,w	;XOR again to restore value
  1654  124D  2A47               	goto	clrloop0	;do the next byte
  1655                           
  1656                           	psect	cstackBANK3
  1657  0190                     __pcstackBANK3:
  1658  0190                     main@lema:
  1659                           
  1660                           ; 20 bytes @ 0x0
  1661  0190                     	ds	20
  1662  01A4                     main@vetor_aux:
  1663                           
  1664                           ; 16 bytes @ 0x14
  1665  01A4                     	ds	16
  1666  01B4                     main@contPassos:
  1667                           
  1668                           ; 1 bytes @ 0x24
  1669  01B4                     	ds	1
  1670  01B5                     main@aux:
  1671                           
  1672                           ; 1 bytes @ 0x25
  1673  01B5                     	ds	1
  1674  01B6                     main@pt:
  1675                           
  1676                           ; 1 bytes @ 0x26
  1677  01B6                     	ds	1
  1678  01B7                     _main$870:
  1679                           
  1680                           ; 2 bytes @ 0x27
  1681  01B7                     	ds	2
  1682  01B9                     _main$876:
  1683                           
  1684                           ; 2 bytes @ 0x29
  1685  01B9                     	ds	2
  1686  01BB                     _main$877:
  1687                           
  1688                           ; 2 bytes @ 0x2B
  1689  01BB                     	ds	2
  1690  01BD                     _main$878:
  1691                           
  1692                           ; 2 bytes @ 0x2D
  1693  01BD                     	ds	2
  1694  01BF                     _main$879:
  1695                           
  1696                           ; 2 bytes @ 0x2F
  1697  01BF                     	ds	2
  1698  01C1                     _main$880:
  1699                           
  1700                           ; 2 bytes @ 0x31
  1701  01C1                     	ds	2
  1702  01C3                     _main$881:
  1703                           
  1704                           ; 2 bytes @ 0x33
  1705  01C3                     	ds	2
  1706  01C5                     _main$882:
  1707                           
  1708                           ; 2 bytes @ 0x35
  1709  01C5                     	ds	2
  1710  01C7                     _main$883:
  1711                           
  1712                           ; 2 bytes @ 0x37
  1713  01C7                     	ds	2
  1714  01C9                     _main$887:
  1715                           
  1716                           ; 2 bytes @ 0x39
  1717  01C9                     	ds	2
  1718  01CB                     main@i_856:
  1719                           
  1720                           ; 1 bytes @ 0x3B
  1721  01CB                     	ds	1
  1722  01CC                     main@ptr:
  1723                           
  1724                           ; 1 bytes @ 0x3C
  1725  01CC                     	ds	1
  1726  01CD                     main@i:
  1727                           
  1728                           ; 1 bytes @ 0x3D
  1729  01CD                     	ds	1
  1730  01CE                     main@j:
  1731                           
  1732                           ; 1 bytes @ 0x3E
  1733  01CE                     	ds	1
  1734  01CF                     main@i_850:
  1735                           
  1736                           ; 1 bytes @ 0x3F
  1737  01CF                     	ds	1
  1738  01D0                     main@j_851:
  1739                           
  1740                           ; 1 bytes @ 0x40
  1741  01D0                     	ds	1
  1742  01D1                     main@i_906:
  1743                           
  1744                           ; 1 bytes @ 0x41
  1745  01D1                     	ds	1
  1746  01D2                     main@j_907:
  1747                           
  1748                           ; 1 bytes @ 0x42
  1749  01D2                     	ds	1
  1750  01D3                     main@i_909:
  1751                           
  1752                           ; 1 bytes @ 0x43
  1753  01D3                     	ds	1
  1754  01D4                     main@j_910:
  1755                           
  1756                           ; 1 bytes @ 0x44
  1757  01D4                     	ds	1
  1758  01D5                     main@init_cond:
  1759                           
  1760                           ; 1 bytes @ 0x45
  1761  01D5                     	ds	1
  1762  01D6                     main@auxPasso:
  1763                           
  1764                           ; 1 bytes @ 0x46
  1765  01D6                     	ds	1
  1766  01D7                     main@vetorIn:
  1767                           
  1768                           ; 1 bytes @ 0x47
  1769  01D7                     	ds	1
  1770  01D8                     main@meAtuadores:
  1771                           
  1772                           ; 1 bytes @ 0x48
  1773  01D8                     	ds	1
  1774  01D9                     main@ciclos:
  1775                           
  1776                           ; 2 bytes @ 0x49
  1777  01D9                     	ds	2
  1778  01DB                     main@vetorOut:
  1779                           
  1780                           ; 1 bytes @ 0x4B
  1781  01DB                     	ds	1
  1782  01DC                     main@botao:
  1783                           
  1784                           ; 1 bytes @ 0x4C
  1785  01DC                     	ds	1
  1786  01DD                     main@ptr_867:
  1787                           
  1788                           ; 1 bytes @ 0x4D
  1789  01DD                     	ds	1
  1790  01DE                     main@num:
  1791                           
  1792                           ; 2 bytes @ 0x4E
  1793  01DE                     	ds	2
  1794  01E0                     main@estado:
  1795                           
  1796                           ; 1 bytes @ 0x50
  1797  01E0                     	ds	1
  1798  01E1                     main@tecla:
  1799                           
  1800                           ; 1 bytes @ 0x51
  1801  01E1                     	ds	1
  1802                           
  1803                           	psect	cstackCOMMON
  1804  0070                     __pcstackCOMMON:
  1805  0070                     ?_fifo_alinharPrint:
  1806  0070                     ?_fifo_adrs:	
  1807                           ; 1 bytes @ 0x0
  1808                           
  1809  0070                     ?_dispLCD_instReg:	
  1810                           ; 1 bytes @ 0x0
  1811                           
  1812  0070                     ?_dispLCD_dataReg:	
  1813                           ; 1 bytes @ 0x0
  1814                           
  1815  0070                     ?_dispLCD_init:	
  1816                           ; 1 bytes @ 0x0
  1817                           
  1818  0070                     ?_dispLCD_clr:	
  1819                           ; 1 bytes @ 0x0
  1820                           
  1821  0070                     ?_EEPROM_read:	
  1822                           ; 1 bytes @ 0x0
  1823                           
  1824  0070                     ?_addIndicePassos:	
  1825                           ; 1 bytes @ 0x0
  1826                           
  1827  0070                     ?_getIndicePassos:	
  1828                           ; 1 bytes @ 0x0
  1829                           
  1830  0070                     ?_resetIndicePassos:	
  1831                           ; 1 bytes @ 0x0
  1832                           
  1833  0070                     ?_resetContCiclos:	
  1834                           ; 1 bytes @ 0x0
  1835                           
  1836  0070                     ?_addContCiclos:	
  1837                           ; 1 bytes @ 0x0
  1838                           
  1839  0070                     ?_ler_atuador:	
  1840                           ; 1 bytes @ 0x0
  1841                           
  1842  0070                     ?_alt_atuador:	
  1843                           ; 1 bytes @ 0x0
  1844                           
  1845  0070                     ?_init_atuadores:	
  1846                           ; 1 bytes @ 0x0
  1847                           
  1848  0070                     ?_salva_atuadores_init:	
  1849                           ; 1 bytes @ 0x0
  1850                           
  1851  0070                     ?_manipula_atuadores_init:	
  1852                           ; 1 bytes @ 0x0
  1853                           
  1854  0070                     ?_fifo_lerPos:	
  1855                           ; 1 bytes @ 0x0
  1856                           
  1857  0070                     ?_fifo_delete:	
  1858                           ; 1 bytes @ 0x0
  1859                           
  1860  0070                     ?_fifo_add:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863  0070                     ?_fifo_add_tempo:	
  1864                           ; 1 bytes @ 0x0
  1865                           
  1866  0070                     ?_fifo_add_control:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  0070                     ?_fifo_indice:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  0070                     ?_fifo_disponivel:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  0070                     ?_fifo_tam:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  0070                     ?_fifo_indicePrint_inc:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0070                     ?_fifo_indicePrint_dec:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  0070                     ?_fifo_print:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  0070                     ?_dignum_apagar:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  0070                     ?_posAtual:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0070                     ?_serialIOload:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0070                     ?_serialIObyteShift:	
  1897                           ; 1 bytes @ 0x0
  1898                           
  1899  0070                     ?_serialIOscan:	
  1900                           ; 1 bytes @ 0x0
  1901                           
  1902  0070                     ?_teclado_init:	
  1903                           ; 1 bytes @ 0x0
  1904                           
  1905  0070                     ?_teclado_scan:	
  1906                           ; 1 bytes @ 0x0
  1907                           
  1908  0070                     ?_teclado_borda:	
  1909                           ; 1 bytes @ 0x0
  1910                           
  1911  0070                     ?_intt1_1ms:	
  1912                           ; 1 bytes @ 0x0
  1913                           
  1914  0070                     ??_intt1_1ms:	
  1915                           ; 1 bytes @ 0x0
  1916                           
  1917  0070                     ?_timer1_init:	
  1918                           ; 1 bytes @ 0x0
  1919                           
  1920  0070                     ?_irq:	
  1921                           ; 1 bytes @ 0x0
  1922                           
  1923  0070                     ?_main:	
  1924                           ; 1 bytes @ 0x0
  1925                           
  1926                           
  1927                           ; 1 bytes @ 0x0
  1928  0070                     	ds	4
  1929  0074                     ??_irq:
  1930                           
  1931                           ; 1 bytes @ 0x4
  1932  0074                     	ds	2
  1933                           
  1934                           	psect	cstackBANK0
  1935  0020                     __pcstackBANK0:
  1936  0020                     ??_fifo_adrs:
  1937  0020                     ?_set_passo:	
  1938                           ; 1 bytes @ 0x0
  1939                           
  1940  0020                     ?_ler_sensor:	
  1941                           ; 1 bytes @ 0x0
  1942                           
  1943  0020                     ?_delay:	
  1944                           ; 1 bytes @ 0x0
  1945                           
  1946  0020                     ??_dispLCD_instReg:	
  1947                           ; 1 bytes @ 0x0
  1948                           
  1949  0020                     ??_dispLCD_dataReg:	
  1950                           ; 1 bytes @ 0x0
  1951                           
  1952  0020                     ??_EEPROM_read:	
  1953                           ; 1 bytes @ 0x0
  1954                           
  1955  0020                     ?_EEPROM_write:	
  1956                           ; 1 bytes @ 0x0
  1957                           
  1958  0020                     ??_addIndicePassos:	
  1959                           ; 1 bytes @ 0x0
  1960                           
  1961  0020                     ??_getIndicePassos:	
  1962                           ; 1 bytes @ 0x0
  1963                           
  1964  0020                     ??_resetIndicePassos:	
  1965                           ; 1 bytes @ 0x0
  1966                           
  1967  0020                     ??_resetContCiclos:	
  1968                           ; 1 bytes @ 0x0
  1969                           
  1970  0020                     ??_addContCiclos:	
  1971                           ; 1 bytes @ 0x0
  1972                           
  1973  0020                     ??_ler_atuador:	
  1974                           ; 1 bytes @ 0x0
  1975                           
  1976  0020                     ??_alt_atuador:	
  1977                           ; 1 bytes @ 0x0
  1978                           
  1979  0020                     ??_init_atuadores:	
  1980                           ; 1 bytes @ 0x0
  1981                           
  1982  0020                     ??_fifo_lerPos:	
  1983                           ; 1 bytes @ 0x0
  1984                           
  1985  0020                     ?_fifo_add_ciclo:	
  1986                           ; 1 bytes @ 0x0
  1987                           
  1988  0020                     ??_fifo_indice:	
  1989                           ; 1 bytes @ 0x0
  1990                           
  1991  0020                     ??_fifo_disponivel:	
  1992                           ; 1 bytes @ 0x0
  1993                           
  1994  0020                     ??_fifo_tam:	
  1995                           ; 1 bytes @ 0x0
  1996                           
  1997  0020                     ??_fifo_indicePrint_inc:	
  1998                           ; 1 bytes @ 0x0
  1999                           
  2000  0020                     ??_fifo_indicePrint_dec:	
  2001                           ; 1 bytes @ 0x0
  2002                           
  2003  0020                     ??_serialIOload:	
  2004                           ; 1 bytes @ 0x0
  2005                           
  2006  0020                     ??_serialIObyteShift:	
  2007                           ; 1 bytes @ 0x0
  2008                           
  2009  0020                     ?_initSerialIO:	
  2010                           ; 1 bytes @ 0x0
  2011                           
  2012  0020                     ??_teclado_init:	
  2013                           ; 1 bytes @ 0x0
  2014                           
  2015  0020                     ??_teclado_scan:	
  2016                           ; 1 bytes @ 0x0
  2017                           
  2018  0020                     ??_timer1_init:	
  2019                           ; 1 bytes @ 0x0
  2020                           
  2021  0020                     ?_end_receita:	
  2022                           ; 1 bytes @ 0x0
  2023                           
  2024  0020                     ?_getCiclos:	
  2025                           ; 2 bytes @ 0x0
  2026                           
  2027  0020                     ?_getContCiclos:	
  2028                           ; 2 bytes @ 0x0
  2029                           
  2030  0020                     ?___wmul:	
  2031                           ; 2 bytes @ 0x0
  2032                           
  2033  0020                     ?___awdiv:	
  2034                           ; 2 bytes @ 0x0
  2035                           
  2036  0020                     ?___awmod:	
  2037                           ; 2 bytes @ 0x0
  2038                           
  2039  0020                     ?___lwdiv:	
  2040                           ; 2 bytes @ 0x0
  2041                           
  2042  0020                     ?_statusT1:	
  2043                           ; 2 bytes @ 0x0
  2044                           
  2045  0020                     ?___lmul:	
  2046                           ; 4 bytes @ 0x0
  2047                           
  2048  0020                     set_passo@ptr:	
  2049                           ; 4 bytes @ 0x0
  2050                           
  2051  0020                     ler_sensor@ptr:	
  2052                           ; 1 bytes @ 0x0
  2053                           
  2054  0020                     EEPROM_read@addr:	
  2055                           ; 1 bytes @ 0x0
  2056                           
  2057  0020                     EEPROM_write@data:	
  2058                           ; 1 bytes @ 0x0
  2059                           
  2060  0020                     fifo_lerPos@i:	
  2061                           ; 1 bytes @ 0x0
  2062                           
  2063  0020                     initSerialIO@ptrOut:	
  2064                           ; 1 bytes @ 0x0
  2065                           
  2066  0020                     delay@t:	
  2067                           ; 1 bytes @ 0x0
  2068                           
  2069  0020                     end_receita@x:	
  2070                           ; 2 bytes @ 0x0
  2071                           
  2072  0020                     fifo_add_ciclo@ciclos:	
  2073                           ; 2 bytes @ 0x0
  2074                           
  2075  0020                     ___wmul@multiplier:	
  2076                           ; 2 bytes @ 0x0
  2077                           
  2078  0020                     ___awdiv@divisor:	
  2079                           ; 2 bytes @ 0x0
  2080                           
  2081  0020                     ___awmod@divisor:	
  2082                           ; 2 bytes @ 0x0
  2083                           
  2084  0020                     ___lwdiv@divisor:	
  2085                           ; 2 bytes @ 0x0
  2086                           
  2087  0020                     ___lmul@multiplier:	
  2088                           ; 2 bytes @ 0x0
  2089                           
  2090                           
  2091                           ; 4 bytes @ 0x0
  2092  0020                     	ds	1
  2093  0021                     ??_set_passo:
  2094  0021                     ??_ler_sensor:	
  2095                           ; 1 bytes @ 0x1
  2096                           
  2097  0021                     ??_EEPROM_write:	
  2098                           ; 1 bytes @ 0x1
  2099                           
  2100  0021                     ??_posAtual:	
  2101                           ; 1 bytes @ 0x1
  2102                           
  2103  0021                     dispLCD_dataReg@d:	
  2104                           ; 1 bytes @ 0x1
  2105                           
  2106  0021                     EEPROM_write@addr:	
  2107                           ; 1 bytes @ 0x1
  2108                           
  2109  0021                     serialIObyteShift@dataIn:	
  2110                           ; 1 bytes @ 0x1
  2111                           
  2112  0021                     initSerialIO@length:	
  2113                           ; 1 bytes @ 0x1
  2114                           
  2115                           
  2116                           ; 1 bytes @ 0x1
  2117  0021                     	ds	1
  2118  0022                     ??_delay:
  2119  0022                     ??_end_receita:	
  2120                           ; 1 bytes @ 0x2
  2121                           
  2122  0022                     ??_getCiclos:	
  2123                           ; 1 bytes @ 0x2
  2124                           
  2125  0022                     ??_getContCiclos:	
  2126                           ; 1 bytes @ 0x2
  2127                           
  2128  0022                     ??_fifo_add_ciclo:	
  2129                           ; 1 bytes @ 0x2
  2130                           
  2131  0022                     ??_initSerialIO:	
  2132                           ; 1 bytes @ 0x2
  2133                           
  2134  0022                     dispLCD_instReg@i:	
  2135                           ; 1 bytes @ 0x2
  2136                           
  2137  0022                     ler_atuador@tecla:	
  2138                           ; 1 bytes @ 0x2
  2139                           
  2140  0022                     alt_atuador@tecla:	
  2141                           ; 1 bytes @ 0x2
  2142                           
  2143  0022                     posAtual@ind:	
  2144                           ; 1 bytes @ 0x2
  2145                           
  2146  0022                     serialIObyteShift@dataOut:	
  2147                           ; 1 bytes @ 0x2
  2148                           
  2149  0022                     ___wmul@multiplicand:	
  2150                           ; 1 bytes @ 0x2
  2151                           
  2152  0022                     ___awdiv@dividend:	
  2153                           ; 2 bytes @ 0x2
  2154                           
  2155  0022                     ___awmod@dividend:	
  2156                           ; 2 bytes @ 0x2
  2157                           
  2158  0022                     ___lwdiv@dividend:	
  2159                           ; 2 bytes @ 0x2
  2160                           
  2161                           
  2162                           ; 2 bytes @ 0x2
  2163  0022                     	ds	1
  2164  0023                     ?_dispLCD_lincol:
  2165  0023                     ??_dispLCD_clr:	
  2166                           ; 1 bytes @ 0x3
  2167                           
  2168  0023                     ??_salva_atuadores_init:	
  2169                           ; 1 bytes @ 0x3
  2170                           
  2171  0023                     ??_manipula_atuadores_init:	
  2172                           ; 1 bytes @ 0x3
  2173                           
  2174  0023                     set_passo@passo:	
  2175                           ; 1 bytes @ 0x3
  2176                           
  2177  0023                     ler_sensor@passo:	
  2178                           ; 1 bytes @ 0x3
  2179                           
  2180  0023                     dispLCD_lincol@col:	
  2181                           ; 1 bytes @ 0x3
  2182                           
  2183  0023                     posAtual@passo:	
  2184                           ; 1 bytes @ 0x3
  2185                           
  2186  0023                     serialIObyteShift@dataBit:	
  2187                           ; 1 bytes @ 0x3
  2188                           
  2189  0023                     initSerialIO@ptrIn:	
  2190                           ; 1 bytes @ 0x3
  2191                           
  2192                           
  2193                           ; 1 bytes @ 0x3
  2194  0023                     	ds	1
  2195  0024                     ??_dispLCD_lincol:
  2196  0024                     ??_dispLCD_init:	
  2197                           ; 1 bytes @ 0x4
  2198                           
  2199  0024                     ??_serialIOscan:	
  2200                           ; 1 bytes @ 0x4
  2201                           
  2202  0024                     ??_statusT1:	
  2203                           ; 1 bytes @ 0x4
  2204                           
  2205  0024                     ??___wmul:	
  2206                           ; 1 bytes @ 0x4
  2207                           
  2208  0024                     ??___awdiv:	
  2209                           ; 1 bytes @ 0x4
  2210                           
  2211  0024                     ??___awmod:	
  2212                           ; 1 bytes @ 0x4
  2213                           
  2214  0024                     ??___lwdiv:	
  2215                           ; 1 bytes @ 0x4
  2216                           
  2217  0024                     manipula_atuadores_init@atuador:	
  2218                           ; 1 bytes @ 0x4
  2219                           
  2220  0024                     teclado_scan@tecla:	
  2221                           ; 1 bytes @ 0x4
  2222                           
  2223  0024                     getCiclos@aux:	
  2224                           ; 1 bytes @ 0x4
  2225                           
  2226  0024                     ___wmul@product:	
  2227                           ; 2 bytes @ 0x4
  2228                           
  2229  0024                     salva_atuadores_init@condi_init:	
  2230                           ; 2 bytes @ 0x4
  2231                           
  2232  0024                     ___lmul@multiplicand:	
  2233                           ; 4 bytes @ 0x4
  2234                           
  2235                           
  2236                           ; 4 bytes @ 0x4
  2237  0024                     	ds	1
  2238  0025                     manipula_atuadores_init@aux:
  2239  0025                     teclado_scan@l:	
  2240                           ; 1 bytes @ 0x5
  2241                           
  2242  0025                     ___awdiv@counter:	
  2243                           ; 1 bytes @ 0x5
  2244                           
  2245  0025                     ___awmod@counter:	
  2246                           ; 1 bytes @ 0x5
  2247                           
  2248  0025                     ___lwdiv@counter:	
  2249                           ; 1 bytes @ 0x5
  2250                           
  2251                           
  2252                           ; 1 bytes @ 0x5
  2253  0025                     	ds	1
  2254  0026                     ?_dignum_conc:
  2255  0026                     dispLCD_lincol@lin:	
  2256                           ; 1 bytes @ 0x6
  2257                           
  2258  0026                     manipula_atuadores_init@mask:	
  2259                           ; 1 bytes @ 0x6
  2260                           
  2261  0026                     dignum_conc@ptrNum:	
  2262                           ; 1 bytes @ 0x6
  2263                           
  2264  0026                     teclado_scan@c:	
  2265                           ; 1 bytes @ 0x6
  2266                           
  2267  0026                     ___awdiv@sign:	
  2268                           ; 1 bytes @ 0x6
  2269                           
  2270  0026                     ___awmod@sign:	
  2271                           ; 1 bytes @ 0x6
  2272                           
  2273  0026                     ___lwdiv@quotient:	
  2274                           ; 1 bytes @ 0x6
  2275                           
  2276                           
  2277                           ; 2 bytes @ 0x6
  2278  0026                     	ds	1
  2279  0027                     ?_salvar_receita:
  2280  0027                     ?_buscar_receita:	
  2281                           ; 1 bytes @ 0x7
  2282                           
  2283  0027                     ?_deletar_receita:	
  2284                           ; 1 bytes @ 0x7
  2285                           
  2286  0027                     ?_salvar_dado:	
  2287                           ; 1 bytes @ 0x7
  2288                           
  2289  0027                     ?_buscar_dado:	
  2290                           ; 1 bytes @ 0x7
  2291                           
  2292  0027                     ??_dignum_conc:	
  2293                           ; 1 bytes @ 0x7
  2294                           
  2295  0027                     ??_teclado_borda:	
  2296                           ; 1 bytes @ 0x7
  2297                           
  2298  0027                     dispLCD_lincol@aux:	
  2299                           ; 1 bytes @ 0x7
  2300                           
  2301  0027                     salvar_receita@adrs:	
  2302                           ; 1 bytes @ 0x7
  2303                           
  2304  0027                     buscar_receita@adrs:	
  2305                           ; 1 bytes @ 0x7
  2306                           
  2307  0027                     salvar_dado@col:	
  2308                           ; 1 bytes @ 0x7
  2309                           
  2310  0027                     buscar_dado@col:	
  2311                           ; 1 bytes @ 0x7
  2312                           
  2313  0027                     deletar_receita@receita:	
  2314                           ; 1 bytes @ 0x7
  2315                           
  2316  0027                     ___awdiv@quotient:	
  2317                           ; 1 bytes @ 0x7
  2318                           
  2319                           
  2320                           ; 2 bytes @ 0x7
  2321  0027                     	ds	1
  2322  0028                     ??_deletar_receita:
  2323  0028                     ?_dispLCD:	
  2324                           ; 1 bytes @ 0x8
  2325                           
  2326  0028                     ?_dispLCD_str:	
  2327                           ; 1 bytes @ 0x8
  2328                           
  2329  0028                     ??_dignum_apagar:	
  2330                           ; 1 bytes @ 0x8
  2331                           
  2332  0028                     ??___lmul:	
  2333                           ; 1 bytes @ 0x8
  2334                           
  2335  0028                     dispLCD@lin:	
  2336                           ; 1 bytes @ 0x8
  2337                           
  2338  0028                     salvar_receita@data:	
  2339                           ; 1 bytes @ 0x8
  2340                           
  2341  0028                     buscar_receita@data:	
  2342                           ; 1 bytes @ 0x8
  2343                           
  2344  0028                     salvar_dado@data:	
  2345                           ; 1 bytes @ 0x8
  2346                           
  2347  0028                     buscar_dado@data:	
  2348                           ; 1 bytes @ 0x8
  2349                           
  2350  0028                     salva_atuadores_init@pt:	
  2351                           ; 1 bytes @ 0x8
  2352                           
  2353  0028                     dignum_apagar@ptrNum:	
  2354                           ; 1 bytes @ 0x8
  2355                           
  2356  0028                     serialIOscan@j:	
  2357                           ; 1 bytes @ 0x8
  2358                           
  2359  0028                     teclado_borda@aux:	
  2360                           ; 1 bytes @ 0x8
  2361                           
  2362  0028                     dispLCD_str@str:	
  2363                           ; 1 bytes @ 0x8
  2364                           
  2365                           
  2366                           ; 2 bytes @ 0x8
  2367  0028                     	ds	1
  2368  0029                     ??_salvar_receita:
  2369  0029                     ??_buscar_receita:	
  2370                           ; 1 bytes @ 0x9
  2371                           
  2372  0029                     ??_salvar_dado:	
  2373                           ; 1 bytes @ 0x9
  2374                           
  2375  0029                     ??_buscar_dado:	
  2376                           ; 1 bytes @ 0x9
  2377                           
  2378  0029                     ??_fifo_print:	
  2379                           ; 1 bytes @ 0x9
  2380                           
  2381  0029                     ?_dignum_tam:	
  2382                           ; 1 bytes @ 0x9
  2383                           
  2384  0029                     dispLCD@col:	
  2385                           ; 1 bytes @ 0x9
  2386                           
  2387  0029                     salva_atuadores_init@dado:	
  2388                           ; 1 bytes @ 0x9
  2389                           
  2390  0029                     serialIOscan@i:	
  2391                           ; 1 bytes @ 0x9
  2392                           
  2393  0029                     teclado_borda@tecla:	
  2394                           ; 1 bytes @ 0x9
  2395                           
  2396  0029                     dignum_tam@num:	
  2397                           ; 1 bytes @ 0x9
  2398                           
  2399  0029                     ___lmul@product:	
  2400                           ; 2 bytes @ 0x9
  2401                           
  2402                           
  2403                           ; 4 bytes @ 0x9
  2404  0029                     	ds	1
  2405  002A                     ??_dispLCD_str:
  2406  002A                     salva_atuadores_init@mask:	
  2407                           ; 1 bytes @ 0xA
  2408                           
  2409  002A                     dispLCD@str:	
  2410                           ; 1 bytes @ 0xA
  2411                           
  2412  002A                     deletar_receita@aux:	
  2413                           ; 2 bytes @ 0xA
  2414                           
  2415                           
  2416                           ; 2 bytes @ 0xA
  2417  002A                     	ds	1
  2418  002B                     ??_dignum_tam:
  2419  002B                     dispLCD_str@lin:	
  2420                           ; 1 bytes @ 0xB
  2421                           
  2422  002B                     salvar_dado@adrs:	
  2423                           ; 1 bytes @ 0xB
  2424                           
  2425  002B                     buscar_dado@adrs:	
  2426                           ; 1 bytes @ 0xB
  2427                           
  2428  002B                     dignum_conc@dig:	
  2429                           ; 1 bytes @ 0xB
  2430                           
  2431  002B                     salvar_receita@aux:	
  2432                           ; 1 bytes @ 0xB
  2433                           
  2434  002B                     buscar_receita@aux:	
  2435                           ; 2 bytes @ 0xB
  2436                           
  2437                           
  2438                           ; 2 bytes @ 0xB
  2439  002B                     	ds	1
  2440  002C                     ??_dispLCD:
  2441  002C                     dispLCD_str@c:	
  2442                           ; 1 bytes @ 0xC
  2443                           
  2444  002C                     deletar_receita@i:	
  2445                           ; 1 bytes @ 0xC
  2446                           
  2447  002C                     dignum_tam@tam:	
  2448                           ; 1 bytes @ 0xC
  2449                           
  2450  002C                     salvar_dado@aux:	
  2451                           ; 1 bytes @ 0xC
  2452                           
  2453  002C                     buscar_dado@aux:	
  2454                           ; 2 bytes @ 0xC
  2455                           
  2456  002C                     _fifo_print$375:	
  2457                           ; 2 bytes @ 0xC
  2458                           
  2459                           
  2460                           ; 2 bytes @ 0xC
  2461  002C                     	ds	1
  2462  002D                     ??_fifo_alinharPrint:
  2463  002D                     ?_dispLCD_num:	
  2464                           ; 1 bytes @ 0xD
  2465                           
  2466  002D                     ?_setT1:	
  2467                           ; 1 bytes @ 0xD
  2468                           
  2469  002D                     dispLCD@pos:	
  2470                           ; 1 bytes @ 0xD
  2471                           
  2472  002D                     dispLCD_num@lin:	
  2473                           ; 1 bytes @ 0xD
  2474                           
  2475  002D                     salvar_receita@i:	
  2476                           ; 1 bytes @ 0xD
  2477                           
  2478  002D                     buscar_receita@i:	
  2479                           ; 1 bytes @ 0xD
  2480                           
  2481  002D                     setT1@c:	
  2482                           ; 1 bytes @ 0xD
  2483                           
  2484                           
  2485                           ; 4 bytes @ 0xD
  2486  002D                     	ds	1
  2487  002E                     dispLCD_num@col:
  2488  002E                     fifo_print@completar:	
  2489                           ; 1 bytes @ 0xE
  2490                           
  2491                           
  2492                           ; 1 bytes @ 0xE
  2493  002E                     	ds	1
  2494  002F                     fifo_print@indPrint:
  2495  002F                     dispLCD_num@num:	
  2496                           ; 1 bytes @ 0xF
  2497                           
  2498                           
  2499                           ; 2 bytes @ 0xF
  2500  002F                     	ds	1
  2501  0030                     fifo_print@i:
  2502  0030                     fifo_alinharPrint@cont:	
  2503                           ; 1 bytes @ 0x10
  2504                           
  2505                           
  2506                           ; 1 bytes @ 0x10
  2507  0030                     	ds	1
  2508  0031                     ??_setT1:
  2509  0031                     dispLCD_num@tam:	
  2510                           ; 1 bytes @ 0x11
  2511                           
  2512  0031                     fifo_print@comando:	
  2513                           ; 1 bytes @ 0x11
  2514                           
  2515  0031                     fifo_alinharPrint@aux:	
  2516                           ; 1 bytes @ 0x11
  2517                           
  2518                           
  2519                           ; 1 bytes @ 0x11
  2520  0031                     	ds	1
  2521  0032                     ??_dispLCD_num:
  2522  0032                     fifo_print@atraso:	
  2523                           ; 1 bytes @ 0x12
  2524                           
  2525  0032                     fifo_alinharPrint@i:	
  2526                           ; 1 bytes @ 0x12
  2527                           
  2528                           
  2529                           ; 1 bytes @ 0x12
  2530  0032                     	ds	1
  2531  0033                     ??_fifo_delete:
  2532  0033                     ??_fifo_add:	
  2533                           ; 1 bytes @ 0x13
  2534                           
  2535  0033                     ??_fifo_add_tempo:	
  2536                           ; 1 bytes @ 0x13
  2537                           
  2538  0033                     ??_fifo_add_control:	
  2539                           ; 1 bytes @ 0x13
  2540                           
  2541                           
  2542                           ; 1 bytes @ 0x13
  2543  0033                     	ds	1
  2544  0034                     fifo_add@passo:
  2545  0034                     fifo_add_tempo@t:	
  2546                           ; 1 bytes @ 0x14
  2547                           
  2548  0034                     fifo_add_control@c:	
  2549                           ; 1 bytes @ 0x14
  2550                           
  2551                           
  2552                           ; 1 bytes @ 0x14
  2553  0034                     	ds	1
  2554  0035                     dispLCD_num@size:
  2555                           
  2556                           ; 1 bytes @ 0x15
  2557  0035                     	ds	1
  2558  0036                     dispLCD_num@sinal:
  2559                           
  2560                           ; 1 bytes @ 0x16
  2561  0036                     	ds	1
  2562  0037                     dispLCD_num@div:
  2563                           
  2564                           ; 2 bytes @ 0x17
  2565  0037                     	ds	2
  2566  0039                     ?_printExec:
  2567  0039                     printExec@ind:	
  2568                           ; 1 bytes @ 0x19
  2569                           
  2570                           
  2571                           ; 1 bytes @ 0x19
  2572  0039                     	ds	1
  2573  003A                     ??_printExec:
  2574                           
  2575                           ; 1 bytes @ 0x1A
  2576  003A                     	ds	6
  2577  0040                     _printExec$400:
  2578                           
  2579                           ; 2 bytes @ 0x20
  2580  0040                     	ds	2
  2581  0042                     printExec@col:
  2582                           
  2583                           ; 1 bytes @ 0x22
  2584  0042                     	ds	1
  2585  0043                     printExec@passo:
  2586                           
  2587                           ; 1 bytes @ 0x23
  2588  0043                     	ds	1
  2589  0044                     ??_main:
  2590                           
  2591                           ; 1 bytes @ 0x24
  2592  0044                     	ds	4
  2593                           
  2594                           	psect	maintext
  2595  058B                     __pmaintext:	
  2596 ;;
  2597 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2598 ;;
  2599 ;; *************** function _main *****************
  2600 ;; Defined at:
  2601 ;;		line 66 in file "main.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  j               1   68[BANK3 ] unsigned char 
  2606 ;;  j               1   66[BANK3 ] unsigned char 
  2607 ;;  j               1   64[BANK3 ] unsigned char 
  2608 ;;  j               1   62[BANK3 ] unsigned char 
  2609 ;;  ptr             1   77[BANK3 ] PTR unsigned char 
  2610 ;;		 -> main@vetor_aux(16), 
  2611 ;;  i               1   67[BANK3 ] unsigned char 
  2612 ;;  i               1   65[BANK3 ] unsigned char 
  2613 ;;  i               1   63[BANK3 ] unsigned char 
  2614 ;;  i               1   61[BANK3 ] unsigned char 
  2615 ;;  lema           20    0[BANK3 ] unsigned char [20]
  2616 ;;  ptr             1   60[BANK3 ] PTR unsigned char 
  2617 ;;		 -> main@lema(20), 
  2618 ;;  i               1   59[BANK3 ] unsigned char 
  2619 ;;  vetor_aux      16   20[BANK3 ] unsigned char [16]
  2620 ;;  num             2   78[BANK3 ] unsigned int 
  2621 ;;  ciclos          2   73[BANK3 ] unsigned int 
  2622 ;;  tecla           1   81[BANK3 ] unsigned char 
  2623 ;;  estado          1   80[BANK3 ] unsigned char 
  2624 ;;  botao           1   76[BANK3 ] unsigned char 
  2625 ;;  vetorOut        1   75[BANK3 ] unsigned char [1]
  2626 ;;  meAtuadores     1   72[BANK3 ] unsigned char 
  2627 ;;  vetorIn         1   71[BANK3 ] unsigned char [1]
  2628 ;;  auxPasso        1   70[BANK3 ] unsigned char 
  2629 ;;  init_cond       1   69[BANK3 ] unsigned char 
  2630 ;;  pt              1   38[BANK3 ] PTR unsigned char 
  2631 ;;		 -> main@vetor_aux(16), 
  2632 ;;  aux             1   37[BANK3 ] unsigned char 
  2633 ;;  contPassos      1   36[BANK3 ] unsigned char 
  2634 ;;  atuador         1    0        unsigned char 
  2635 ;; Return value:  Size  Location     Type
  2636 ;;                  1    wreg      void 
  2637 ;; Registers used:
  2638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2639 ;; Tracked objects:
  2640 ;;		On entry : B00/0
  2641 ;;		On exit  : 0/0
  2642 ;;		Unchanged: 0/0
  2643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2644 ;;      Params:         0       0       0       0       0
  2645 ;;      Locals:         0       0       0      82       0
  2646 ;;      Temps:          0       4       0       0       0
  2647 ;;      Totals:         0       4       0      82       0
  2648 ;;Total ram usage:       86 bytes
  2649 ;; Hardware stack levels required when called:    6
  2650 ;; This function calls:
  2651 ;;		___awmod
  2652 ;;		___lmul
  2653 ;;		_addContCiclos
  2654 ;;		_addIndicePassos
  2655 ;;		_alt_atuador
  2656 ;;		_buscar_dado
  2657 ;;		_buscar_receita
  2658 ;;		_delay
  2659 ;;		_deletar_receita
  2660 ;;		_dignum_apagar
  2661 ;;		_dignum_conc
  2662 ;;		_dispLCD
  2663 ;;		_dispLCD_clr
  2664 ;;		_dispLCD_dataReg
  2665 ;;		_dispLCD_init
  2666 ;;		_dispLCD_lincol
  2667 ;;		_dispLCD_num
  2668 ;;		_dispLCD_str
  2669 ;;		_fifo_add
  2670 ;;		_fifo_add_ciclo
  2671 ;;		_fifo_add_control
  2672 ;;		_fifo_add_tempo
  2673 ;;		_fifo_adrs
  2674 ;;		_fifo_delete
  2675 ;;		_fifo_disponivel
  2676 ;;		_fifo_indice
  2677 ;;		_fifo_indicePrint_dec
  2678 ;;		_fifo_indicePrint_inc
  2679 ;;		_fifo_lerPos
  2680 ;;		_fifo_print
  2681 ;;		_fifo_tam
  2682 ;;		_getCiclos
  2683 ;;		_getContCiclos
  2684 ;;		_getIndicePassos
  2685 ;;		_initSerialIO
  2686 ;;		_init_atuadores
  2687 ;;		_ler_atuador
  2688 ;;		_ler_sensor
  2689 ;;		_manipula_atuadores_init
  2690 ;;		_printExec
  2691 ;;		_resetContCiclos
  2692 ;;		_resetIndicePassos
  2693 ;;		_salva_atuadores_init
  2694 ;;		_salvar_dado
  2695 ;;		_salvar_receita
  2696 ;;		_serialIOscan
  2697 ;;		_setT1
  2698 ;;		_set_passo
  2699 ;;		_statusT1
  2700 ;;		_teclado_borda
  2701 ;;		_teclado_init
  2702 ;;		_timer1_init
  2703 ;; This function is called by:
  2704 ;;		Startup code after reset
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           
  2709                           ;psect for function _main
  2710  058B                     _main:
  2711  058B                     l6867:	
  2712                           ;incstack = 0
  2713                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2714                           
  2715                           
  2716                           ;main.c: 68:     dispLCD_init();
  2717  058B  160A  158A  2709  120A  118A  	fcall	_dispLCD_init
  2718                           
  2719                           ;main.c: 69:     teclado_init();
  2720  0590  160A  158A  233E  120A  118A  	fcall	_teclado_init
  2721                           
  2722                           ;main.c: 70:     timer1_init();
  2723  0595  160A  158A  2391  120A  118A  	fcall	_timer1_init
  2724  059A                     l6869:
  2725  059A                     l6871:
  2726                           
  2727                           ;main.c: 74:     char estado = 0;
  2728  059A  1683               	bsf	3,5	;RP0=1, select bank3
  2729  059B  1703               	bsf	3,6	;RP1=1, select bank3
  2730  059C  01E0               	clrf	main@estado^(0+384)
  2731  059D                     l6873:
  2732                           
  2733                           ;main.c: 75:     char atuador;;main.c: 76:     char vetor_aux[16];;main.c: 77:     char 
      +                          init_cond = 0;
  2734  059D  01D5               	clrf	main@init_cond^(0+384)
  2735  059E                     l6875:
  2736                           
  2737                           ;main.c: 78:     char *pt;;main.c: 80:     char contPassos = 0;
  2738  059E  01B4               	clrf	main@contPassos^(0+384)
  2739  059F                     l6877:
  2740                           
  2741                           ;main.c: 81:     char vetorIn[1] = { 0 };
  2742  059F  01D7               	clrf	main@vetorIn^(0+384)
  2743  05A0                     l6879:
  2744                           
  2745                           ;main.c: 82:     char vetorOut[1] = { 0 };
  2746  05A0  01DB               	clrf	main@vetorOut^(0+384)
  2747                           
  2748                           ;main.c: 83:     initSerialIO( vetorIn, vetorOut, 1 );
  2749  05A1  30DB               	movlw	(low (main@vetorOut| (0+256)))& (0+255)
  2750  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  2751  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  2752  05A4  00C4               	movwf	??_main
  2753  05A5  0844               	movf	??_main,w
  2754  05A6  00A0               	movwf	initSerialIO@ptrOut
  2755  05A7  01A1               	clrf	initSerialIO@length
  2756  05A8  0AA1               	incf	initSerialIO@length,f
  2757  05A9  30D7               	movlw	(low (main@vetorIn| (0+256)))& (0+255)
  2758  05AA  160A  118A  2285  120A  118A  	fcall	_initSerialIO
  2759  05AF                     l6881:
  2760                           
  2761                           ;main.c: 84:     char meAtuadores = -1;
  2762  05AF  30FF               	movlw	255
  2763  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  2764  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  2765  05B2  00C4               	movwf	??_main
  2766  05B3  0844               	movf	??_main,w
  2767  05B4  1683               	bsf	3,5	;RP0=1, select bank3
  2768  05B5  1703               	bsf	3,6	;RP1=1, select bank3
  2769  05B6  00D8               	movwf	main@meAtuadores^(0+384)
  2770  05B7                     l6883:
  2771                           
  2772                           ;main.c: 85:     char auxPasso = 0;
  2773  05B7  01D6               	clrf	main@auxPasso^(0+384)
  2774  05B8                     l6885:
  2775                           
  2776                           ;main.c: 86:     char aux = 2;
  2777  05B8  3002               	movlw	2
  2778  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  2779  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  2780  05BB  00C4               	movwf	??_main
  2781  05BC  0844               	movf	??_main,w
  2782  05BD  1683               	bsf	3,5	;RP0=1, select bank3
  2783  05BE  1703               	bsf	3,6	;RP1=1, select bank3
  2784  05BF  00B5               	movwf	main@aux^(0+384)
  2785  05C0                     l6887:
  2786                           
  2787                           ;main.c: 87:     unsigned int num = 0;
  2788  05C0  01DE               	clrf	main@num^(0+384)
  2789  05C1  01DF               	clrf	(main@num+1)^(0+384)
  2790  05C2                     l6889:
  2791                           
  2792                           ;main.c: 88:     unsigned int ciclos = 0;
  2793  05C2  01D9               	clrf	main@ciclos^(0+384)
  2794  05C3  01DA               	clrf	(main@ciclos+1)^(0+384)
  2795  05C4                     l6891:
  2796                           
  2797                           ;main.c: 89:     char botao = 0;
  2798  05C4  01DC               	clrf	main@botao^(0+384)
  2799  05C5  120A  158A  2DED   	goto	l7427
  2800  05C8                     l6893:
  2801                           
  2802                           ;main.c: 107:                             for(char i = 0; i <= 3; i++)
  2803  05C8  1683               	bsf	3,5	;RP0=1, select bank3
  2804  05C9  1703               	bsf	3,6	;RP1=1, select bank3
  2805  05CA  01CD               	clrf	main@i^(0+384)
  2806  05CB                     l6895:
  2807  05CB  3004               	movlw	4
  2808  05CC  024D               	subwf	main@i^(0+384),w
  2809  05CD  1C03               	skipc
  2810  05CE  2DD0               	goto	u4781
  2811  05CF  2DD1               	goto	u4780
  2812  05D0                     u4781:
  2813  05D0  2DD2               	goto	l6899
  2814  05D1                     u4780:
  2815  05D1  2E11               	goto	l6917
  2816  05D2                     l6899:
  2817                           
  2818                           ;main.c: 108:                             {;main.c: 109:                                
      +                           for(char j = 0; j <= 19; j++)
  2819  05D2  01CE               	clrf	main@j^(0+384)
  2820  05D3                     l6901:
  2821  05D3  3014               	movlw	20
  2822  05D4  024E               	subwf	main@j^(0+384),w
  2823  05D5  1C03               	skipc
  2824  05D6  2DD8               	goto	u4791
  2825  05D7  2DD9               	goto	u4790
  2826  05D8                     u4791:
  2827  05D8  2DDA               	goto	l6905
  2828  05D9                     u4790:
  2829  05D9  2E08               	goto	l6913
  2830  05DA                     l6905:
  2831                           
  2832                           ;main.c: 110:                                 {;main.c: 111:                            
      +                                   IHM.printpos(i, j, "\377");
  2833  05DA  084D               	movf	main@i^(0+384),w
  2834  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  2835  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  2836  05DD  00C4               	movwf	??_main
  2837  05DE  0844               	movf	??_main,w
  2838  05DF  00A8               	movwf	dispLCD@lin
  2839  05E0  1683               	bsf	3,5	;RP0=1, select bank3
  2840  05E1  1703               	bsf	3,6	;RP1=1, select bank3
  2841  05E2  084E               	movf	main@j^(0+384),w
  2842  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  2843  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  2844  05E5  00C5               	movwf	??_main+1
  2845  05E6  0845               	movf	??_main+1,w
  2846  05E7  00A9               	movwf	dispLCD@col
  2847  05E8  3044               	movlw	low (STR_1| (0+32768))
  2848  05E9  00AA               	movwf	dispLCD@str
  2849  05EA  3092               	movlw	high (STR_1| (0+32768))
  2850  05EB  00AB               	movwf	dispLCD@str+1
  2851  05EC  1683               	bsf	3,5	;RP0=1, select bank3
  2852  05ED  1703               	bsf	3,6	;RP1=1, select bank3
  2853  05EE  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
  2854  05EF  120A  118A  2052  120A  118A  	fcall	fptable
  2855  05F4                     l6907:
  2856                           
  2857                           ;main.c: 112:                                     delay(10);
  2858  05F4  300A               	movlw	10
  2859  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  2860  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  2861  05F7  00A0               	movwf	delay@t
  2862  05F8  3000               	movlw	0
  2863  05F9  00A1               	movwf	delay@t+1
  2864  05FA  120A  158A  2000  120A  118A  	fcall	_delay
  2865  05FF                     l6909:
  2866                           
  2867                           ;main.c: 113:                                 }
  2868  05FF  3001               	movlw	1
  2869  0600  1283               	bcf	3,5	;RP0=0, select bank0
  2870  0601  1303               	bcf	3,6	;RP1=0, select bank0
  2871  0602  00C4               	movwf	??_main
  2872  0603  0844               	movf	??_main,w
  2873  0604  1683               	bsf	3,5	;RP0=1, select bank3
  2874  0605  1703               	bsf	3,6	;RP1=1, select bank3
  2875  0606  07CE               	addwf	main@j^(0+384),f
  2876  0607  2DD3               	goto	l6901
  2877  0608                     l6913:
  2878                           
  2879                           ;main.c: 114:                             }
  2880  0608  3001               	movlw	1
  2881  0609  1283               	bcf	3,5	;RP0=0, select bank0
  2882  060A  1303               	bcf	3,6	;RP1=0, select bank0
  2883  060B  00C4               	movwf	??_main
  2884  060C  0844               	movf	??_main,w
  2885  060D  1683               	bsf	3,5	;RP0=1, select bank3
  2886  060E  1703               	bsf	3,6	;RP1=1, select bank3
  2887  060F  07CD               	addwf	main@i^(0+384),f
  2888  0610  2DCB               	goto	l6895
  2889  0611                     l6917:
  2890                           
  2891                           ;main.c: 116:                             for(char i = 0; i <= 3; i++)
  2892  0611  01CF               	clrf	main@i_850^(0+384)
  2893  0612                     l6919:
  2894  0612  3004               	movlw	4
  2895  0613  024F               	subwf	main@i_850^(0+384),w
  2896  0614  1C03               	skipc
  2897  0615  2E17               	goto	u4801
  2898  0616  2E18               	goto	u4800
  2899  0617                     u4801:
  2900  0617  2E19               	goto	l6923
  2901  0618                     u4800:
  2902  0618  2E58               	goto	l623
  2903  0619                     l6923:
  2904                           
  2905                           ;main.c: 117:                             {;main.c: 118:                                
      +                           for(char j = 0; j <= 19; j++)
  2906  0619  01D0               	clrf	main@j_851^(0+384)
  2907  061A                     l6925:
  2908  061A  3014               	movlw	20
  2909  061B  0250               	subwf	main@j_851^(0+384),w
  2910  061C  1C03               	skipc
  2911  061D  2E1F               	goto	u4811
  2912  061E  2E20               	goto	u4810
  2913  061F                     u4811:
  2914  061F  2E21               	goto	l6929
  2915  0620                     u4810:
  2916  0620  2E4F               	goto	l6937
  2917  0621                     l6929:
  2918                           
  2919                           ;main.c: 119:                                 {;main.c: 120:                            
      +                                   IHM.printpos(i, j, " ");
  2920  0621  084F               	movf	main@i_850^(0+384),w
  2921  0622  1283               	bcf	3,5	;RP0=0, select bank0
  2922  0623  1303               	bcf	3,6	;RP1=0, select bank0
  2923  0624  00C4               	movwf	??_main
  2924  0625  0844               	movf	??_main,w
  2925  0626  00A8               	movwf	dispLCD@lin
  2926  0627  1683               	bsf	3,5	;RP0=1, select bank3
  2927  0628  1703               	bsf	3,6	;RP1=1, select bank3
  2928  0629  0850               	movf	main@j_851^(0+384),w
  2929  062A  1283               	bcf	3,5	;RP0=0, select bank0
  2930  062B  1303               	bcf	3,6	;RP1=0, select bank0
  2931  062C  00C5               	movwf	??_main+1
  2932  062D  0845               	movf	??_main+1,w
  2933  062E  00A9               	movwf	dispLCD@col
  2934  062F  303E               	movlw	low ((STR_14+19)| (0+32768))
  2935  0630  00AA               	movwf	dispLCD@str
  2936  0631  3091               	movlw	high ((STR_14+19)| (0+32768))
  2937  0632  00AB               	movwf	dispLCD@str+1
  2938  0633  1683               	bsf	3,5	;RP0=1, select bank3
  2939  0634  1703               	bsf	3,6	;RP1=1, select bank3
  2940  0635  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
  2941  0636  120A  118A  2052  120A  118A  	fcall	fptable
  2942  063B                     l6931:
  2943                           
  2944                           ;main.c: 121:                                     delay(10);
  2945  063B  300A               	movlw	10
  2946  063C  1283               	bcf	3,5	;RP0=0, select bank0
  2947  063D  1303               	bcf	3,6	;RP1=0, select bank0
  2948  063E  00A0               	movwf	delay@t
  2949  063F  3000               	movlw	0
  2950  0640  00A1               	movwf	delay@t+1
  2951  0641  120A  158A  2000  120A  118A  	fcall	_delay
  2952  0646                     l6933:
  2953                           
  2954                           ;main.c: 122:                                 }
  2955  0646  3001               	movlw	1
  2956  0647  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0648  1303               	bcf	3,6	;RP1=0, select bank0
  2958  0649  00C4               	movwf	??_main
  2959  064A  0844               	movf	??_main,w
  2960  064B  1683               	bsf	3,5	;RP0=1, select bank3
  2961  064C  1703               	bsf	3,6	;RP1=1, select bank3
  2962  064D  07D0               	addwf	main@j_851^(0+384),f
  2963  064E  2E1A               	goto	l6925
  2964  064F                     l6937:
  2965                           
  2966                           ;main.c: 123:                             }
  2967  064F  3001               	movlw	1
  2968  0650  1283               	bcf	3,5	;RP0=0, select bank0
  2969  0651  1303               	bcf	3,6	;RP1=0, select bank0
  2970  0652  00C4               	movwf	??_main
  2971  0653  0844               	movf	??_main,w
  2972  0654  1683               	bsf	3,5	;RP0=1, select bank3
  2973  0655  1703               	bsf	3,6	;RP1=1, select bank3
  2974  0656  07CF               	addwf	main@i_850^(0+384),f
  2975  0657  2E12               	goto	l6919
  2976  0658                     l623:
  2977                           
  2978                           ;main.c: 124:                             estado = 1;
  2979  0658  01E0               	clrf	main@estado^(0+384)
  2980  0659  0AE0               	incf	main@estado^(0+384),f
  2981                           
  2982                           ;main.c: 125:                             break;
  2983  065A  120A  158A  2E60   	goto	l7429
  2984  065D                     l6941:
  2985                           
  2986                           ;main.c: 128:                             IHM.printpos(1, 0, "      SEGGTTI       ");
  2987  065D  01A8               	clrf	dispLCD@lin
  2988  065E  0AA8               	incf	dispLCD@lin,f
  2989  065F  01A9               	clrf	dispLCD@col
  2990  0660  306A               	movlw	low (STR_3| (0+32768))
  2991  0661  00AA               	movwf	dispLCD@str
  2992  0662  3091               	movlw	high (STR_3| (0+32768))
  2993  0663  00AB               	movwf	dispLCD@str+1
  2994  0664  1683               	bsf	3,5	;RP0=1, select bank3
  2995  0665  1703               	bsf	3,6	;RP1=1, select bank3
  2996  0666  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
  2997  0667  120A  118A  2052  120A  118A  	fcall	fptable
  2998  066C                     l6943:
  2999                           
  3000                           ;main.c: 130:                             char lema[20] = "Mundo ao seu comando";
  3001  066C  3090               	movlw	main@lema& (0+255)
  3002  066D  0084               	movwf	4
  3003  066E  30A0               	movlw	low main@F1486
  3004  066F  1283               	bcf	3,5	;RP0=0, select bank0
  3005  0670  1303               	bcf	3,6	;RP1=0, select bank0
  3006  0671  00C4               	movwf	??_main
  3007  0672  0804               	movf	4,w
  3008  0673  00C5               	movwf	??_main+1
  3009  0674  3014               	movlw	20
  3010  0675  00C6               	movwf	??_main+2
  3011  0676                     u4820:
  3012  0676  0844               	movf	??_main,w
  3013  0677  0084               	movwf	4
  3014  0678  1383               	bcf	3,7	;select IRP bank1
  3015  0679  0800               	movf	0,w
  3016  067A  00C7               	movwf	??_main+3
  3017  067B  0AC4               	incf	??_main,f
  3018  067C  0845               	movf	??_main+1,w
  3019  067D  0084               	movwf	4
  3020  067E  1783               	bsf	3,7	;select IRP bank3
  3021  067F  0847               	movf	??_main+3,w
  3022  0680  0080               	movwf	0
  3023  0681  0AC5               	incf	??_main+1,f
  3024  0682  0BC6               	decfsz	??_main+2,f
  3025  0683  2E76               	goto	u4820
  3026  0684                     l6945:
  3027                           
  3028                           ;main.c: 131:                             char i = 0;
  3029  0684  1683               	bsf	3,5	;RP0=1, select bank3
  3030  0685  1703               	bsf	3,6	;RP1=1, select bank3
  3031  0686  01CB               	clrf	main@i_856^(0+384)
  3032  0687                     l6947:
  3033                           
  3034                           ;main.c: 132:                             char *ptr;;main.c: 134:                       
      +                                for(ptr = lema; *ptr != 0; ptr++)
  3035  0687  3090               	movlw	(low (main@lema| (0+256)))& (0+255)
  3036  0688  1283               	bcf	3,5	;RP0=0, select bank0
  3037  0689  1303               	bcf	3,6	;RP1=0, select bank0
  3038  068A  00C4               	movwf	??_main
  3039  068B  0844               	movf	??_main,w
  3040  068C  1683               	bsf	3,5	;RP0=1, select bank3
  3041  068D  1703               	bsf	3,6	;RP1=1, select bank3
  3042  068E  00CC               	movwf	main@ptr^(0+384)
  3043  068F  120A  118A  28A2   	goto	l6957
  3044                           
  3045                           	psect	text1
  3046  1B91                     __ptext1:	
  3047 ;; *************** function _timer1_init *****************
  3048 ;; Defined at:
  3049 ;;		line 16 in file "timer1.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3063 ;;      Params:         0       0       0       0       0
  3064 ;;      Locals:         0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0
  3066 ;;      Totals:         0       0       0       0       0
  3067 ;;Total ram usage:        0 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    2
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           
  3078                           ;psect for function _timer1_init
  3079  1B91                     _timer1_init:
  3080  1B91                     l6801:	
  3081                           ;incstack = 0
  3082                           ; Regs used in _timer1_init: [wreg+status,2+status,0]
  3083                           
  3084                           
  3085                           ;timer1.c: 18:     T1CONbits.TMR1CS = 0;
  3086  1B91  1283               	bcf	3,5	;RP0=0, select bank0
  3087  1B92  1303               	bcf	3,6	;RP1=0, select bank0
  3088  1B93  1090               	bcf	16,1	;volatile
  3089  1B94                     l6803:
  3090                           
  3091                           ;timer1.c: 19:     T1CONbits.T1CKPS = 0b11;
  3092  1B94  3030               	movlw	48
  3093  1B95  0490               	iorwf	16,f	;volatile
  3094  1B96                     l6805:
  3095                           
  3096                           ;timer1.c: 20:     T1CONbits.nT1SYNC = 1;
  3097  1B96  1510               	bsf	16,2	;volatile
  3098  1B97                     l6807:
  3099                           
  3100                           ;timer1.c: 21:     TMR1H = ((65536-625)>>8) & 0x00FF;
  3101  1B97  30FD               	movlw	253
  3102  1B98  008F               	movwf	15	;volatile
  3103  1B99                     l6809:
  3104                           
  3105                           ;timer1.c: 22:     TMR1L = (65536-625) & 0x00FF;
  3106  1B99  308F               	movlw	143
  3107  1B9A  008E               	movwf	14	;volatile
  3108  1B9B                     l6811:
  3109                           
  3110                           ;timer1.c: 23:     T1CONbits.TMR1GE = 0;
  3111  1B9B  1310               	bcf	16,6	;volatile
  3112  1B9C                     l6813:
  3113                           
  3114                           ;timer1.c: 25:     PIE1bits.TMR1IE = 1;
  3115  1B9C  1683               	bsf	3,5	;RP0=1, select bank1
  3116  1B9D  1303               	bcf	3,6	;RP1=0, select bank1
  3117  1B9E  140C               	bsf	12,0	;volatile
  3118  1B9F                     l6815:
  3119                           
  3120                           ;timer1.c: 26:     INTCONbits.PEIE = 1;
  3121  1B9F  170B               	bsf	11,6	;volatile
  3122  1BA0                     l6817:
  3123                           
  3124                           ;timer1.c: 27:     INTCONbits.GIE = 1;
  3125  1BA0  178B               	bsf	11,7	;volatile
  3126  1BA1                     l478:
  3127  1BA1  0008               	return
  3128  1BA2                     __end_of_timer1_init:
  3129                           
  3130                           	psect	text2
  3131  1B3E                     __ptext2:	
  3132 ;; *************** function _teclado_init *****************
  3133 ;; Defined at:
  3134 ;;		line 29 in file "teclado.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3148 ;;      Params:         0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0
  3151 ;;      Totals:         0       0       0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    2
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_main
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           
  3163                           ;psect for function _teclado_init
  3164  1B3E                     _teclado_init:
  3165  1B3E                     l6785:	
  3166                           ;incstack = 0
  3167                           ; Regs used in _teclado_init: [wreg+status,2]
  3168                           
  3169                           
  3170                           ;teclado.c: 31:     PORTD = 0x00;
  3171  1B3E  1283               	bcf	3,5	;RP0=0, select bank0
  3172  1B3F  1303               	bcf	3,6	;RP1=0, select bank0
  3173  1B40  0188               	clrf	8	;volatile
  3174  1B41                     l6787:
  3175                           
  3176                           ;teclado.c: 32:     TRISD = 0xF0;
  3177  1B41  30F0               	movlw	240
  3178  1B42  1683               	bsf	3,5	;RP0=1, select bank1
  3179  1B43  1303               	bcf	3,6	;RP1=0, select bank1
  3180  1B44  0088               	movwf	8	;volatile
  3181  1B45                     l426:
  3182  1B45  0008               	return
  3183  1B46                     __end_of_teclado_init:
  3184                           
  3185                           	psect	text3
  3186  1C8D                     __ptext3:	
  3187 ;; *************** function _teclado_borda *****************
  3188 ;; Defined at:
  3189 ;;		line 92 in file "teclado.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;		None
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  tecla           1    9[BANK0 ] unsigned char 
  3194 ;;  aux             1    8[BANK0 ] unsigned char 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      unsigned char 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3204 ;;      Params:         0       0       0       0       0
  3205 ;;      Locals:         0       2       0       0       0
  3206 ;;      Temps:          0       1       0       0       0
  3207 ;;      Totals:         0       3       0       0       0
  3208 ;;Total ram usage:        3 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    3
  3211 ;; This function calls:
  3212 ;;		_teclado_scan
  3213 ;; This function is called by:
  3214 ;;		_main
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           
  3219                           ;psect for function _teclado_borda
  3220  1C8D                     _teclado_borda:
  3221  1C8D                     l6789:	
  3222                           ;incstack = 0
  3223                           ; Regs used in _teclado_borda: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3224                           
  3225                           
  3226                           ;teclado.c: 95:     char aux = 0;
  3227  1C8D  1283               	bcf	3,5	;RP0=0, select bank0
  3228  1C8E  1303               	bcf	3,6	;RP1=0, select bank0
  3229  1C8F  01A8               	clrf	teclado_borda@aux
  3230  1C90                     l6791:
  3231                           
  3232                           ;teclado.c: 97:     tecla = teclado_scan();
  3233  1C90  160A  118A  2400  160A  158A  	fcall	_teclado_scan
  3234  1C95  1283               	bcf	3,5	;RP0=0, select bank0
  3235  1C96  1303               	bcf	3,6	;RP1=0, select bank0
  3236  1C97  00A7               	movwf	??_teclado_borda
  3237  1C98  0827               	movf	??_teclado_borda,w
  3238  1C99  00A9               	movwf	teclado_borda@tecla
  3239  1C9A                     l6793:
  3240                           
  3241                           ;teclado.c: 99:     if(tecla && !teclaAnterior)
  3242  1C9A  0829               	movf	teclado_borda@tecla,w
  3243  1C9B  1903               	btfsc	3,2
  3244  1C9C  2C9E               	goto	u4701
  3245  1C9D  2C9F               	goto	u4700
  3246  1C9E                     u4701:
  3247  1C9E  2CA8               	goto	l441
  3248  1C9F                     u4700:
  3249  1C9F                     l6795:
  3250  1C9F  0850               	movf	_teclaAnterior,w
  3251  1CA0  1D03               	btfss	3,2
  3252  1CA1  2CA3               	goto	u4711
  3253  1CA2  2CA4               	goto	u4710
  3254  1CA3                     u4711:
  3255  1CA3  2CA8               	goto	l441
  3256  1CA4                     u4710:
  3257  1CA4                     l6797:
  3258                           
  3259                           ;teclado.c: 100:         aux = tecla;
  3260  1CA4  0829               	movf	teclado_borda@tecla,w
  3261  1CA5  00A7               	movwf	??_teclado_borda
  3262  1CA6  0827               	movf	??_teclado_borda,w
  3263  1CA7  00A8               	movwf	teclado_borda@aux
  3264  1CA8                     l441:
  3265                           
  3266                           ;teclado.c: 102:     teclaAnterior = tecla;
  3267  1CA8  0829               	movf	teclado_borda@tecla,w
  3268  1CA9  00A7               	movwf	??_teclado_borda
  3269  1CAA  0827               	movf	??_teclado_borda,w
  3270  1CAB  00D0               	movwf	_teclaAnterior
  3271                           
  3272                           ;teclado.c: 104:     return(aux);
  3273  1CAC  0828               	movf	teclado_borda@aux,w
  3274  1CAD                     l442:
  3275  1CAD  0008               	return
  3276  1CAE                     __end_of_teclado_borda:
  3277                           
  3278                           	psect	text4
  3279  1400                     __ptext4:	
  3280 ;; *************** function _teclado_scan *****************
  3281 ;; Defined at:
  3282 ;;		line 55 in file "teclado.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;		None
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  c               1    6[BANK0 ] unsigned char 
  3287 ;;  l               1    5[BANK0 ] unsigned char 
  3288 ;;  tecla           1    4[BANK0 ] unsigned char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      unsigned char 
  3291 ;; Registers used:
  3292 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3298 ;;      Params:         0       0       0       0       0
  3299 ;;      Locals:         0       3       0       0       0
  3300 ;;      Temps:          0       4       0       0       0
  3301 ;;      Totals:         0       7       0       0       0
  3302 ;;Total ram usage:        7 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    2
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_teclado_borda
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           
  3313                           ;psect for function _teclado_scan
  3314  1400                     _teclado_scan:
  3315  1400                     l4017:	
  3316                           ;incstack = 0
  3317                           ; Regs used in _teclado_scan: [wreg-fsr0h+status,2+status,0]
  3318                           
  3319                           
  3320                           ;teclado.c: 57:    char tecla = 0;
  3321  1400  1283               	bcf	3,5	;RP0=0, select bank0
  3322  1401  1303               	bcf	3,6	;RP1=0, select bank0
  3323  1402  01A4               	clrf	teclado_scan@tecla
  3324                           
  3325                           ;teclado.c: 71:     unsigned char l,c;;teclado.c: 73:     for( l=0; l<4; l++ )
  3326  1403  01A5               	clrf	teclado_scan@l
  3327  1404                     l4019:
  3328  1404  3004               	movlw	4
  3329  1405  0225               	subwf	teclado_scan@l,w
  3330  1406  1C03               	skipc
  3331  1407  2C09               	goto	u2381
  3332  1408  2C0A               	goto	u2380
  3333  1409                     u2381:
  3334  1409  2C0B               	goto	l4023
  3335  140A                     u2380:
  3336  140A  2C4A               	goto	l4043
  3337  140B                     l4023:
  3338                           
  3339                           ;teclado.c: 74:     {;teclado.c: 75:         PORTD = (0x01 << l);
  3340  140B  3001               	movlw	1
  3341  140C  00A0               	movwf	??_teclado_scan
  3342  140D  0A25               	incf	teclado_scan@l,w
  3343  140E  2C11               	goto	u2394
  3344  140F                     u2395:
  3345  140F  1003               	clrc
  3346  1410  0DA0               	rlf	??_teclado_scan,f
  3347  1411                     u2394:
  3348  1411  3EFF               	addlw	-1
  3349  1412  1D03               	skipz
  3350  1413  2C0F               	goto	u2395
  3351  1414  0820               	movf	??_teclado_scan,w
  3352  1415  0088               	movwf	8	;volatile
  3353  1416                     l4025:
  3354                           
  3355                           ;teclado.c: 77:         for( c=0; c<4; c++ )
  3356  1416  01A6               	clrf	teclado_scan@c
  3357  1417                     l4031:
  3358                           
  3359                           ;teclado.c: 78:         {;teclado.c: 80:             if( PORTD & (0x10<<c) )
  3360  1417  3010               	movlw	16
  3361  1418  00A0               	movwf	??_teclado_scan
  3362  1419  0A26               	incf	teclado_scan@c,w
  3363  141A  2C1D               	goto	u2404
  3364  141B                     u2405:
  3365  141B  1003               	clrc
  3366  141C  0DA0               	rlf	??_teclado_scan,f
  3367  141D                     u2404:
  3368  141D  3EFF               	addlw	-1
  3369  141E  1D03               	skipz
  3370  141F  2C1B               	goto	u2405
  3371  1420  0820               	movf	??_teclado_scan,w
  3372  1421  0508               	andwf	8,w	;volatile
  3373  1422  1903               	btfsc	3,2
  3374  1423  2C25               	goto	u2411
  3375  1424  2C26               	goto	u2410
  3376  1425                     u2411:
  3377  1425  2C3B               	goto	l4035
  3378  1426                     u2410:
  3379  1426                     l4033:
  3380                           
  3381                           ;teclado.c: 81:             {;teclado.c: 82:                 tecla = teclas[l][c];
  3382  1426  0825               	movf	teclado_scan@l,w
  3383  1427  00A0               	movwf	??_teclado_scan
  3384  1428  3002               	movlw	2
  3385  1429                     u2425:
  3386  1429  1003               	clrc
  3387  142A  0DA0               	rlf	??_teclado_scan,f
  3388  142B  3EFF               	addlw	-1
  3389  142C  1D03               	skipz
  3390  142D  2C29               	goto	u2425
  3391  142E  30B4               	movlw	(low (_teclas| 0))& (0+255)
  3392  142F  0720               	addwf	??_teclado_scan,w
  3393  1430  00A1               	movwf	??_teclado_scan+1
  3394  1431  0826               	movf	teclado_scan@c,w
  3395  1432  0721               	addwf	??_teclado_scan+1,w
  3396  1433  00A2               	movwf	??_teclado_scan+2
  3397  1434  0822               	movf	??_teclado_scan+2,w
  3398  1435  0084               	movwf	4
  3399  1436  1383               	bcf	3,7	;select IRP bank1
  3400  1437  0800               	movf	0,w
  3401  1438  00A3               	movwf	??_teclado_scan+3
  3402  1439  0823               	movf	??_teclado_scan+3,w
  3403  143A  00A4               	movwf	teclado_scan@tecla
  3404  143B                     l4035:
  3405                           
  3406                           ;teclado.c: 85:         }
  3407  143B  3001               	movlw	1
  3408  143C  00A0               	movwf	??_teclado_scan
  3409  143D  0820               	movf	??_teclado_scan,w
  3410  143E  07A6               	addwf	teclado_scan@c,f
  3411  143F                     l4037:
  3412  143F  3004               	movlw	4
  3413  1440  0226               	subwf	teclado_scan@c,w
  3414  1441  1C03               	skipc
  3415  1442  2C44               	goto	u2431
  3416  1443  2C45               	goto	u2430
  3417  1444                     u2431:
  3418  1444  2C17               	goto	l4031
  3419  1445                     u2430:
  3420  1445                     l4039:
  3421                           
  3422                           ;teclado.c: 86:     }
  3423  1445  3001               	movlw	1
  3424  1446  00A0               	movwf	??_teclado_scan
  3425  1447  0820               	movf	??_teclado_scan,w
  3426  1448  07A5               	addwf	teclado_scan@l,f
  3427  1449  2C04               	goto	l4019
  3428  144A                     l4043:
  3429                           
  3430                           ;teclado.c: 87:     return( tecla );
  3431  144A  0824               	movf	teclado_scan@tecla,w
  3432  144B                     l436:
  3433  144B  0008               	return
  3434  144C                     __end_of_teclado_scan:
  3435                           
  3436                           	psect	text5
  3437  1B7A                     __ptext5:	
  3438 ;; *************** function _statusT1 *****************
  3439 ;; Defined at:
  3440 ;;		line 38 in file "timer1.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;		None
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  4    0[BANK0 ] unsigned long 
  3447 ;; Registers used:
  3448 ;;		wreg
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3454 ;;      Params:         0       4       0       0       0
  3455 ;;      Locals:         0       0       0       0       0
  3456 ;;      Temps:          0       0       0       0       0
  3457 ;;      Totals:         0       4       0       0       0
  3458 ;;Total ram usage:        4 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    2
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_main
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function _statusT1
  3470  1B7A                     _statusT1:
  3471  1B7A                     l6823:	
  3472                           ;incstack = 0
  3473                           ; Regs used in _statusT1: [wreg]
  3474                           
  3475                           
  3476                           ;timer1.c: 40:     return( t1cont );
  3477  1B7A  1283               	bcf	3,5	;RP0=0, select bank0
  3478  1B7B  1303               	bcf	3,6	;RP1=0, select bank0
  3479  1B7C  084B               	movf	_t1cont+3,w
  3480  1B7D  00A3               	movwf	?_statusT1+3
  3481  1B7E  084A               	movf	_t1cont+2,w
  3482  1B7F  00A2               	movwf	?_statusT1+2
  3483  1B80  0849               	movf	_t1cont+1,w
  3484  1B81  00A1               	movwf	?_statusT1+1
  3485  1B82  0848               	movf	_t1cont,w
  3486  1B83  00A0               	movwf	?_statusT1
  3487  1B84                     l484:
  3488  1B84  0008               	return
  3489  1B85                     __end_of_statusT1:
  3490                           
  3491                           	psect	text6
  3492  0798                     __ptext6:	
  3493 ;; *************** function _set_passo *****************
  3494 ;; Defined at:
  3495 ;;		line 53 in file "atuadores.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;  passo           1    wreg     unsigned char 
  3498 ;;  ptr             1    0[BANK0 ] PTR unsigned char 
  3499 ;;		 -> main@vetorOut(1), 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  passo           1    3[BANK0 ] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      void 
  3504 ;; Registers used:
  3505 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3511 ;;      Params:         0       1       0       0       0
  3512 ;;      Locals:         0       1       0       0       0
  3513 ;;      Temps:          0       2       0       0       0
  3514 ;;      Totals:         0       4       0       0       0
  3515 ;;Total ram usage:        4 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    2
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_main
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _set_passo
  3527  0798                     _set_passo:
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in _set_passo: [wreg-fsr0h+status,2+status,0]
  3531                           ;set_passo@passo stored from wreg
  3532  0798  1283               	bcf	3,5	;RP0=0, select bank0
  3533  0799  1303               	bcf	3,6	;RP1=0, select bank0
  3534  079A  00A3               	movwf	set_passo@passo
  3535  079B                     l6289:
  3536                           
  3537                           ;atuadores.c: 53: void set_passo(char passo, char* ptr);atuadores.c: 54: {;atuadores.c: 
      +                          55:     switch (passo)
  3538  079B  2FD0               	goto	l6309
  3539  079C                     l6291:
  3540  079C  0820               	movf	set_passo@ptr,w
  3541  079D  0084               	movwf	4
  3542  079E  1783               	bsf	3,7	;select IRP bank2
  3543  079F  1400               	bsf	0,0
  3544  07A0  2FF2               	goto	l13
  3545  07A1                     l6293:
  3546  07A1  30FE               	movlw	254
  3547  07A2  00A1               	movwf	??_set_passo
  3548  07A3  0820               	movf	set_passo@ptr,w
  3549  07A4  0084               	movwf	4
  3550  07A5  0821               	movf	??_set_passo,w
  3551  07A6  1783               	bsf	3,7	;select IRP bank2
  3552  07A7  0580               	andwf	0,f
  3553  07A8  2FF2               	goto	l13
  3554  07A9                     l6295:
  3555  07A9  0820               	movf	set_passo@ptr,w
  3556  07AA  0084               	movwf	4
  3557  07AB  1783               	bsf	3,7	;select IRP bank2
  3558  07AC  1480               	bsf	0,1
  3559  07AD  2FF2               	goto	l13
  3560  07AE                     l6297:
  3561  07AE  30FD               	movlw	253
  3562  07AF  00A1               	movwf	??_set_passo
  3563  07B0  0820               	movf	set_passo@ptr,w
  3564  07B1  0084               	movwf	4
  3565  07B2  0821               	movf	??_set_passo,w
  3566  07B3  1783               	bsf	3,7	;select IRP bank2
  3567  07B4  0580               	andwf	0,f
  3568  07B5  2FF2               	goto	l13
  3569  07B6                     l6299:
  3570  07B6  0820               	movf	set_passo@ptr,w
  3571  07B7  0084               	movwf	4
  3572  07B8  1783               	bsf	3,7	;select IRP bank2
  3573  07B9  1500               	bsf	0,2
  3574  07BA  2FF2               	goto	l13
  3575  07BB                     l6301:
  3576  07BB  30FB               	movlw	251
  3577  07BC  00A1               	movwf	??_set_passo
  3578  07BD  0820               	movf	set_passo@ptr,w
  3579  07BE  0084               	movwf	4
  3580  07BF  0821               	movf	??_set_passo,w
  3581  07C0  1783               	bsf	3,7	;select IRP bank2
  3582  07C1  0580               	andwf	0,f
  3583  07C2  2FF2               	goto	l13
  3584  07C3                     l6303:
  3585  07C3  0820               	movf	set_passo@ptr,w
  3586  07C4  0084               	movwf	4
  3587  07C5  1783               	bsf	3,7	;select IRP bank2
  3588  07C6  1580               	bsf	0,3
  3589  07C7  2FF2               	goto	l13
  3590  07C8                     l6305:
  3591  07C8  30F7               	movlw	247
  3592  07C9  00A1               	movwf	??_set_passo
  3593  07CA  0820               	movf	set_passo@ptr,w
  3594  07CB  0084               	movwf	4
  3595  07CC  0821               	movf	??_set_passo,w
  3596  07CD  1783               	bsf	3,7	;select IRP bank2
  3597  07CE  0580               	andwf	0,f
  3598  07CF  2FF2               	goto	l13
  3599  07D0                     l6309:
  3600  07D0  0823               	movf	set_passo@passo,w
  3601  07D1  00A1               	movwf	??_set_passo
  3602  07D2  01A2               	clrf	??_set_passo+1
  3603                           
  3604                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3605                           ; Switch size 1, requested type "simple"
  3606                           ; Number of cases is 1, Range of values is 0 to 0
  3607                           ; switch strategies available:
  3608                           ; Name         Instructions Cycles
  3609                           ; simple_byte            4     3 (average)
  3610                           ; direct_byte           11     8 (fixed)
  3611                           ; jumptable            260     6 (fixed)
  3612                           ;	Chosen strategy is simple_byte
  3613  07D3  0822               	movf	??_set_passo+1,w
  3614  07D4  3A00               	xorlw	0	; case 0
  3615  07D5  1903               	skipnz
  3616  07D6  2FD8               	goto	l8079
  3617  07D7  2FF2               	goto	l13
  3618  07D8                     l8079:
  3619                           
  3620                           ; Switch size 1, requested type "simple"
  3621                           ; Number of cases is 8, Range of values is 65 to 100
  3622                           ; switch strategies available:
  3623                           ; Name         Instructions Cycles
  3624                           ; simple_byte           25    13 (average)
  3625                           ; direct_byte          119    11 (fixed)
  3626                           ; jumptable            263     9 (fixed)
  3627                           ;	Chosen strategy is simple_byte
  3628  07D8  0821               	movf	??_set_passo,w
  3629  07D9  3A41               	xorlw	65	; case 65
  3630  07DA  1903               	skipnz
  3631  07DB  2F9C               	goto	l6291
  3632  07DC  3A03               	xorlw	3	; case 66
  3633  07DD  1903               	skipnz
  3634  07DE  2FA9               	goto	l6295
  3635  07DF  3A01               	xorlw	1	; case 67
  3636  07E0  1903               	skipnz
  3637  07E1  2FB6               	goto	l6299
  3638  07E2  3A07               	xorlw	7	; case 68
  3639  07E3  1903               	skipnz
  3640  07E4  2FC3               	goto	l6303
  3641  07E5  3A25               	xorlw	37	; case 97
  3642  07E6  1903               	skipnz
  3643  07E7  2FA1               	goto	l6293
  3644  07E8  3A03               	xorlw	3	; case 98
  3645  07E9  1903               	skipnz
  3646  07EA  2FAE               	goto	l6297
  3647  07EB  3A01               	xorlw	1	; case 99
  3648  07EC  1903               	skipnz
  3649  07ED  2FBB               	goto	l6301
  3650  07EE  3A07               	xorlw	7	; case 100
  3651  07EF  1903               	skipnz
  3652  07F0  2FC8               	goto	l6305
  3653  07F1  2FF2               	goto	l13
  3654  07F2                     l13:
  3655  07F2  0008               	return
  3656  07F3                     __end_of_set_passo:
  3657                           
  3658                           	psect	text7
  3659  1B85                     __ptext7:	
  3660 ;; *************** function _setT1 *****************
  3661 ;; Defined at:
  3662 ;;		line 31 in file "timer1.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;  c               4   13[BANK0 ] unsigned long 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;		None
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  1    wreg      void 
  3669 ;; Registers used:
  3670 ;;		wreg
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3676 ;;      Params:         0       4       0       0       0
  3677 ;;      Locals:         0       0       0       0       0
  3678 ;;      Temps:          0       0       0       0       0
  3679 ;;      Totals:         0       4       0       0       0
  3680 ;;Total ram usage:        4 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    2
  3683 ;; This function calls:
  3684 ;;		Nothing
  3685 ;; This function is called by:
  3686 ;;		_main
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           
  3691                           ;psect for function _setT1
  3692  1B85                     _setT1:
  3693  1B85                     l6819:	
  3694                           ;incstack = 0
  3695                           ; Regs used in _setT1: [wreg]
  3696                           
  3697                           
  3698                           ;timer1.c: 31: void setT1( unsigned long int c );timer1.c: 32: {;timer1.c: 33:     t1con
      +                          t = c;
  3699  1B85  1283               	bcf	3,5	;RP0=0, select bank0
  3700  1B86  1303               	bcf	3,6	;RP1=0, select bank0
  3701  1B87  0830               	movf	setT1@c+3,w
  3702  1B88  00CB               	movwf	_t1cont+3
  3703  1B89  082F               	movf	setT1@c+2,w
  3704  1B8A  00CA               	movwf	_t1cont+2
  3705  1B8B  082E               	movf	setT1@c+1,w
  3706  1B8C  00C9               	movwf	_t1cont+1
  3707  1B8D  082D               	movf	setT1@c,w
  3708  1B8E  00C8               	movwf	_t1cont
  3709  1B8F                     l6821:
  3710                           
  3711                           ;timer1.c: 34:     T1CONbits.TMR1ON = 1;
  3712  1B8F  1410               	bsf	16,0	;volatile
  3713  1B90                     l481:
  3714  1B90  0008               	return
  3715  1B91                     __end_of_setT1:
  3716                           
  3717                           	psect	text8
  3718  12BC                     __ptext8:	
  3719 ;; *************** function _serialIOscan *****************
  3720 ;; Defined at:
  3721 ;;		line 76 in file "serialIO.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  i               1    9[BANK0 ] unsigned char 
  3726 ;;  j               1    8[BANK0 ] unsigned char 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3736 ;;      Params:         0       0       0       0       0
  3737 ;;      Locals:         0       2       0       0       0
  3738 ;;      Temps:          0       4       0       0       0
  3739 ;;      Totals:         0       6       0       0       0
  3740 ;;Total ram usage:        6 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    3
  3743 ;; This function calls:
  3744 ;;		_serialIObyteShift
  3745 ;;		_serialIOload
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           
  3752                           ;psect for function _serialIOscan
  3753  12BC                     _serialIOscan:
  3754  12BC                     l6741:	
  3755                           ;incstack = 0
  3756                           ; Regs used in _serialIOscan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3757                           
  3758                           
  3759                           ;serialIO.c: 78:     unsigned char i,j;;serialIO.c: 79:     j = lenSerialIO - 1;
  3760  12BC  1283               	bcf	3,5	;RP0=0, select bank0
  3761  12BD  1303               	bcf	3,6	;RP1=0, select bank0
  3762  12BE  0851               	movf	_lenSerialIO,w
  3763  12BF  3EFF               	addlw	255
  3764  12C0  00A4               	movwf	??_serialIOscan
  3765  12C1  0824               	movf	??_serialIOscan,w
  3766  12C2  00A8               	movwf	serialIOscan@j
  3767  12C3                     l6743:
  3768                           
  3769                           ;serialIO.c: 80:     serialIOload();
  3770  12C3  160A  158A  231D  160A  118A  	fcall	_serialIOload
  3771  12C8                     l6745:
  3772                           
  3773                           ;serialIO.c: 81:     for( i=0; i<lenSerialIO; i++ )
  3774  12C8  1283               	bcf	3,5	;RP0=0, select bank0
  3775  12C9  1303               	bcf	3,6	;RP1=0, select bank0
  3776  12CA  01A9               	clrf	serialIOscan@i
  3777  12CB  2AEB               	goto	l6751
  3778  12CC                     l6747:
  3779                           
  3780                           ;serialIO.c: 82:     {;serialIO.c: 83:         ptrSerialIn[i] = serialIObyteShift( ptrSe
      +                          rialOut[j-i]);
  3781  12CC  0852               	movf	_ptrSerialOut,w
  3782  12CD  00A4               	movwf	??_serialIOscan
  3783  12CE  0829               	movf	serialIOscan@i,w
  3784  12CF  02A4               	subwf	??_serialIOscan,f
  3785  12D0  0828               	movf	serialIOscan@j,w
  3786  12D1  0724               	addwf	??_serialIOscan,w
  3787  12D2  00A5               	movwf	??_serialIOscan+1
  3788  12D3  0825               	movf	??_serialIOscan+1,w
  3789  12D4  0084               	movwf	4
  3790  12D5  1783               	bsf	3,7	;select IRP bank2
  3791  12D6  0800               	movf	0,w
  3792  12D7  160A  158A  2588  160A  118A  	fcall	_serialIObyteShift
  3793  12DC  1283               	bcf	3,5	;RP0=0, select bank0
  3794  12DD  1303               	bcf	3,6	;RP1=0, select bank0
  3795  12DE  00A6               	movwf	??_serialIOscan+2
  3796  12DF  0829               	movf	serialIOscan@i,w
  3797  12E0  0753               	addwf	_ptrSerialIn,w
  3798  12E1  00A7               	movwf	??_serialIOscan+3
  3799  12E2  0827               	movf	??_serialIOscan+3,w
  3800  12E3  0084               	movwf	4
  3801  12E4  0826               	movf	??_serialIOscan+2,w
  3802  12E5  1783               	bsf	3,7	;select IRP bank2
  3803  12E6  0080               	movwf	0
  3804  12E7                     l6749:
  3805                           
  3806                           ;serialIO.c: 84:     }
  3807  12E7  3001               	movlw	1
  3808  12E8  00A4               	movwf	??_serialIOscan
  3809  12E9  0824               	movf	??_serialIOscan,w
  3810  12EA  07A9               	addwf	serialIOscan@i,f
  3811  12EB                     l6751:
  3812  12EB  0851               	movf	_lenSerialIO,w
  3813  12EC  0229               	subwf	serialIOscan@i,w
  3814  12ED  1C03               	skipc
  3815  12EE  2AF0               	goto	u4691
  3816  12EF  2AF1               	goto	u4690
  3817  12F0                     u4691:
  3818  12F0  2ACC               	goto	l6747
  3819  12F1                     u4690:
  3820  12F1                     l6753:
  3821                           
  3822                           ;serialIO.c: 85:     serialIOload();
  3823  12F1  160A  158A  231D  160A  118A  	fcall	_serialIOload
  3824  12F6                     l416:
  3825  12F6  0008               	return
  3826  12F7                     __end_of_serialIOscan:
  3827                           
  3828                           	psect	text9
  3829  1B1D                     __ptext9:	
  3830 ;; *************** function _serialIOload *****************
  3831 ;; Defined at:
  3832 ;;		line 45 in file "serialIO.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;		None
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;		None
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  1    wreg      void 
  3839 ;; Registers used:
  3840 ;;		None
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3846 ;;      Params:         0       0       0       0       0
  3847 ;;      Locals:         0       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0
  3849 ;;      Totals:         0       0       0       0       0
  3850 ;;Total ram usage:        0 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    2
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		_serialIOscan
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860                           
  3861                           ;psect for function _serialIOload
  3862  1B1D                     _serialIOload:
  3863  1B1D                     l6227:	
  3864                           ;incstack = 0
  3865                           ; Regs used in _serialIOload: []
  3866                           
  3867                           
  3868                           ;serialIO.c: 47:     SERIALIO.SHLD = 0;
  3869  1B1D  1283               	bcf	3,5	;RP0=0, select bank0
  3870  1B1E  1303               	bcf	3,6	;RP1=0, select bank0
  3871  1B1F  1185               	bcf	5,3	;volatile
  3872                           
  3873                           ;serialIO.c: 48:     SERIALIO.SHLD = 1;
  3874  1B20  1585               	bsf	5,3	;volatile
  3875  1B21                     l401:
  3876  1B21  0008               	return
  3877  1B22                     __end_of_serialIOload:
  3878                           
  3879                           	psect	text10
  3880  1D88                     __ptext10:	
  3881 ;; *************** function _serialIObyteShift *****************
  3882 ;; Defined at:
  3883 ;;		line 50 in file "serialIO.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  dataIn          1    wreg     unsigned char 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  dataIn          1    1[BANK0 ] unsigned char 
  3888 ;;  dataBit         1    3[BANK0 ] unsigned char 
  3889 ;;  dataOut         1    2[BANK0 ] unsigned char 
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      unsigned char 
  3892 ;; Registers used:
  3893 ;;		wreg, status,2, status,0
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3899 ;;      Params:         0       0       0       0       0
  3900 ;;      Locals:         0       3       0       0       0
  3901 ;;      Temps:          0       1       0       0       0
  3902 ;;      Totals:         0       4       0       0       0
  3903 ;;Total ram usage:        4 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    2
  3906 ;; This function calls:
  3907 ;;		Nothing
  3908 ;; This function is called by:
  3909 ;;		_serialIOscan
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           
  3914                           ;psect for function _serialIObyteShift
  3915  1D88                     _serialIObyteShift:
  3916                           
  3917                           ;incstack = 0
  3918                           ; Regs used in _serialIObyteShift: [wreg+status,2+status,0]
  3919                           ;serialIObyteShift@dataIn stored from wreg
  3920  1D88  1283               	bcf	3,5	;RP0=0, select bank0
  3921  1D89  1303               	bcf	3,6	;RP1=0, select bank0
  3922  1D8A  00A1               	movwf	serialIObyteShift@dataIn
  3923  1D8B                     l6229:
  3924                           
  3925                           ;serialIO.c: 50: unsigned char serialIObyteShift( unsigned char dataIn );serialIO.c: 51:
      +                           {;serialIO.c: 52:     unsigned char dataBit;;serialIO.c: 53:     unsigned char dataOut;
      +                          ;serialIO.c: 55:     dataBit = 0x80;
  3926  1D8B  3080               	movlw	128
  3927  1D8C  00A0               	movwf	??_serialIObyteShift
  3928  1D8D  0820               	movf	??_serialIObyteShift,w
  3929  1D8E  00A3               	movwf	serialIObyteShift@dataBit
  3930  1D8F                     l6231:
  3931                           
  3932                           ;serialIO.c: 56:     dataOut = 0;
  3933  1D8F  01A2               	clrf	serialIObyteShift@dataOut
  3934                           
  3935                           ;serialIO.c: 58:     while( dataBit )
  3936  1D90  2DA6               	goto	l6243
  3937  1D91                     l405:
  3938                           
  3939                           ;serialIO.c: 59:     {;serialIO.c: 60:         SERIALIO.CLK = 0;
  3940  1D91  1105               	bcf	5,2	;volatile
  3941  1D92                     l6233:
  3942                           
  3943                           ;serialIO.c: 61:         if( dataIn & dataBit )
  3944  1D92  0821               	movf	serialIObyteShift@dataIn,w
  3945  1D93  0523               	andwf	serialIObyteShift@dataBit,w
  3946  1D94  1903               	btfsc	3,2
  3947  1D95  2D97               	goto	u4161
  3948  1D96  2D98               	goto	u4160
  3949  1D97                     u4161:
  3950  1D97  2D9A               	goto	l406
  3951  1D98                     u4160:
  3952  1D98                     l6235:
  3953                           
  3954                           ;serialIO.c: 62:             SERIALIO.OUT = 1;
  3955  1D98  1405               	bsf	5,0	;volatile
  3956  1D99  2D9B               	goto	l407
  3957  1D9A                     l406:	
  3958                           ;serialIO.c: 63:         else
  3959                           
  3960                           
  3961                           ;serialIO.c: 64:             SERIALIO.OUT = 0;
  3962  1D9A  1005               	bcf	5,0	;volatile
  3963  1D9B                     l407:
  3964                           
  3965                           ;serialIO.c: 66:         if( SERIALIO.IN )
  3966  1D9B  1C85               	btfss	5,1	;volatile
  3967  1D9C  2D9E               	goto	u4171
  3968  1D9D  2D9F               	goto	u4170
  3969  1D9E                     u4171:
  3970  1D9E  2DA3               	goto	l6239
  3971  1D9F                     u4170:
  3972  1D9F                     l6237:
  3973                           
  3974                           ;serialIO.c: 67:             dataOut |= dataBit;
  3975  1D9F  0823               	movf	serialIObyteShift@dataBit,w
  3976  1DA0  00A0               	movwf	??_serialIObyteShift
  3977  1DA1  0820               	movf	??_serialIObyteShift,w
  3978  1DA2  04A2               	iorwf	serialIObyteShift@dataOut,f
  3979  1DA3                     l6239:
  3980                           
  3981                           ;serialIO.c: 68:         SERIALIO.CLK = 1;
  3982  1DA3  1505               	bsf	5,2	;volatile
  3983  1DA4                     l6241:
  3984                           
  3985                           ;serialIO.c: 69:         dataBit >>= 1;
  3986  1DA4  1003               	clrc
  3987  1DA5  0CA3               	rrf	serialIObyteShift@dataBit,f
  3988  1DA6                     l6243:
  3989                           
  3990                           ;serialIO.c: 58:     while( dataBit )
  3991  1DA6  0823               	movf	serialIObyteShift@dataBit,w
  3992  1DA7  1D03               	btfss	3,2
  3993  1DA8  2DAA               	goto	u4181
  3994  1DA9  2DAB               	goto	u4180
  3995  1DAA                     u4181:
  3996  1DAA  2D91               	goto	l405
  3997  1DAB                     u4180:
  3998  1DAB                     l409:
  3999                           
  4000                           ;serialIO.c: 71:     SERIALIO.CLK = 0;
  4001  1DAB  1105               	bcf	5,2	;volatile
  4002  1DAC                     l6245:
  4003                           
  4004                           ;serialIO.c: 72:     return( dataOut );
  4005  1DAC  0822               	movf	serialIObyteShift@dataOut,w
  4006  1DAD                     l410:
  4007  1DAD  0008               	return
  4008  1DAE                     __end_of_serialIObyteShift:
  4009                           
  4010                           	psect	text11
  4011  1FCD                     __ptext11:	
  4012 ;; *************** function _salvar_receita *****************
  4013 ;; Defined at:
  4014 ;;		line 46 in file "eeprom.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;  adrs            1    7[BANK0 ] unsigned char 
  4017 ;;  data            1    8[BANK0 ] PTR unsigned char 
  4018 ;;		 -> fila(18), 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  i               1   13[BANK0 ] unsigned char 
  4021 ;;  aux             2   11[BANK0 ] int 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      void 
  4024 ;; Registers used:
  4025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4031 ;;      Params:         0       2       0       0       0
  4032 ;;      Locals:         0       3       0       0       0
  4033 ;;      Temps:          0       2       0       0       0
  4034 ;;      Totals:         0       7       0       0       0
  4035 ;;Total ram usage:        7 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    3
  4038 ;; This function calls:
  4039 ;;		_EEPROM_write
  4040 ;;		_end_receita
  4041 ;; This function is called by:
  4042 ;;		_main
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           
  4047                           ;psect for function _salvar_receita
  4048  1FCD                     _salvar_receita:
  4049  1FCD                     l6437:	
  4050                           ;incstack = 0
  4051                           ; Regs used in _salvar_receita: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4052                           
  4053                           
  4054                           ;eeprom.c: 46: void salvar_receita (char adrs, unsigned char *data );eeprom.c: 47: {;eep
      +                          rom.c: 48:     int aux;;eeprom.c: 49:     aux = end_receita(adrs);
  4055  1FCD  1283               	bcf	3,5	;RP0=0, select bank0
  4056  1FCE  1303               	bcf	3,6	;RP1=0, select bank0
  4057  1FCF  0827               	movf	salvar_receita@adrs,w
  4058  1FD0  00A9               	movwf	??_salvar_receita
  4059  1FD1  01AA               	clrf	??_salvar_receita+1
  4060  1FD2  0829               	movf	??_salvar_receita,w
  4061  1FD3  00A0               	movwf	end_receita@x
  4062  1FD4  082A               	movf	??_salvar_receita+1,w
  4063  1FD5  00A1               	movwf	end_receita@x+1
  4064  1FD6  160A  158A  23C9  160A  158A  	fcall	_end_receita
  4065  1FDB  1283               	bcf	3,5	;RP0=0, select bank0
  4066  1FDC  1303               	bcf	3,6	;RP1=0, select bank0
  4067  1FDD  0821               	movf	?_end_receita+1,w
  4068  1FDE  00AC               	movwf	salvar_receita@aux+1
  4069  1FDF  0820               	movf	?_end_receita,w
  4070  1FE0  00AB               	movwf	salvar_receita@aux
  4071  1FE1                     l6439:
  4072                           
  4073                           ;eeprom.c: 50:     for( char i=0 ; i<16; i++)
  4074  1FE1  01AD               	clrf	salvar_receita@i
  4075  1FE2                     l6445:
  4076                           
  4077                           ;eeprom.c: 51:          EEPROM_write( (aux+i), *(data+i) );
  4078  1FE2  082D               	movf	salvar_receita@i,w
  4079  1FE3  0728               	addwf	salvar_receita@data,w
  4080  1FE4  00A9               	movwf	??_salvar_receita
  4081  1FE5  0829               	movf	??_salvar_receita,w
  4082  1FE6  0084               	movwf	4
  4083  1FE7  1383               	bcf	3,7	;select IRP bank0
  4084  1FE8  0800               	movf	0,w
  4085  1FE9  00AA               	movwf	??_salvar_receita+1
  4086  1FEA  082A               	movf	??_salvar_receita+1,w
  4087  1FEB  00A0               	movwf	EEPROM_write@data
  4088  1FEC  082B               	movf	salvar_receita@aux,w
  4089  1FED  072D               	addwf	salvar_receita@i,w
  4090  1FEE  160A  158A  2411  160A  158A  	fcall	_EEPROM_write
  4091  1FF3                     l6447:
  4092  1FF3  3001               	movlw	1
  4093  1FF4  1283               	bcf	3,5	;RP0=0, select bank0
  4094  1FF5  1303               	bcf	3,6	;RP1=0, select bank0
  4095  1FF6  00A9               	movwf	??_salvar_receita
  4096  1FF7  0829               	movf	??_salvar_receita,w
  4097  1FF8  07AD               	addwf	salvar_receita@i,f
  4098  1FF9                     l6449:
  4099  1FF9  3010               	movlw	16
  4100  1FFA  022D               	subwf	salvar_receita@i,w
  4101  1FFB  1C03               	skipc
  4102  1FFC  2FFE               	goto	u4331
  4103  1FFD  2FFF               	goto	u4330
  4104  1FFE                     u4331:
  4105  1FFE  2FE2               	goto	l6445
  4106  1FFF                     u4330:
  4107  1FFF                     l146:
  4108  1FFF  0008               	return
  4109  2000                     __end_of_salvar_receita:
  4110                           
  4111                           	psect	text12
  4112  1C6C                     __ptext12:	
  4113 ;; *************** function _salvar_dado *****************
  4114 ;; Defined at:
  4115 ;;		line 63 in file "eeprom.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;  adrs            1    wreg     unsigned char 
  4118 ;;  col             1    7[BANK0 ] unsigned char 
  4119 ;;  data            1    8[BANK0 ] unsigned char 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  adrs            1   11[BANK0 ] unsigned char 
  4122 ;;  aux             2   12[BANK0 ] int 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg, status,2, status,0, pclath, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4132 ;;      Params:         0       2       0       0       0
  4133 ;;      Locals:         0       3       0       0       0
  4134 ;;      Temps:          0       2       0       0       0
  4135 ;;      Totals:         0       7       0       0       0
  4136 ;;Total ram usage:        7 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    3
  4139 ;; This function calls:
  4140 ;;		_EEPROM_write
  4141 ;;		_end_receita
  4142 ;; This function is called by:
  4143 ;;		_main
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           
  4148                           ;psect for function _salvar_dado
  4149  1C6C                     _salvar_dado:
  4150                           
  4151                           ;incstack = 0
  4152                           ; Regs used in _salvar_dado: [wreg+status,2+status,0+pclath+cstack]
  4153                           ;salvar_dado@adrs stored from wreg
  4154  1C6C  1283               	bcf	3,5	;RP0=0, select bank0
  4155  1C6D  1303               	bcf	3,6	;RP1=0, select bank0
  4156  1C6E  00AB               	movwf	salvar_dado@adrs
  4157  1C6F                     l6465:
  4158                           
  4159                           ;eeprom.c: 63: void salvar_dado (char adrs, char col, unsigned char data);eeprom.c: 64: 
      +                          {;eeprom.c: 65:     int aux;;eeprom.c: 66:     aux = end_receita(adrs);
  4160  1C6F  082B               	movf	salvar_dado@adrs,w
  4161  1C70  00A9               	movwf	??_salvar_dado
  4162  1C71  01AA               	clrf	??_salvar_dado+1
  4163  1C72  0829               	movf	??_salvar_dado,w
  4164  1C73  00A0               	movwf	end_receita@x
  4165  1C74  082A               	movf	??_salvar_dado+1,w
  4166  1C75  00A1               	movwf	end_receita@x+1
  4167  1C76  160A  158A  23C9  160A  158A  	fcall	_end_receita
  4168  1C7B  1283               	bcf	3,5	;RP0=0, select bank0
  4169  1C7C  1303               	bcf	3,6	;RP1=0, select bank0
  4170  1C7D  0821               	movf	?_end_receita+1,w
  4171  1C7E  00AD               	movwf	salvar_dado@aux+1
  4172  1C7F  0820               	movf	?_end_receita,w
  4173  1C80  00AC               	movwf	salvar_dado@aux
  4174  1C81                     l6467:
  4175                           
  4176                           ;eeprom.c: 67:     EEPROM_write((aux+col), data);
  4177  1C81  0828               	movf	salvar_dado@data,w
  4178  1C82  00A9               	movwf	??_salvar_dado
  4179  1C83  0829               	movf	??_salvar_dado,w
  4180  1C84  00A0               	movwf	EEPROM_write@data
  4181  1C85  082C               	movf	salvar_dado@aux,w
  4182  1C86  0727               	addwf	salvar_dado@col,w
  4183  1C87  160A  158A  2411  160A  158A  	fcall	_EEPROM_write
  4184  1C8C                     l154:
  4185  1C8C  0008               	return
  4186  1C8D                     __end_of_salvar_dado:
  4187                           
  4188                           	psect	text13
  4189  14F3                     __ptext13:	
  4190 ;; *************** function _salva_atuadores_init *****************
  4191 ;; Defined at:
  4192 ;;		line 115 in file "fifo.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  condi_init      4    4[BANK0 ] unsigned char [4]
  4197 ;;  mask            1   10[BANK0 ] unsigned char 
  4198 ;;  dado            1    9[BANK0 ] unsigned char 
  4199 ;;  pt              1    8[BANK0 ] PTR unsigned char 
  4200 ;;		 -> salva_atuadores_init@condi_init(4), 
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  1    wreg      unsigned char 
  4203 ;; Registers used:
  4204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4210 ;;      Params:         0       0       0       0       0
  4211 ;;      Locals:         0       7       0       0       0
  4212 ;;      Temps:          0       1       0       0       0
  4213 ;;      Totals:         0       8       0       0       0
  4214 ;;Total ram usage:        8 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    3
  4217 ;; This function calls:
  4218 ;;		_ler_atuador
  4219 ;; This function is called by:
  4220 ;;		_main
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function _salva_atuadores_init
  4226  14F3                     _salva_atuadores_init:
  4227  14F3                     l6507:	
  4228                           ;incstack = 0
  4229                           ; Regs used in _salva_atuadores_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4230                           
  4231                           
  4232                           ;fifo.c: 117:     char condi_init[4] = {ler_atuador('A'), ler_atuador('B'), ler_atuador(
      +                          'C'), ler_atuador('D')};
  4233  14F3  3000               	movlw	0
  4234  14F4  1283               	bcf	3,5	;RP0=0, select bank0
  4235  14F5  1303               	bcf	3,6	;RP1=0, select bank0
  4236  14F6  00A7               	movwf	salva_atuadores_init@condi_init+3
  4237  14F7  3000               	movlw	0
  4238  14F8  00A6               	movwf	salva_atuadores_init@condi_init+2
  4239  14F9  3000               	movlw	0
  4240  14FA  00A5               	movwf	salva_atuadores_init@condi_init+1
  4241  14FB  3000               	movlw	0
  4242  14FC  00A4               	movwf	salva_atuadores_init@condi_init
  4243  14FD                     l6509:
  4244  14FD  3041               	movlw	65
  4245  14FE  160A  158A  26AC  160A  118A  	fcall	_ler_atuador
  4246  1503  1283               	bcf	3,5	;RP0=0, select bank0
  4247  1504  1303               	bcf	3,6	;RP1=0, select bank0
  4248  1505  00A3               	movwf	??_salva_atuadores_init
  4249  1506  0823               	movf	??_salva_atuadores_init,w
  4250  1507  00A4               	movwf	salva_atuadores_init@condi_init
  4251  1508                     l6511:
  4252  1508  3042               	movlw	66
  4253  1509  160A  158A  26AC  160A  118A  	fcall	_ler_atuador
  4254  150E  1283               	bcf	3,5	;RP0=0, select bank0
  4255  150F  1303               	bcf	3,6	;RP1=0, select bank0
  4256  1510  00A3               	movwf	??_salva_atuadores_init
  4257  1511  0823               	movf	??_salva_atuadores_init,w
  4258  1512  00A5               	movwf	salva_atuadores_init@condi_init+1
  4259  1513                     l6513:
  4260  1513  3043               	movlw	67
  4261  1514  160A  158A  26AC  160A  118A  	fcall	_ler_atuador
  4262  1519  1283               	bcf	3,5	;RP0=0, select bank0
  4263  151A  1303               	bcf	3,6	;RP1=0, select bank0
  4264  151B  00A3               	movwf	??_salva_atuadores_init
  4265  151C  0823               	movf	??_salva_atuadores_init,w
  4266  151D  00A6               	movwf	salva_atuadores_init@condi_init+2
  4267  151E                     l6515:
  4268  151E  3044               	movlw	68
  4269  151F  160A  158A  26AC  160A  118A  	fcall	_ler_atuador
  4270  1524  1283               	bcf	3,5	;RP0=0, select bank0
  4271  1525  1303               	bcf	3,6	;RP1=0, select bank0
  4272  1526  00A3               	movwf	??_salva_atuadores_init
  4273  1527  0823               	movf	??_salva_atuadores_init,w
  4274  1528  00A7               	movwf	salva_atuadores_init@condi_init+3
  4275                           
  4276                           ;fifo.c: 119:     char *pt = condi_init;
  4277  1529  3024               	movlw	(low (salva_atuadores_init@condi_init| 0))& (0+255)
  4278  152A  00A3               	movwf	??_salva_atuadores_init
  4279  152B  0823               	movf	??_salva_atuadores_init,w
  4280  152C  00A8               	movwf	salva_atuadores_init@pt
  4281  152D                     l6517:
  4282                           
  4283                           ;fifo.c: 120:     char dado = 0;
  4284  152D  01A9               	clrf	salva_atuadores_init@dado
  4285  152E                     l6519:
  4286                           
  4287                           ;fifo.c: 121:     char mask = 0x08;
  4288  152E  3008               	movlw	8
  4289  152F  00A3               	movwf	??_salva_atuadores_init
  4290  1530  0823               	movf	??_salva_atuadores_init,w
  4291  1531  00AA               	movwf	salva_atuadores_init@mask
  4292                           
  4293                           ;fifo.c: 123:     while( mask )
  4294  1532  2D46               	goto	l6527
  4295  1533                     l6521:
  4296                           
  4297                           ;fifo.c: 124:     {;fifo.c: 125:         if( *pt )
  4298  1533  0828               	movf	salva_atuadores_init@pt,w
  4299  1534  0084               	movwf	4
  4300  1535  1383               	bcf	3,7	;select IRP bank0
  4301  1536  0800               	movf	0,w
  4302  1537  1903               	btfsc	3,2
  4303  1538  2D3A               	goto	u4381
  4304  1539  2D3B               	goto	u4380
  4305  153A                     u4381:
  4306  153A  2D40               	goto	l252
  4307  153B                     u4380:
  4308  153B                     l6523:
  4309                           
  4310                           ;fifo.c: 126:         {;fifo.c: 127:             dado = dado | mask;
  4311  153B  0829               	movf	salva_atuadores_init@dado,w
  4312  153C  042A               	iorwf	salva_atuadores_init@mask,w
  4313  153D  00A3               	movwf	??_salva_atuadores_init
  4314  153E  0823               	movf	??_salva_atuadores_init,w
  4315  153F  00A9               	movwf	salva_atuadores_init@dado
  4316  1540                     l252:	
  4317                           ;fifo.c: 128:         }
  4318                           
  4319                           
  4320                           ;fifo.c: 129:         pt++;
  4321  1540  3001               	movlw	1
  4322  1541  00A3               	movwf	??_salva_atuadores_init
  4323  1542  0823               	movf	??_salva_atuadores_init,w
  4324  1543  07A8               	addwf	salva_atuadores_init@pt,f
  4325  1544                     l6525:
  4326                           
  4327                           ;fifo.c: 130:         mask >>= 1;
  4328  1544  1003               	clrc
  4329  1545  0CAA               	rrf	salva_atuadores_init@mask,f
  4330  1546                     l6527:
  4331                           
  4332                           ;fifo.c: 123:     while( mask )
  4333  1546  082A               	movf	salva_atuadores_init@mask,w
  4334  1547  1D03               	btfss	3,2
  4335  1548  2D4A               	goto	u4391
  4336  1549  2D4B               	goto	u4390
  4337  154A                     u4391:
  4338  154A  2D33               	goto	l6521
  4339  154B                     u4390:
  4340  154B                     l6529:
  4341                           
  4342                           ;fifo.c: 132:     return(dado);
  4343  154B  0829               	movf	salva_atuadores_init@dado,w
  4344  154C                     l254:
  4345  154C  0008               	return
  4346  154D                     __end_of_salva_atuadores_init:
  4347                           
  4348                           	psect	text14
  4349  1EAC                     __ptext14:	
  4350 ;; *************** function _ler_atuador *****************
  4351 ;; Defined at:
  4352 ;;		line 78 in file "fifo.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  tecla           1    wreg     unsigned char 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  tecla           1    2[BANK0 ] unsigned char 
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      unsigned char 
  4359 ;; Registers used:
  4360 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4366 ;;      Params:         0       0       0       0       0
  4367 ;;      Locals:         0       1       0       0       0
  4368 ;;      Temps:          0       2       0       0       0
  4369 ;;      Totals:         0       3       0       0       0
  4370 ;;Total ram usage:        3 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    2
  4373 ;; This function calls:
  4374 ;;		Nothing
  4375 ;; This function is called by:
  4376 ;;		_salva_atuadores_init
  4377 ;;		_main
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           
  4382                           ;psect for function _ler_atuador
  4383  1EAC                     _ler_atuador:
  4384                           
  4385                           ;incstack = 0
  4386                           ; Regs used in _ler_atuador: [wreg-fsr0h+status,2+status,0]
  4387                           ;ler_atuador@tecla stored from wreg
  4388  1EAC  1283               	bcf	3,5	;RP0=0, select bank0
  4389  1EAD  1303               	bcf	3,6	;RP1=0, select bank0
  4390  1EAE  00A2               	movwf	ler_atuador@tecla
  4391  1EAF                     l6133:
  4392                           
  4393                           ;fifo.c: 78: char ler_atuador(char tecla);fifo.c: 79: {;fifo.c: 80:     switch(tecla)
  4394  1EAF  2EC3               	goto	l6167
  4395  1EB0                     l6135:
  4396  1EB0  087A               	movf	_atuador,w
  4397  1EB1  3901               	andlw	1
  4398  1EB2  2ED9               	goto	l228
  4399  1EB3                     l6141:
  4400  1EB3  0C7A               	rrf	_atuador,w
  4401  1EB4  3901               	andlw	1
  4402  1EB5  2ED9               	goto	l228
  4403  1EB6                     l6147:
  4404  1EB6  0C7A               	rrf	_atuador,w
  4405  1EB7  00A0               	movwf	??_ler_atuador
  4406  1EB8  0C20               	rrf	??_ler_atuador,w
  4407  1EB9  3901               	andlw	1
  4408  1EBA  2ED9               	goto	l228
  4409  1EBB                     l6153:
  4410  1EBB  0C7A               	rrf	_atuador,w
  4411  1EBC  00A0               	movwf	??_ler_atuador
  4412  1EBD  0CA0               	rrf	??_ler_atuador,f
  4413  1EBE  0C20               	rrf	??_ler_atuador,w
  4414  1EBF  3901               	andlw	1
  4415  1EC0  2ED9               	goto	l228
  4416  1EC1                     l6159:
  4417  1EC1  3000               	movlw	0
  4418  1EC2  2ED9               	goto	l228
  4419  1EC3                     l6167:
  4420  1EC3  0822               	movf	ler_atuador@tecla,w
  4421  1EC4  00A0               	movwf	??_ler_atuador
  4422  1EC5  01A1               	clrf	??_ler_atuador+1
  4423                           
  4424                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4425                           ; Switch size 1, requested type "simple"
  4426                           ; Number of cases is 1, Range of values is 0 to 0
  4427                           ; switch strategies available:
  4428                           ; Name         Instructions Cycles
  4429                           ; simple_byte            4     3 (average)
  4430                           ; direct_byte           11     8 (fixed)
  4431                           ; jumptable            260     6 (fixed)
  4432                           ;	Chosen strategy is simple_byte
  4433  1EC6  0821               	movf	??_ler_atuador+1,w
  4434  1EC7  3A00               	xorlw	0	; case 0
  4435  1EC8  1903               	skipnz
  4436  1EC9  2ECB               	goto	l8081
  4437  1ECA  2EC1               	goto	l6159
  4438  1ECB                     l8081:
  4439                           
  4440                           ; Switch size 1, requested type "simple"
  4441                           ; Number of cases is 4, Range of values is 65 to 68
  4442                           ; switch strategies available:
  4443                           ; Name         Instructions Cycles
  4444                           ; simple_byte           13     7 (average)
  4445                           ; direct_byte           23    11 (fixed)
  4446                           ; jumptable            263     9 (fixed)
  4447                           ;	Chosen strategy is simple_byte
  4448  1ECB  0820               	movf	??_ler_atuador,w
  4449  1ECC  3A41               	xorlw	65	; case 65
  4450  1ECD  1903               	skipnz
  4451  1ECE  2EB0               	goto	l6135
  4452  1ECF  3A03               	xorlw	3	; case 66
  4453  1ED0  1903               	skipnz
  4454  1ED1  2EB3               	goto	l6141
  4455  1ED2  3A01               	xorlw	1	; case 67
  4456  1ED3  1903               	skipnz
  4457  1ED4  2EB6               	goto	l6147
  4458  1ED5  3A07               	xorlw	7	; case 68
  4459  1ED6  1903               	skipnz
  4460  1ED7  2EBB               	goto	l6153
  4461  1ED8  2EC1               	goto	l6159
  4462  1ED9                     l228:
  4463  1ED9  0008               	return
  4464  1EDA                     __end_of_ler_atuador:
  4465                           
  4466                           	psect	text15
  4467  1B37                     __ptext15:	
  4468 ;; *************** function _resetIndicePassos *****************
  4469 ;; Defined at:
  4470 ;;		line 34 in file "fifo.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;		None
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;		None
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4484 ;;      Params:         0       0       0       0       0
  4485 ;;      Locals:         0       0       0       0       0
  4486 ;;      Temps:          0       1       0       0       0
  4487 ;;      Totals:         0       1       0       0       0
  4488 ;;Total ram usage:        1 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    2
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_main
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           
  4499                           ;psect for function _resetIndicePassos
  4500  1B37                     _resetIndicePassos:
  4501  1B37                     l6491:	
  4502                           ;incstack = 0
  4503                           ; Regs used in _resetIndicePassos: [wreg]
  4504                           
  4505                           
  4506                           ;fifo.c: 36:     indice_passos = 2;
  4507  1B37  3002               	movlw	2
  4508  1B38  1283               	bcf	3,5	;RP0=0, select bank0
  4509  1B39  1303               	bcf	3,6	;RP1=0, select bank0
  4510  1B3A  00A0               	movwf	??_resetIndicePassos
  4511  1B3B  0820               	movf	??_resetIndicePassos,w
  4512  1B3C  00FB               	movwf	_indice_passos
  4513  1B3D                     l209:
  4514  1B3D  0008               	return
  4515  1B3E                     __end_of_resetIndicePassos:
  4516                           
  4517                           	psect	text16
  4518  1B11                     __ptext16:	
  4519 ;; *************** function _resetContCiclos *****************
  4520 ;; Defined at:
  4521 ;;		line 52 in file "fifo.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;		None
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;		None
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		status,2
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4535 ;;      Params:         0       0       0       0       0
  4536 ;;      Locals:         0       0       0       0       0
  4537 ;;      Temps:          0       0       0       0       0
  4538 ;;      Totals:         0       0       0       0       0
  4539 ;;Total ram usage:        0 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    2
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_main
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           
  4550                           ;psect for function _resetContCiclos
  4551  1B11                     _resetContCiclos:
  4552  1B11                     l6501:	
  4553                           ;incstack = 0
  4554                           ; Regs used in _resetContCiclos: [status,2]
  4555                           
  4556                           
  4557                           ;fifo.c: 54:     cont_ciclos = 0;
  4558  1B11  01F6               	clrf	_cont_ciclos
  4559  1B12  01F7               	clrf	_cont_ciclos+1
  4560  1B13                     l218:
  4561  1B13  0008               	return
  4562  1B14                     __end_of_resetContCiclos:
  4563                           
  4564                           	psect	text17
  4565  1690                     __ptext17:	
  4566 ;; *************** function _printExec *****************
  4567 ;; Defined at:
  4568 ;;		line 410 in file "fifo.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  col             1    wreg     unsigned char 
  4571 ;;  ind             1   25[BANK0 ] unsigned char 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;  col             1   34[BANK0 ] unsigned char 
  4574 ;;  passo           1   35[BANK0 ] unsigned char 
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  1    wreg      void 
  4577 ;; Registers used:
  4578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4584 ;;      Params:         0       1       0       0       0
  4585 ;;      Locals:         0       4       0       0       0
  4586 ;;      Temps:          0       6       0       0       0
  4587 ;;      Totals:         0      11       0       0       0
  4588 ;;Total ram usage:       11 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    5
  4591 ;; This function calls:
  4592 ;;		_dignum_tam
  4593 ;;		_dispLCD_dataReg
  4594 ;;		_dispLCD_lincol
  4595 ;;		_dispLCD_num
  4596 ;;		_posAtual
  4597 ;; This function is called by:
  4598 ;;		_main
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           
  4603                           ;psect for function _printExec
  4604  1690                     _printExec:
  4605                           
  4606                           ;incstack = 0
  4607                           ; Regs used in _printExec: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4608                           ;printExec@col stored from wreg
  4609  1690  1283               	bcf	3,5	;RP0=0, select bank0
  4610  1691  1303               	bcf	3,6	;RP1=0, select bank0
  4611  1692  00C2               	movwf	printExec@col
  4612  1693                     l6711:
  4613                           
  4614                           ;fifo.c: 410: void printExec (char col, char ind);fifo.c: 411: {;fifo.c: 412:     char p
      +                          asso = posAtual( ind );
  4615  1693  0839               	movf	printExec@ind,w
  4616  1694  160A  158A  23DD  160A  118A  	fcall	_posAtual
  4617  1699  1283               	bcf	3,5	;RP0=0, select bank0
  4618  169A  1303               	bcf	3,6	;RP1=0, select bank0
  4619  169B  00BA               	movwf	??_printExec
  4620  169C  083A               	movf	??_printExec,w
  4621  169D  00C3               	movwf	printExec@passo
  4622  169E                     l6713:
  4623                           
  4624                           ;fifo.c: 414:     if(passo & 0x80)
  4625  169E  1FC3               	btfss	printExec@passo,7
  4626  169F  2EA1               	goto	u4641
  4627  16A0  2EA2               	goto	u4640
  4628  16A1                     u4641:
  4629  16A1  2EE6               	goto	l6725
  4630  16A2                     u4640:
  4631  16A2                     l6715:
  4632                           
  4633                           ;fifo.c: 415:     {;fifo.c: 416:         passo &= 0x7F;
  4634  16A2  307F               	movlw	127
  4635  16A3  00BA               	movwf	??_printExec
  4636  16A4  083A               	movf	??_printExec,w
  4637  16A5  05C3               	andwf	printExec@passo,f
  4638  16A6                     l6717:
  4639                           
  4640                           ;fifo.c: 417:         if( dignum_tam( (int) passo ) == 3 )
  4641  16A6  0843               	movf	printExec@passo,w
  4642  16A7  00BA               	movwf	??_printExec
  4643  16A8  01BB               	clrf	??_printExec+1
  4644  16A9  083A               	movf	??_printExec,w
  4645  16AA  00A9               	movwf	dignum_tam@num
  4646  16AB  083B               	movf	??_printExec+1,w
  4647  16AC  00AA               	movwf	dignum_tam@num+1
  4648  16AD  160A  158A  24AE  160A  118A  	fcall	_dignum_tam
  4649  16B2  3A03               	xorlw	3
  4650  16B3  1D03               	skipz
  4651  16B4  2EB6               	goto	u4651
  4652  16B5  2EB7               	goto	u4650
  4653  16B6                     u4651:
  4654  16B6  2EBB               	goto	l6721
  4655  16B7                     u4650:
  4656  16B7                     l6719:
  4657                           
  4658                           ;fifo.c: 418:             col-=1;
  4659  16B7  3001               	movlw	1
  4660  16B8  1283               	bcf	3,5	;RP0=0, select bank0
  4661  16B9  1303               	bcf	3,6	;RP1=0, select bank0
  4662  16BA  02C2               	subwf	printExec@col,f
  4663  16BB                     l6721:
  4664                           
  4665                           ;fifo.c: 419:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  4666  16BB  1283               	bcf	3,5	;RP0=0, select bank0
  4667  16BC  1303               	bcf	3,6	;RP1=0, select bank0
  4668  16BD  01AD               	clrf	dispLCD_num@lin
  4669  16BE  0842               	movf	printExec@col,w
  4670  16BF  00BA               	movwf	??_printExec
  4671  16C0  083A               	movf	??_printExec,w
  4672  16C1  00AE               	movwf	dispLCD_num@col
  4673  16C2  0843               	movf	printExec@passo,w
  4674  16C3  00BB               	movwf	??_printExec+1
  4675  16C4  01BC               	clrf	??_printExec+2
  4676  16C5  083B               	movf	??_printExec+1,w
  4677  16C6  00AF               	movwf	dispLCD_num@num
  4678  16C7  083C               	movf	??_printExec+2,w
  4679  16C8  00B0               	movwf	dispLCD_num@num+1
  4680  16C9  0843               	movf	printExec@passo,w
  4681  16CA  00BD               	movwf	??_printExec+3
  4682  16CB  01BE               	clrf	??_printExec+4
  4683  16CC  083D               	movf	??_printExec+3,w
  4684  16CD  00A9               	movwf	dignum_tam@num
  4685  16CE  083E               	movf	??_printExec+4,w
  4686  16CF  00AA               	movwf	dignum_tam@num+1
  4687  16D0  160A  158A  24AE  160A  118A  	fcall	_dignum_tam
  4688  16D5  1283               	bcf	3,5	;RP0=0, select bank0
  4689  16D6  1303               	bcf	3,6	;RP1=0, select bank0
  4690  16D7  00BF               	movwf	??_printExec+5
  4691  16D8  083F               	movf	??_printExec+5,w
  4692  16D9  00B1               	movwf	dispLCD_num@tam
  4693  16DA  160A  118A  271B  160A  118A  	fcall	_dispLCD_num
  4694  16DF                     l6723:
  4695                           
  4696                           ;fifo.c: 420:         dispLCD_dataReg('s');
  4697  16DF  3073               	movlw	115
  4698  16E0  160A  158A  2739  160A  118A  	fcall	_dispLCD_dataReg
  4699                           
  4700                           ;fifo.c: 421:     }
  4701  16E5  2F1A               	goto	l384
  4702  16E6                     l6725:
  4703  16E6  3041               	movlw	65
  4704  16E7  0243               	subwf	printExec@passo,w
  4705  16E8  1C03               	skipc
  4706  16E9  2EEB               	goto	u4661
  4707  16EA  2EEC               	goto	u4660
  4708  16EB                     u4661:
  4709  16EB  2F1A               	goto	l384
  4710  16EC                     u4660:
  4711  16EC                     l6727:
  4712  16EC  307B               	movlw	123
  4713  16ED  0243               	subwf	printExec@passo,w
  4714  16EE  1803               	skipnc
  4715  16EF  2EF1               	goto	u4671
  4716  16F0  2EF2               	goto	u4670
  4717  16F1                     u4671:
  4718  16F1  2F1A               	goto	l384
  4719  16F2                     u4670:
  4720  16F2                     l6729:
  4721                           
  4722                           ;fifo.c: 423:     {;fifo.c: 424:         dispLCD_lincol(0, col);
  4723  16F2  0842               	movf	printExec@col,w
  4724  16F3  00BA               	movwf	??_printExec
  4725  16F4  083A               	movf	??_printExec,w
  4726  16F5  00A3               	movwf	dispLCD_lincol@col
  4727  16F6  3000               	movlw	0
  4728  16F7  160A  158A  276A  160A  118A  	fcall	_dispLCD_lincol
  4729  16FC                     l6731:
  4730                           
  4731                           ;fifo.c: 425:         dispLCD_dataReg( passo & ~0x20 );
  4732  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  4733  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  4734  16FE  0843               	movf	printExec@passo,w
  4735  16FF  39DF               	andlw	223
  4736  1700  160A  158A  2739  160A  118A  	fcall	_dispLCD_dataReg
  4737  1705                     l6733:
  4738                           
  4739                           ;fifo.c: 426:         dispLCD_dataReg( passo & 0x20 ? '-': '+' );
  4740  1705  1283               	bcf	3,5	;RP0=0, select bank0
  4741  1706  1303               	bcf	3,6	;RP1=0, select bank0
  4742  1707  1AC3               	btfsc	printExec@passo,5
  4743  1708  2F0A               	goto	u4681
  4744  1709  2F0B               	goto	u4680
  4745  170A                     u4681:
  4746  170A  2F10               	goto	l6737
  4747  170B                     u4680:
  4748  170B                     l6735:
  4749  170B  302B               	movlw	43
  4750  170C  00C0               	movwf	_printExec$400
  4751  170D  3000               	movlw	0
  4752  170E  00C1               	movwf	_printExec$400+1
  4753  170F  2F14               	goto	l6739
  4754  1710                     l6737:
  4755  1710  302D               	movlw	45
  4756  1711  00C0               	movwf	_printExec$400
  4757  1712  3000               	movlw	0
  4758  1713  00C1               	movwf	_printExec$400+1
  4759  1714                     l6739:
  4760  1714  0840               	movf	_printExec$400,w
  4761  1715  160A  158A  2739  160A  118A  	fcall	_dispLCD_dataReg
  4762  171A                     l384:
  4763  171A  0008               	return
  4764  171B                     __end_of_printExec:
  4765                           
  4766                           	psect	text18
  4767  1BDD                     __ptext18:	
  4768 ;; *************** function _posAtual *****************
  4769 ;; Defined at:
  4770 ;;		line 402 in file "fifo.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;  ind             1    wreg     unsigned char 
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;  ind             1    2[BANK0 ] unsigned char 
  4775 ;;  passo           1    3[BANK0 ] unsigned char 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      unsigned char 
  4778 ;; Registers used:
  4779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4785 ;;      Params:         0       0       0       0       0
  4786 ;;      Locals:         0       2       0       0       0
  4787 ;;      Temps:          0       1       0       0       0
  4788 ;;      Totals:         0       3       0       0       0
  4789 ;;Total ram usage:        3 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    3
  4792 ;; This function calls:
  4793 ;;		_fifo_lerPos
  4794 ;;		_getIndicePassos
  4795 ;; This function is called by:
  4796 ;;		_printExec
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           
  4801                           ;psect for function _posAtual
  4802  1BDD                     _posAtual:
  4803                           
  4804                           ;incstack = 0
  4805                           ; Regs used in _posAtual: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4806                           ;posAtual@ind stored from wreg
  4807  1BDD  1283               	bcf	3,5	;RP0=0, select bank0
  4808  1BDE  1303               	bcf	3,6	;RP1=0, select bank0
  4809  1BDF  00A2               	movwf	posAtual@ind
  4810  1BE0                     l6219:
  4811  1BE0                     l6221:
  4812                           
  4813                           ;fifo.c: 406:     passo = fifo_lerPos( getIndicePassos() + ind );
  4814  1BE0  160A  158A  230D  160A  158A  	fcall	_getIndicePassos
  4815  1BE5  1283               	bcf	3,5	;RP0=0, select bank0
  4816  1BE6  1303               	bcf	3,6	;RP1=0, select bank0
  4817  1BE7  0722               	addwf	posAtual@ind,w
  4818  1BE8  160A  158A  2346  160A  158A  	fcall	_fifo_lerPos
  4819  1BED  1283               	bcf	3,5	;RP0=0, select bank0
  4820  1BEE  1303               	bcf	3,6	;RP1=0, select bank0
  4821  1BEF  00A1               	movwf	??_posAtual
  4822  1BF0  0821               	movf	??_posAtual,w
  4823  1BF1  00A3               	movwf	posAtual@passo
  4824  1BF2                     l6223:
  4825                           
  4826                           ;fifo.c: 407:     return(passo);
  4827  1BF2  0823               	movf	posAtual@passo,w
  4828  1BF3                     l373:
  4829  1BF3  0008               	return
  4830  1BF4                     __end_of_posAtual:
  4831                           
  4832                           	psect	text19
  4833  1B0D                     __ptext19:	
  4834 ;; *************** function _getIndicePassos *****************
  4835 ;; Defined at:
  4836 ;;		line 29 in file "fifo.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      unsigned char 
  4843 ;; Registers used:
  4844 ;;		wreg
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4850 ;;      Params:         0       0       0       0       0
  4851 ;;      Locals:         0       0       0       0       0
  4852 ;;      Temps:          0       0       0       0       0
  4853 ;;      Totals:         0       0       0       0       0
  4854 ;;Total ram usage:        0 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    2
  4857 ;; This function calls:
  4858 ;;		Nothing
  4859 ;; This function is called by:
  4860 ;;		_posAtual
  4861 ;;		_main
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _getIndicePassos
  4867  1B0D                     _getIndicePassos:
  4868  1B0D                     l6009:	
  4869                           ;incstack = 0
  4870                           ; Regs used in _getIndicePassos: [wreg]
  4871                           
  4872                           
  4873                           ;fifo.c: 31:     return(indice_passos);
  4874  1B0D  087B               	movf	_indice_passos,w
  4875  1B0E                     l206:
  4876  1B0E  0008               	return
  4877  1B0F                     __end_of_getIndicePassos:
  4878                           
  4879                           	psect	text20
  4880  1B46                     __ptext20:	
  4881 ;; *************** function _fifo_lerPos *****************
  4882 ;; Defined at:
  4883 ;;		line 166 in file "fifo.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  i               1    wreg     unsigned char 
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  i               1    0[BANK0 ] unsigned char 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      unsigned char 
  4890 ;; Registers used:
  4891 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4897 ;;      Params:         0       0       0       0       0
  4898 ;;      Locals:         0       1       0       0       0
  4899 ;;      Temps:          0       0       0       0       0
  4900 ;;      Totals:         0       1       0       0       0
  4901 ;;Total ram usage:        1 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    2
  4904 ;; This function calls:
  4905 ;;		Nothing
  4906 ;; This function is called by:
  4907 ;;		_posAtual
  4908 ;;		_main
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           
  4913                           ;psect for function _fifo_lerPos
  4914  1B46                     _fifo_lerPos:
  4915                           
  4916                           ;incstack = 0
  4917                           ; Regs used in _fifo_lerPos: [wreg-fsr0h+status,2+status,0]
  4918                           ;fifo_lerPos@i stored from wreg
  4919  1B46  1283               	bcf	3,5	;RP0=0, select bank0
  4920  1B47  1303               	bcf	3,6	;RP1=0, select bank0
  4921  1B48  00A0               	movwf	fifo_lerPos@i
  4922  1B49                     l6013:
  4923                           
  4924                           ;fifo.c: 166: char fifo_lerPos(char i);fifo.c: 167: {;fifo.c: 168:     return ( fila[i] 
      +                          );
  4925  1B49  0820               	movf	fifo_lerPos@i,w
  4926  1B4A  3E54               	addlw	(low (_fila| 0))& (0+255)
  4927  1B4B  0084               	movwf	4
  4928  1B4C  1383               	bcf	3,7	;select IRP bank0
  4929  1B4D  0800               	movf	0,w
  4930  1B4E                     l271:
  4931  1B4E  0008               	return
  4932  1B4F                     __end_of_fifo_lerPos:
  4933                           
  4934                           	psect	text21
  4935  171B                     __ptext21:	
  4936 ;; *************** function _dispLCD_num *****************
  4937 ;; Defined at:
  4938 ;;		line 200 in file "dispLCD4vias.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  lin             1   13[BANK0 ] unsigned char 
  4941 ;;  col             1   14[BANK0 ] unsigned char 
  4942 ;;  num             2   15[BANK0 ] int 
  4943 ;;  tam             1   17[BANK0 ] unsigned char 
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;  div             2   23[BANK0 ] int 
  4946 ;;  sinal           1   22[BANK0 ] unsigned char 
  4947 ;;  size            1   21[BANK0 ] unsigned char 
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4957 ;;      Params:         0       5       0       0       0
  4958 ;;      Locals:         0       4       0       0       0
  4959 ;;      Temps:          0       3       0       0       0
  4960 ;;      Totals:         0      12       0       0       0
  4961 ;;Total ram usage:       12 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:    4
  4964 ;; This function calls:
  4965 ;;		___awdiv
  4966 ;;		___awmod
  4967 ;;		_dispLCD_dataReg
  4968 ;;		_dispLCD_lincol
  4969 ;; This function is called by:
  4970 ;;		_printExec
  4971 ;;		_main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           
  4976                           ;psect for function _dispLCD_num
  4977  171B                     _dispLCD_num:
  4978  171B                     l6073:	
  4979                           ;incstack = 0
  4980                           ; Regs used in _dispLCD_num: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4981                           
  4982                           
  4983                           ;dispLCD4vias.c: 200: void dispLCD_num( unsigned char lin, unsigned char col,;dispLCD4vi
      +                          as.c: 201:                     int num, unsigned char tam );dispLCD4vias.c: 202: {;dispL
      +                          CD4vias.c: 203:     int div;;dispLCD4vias.c: 204:     unsigned char size;;dispLCD4vias.c
      +                          : 205:     char sinal;;dispLCD4vias.c: 207:     sinal = num < 0;
  4984  171B  1283               	bcf	3,5	;RP0=0, select bank0
  4985  171C  1303               	bcf	3,6	;RP1=0, select bank0
  4986  171D  1BB0               	btfsc	dispLCD_num@num+1,7
  4987  171E  2F20               	goto	u3931
  4988  171F  2F22               	goto	u3930
  4989  1720                     u3931:
  4990  1720  3001               	movlw	1
  4991  1721  2F23               	goto	u3940
  4992  1722                     u3930:
  4993  1722  3000               	movlw	0
  4994  1723                     u3940:
  4995  1723  00B2               	movwf	??_dispLCD_num
  4996  1724  0832               	movf	??_dispLCD_num,w
  4997  1725  00B6               	movwf	dispLCD_num@sinal
  4998  1726                     l6075:
  4999                           
  5000                           ;dispLCD4vias.c: 208:     if( sinal )
  5001  1726  0836               	movf	dispLCD_num@sinal,w
  5002  1727  1903               	btfsc	3,2
  5003  1728  2F2A               	goto	u3951
  5004  1729  2F2B               	goto	u3950
  5005  172A                     u3951:
  5006  172A  2F30               	goto	l6079
  5007  172B                     u3950:
  5008  172B                     l6077:
  5009                           
  5010                           ;dispLCD4vias.c: 209:         num = (~num) + 1;
  5011  172B  09AF               	comf	dispLCD_num@num,f
  5012  172C  09B0               	comf	dispLCD_num@num+1,f
  5013  172D  0AAF               	incf	dispLCD_num@num,f
  5014  172E  1903               	skipnz
  5015  172F  0AB0               	incf	dispLCD_num@num+1,f
  5016  1730                     l6079:
  5017                           
  5018                           ;dispLCD4vias.c: 211:     dispLCD_lincol(lin, col);
  5019  1730  082E               	movf	dispLCD_num@col,w
  5020  1731  00B2               	movwf	??_dispLCD_num
  5021  1732  0832               	movf	??_dispLCD_num,w
  5022  1733  00A3               	movwf	dispLCD_lincol@col
  5023  1734  082D               	movf	dispLCD_num@lin,w
  5024  1735  160A  158A  276A  160A  118A  	fcall	_dispLCD_lincol
  5025  173A                     l6081:
  5026                           
  5027                           ;dispLCD4vias.c: 213:     div=10000;
  5028  173A  3010               	movlw	16
  5029  173B  1283               	bcf	3,5	;RP0=0, select bank0
  5030  173C  1303               	bcf	3,6	;RP1=0, select bank0
  5031  173D  00B7               	movwf	dispLCD_num@div
  5032  173E  3027               	movlw	39
  5033  173F  00B8               	movwf	dispLCD_num@div+1
  5034  1740                     l6083:
  5035                           
  5036                           ;dispLCD4vias.c: 214:     size = 5;
  5037  1740  3005               	movlw	5
  5038  1741  00B2               	movwf	??_dispLCD_num
  5039  1742  0832               	movf	??_dispLCD_num,w
  5040  1743  00B5               	movwf	dispLCD_num@size
  5041                           
  5042                           ;dispLCD4vias.c: 215:     while( div >= 1 )
  5043  1744  2F71               	goto	l6091
  5044  1745                     l6085:
  5045                           
  5046                           ;dispLCD4vias.c: 216:     {;dispLCD4vias.c: 217:         if( num/div == 0 )
  5047  1745  1283               	bcf	3,5	;RP0=0, select bank0
  5048  1746  1303               	bcf	3,6	;RP1=0, select bank0
  5049  1747  0838               	movf	dispLCD_num@div+1,w
  5050  1748  00A1               	movwf	___awdiv@divisor+1
  5051  1749  0837               	movf	dispLCD_num@div,w
  5052  174A  00A0               	movwf	___awdiv@divisor
  5053  174B  0830               	movf	dispLCD_num@num+1,w
  5054  174C  00A3               	movwf	___awdiv@dividend+1
  5055  174D  082F               	movf	dispLCD_num@num,w
  5056  174E  00A2               	movwf	___awdiv@dividend
  5057  174F  160A  118A  25A8  160A  118A  	fcall	___awdiv
  5058  1754  1283               	bcf	3,5	;RP0=0, select bank0
  5059  1755  1303               	bcf	3,6	;RP1=0, select bank0
  5060  1756  0820               	movf	?___awdiv,w
  5061  1757  0421               	iorwf	?___awdiv+1,w
  5062  1758  1D03               	btfss	3,2
  5063  1759  2F5B               	goto	u3961
  5064  175A  2F5C               	goto	u3960
  5065  175B                     u3961:
  5066  175B  2F89               	goto	l6097
  5067  175C                     u3960:
  5068  175C                     l6087:
  5069                           
  5070                           ;dispLCD4vias.c: 218:             --size;
  5071  175C  3001               	movlw	1
  5072  175D  02B5               	subwf	dispLCD_num@size,f
  5073  175E                     l6089:
  5074                           
  5075                           ;dispLCD4vias.c: 221:         div/=10;
  5076  175E  300A               	movlw	10
  5077  175F  00A0               	movwf	___awdiv@divisor
  5078  1760  3000               	movlw	0
  5079  1761  00A1               	movwf	___awdiv@divisor+1
  5080  1762  0838               	movf	dispLCD_num@div+1,w
  5081  1763  00A3               	movwf	___awdiv@dividend+1
  5082  1764  0837               	movf	dispLCD_num@div,w
  5083  1765  00A2               	movwf	___awdiv@dividend
  5084  1766  160A  118A  25A8  160A  118A  	fcall	___awdiv
  5085  176B  1283               	bcf	3,5	;RP0=0, select bank0
  5086  176C  1303               	bcf	3,6	;RP1=0, select bank0
  5087  176D  0821               	movf	?___awdiv+1,w
  5088  176E  00B8               	movwf	dispLCD_num@div+1
  5089  176F  0820               	movf	?___awdiv,w
  5090  1770  00B7               	movwf	dispLCD_num@div
  5091  1771                     l6091:
  5092                           
  5093                           ;dispLCD4vias.c: 215:     while( div >= 1 )
  5094  1771  0838               	movf	dispLCD_num@div+1,w
  5095  1772  3A80               	xorlw	128
  5096  1773  00FF               	movwf	btemp+1
  5097  1774  3080               	movlw	128
  5098  1775  027F               	subwf	btemp+1,w
  5099  1776  1D03               	skipz
  5100  1777  2F7A               	goto	u3975
  5101  1778  3001               	movlw	1
  5102  1779  0237               	subwf	dispLCD_num@div,w
  5103  177A                     u3975:
  5104  177A  1803               	skipnc
  5105  177B  2F7D               	goto	u3971
  5106  177C  2F7E               	goto	u3970
  5107  177D                     u3971:
  5108  177D  2F45               	goto	l6085
  5109  177E                     u3970:
  5110  177E  2F89               	goto	l6097
  5111  177F                     l6093:
  5112                           
  5113                           ;dispLCD4vias.c: 225:     {;dispLCD4vias.c: 226:         dispLCD_dataReg(' ');
  5114  177F  3020               	movlw	32
  5115  1780  160A  158A  2739  160A  118A  	fcall	_dispLCD_dataReg
  5116  1785                     l6095:
  5117                           
  5118                           ;dispLCD4vias.c: 227:         --tam;
  5119  1785  3001               	movlw	1
  5120  1786  1283               	bcf	3,5	;RP0=0, select bank0
  5121  1787  1303               	bcf	3,6	;RP1=0, select bank0
  5122  1788  02B1               	subwf	dispLCD_num@tam,f
  5123  1789                     l6097:
  5124                           
  5125                           ;dispLCD4vias.c: 224:     while( tam > (size+sinal) && tam > 1 )
  5126  1789  1283               	bcf	3,5	;RP0=0, select bank0
  5127  178A  1303               	bcf	3,6	;RP1=0, select bank0
  5128  178B  0835               	movf	dispLCD_num@size,w
  5129  178C  0736               	addwf	dispLCD_num@sinal,w
  5130  178D  00B2               	movwf	??_dispLCD_num
  5131  178E  01B3               	clrf	??_dispLCD_num+1
  5132  178F  0DB3               	rlf	??_dispLCD_num+1,f
  5133  1790  0833               	movf	??_dispLCD_num+1,w
  5134  1791  3A80               	xorlw	128
  5135  1792  00B4               	movwf	??_dispLCD_num+2
  5136  1793  3080               	movlw	128
  5137  1794  0234               	subwf	??_dispLCD_num+2,w
  5138  1795  1D03               	skipz
  5139  1796  2F99               	goto	u3985
  5140  1797  0831               	movf	dispLCD_num@tam,w
  5141  1798  0232               	subwf	??_dispLCD_num,w
  5142  1799                     u3985:
  5143  1799  1803               	skipnc
  5144  179A  2F9C               	goto	u3981
  5145  179B  2F9D               	goto	u3980
  5146  179C                     u3981:
  5147  179C  2FA5               	goto	l6101
  5148  179D                     u3980:
  5149  179D                     l6099:
  5150  179D  3002               	movlw	2
  5151  179E  1283               	bcf	3,5	;RP0=0, select bank0
  5152  179F  1303               	bcf	3,6	;RP1=0, select bank0
  5153  17A0  0231               	subwf	dispLCD_num@tam,w
  5154  17A1  1803               	skipnc
  5155  17A2  2FA4               	goto	u3991
  5156  17A3  2FA5               	goto	u3990
  5157  17A4                     u3991:
  5158  17A4  2F7F               	goto	l6093
  5159  17A5                     u3990:
  5160  17A5                     l6101:
  5161                           
  5162                           ;dispLCD4vias.c: 230:     if( sinal )
  5163  17A5  1283               	bcf	3,5	;RP0=0, select bank0
  5164  17A6  1303               	bcf	3,6	;RP1=0, select bank0
  5165  17A7  0836               	movf	dispLCD_num@sinal,w
  5166  17A8  1903               	btfsc	3,2
  5167  17A9  2FAB               	goto	u4001
  5168  17AA  2FAC               	goto	u4000
  5169  17AB                     u4001:
  5170  17AB  2FB2               	goto	l92
  5171  17AC                     u4000:
  5172  17AC                     l6103:
  5173                           
  5174                           ;dispLCD4vias.c: 231:         dispLCD_dataReg('-');
  5175  17AC  302D               	movlw	45
  5176  17AD  160A  158A  2739  160A  118A  	fcall	_dispLCD_dataReg
  5177  17B2                     l92:	
  5178                           ;dispLCD4vias.c: 233:     do
  5179                           
  5180                           
  5181                           ;dispLCD4vias.c: 234:     {;dispLCD4vias.c: 235:         dispLCD_dataReg( (num / div) + 
      +                          '0' );
  5182  17B2  1283               	bcf	3,5	;RP0=0, select bank0
  5183  17B3  1303               	bcf	3,6	;RP1=0, select bank0
  5184  17B4  0838               	movf	dispLCD_num@div+1,w
  5185  17B5  00A1               	movwf	___awdiv@divisor+1
  5186  17B6  0837               	movf	dispLCD_num@div,w
  5187  17B7  00A0               	movwf	___awdiv@divisor
  5188  17B8  0830               	movf	dispLCD_num@num+1,w
  5189  17B9  00A3               	movwf	___awdiv@dividend+1
  5190  17BA  082F               	movf	dispLCD_num@num,w
  5191  17BB  00A2               	movwf	___awdiv@dividend
  5192  17BC  160A  118A  25A8  160A  118A  	fcall	___awdiv
  5193  17C1  1283               	bcf	3,5	;RP0=0, select bank0
  5194  17C2  1303               	bcf	3,6	;RP1=0, select bank0
  5195  17C3  0820               	movf	?___awdiv,w
  5196  17C4  3E30               	addlw	48
  5197  17C5  160A  158A  2739  160A  118A  	fcall	_dispLCD_dataReg
  5198                           
  5199                           ;dispLCD4vias.c: 236:         num = num % div;
  5200  17CA  1283               	bcf	3,5	;RP0=0, select bank0
  5201  17CB  1303               	bcf	3,6	;RP1=0, select bank0
  5202  17CC  0838               	movf	dispLCD_num@div+1,w
  5203  17CD  00A1               	movwf	___awmod@divisor+1
  5204  17CE  0837               	movf	dispLCD_num@div,w
  5205  17CF  00A0               	movwf	___awmod@divisor
  5206  17D0  0830               	movf	dispLCD_num@num+1,w
  5207  17D1  00A3               	movwf	___awmod@dividend+1
  5208  17D2  082F               	movf	dispLCD_num@num,w
  5209  17D3  00A2               	movwf	___awmod@dividend
  5210  17D4  160A  118A  254D  160A  118A  	fcall	___awmod
  5211  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  5212  17DA  1303               	bcf	3,6	;RP1=0, select bank0
  5213  17DB  0821               	movf	?___awmod+1,w
  5214  17DC  00B0               	movwf	dispLCD_num@num+1
  5215  17DD  0820               	movf	?___awmod,w
  5216  17DE  00AF               	movwf	dispLCD_num@num
  5217                           
  5218                           ;dispLCD4vias.c: 237:         div/=10;
  5219  17DF  300A               	movlw	10
  5220  17E0  00A0               	movwf	___awdiv@divisor
  5221  17E1  3000               	movlw	0
  5222  17E2  00A1               	movwf	___awdiv@divisor+1
  5223  17E3  0838               	movf	dispLCD_num@div+1,w
  5224  17E4  00A3               	movwf	___awdiv@dividend+1
  5225  17E5  0837               	movf	dispLCD_num@div,w
  5226  17E6  00A2               	movwf	___awdiv@dividend
  5227  17E7  160A  118A  25A8  160A  118A  	fcall	___awdiv
  5228  17EC  1283               	bcf	3,5	;RP0=0, select bank0
  5229  17ED  1303               	bcf	3,6	;RP1=0, select bank0
  5230  17EE  0821               	movf	?___awdiv+1,w
  5231  17EF  00B8               	movwf	dispLCD_num@div+1
  5232  17F0  0820               	movf	?___awdiv,w
  5233  17F1  00B7               	movwf	dispLCD_num@div
  5234  17F2                     l6105:
  5235                           
  5236                           ;dispLCD4vias.c: 238:     }
  5237  17F2  0838               	movf	dispLCD_num@div+1,w
  5238  17F3  3A80               	xorlw	128
  5239  17F4  00FF               	movwf	btemp+1
  5240  17F5  3080               	movlw	128
  5241  17F6  027F               	subwf	btemp+1,w
  5242  17F7  1D03               	skipz
  5243  17F8  2FFB               	goto	u4015
  5244  17F9  3001               	movlw	1
  5245  17FA  0237               	subwf	dispLCD_num@div,w
  5246  17FB                     u4015:
  5247  17FB  1803               	skipnc
  5248  17FC  2FFE               	goto	u4011
  5249  17FD  2FFF               	goto	u4010
  5250  17FE                     u4011:
  5251  17FE  2FB2               	goto	l92
  5252  17FF                     u4010:
  5253  17FF                     l94:
  5254  17FF  0008               	return
  5255  1800                     __end_of_dispLCD_num:
  5256                           
  5257                           	psect	text22
  5258  1E26                     __ptext22:	
  5259 ;; *************** function _manipula_atuadores_init *****************
  5260 ;; Defined at:
  5261 ;;		line 135 in file "fifo.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  aux             1    wreg     unsigned char 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  aux             1    5[BANK0 ] unsigned char 
  5266 ;;  mask            1    6[BANK0 ] unsigned char 
  5267 ;;  atuador         1    4[BANK0 ] unsigned char 
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  1    wreg      void 
  5270 ;; Registers used:
  5271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5277 ;;      Params:         0       0       0       0       0
  5278 ;;      Locals:         0       3       0       0       0
  5279 ;;      Temps:          0       1       0       0       0
  5280 ;;      Totals:         0       4       0       0       0
  5281 ;;Total ram usage:        4 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    3
  5284 ;; This function calls:
  5285 ;;		_alt_atuador
  5286 ;; This function is called by:
  5287 ;;		_main
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           
  5292                           ;psect for function _manipula_atuadores_init
  5293  1E26                     _manipula_atuadores_init:
  5294                           
  5295                           ;incstack = 0
  5296                           ; Regs used in _manipula_atuadores_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5297                           ;manipula_atuadores_init@aux stored from wreg
  5298  1E26  1283               	bcf	3,5	;RP0=0, select bank0
  5299  1E27  1303               	bcf	3,6	;RP1=0, select bank0
  5300  1E28  00A5               	movwf	manipula_atuadores_init@aux
  5301  1E29                     l6533:
  5302                           
  5303                           ;fifo.c: 135: void manipula_atuadores_init(char aux);fifo.c: 136: {;fifo.c: 137:     cha
      +                          r mask = 0x08;
  5304  1E29  3008               	movlw	8
  5305  1E2A  00A3               	movwf	??_manipula_atuadores_init
  5306  1E2B  0823               	movf	??_manipula_atuadores_init,w
  5307  1E2C  00A6               	movwf	manipula_atuadores_init@mask
  5308                           
  5309                           ;fifo.c: 138:     char atuador = 0x41;
  5310  1E2D  3041               	movlw	65
  5311  1E2E  00A3               	movwf	??_manipula_atuadores_init
  5312  1E2F  0823               	movf	??_manipula_atuadores_init,w
  5313  1E30  00A4               	movwf	manipula_atuadores_init@atuador
  5314  1E31                     l6535:
  5315                           
  5316                           ;fifo.c: 140:     if(aux ==0xFF)
  5317  1E31  0A25               	incf	manipula_atuadores_init@aux,w
  5318  1E32  1D03               	btfss	3,2
  5319  1E33  2E35               	goto	u4401
  5320  1E34  2E36               	goto	u4400
  5321  1E35                     u4401:
  5322  1E35  2E4B               	goto	l6547
  5323  1E36                     u4400:
  5324  1E36  2E50               	goto	l263
  5325  1E37                     l6539:
  5326                           
  5327                           ;fifo.c: 146:         {;fifo.c: 148:             if(aux & mask)
  5328  1E37  0825               	movf	manipula_atuadores_init@aux,w
  5329  1E38  0526               	andwf	manipula_atuadores_init@mask,w
  5330  1E39  1903               	btfsc	3,2
  5331  1E3A  2E3C               	goto	u4411
  5332  1E3B  2E3D               	goto	u4410
  5333  1E3C                     u4411:
  5334  1E3C  2E43               	goto	l6543
  5335  1E3D                     u4410:
  5336  1E3D                     l6541:
  5337                           
  5338                           ;fifo.c: 149:             {;fifo.c: 150:                 alt_atuador(atuador);
  5339  1E3D  0824               	movf	manipula_atuadores_init@atuador,w
  5340  1E3E  160A  118A  224E  160A  158A  	fcall	_alt_atuador
  5341  1E43                     l6543:
  5342                           
  5343                           ;fifo.c: 152:             atuador++;
  5344  1E43  3001               	movlw	1
  5345  1E44  1283               	bcf	3,5	;RP0=0, select bank0
  5346  1E45  1303               	bcf	3,6	;RP1=0, select bank0
  5347  1E46  00A3               	movwf	??_manipula_atuadores_init
  5348  1E47  0823               	movf	??_manipula_atuadores_init,w
  5349  1E48  07A4               	addwf	manipula_atuadores_init@atuador,f
  5350  1E49                     l6545:
  5351                           
  5352                           ;fifo.c: 153:             mask >>= 1;
  5353  1E49  1003               	clrc
  5354  1E4A  0CA6               	rrf	manipula_atuadores_init@mask,f
  5355  1E4B                     l6547:
  5356                           
  5357                           ;fifo.c: 145:         while(mask)
  5358  1E4B  0826               	movf	manipula_atuadores_init@mask,w
  5359  1E4C  1D03               	btfss	3,2
  5360  1E4D  2E4F               	goto	u4421
  5361  1E4E  2E50               	goto	u4420
  5362  1E4F                     u4421:
  5363  1E4F  2E37               	goto	l6539
  5364  1E50                     u4420:
  5365  1E50                     l263:
  5366  1E50  0008               	return
  5367  1E51                     __end_of_manipula_atuadores_init:
  5368                           
  5369                           	psect	text23
  5370  149A                     __ptext23:	
  5371 ;; *************** function _ler_sensor *****************
  5372 ;; Defined at:
  5373 ;;		line 68 in file "atuadores.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  passo           1    wreg     unsigned char 
  5376 ;;  ptr             1    0[BANK0 ] PTR unsigned char 
  5377 ;;		 -> main@vetorIn(1), 
  5378 ;; Auto vars:     Size  Location     Type
  5379 ;;  passo           1    3[BANK0 ] unsigned char 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  1    wreg      unsigned char 
  5382 ;; Registers used:
  5383 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5389 ;;      Params:         0       1       0       0       0
  5390 ;;      Locals:         0       1       0       0       0
  5391 ;;      Temps:          0       2       0       0       0
  5392 ;;      Totals:         0       4       0       0       0
  5393 ;;Total ram usage:        4 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    2
  5396 ;; This function calls:
  5397 ;;		Nothing
  5398 ;; This function is called by:
  5399 ;;		_main
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           
  5404                           ;psect for function _ler_sensor
  5405  149A                     _ler_sensor:
  5406                           
  5407                           ;incstack = 0
  5408                           ; Regs used in _ler_sensor: [wreg-fsr0h+status,2+status,0]
  5409                           ;ler_sensor@passo stored from wreg
  5410  149A  1283               	bcf	3,5	;RP0=0, select bank0
  5411  149B  1303               	bcf	3,6	;RP1=0, select bank0
  5412  149C  00A3               	movwf	ler_sensor@passo
  5413  149D                     l6317:
  5414                           
  5415                           ;atuadores.c: 68: char ler_sensor(char passo, char* ptr);atuadores.c: 69: {;atuadores.c:
      +                           70:     switch (passo)
  5416  149D  2CD0               	goto	l6375
  5417  149E                     l6319:
  5418  149E  0820               	movf	ler_sensor@ptr,w
  5419  149F  0084               	movwf	4
  5420  14A0  1783               	bsf	3,7	;select IRP bank2
  5421  14A1  0800               	movf	0,w
  5422  14A2  3902               	andlw	2
  5423  14A3  2CF2               	goto	l18
  5424  14A4                     l6325:
  5425  14A4  0820               	movf	ler_sensor@ptr,w
  5426  14A5  0084               	movwf	4
  5427  14A6  1783               	bsf	3,7	;select IRP bank2
  5428  14A7  0800               	movf	0,w
  5429  14A8  3901               	andlw	1
  5430  14A9  2CF2               	goto	l18
  5431  14AA                     l6331:
  5432  14AA  0820               	movf	ler_sensor@ptr,w
  5433  14AB  0084               	movwf	4
  5434  14AC  1783               	bsf	3,7	;select IRP bank2
  5435  14AD  0800               	movf	0,w
  5436  14AE  3908               	andlw	8
  5437  14AF  2CF2               	goto	l18
  5438  14B0                     l6337:
  5439  14B0  0820               	movf	ler_sensor@ptr,w
  5440  14B1  0084               	movwf	4
  5441  14B2  1783               	bsf	3,7	;select IRP bank2
  5442  14B3  0800               	movf	0,w
  5443  14B4  3904               	andlw	4
  5444  14B5  2CF2               	goto	l18
  5445  14B6                     l6343:
  5446  14B6  0820               	movf	ler_sensor@ptr,w
  5447  14B7  0084               	movwf	4
  5448  14B8  1783               	bsf	3,7	;select IRP bank2
  5449  14B9  0800               	movf	0,w
  5450  14BA  3920               	andlw	32
  5451  14BB  2CF2               	goto	l18
  5452  14BC                     l6349:
  5453  14BC  0820               	movf	ler_sensor@ptr,w
  5454  14BD  0084               	movwf	4
  5455  14BE  1783               	bsf	3,7	;select IRP bank2
  5456  14BF  0800               	movf	0,w
  5457  14C0  3910               	andlw	16
  5458  14C1  2CF2               	goto	l18
  5459  14C2                     l6355:
  5460  14C2  0820               	movf	ler_sensor@ptr,w
  5461  14C3  0084               	movwf	4
  5462  14C4  1783               	bsf	3,7	;select IRP bank2
  5463  14C5  0800               	movf	0,w
  5464  14C6  3980               	andlw	128
  5465  14C7  2CF2               	goto	l18
  5466  14C8                     l6361:
  5467  14C8  0820               	movf	ler_sensor@ptr,w
  5468  14C9  0084               	movwf	4
  5469  14CA  1783               	bsf	3,7	;select IRP bank2
  5470  14CB  0800               	movf	0,w
  5471  14CC  3940               	andlw	64
  5472  14CD  2CF2               	goto	l18
  5473  14CE                     l6367:
  5474  14CE  3000               	movlw	0
  5475  14CF  2CF2               	goto	l18
  5476  14D0                     l6375:
  5477  14D0  0823               	movf	ler_sensor@passo,w
  5478  14D1  00A1               	movwf	??_ler_sensor
  5479  14D2  01A2               	clrf	??_ler_sensor+1
  5480                           
  5481                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5482                           ; Switch size 1, requested type "simple"
  5483                           ; Number of cases is 1, Range of values is 0 to 0
  5484                           ; switch strategies available:
  5485                           ; Name         Instructions Cycles
  5486                           ; simple_byte            4     3 (average)
  5487                           ; direct_byte           11     8 (fixed)
  5488                           ; jumptable            260     6 (fixed)
  5489                           ;	Chosen strategy is simple_byte
  5490  14D3  0822               	movf	??_ler_sensor+1,w
  5491  14D4  3A00               	xorlw	0	; case 0
  5492  14D5  1903               	skipnz
  5493  14D6  2CD8               	goto	l8083
  5494  14D7  2CCE               	goto	l6367
  5495  14D8                     l8083:
  5496                           
  5497                           ; Switch size 1, requested type "simple"
  5498                           ; Number of cases is 8, Range of values is 65 to 100
  5499                           ; switch strategies available:
  5500                           ; Name         Instructions Cycles
  5501                           ; simple_byte           25    13 (average)
  5502                           ; direct_byte          119    11 (fixed)
  5503                           ; jumptable            263     9 (fixed)
  5504                           ;	Chosen strategy is simple_byte
  5505  14D8  0821               	movf	??_ler_sensor,w
  5506  14D9  3A41               	xorlw	65	; case 65
  5507  14DA  1903               	skipnz
  5508  14DB  2C9E               	goto	l6319
  5509  14DC  3A03               	xorlw	3	; case 66
  5510  14DD  1903               	skipnz
  5511  14DE  2CAA               	goto	l6331
  5512  14DF  3A01               	xorlw	1	; case 67
  5513  14E0  1903               	skipnz
  5514  14E1  2CB6               	goto	l6343
  5515  14E2  3A07               	xorlw	7	; case 68
  5516  14E3  1903               	skipnz
  5517  14E4  2CC2               	goto	l6355
  5518  14E5  3A25               	xorlw	37	; case 97
  5519  14E6  1903               	skipnz
  5520  14E7  2CA4               	goto	l6325
  5521  14E8  3A03               	xorlw	3	; case 98
  5522  14E9  1903               	skipnz
  5523  14EA  2CB0               	goto	l6337
  5524  14EB  3A01               	xorlw	1	; case 99
  5525  14EC  1903               	skipnz
  5526  14ED  2CBC               	goto	l6349
  5527  14EE  3A07               	xorlw	7	; case 100
  5528  14EF  1903               	skipnz
  5529  14F0  2CC8               	goto	l6361
  5530  14F1  2CCE               	goto	l6367
  5531  14F2                     l18:
  5532  14F2  0008               	return
  5533  14F3                     __end_of_ler_sensor:
  5534                           
  5535                           	psect	text24
  5536  1B18                     __ptext24:	
  5537 ;; *************** function _init_atuadores *****************
  5538 ;; Defined at:
  5539 ;;		line 101 in file "fifo.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;		None
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;		None
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      void 
  5546 ;; Registers used:
  5547 ;;		None
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5553 ;;      Params:         0       0       0       0       0
  5554 ;;      Locals:         0       0       0       0       0
  5555 ;;      Temps:          0       0       0       0       0
  5556 ;;      Totals:         0       0       0       0       0
  5557 ;;Total ram usage:        0 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    2
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		_main
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           
  5568                           ;psect for function _init_atuadores
  5569  1B18                     _init_atuadores:
  5570  1B18                     l6505:	
  5571                           ;incstack = 0
  5572                           ; Regs used in _init_atuadores: []
  5573                           
  5574                           
  5575                           ;fifo.c: 103:     atuador.A = 0;
  5576  1B18  107A               	bcf	_atuador,0
  5577                           
  5578                           ;fifo.c: 104:     atuador.B = 0;
  5579  1B19  10FA               	bcf	_atuador,1
  5580                           
  5581                           ;fifo.c: 105:     atuador.C = 0;
  5582  1B1A  117A               	bcf	_atuador,2
  5583                           
  5584                           ;fifo.c: 106:     atuador.D = 0;
  5585  1B1B  11FA               	bcf	_atuador,3
  5586  1B1C                     l245:
  5587  1B1C  0008               	return
  5588  1B1D                     __end_of_init_atuadores:
  5589                           
  5590                           	psect	text25
  5591  1285                     __ptext25:	
  5592 ;; *************** function _initSerialIO *****************
  5593 ;; Defined at:
  5594 ;;		line 89 in file "serialIO.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  ptrIn           1    wreg     PTR unsigned char 
  5597 ;;		 -> main@vetorIn(1), 
  5598 ;;  ptrOut          1    0[BANK0 ] PTR unsigned char 
  5599 ;;		 -> main@vetorOut(1), 
  5600 ;;  length          1    1[BANK0 ] unsigned char 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  ptrIn           1    3[BANK0 ] PTR unsigned char 
  5603 ;;		 -> main@vetorIn(1), 
  5604 ;; Return value:  Size  Location     Type
  5605 ;;                  1    wreg      void 
  5606 ;; Registers used:
  5607 ;;		wreg
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5613 ;;      Params:         0       2       0       0       0
  5614 ;;      Locals:         0       1       0       0       0
  5615 ;;      Temps:          0       1       0       0       0
  5616 ;;      Totals:         0       4       0       0       0
  5617 ;;Total ram usage:        4 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    2
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		_main
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           
  5628                           ;psect for function _initSerialIO
  5629  1285                     _initSerialIO:
  5630                           
  5631                           ;incstack = 0
  5632                           ; Regs used in _initSerialIO: [wreg]
  5633                           ;initSerialIO@ptrIn stored from wreg
  5634  1285  1283               	bcf	3,5	;RP0=0, select bank0
  5635  1286  1303               	bcf	3,6	;RP1=0, select bank0
  5636  1287  00A3               	movwf	initSerialIO@ptrIn
  5637  1288                     l6755:
  5638                           
  5639                           ;serialIO.c: 89: void initSerialIO( char * ptrIn, char * ptrOut, unsigned char length );
      +                          serialIO.c: 90: {;serialIO.c: 91:     ptrSerialIn = ptrIn;
  5640  1288  0823               	movf	initSerialIO@ptrIn,w
  5641  1289  00A2               	movwf	??_initSerialIO
  5642  128A  0822               	movf	??_initSerialIO,w
  5643  128B  00D3               	movwf	_ptrSerialIn
  5644                           
  5645                           ;serialIO.c: 92:     ptrSerialOut = ptrOut;
  5646  128C  0820               	movf	initSerialIO@ptrOut,w
  5647  128D  00A2               	movwf	??_initSerialIO
  5648  128E  0822               	movf	??_initSerialIO,w
  5649  128F  00D2               	movwf	_ptrSerialOut
  5650                           
  5651                           ;serialIO.c: 93:     lenSerialIO = length;
  5652  1290  0821               	movf	initSerialIO@length,w
  5653  1291  00A2               	movwf	??_initSerialIO
  5654  1292  0822               	movf	??_initSerialIO,w
  5655  1293  00D1               	movwf	_lenSerialIO
  5656  1294                     l6757:
  5657                           
  5658                           ;serialIO.c: 95:     PORTAbits.RA3 = 0;
  5659  1294  1185               	bcf	5,3	;volatile
  5660  1295                     l6759:
  5661                           
  5662                           ;serialIO.c: 96:     ANSELbits.ANS3 = 0;
  5663  1295  1683               	bsf	3,5	;RP0=1, select bank3
  5664  1296  1703               	bsf	3,6	;RP1=1, select bank3
  5665  1297  1188               	bcf	8,3	;volatile
  5666  1298                     l6761:
  5667                           
  5668                           ;serialIO.c: 97:     TRISAbits.TRISA3 = 0;
  5669  1298  1683               	bsf	3,5	;RP0=1, select bank1
  5670  1299  1303               	bcf	3,6	;RP1=0, select bank1
  5671  129A  1185               	bcf	5,3	;volatile
  5672  129B                     l6763:
  5673                           
  5674                           ;serialIO.c: 100:     PORTAbits.RA2 = 0;
  5675  129B  1283               	bcf	3,5	;RP0=0, select bank0
  5676  129C  1303               	bcf	3,6	;RP1=0, select bank0
  5677  129D  1105               	bcf	5,2	;volatile
  5678  129E                     l6765:
  5679                           
  5680                           ;serialIO.c: 101:     ANSELbits.ANS2 = 0;
  5681  129E  1683               	bsf	3,5	;RP0=1, select bank3
  5682  129F  1703               	bsf	3,6	;RP1=1, select bank3
  5683  12A0  1108               	bcf	8,2	;volatile
  5684  12A1                     l6767:
  5685                           
  5686                           ;serialIO.c: 102:     TRISAbits.TRISA2 = 0;
  5687  12A1  1683               	bsf	3,5	;RP0=1, select bank1
  5688  12A2  1303               	bcf	3,6	;RP1=0, select bank1
  5689  12A3  1105               	bcf	5,2	;volatile
  5690  12A4                     l6769:
  5691                           
  5692                           ;serialIO.c: 105:     PORTAbits.RA0 = 0;
  5693  12A4  1283               	bcf	3,5	;RP0=0, select bank0
  5694  12A5  1303               	bcf	3,6	;RP1=0, select bank0
  5695  12A6  1005               	bcf	5,0	;volatile
  5696  12A7                     l6771:
  5697                           
  5698                           ;serialIO.c: 106:     ANSELbits.ANS0 = 0;
  5699  12A7  1683               	bsf	3,5	;RP0=1, select bank3
  5700  12A8  1703               	bsf	3,6	;RP1=1, select bank3
  5701  12A9  1008               	bcf	8,0	;volatile
  5702  12AA                     l6773:
  5703                           
  5704                           ;serialIO.c: 107:     TRISAbits.TRISA0 = 0;
  5705  12AA  1683               	bsf	3,5	;RP0=1, select bank1
  5706  12AB  1303               	bcf	3,6	;RP1=0, select bank1
  5707  12AC  1005               	bcf	5,0	;volatile
  5708                           
  5709                           ;serialIO.c: 110:     PORTAbits.RA1;
  5710  12AD  1283               	bcf	3,5	;RP0=0, select bank0
  5711  12AE  1303               	bcf	3,6	;RP1=0, select bank0
  5712  12AF  0805               	movf	5,w	;volatile
  5713  12B0                     l6775:
  5714                           
  5715                           ;serialIO.c: 111:     ANSELbits.ANS1 = 0;
  5716  12B0  1683               	bsf	3,5	;RP0=1, select bank3
  5717  12B1  1703               	bsf	3,6	;RP1=1, select bank3
  5718  12B2  1088               	bcf	8,1	;volatile
  5719  12B3                     l6777:
  5720                           
  5721                           ;serialIO.c: 112:     TRISAbits.TRISA1 = 1;
  5722  12B3  1683               	bsf	3,5	;RP0=1, select bank1
  5723  12B4  1303               	bcf	3,6	;RP1=0, select bank1
  5724  12B5  1485               	bsf	5,1	;volatile
  5725  12B6                     l6779:
  5726                           
  5727                           ;serialIO.c: 115:     SERIALIO.CLK = 0;
  5728  12B6  1283               	bcf	3,5	;RP0=0, select bank0
  5729  12B7  1303               	bcf	3,6	;RP1=0, select bank0
  5730  12B8  1105               	bcf	5,2	;volatile
  5731  12B9                     l6781:
  5732                           
  5733                           ;serialIO.c: 116:     SERIALIO.OUT = 0;
  5734  12B9  1005               	bcf	5,0	;volatile
  5735  12BA                     l6783:
  5736                           
  5737                           ;serialIO.c: 117:     SERIALIO.SHLD = 1;
  5738  12BA  1585               	bsf	5,3	;volatile
  5739  12BB                     l419:
  5740  12BB  0008               	return
  5741  12BC                     __end_of_initSerialIO:
  5742                           
  5743                           	psect	text26
  5744  1B30                     __ptext26:	
  5745 ;; *************** function _getContCiclos *****************
  5746 ;; Defined at:
  5747 ;;		line 47 in file "fifo.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;		None
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;		None
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  2    0[BANK0 ] unsigned int 
  5754 ;; Registers used:
  5755 ;;		wreg
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5761 ;;      Params:         0       2       0       0       0
  5762 ;;      Locals:         0       0       0       0       0
  5763 ;;      Temps:          0       0       0       0       0
  5764 ;;      Totals:         0       2       0       0       0
  5765 ;;Total ram usage:        2 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    2
  5768 ;; This function calls:
  5769 ;;		Nothing
  5770 ;; This function is called by:
  5771 ;;		_main
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           
  5776                           ;psect for function _getContCiclos
  5777  1B30                     _getContCiclos:
  5778  1B30                     l6497:	
  5779                           ;incstack = 0
  5780                           ; Regs used in _getContCiclos: [wreg]
  5781                           
  5782                           
  5783                           ;fifo.c: 49:     return(cont_ciclos);
  5784  1B30  0877               	movf	_cont_ciclos+1,w
  5785  1B31  1283               	bcf	3,5	;RP0=0, select bank0
  5786  1B32  1303               	bcf	3,6	;RP1=0, select bank0
  5787  1B33  00A1               	movwf	?_getContCiclos+1
  5788  1B34  0876               	movf	_cont_ciclos,w
  5789  1B35  00A0               	movwf	?_getContCiclos
  5790  1B36                     l215:
  5791  1B36  0008               	return
  5792  1B37                     __end_of_getContCiclos:
  5793                           
  5794                           	psect	text27
  5795  1C2F                     __ptext27:	
  5796 ;; *************** function _getCiclos *****************
  5797 ;; Defined at:
  5798 ;;		line 39 in file "fifo.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;		None
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;  aux             2    4[BANK0 ] int 
  5803 ;; Return value:  Size  Location     Type
  5804 ;;                  2    0[BANK0 ] unsigned int 
  5805 ;; Registers used:
  5806 ;;		wreg
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5812 ;;      Params:         0       2       0       0       0
  5813 ;;      Locals:         0       2       0       0       0
  5814 ;;      Temps:          0       2       0       0       0
  5815 ;;      Totals:         0       6       0       0       0
  5816 ;;Total ram usage:        6 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; Hardware stack levels required when called:    2
  5819 ;; This function calls:
  5820 ;;		Nothing
  5821 ;; This function is called by:
  5822 ;;		_main
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           
  5827                           ;psect for function _getCiclos
  5828  1C2F                     _getCiclos:
  5829  1C2F                     l6493:	
  5830                           ;incstack = 0
  5831                           ; Regs used in _getCiclos: [wreg]
  5832                           
  5833                           
  5834                           ;fifo.c: 41:     int aux = fila[1];
  5835  1C2F  1283               	bcf	3,5	;RP0=0, select bank0
  5836  1C30  1303               	bcf	3,6	;RP1=0, select bank0
  5837  1C31  0855               	movf	_fila+1,w
  5838  1C32  00A2               	movwf	??_getCiclos
  5839  1C33  01A3               	clrf	??_getCiclos+1
  5840  1C34  0822               	movf	??_getCiclos,w
  5841  1C35  00A4               	movwf	getCiclos@aux
  5842  1C36  0823               	movf	??_getCiclos+1,w
  5843  1C37  00A5               	movwf	getCiclos@aux+1
  5844                           
  5845                           ;fifo.c: 42:     aux <<= 8;
  5846  1C38  3008               	movlw	8
  5847  1C39                     u4375:
  5848  1C39  1003               	clrc
  5849  1C3A  0DA4               	rlf	getCiclos@aux,f
  5850  1C3B  0DA5               	rlf	getCiclos@aux+1,f
  5851  1C3C  3EFF               	addlw	-1
  5852  1C3D  1D03               	skipz
  5853  1C3E  2C39               	goto	u4375
  5854                           
  5855                           ;fifo.c: 43:     aux +=fila[0];
  5856  1C3F  0854               	movf	_fila,w
  5857  1C40  00A2               	movwf	??_getCiclos
  5858  1C41  01A3               	clrf	??_getCiclos+1
  5859  1C42  0822               	movf	??_getCiclos,w
  5860  1C43  07A4               	addwf	getCiclos@aux,f
  5861  1C44  1803               	skipnc
  5862  1C45  0AA5               	incf	getCiclos@aux+1,f
  5863  1C46  0823               	movf	??_getCiclos+1,w
  5864  1C47  07A5               	addwf	getCiclos@aux+1,f
  5865                           
  5866                           ;fifo.c: 44:     return(aux);
  5867  1C48  0825               	movf	getCiclos@aux+1,w
  5868  1C49  00A1               	movwf	?_getCiclos+1
  5869  1C4A  0824               	movf	getCiclos@aux,w
  5870  1C4B  00A0               	movwf	?_getCiclos
  5871  1C4C                     l212:
  5872  1C4C  0008               	return
  5873  1C4D                     __end_of_getCiclos:
  5874                           
  5875                           	psect	text28
  5876  1B0B                     __ptext28:	
  5877 ;; *************** function _fifo_tam *****************
  5878 ;; Defined at:
  5879 ;;		line 253 in file "fifo.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      unsigned char 
  5886 ;; Registers used:
  5887 ;;		wreg
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5893 ;;      Params:         0       0       0       0       0
  5894 ;;      Locals:         0       0       0       0       0
  5895 ;;      Temps:          0       0       0       0       0
  5896 ;;      Totals:         0       0       0       0       0
  5897 ;;Total ram usage:        0 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    2
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		_main
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           
  5908                           ;psect for function _fifo_tam
  5909  1B0B                     _fifo_tam:
  5910  1B0B                     l6613:	
  5911                           ;incstack = 0
  5912                           ; Regs used in _fifo_tam: [wreg]
  5913                           
  5914                           
  5915                           ;fifo.c: 255:     return( 18 );
  5916  1B0B  3012               	movlw	18
  5917  1B0C                     l309:
  5918  1B0C  0008               	return
  5919  1B0D                     __end_of_fifo_tam:
  5920                           
  5921                           	psect	text29
  5922  0477                     __ptext29:	
  5923 ;; *************** function _fifo_print *****************
  5924 ;; Defined at:
  5925 ;;		line 278 in file "fifo.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;		None
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  atraso          1   18[BANK0 ] unsigned char 
  5930 ;;  comando         1   17[BANK0 ] unsigned char 
  5931 ;;  i               1   16[BANK0 ] unsigned char 
  5932 ;;  indPrint        1   15[BANK0 ] unsigned char 
  5933 ;;  completar       1   14[BANK0 ] unsigned char 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  1    wreg      void 
  5936 ;; Registers used:
  5937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5943 ;;      Params:         0       0       0       0       0
  5944 ;;      Locals:         0       7       0       0       0
  5945 ;;      Temps:          0       3       0       0       0
  5946 ;;      Totals:         0      10       0       0       0
  5947 ;;Total ram usage:       10 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    4
  5950 ;; This function calls:
  5951 ;;		___awdiv
  5952 ;;		___awmod
  5953 ;;		_dispLCD_dataReg
  5954 ;;		_dispLCD_lincol
  5955 ;; This function is called by:
  5956 ;;		_main
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           
  5961                           ;psect for function _fifo_print
  5962  0477                     _fifo_print:
  5963  0477                     l6631:	
  5964                           ;incstack = 0
  5965                           ; Regs used in _fifo_print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5966                           
  5967                           
  5968                           ;fifo.c: 280:     char completar = 0;
  5969  0477  1283               	bcf	3,5	;RP0=0, select bank0
  5970  0478  1303               	bcf	3,6	;RP1=0, select bank0
  5971  0479  01AE               	clrf	fifo_print@completar
  5972                           
  5973                           ;fifo.c: 282:     char atraso = 0;
  5974  047A  01B2               	clrf	fifo_print@atraso
  5975                           
  5976                           ;fifo.c: 283:     char i = 0;
  5977  047B  01B0               	clrf	fifo_print@i
  5978  047C                     l6633:
  5979                           
  5980                           ;fifo.c: 284:     char indPrint = ind_print;
  5981  047C  0866               	movf	_ind_print,w
  5982  047D  00A9               	movwf	??_fifo_print
  5983  047E  0829               	movf	??_fifo_print,w
  5984  047F  00AF               	movwf	fifo_print@indPrint
  5985  0480                     l6635:
  5986                           
  5987                           ;fifo.c: 286:     dispLCD_lincol(0, 0);
  5988  0480  01A3               	clrf	dispLCD_lincol@col
  5989  0481  3000               	movlw	0
  5990  0482  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
  5991  0487                     l6637:
  5992                           
  5993                           ;fifo.c: 288:     {;fifo.c: 289:         if( completar )
  5994  0487  1283               	bcf	3,5	;RP0=0, select bank0
  5995  0488  1303               	bcf	3,6	;RP1=0, select bank0
  5996  0489  082E               	movf	fifo_print@completar,w
  5997  048A  1903               	btfsc	3,2
  5998  048B  2C8D               	goto	u4561
  5999  048C  2C8E               	goto	u4560
  6000  048D                     u4561:
  6001  048D  2C9B               	goto	l6643
  6002  048E                     u4560:
  6003  048E                     l6639:
  6004                           
  6005                           ;fifo.c: 290:         {;fifo.c: 291:             dispLCD_dataReg(' ');
  6006  048E  3020               	movlw	32
  6007  048F  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
  6008  0494                     l6641:
  6009                           
  6010                           ;fifo.c: 292:             ++i;
  6011  0494  3001               	movlw	1
  6012  0495  1283               	bcf	3,5	;RP0=0, select bank0
  6013  0496  1303               	bcf	3,6	;RP1=0, select bank0
  6014  0497  00A9               	movwf	??_fifo_print
  6015  0498  0829               	movf	??_fifo_print,w
  6016  0499  07B0               	addwf	fifo_print@i,f
  6017                           
  6018                           ;fifo.c: 293:         }
  6019  049A  2D84               	goto	l6699
  6020  049B                     l6643:
  6021                           
  6022                           ;fifo.c: 295:         {;fifo.c: 296:             comando = fila[indPrint++];
  6023  049B  082F               	movf	fifo_print@indPrint,w
  6024  049C  3E54               	addlw	(low (_fila| 0))& (0+255)
  6025  049D  0084               	movwf	4
  6026  049E  1383               	bcf	3,7	;select IRP bank0
  6027  049F  0800               	movf	0,w
  6028  04A0  00A9               	movwf	??_fifo_print
  6029  04A1  0829               	movf	??_fifo_print,w
  6030  04A2  00B1               	movwf	fifo_print@comando
  6031  04A3                     l6645:
  6032  04A3  3001               	movlw	1
  6033  04A4  00A9               	movwf	??_fifo_print
  6034  04A5  0829               	movf	??_fifo_print,w
  6035  04A6  07AF               	addwf	fifo_print@indPrint,f
  6036  04A7                     l6647:
  6037                           
  6038                           ;fifo.c: 298:             if( comando == 0 )
  6039  04A7  0831               	movf	fifo_print@comando,w
  6040  04A8  1D03               	btfss	3,2
  6041  04A9  2CAB               	goto	u4571
  6042  04AA  2CAC               	goto	u4570
  6043  04AB                     u4571:
  6044  04AB  2CAF               	goto	l326
  6045  04AC                     u4570:
  6046  04AC                     l6649:
  6047                           
  6048                           ;fifo.c: 299:                 completar = 1;
  6049  04AC  01AE               	clrf	fifo_print@completar
  6050  04AD  0AAE               	incf	fifo_print@completar,f
  6051  04AE  2D84               	goto	l6699
  6052  04AF                     l326:	
  6053                           ;fifo.c: 300:             else if(comando & 0x80)
  6054                           
  6055  04AF  1FB1               	btfss	fifo_print@comando,7
  6056  04B0  2CB2               	goto	u4581
  6057  04B1  2CB3               	goto	u4580
  6058  04B2                     u4581:
  6059  04B2  2D62               	goto	l6697
  6060  04B3                     u4580:
  6061  04B3                     l6651:
  6062                           
  6063                           ;fifo.c: 301:             {;fifo.c: 302:                 atraso = comando & ~0x80;
  6064  04B3  0831               	movf	fifo_print@comando,w
  6065  04B4  397F               	andlw	127
  6066  04B5  00A9               	movwf	??_fifo_print
  6067  04B6  0829               	movf	??_fifo_print,w
  6068  04B7  00B2               	movwf	fifo_print@atraso
  6069  04B8                     l6653:
  6070                           
  6071                           ;fifo.c: 303:                 if( atraso >= 100 )
  6072  04B8  3064               	movlw	100
  6073  04B9  0232               	subwf	fifo_print@atraso,w
  6074  04BA  1C03               	skipc
  6075  04BB  2CBD               	goto	u4591
  6076  04BC  2CBE               	goto	u4590
  6077  04BD                     u4591:
  6078  04BD  2CF2               	goto	l6667
  6079  04BE                     u4590:
  6080  04BE                     l6655:
  6081                           
  6082                           ;fifo.c: 304:                 {;fifo.c: 305:                     dispLCD_dataReg('1');
  6083  04BE  3031               	movlw	49
  6084  04BF  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
  6085  04C4                     l6657:
  6086                           
  6087                           ;fifo.c: 306:                     ++i;
  6088  04C4  3001               	movlw	1
  6089  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  6090  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  6091  04C7  00A9               	movwf	??_fifo_print
  6092  04C8  0829               	movf	??_fifo_print,w
  6093  04C9  07B0               	addwf	fifo_print@i,f
  6094  04CA                     l6659:
  6095                           
  6096                           ;fifo.c: 307:                     atraso %= 100;
  6097  04CA  3064               	movlw	100
  6098  04CB  00A0               	movwf	___awmod@divisor
  6099  04CC  3000               	movlw	0
  6100  04CD  00A1               	movwf	___awmod@divisor+1
  6101  04CE  0832               	movf	fifo_print@atraso,w
  6102  04CF  00A9               	movwf	??_fifo_print
  6103  04D0  01AA               	clrf	??_fifo_print+1
  6104  04D1  0829               	movf	??_fifo_print,w
  6105  04D2  00A2               	movwf	___awmod@dividend
  6106  04D3  082A               	movf	??_fifo_print+1,w
  6107  04D4  00A3               	movwf	___awmod@dividend+1
  6108  04D5  160A  118A  254D  120A  118A  	fcall	___awmod
  6109  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  6110  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  6111  04DC  0820               	movf	?___awmod,w
  6112  04DD  00AB               	movwf	??_fifo_print+2
  6113  04DE  082B               	movf	??_fifo_print+2,w
  6114  04DF  00B2               	movwf	fifo_print@atraso
  6115  04E0                     l6661:
  6116                           
  6117                           ;fifo.c: 308:                     if(atraso < 10)
  6118  04E0  300A               	movlw	10
  6119  04E1  0232               	subwf	fifo_print@atraso,w
  6120  04E2  1803               	skipnc
  6121  04E3  2CE5               	goto	u4601
  6122  04E4  2CE6               	goto	u4600
  6123  04E5                     u4601:
  6124  04E5  2CF2               	goto	l6667
  6125  04E6                     u4600:
  6126  04E6                     l6663:
  6127                           
  6128                           ;fifo.c: 309:                     {;fifo.c: 310:                         dispLCD_dataReg
      +                          ('0');
  6129  04E6  3030               	movlw	48
  6130  04E7  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
  6131  04EC                     l6665:
  6132                           
  6133                           ;fifo.c: 311:                         ++i;
  6134  04EC  3001               	movlw	1
  6135  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  6136  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  6137  04EF  00A9               	movwf	??_fifo_print
  6138  04F0  0829               	movf	??_fifo_print,w
  6139  04F1  07B0               	addwf	fifo_print@i,f
  6140  04F2                     l6667:
  6141                           
  6142                           ;fifo.c: 314:                 if( atraso >= 10 )
  6143  04F2  300A               	movlw	10
  6144  04F3  0232               	subwf	fifo_print@atraso,w
  6145  04F4  1C03               	skipc
  6146  04F5  2CF7               	goto	u4611
  6147  04F6  2CF8               	goto	u4610
  6148  04F7                     u4611:
  6149  04F7  2D2D               	goto	l6675
  6150  04F8                     u4610:
  6151  04F8                     l6669:
  6152                           
  6153                           ;fifo.c: 315:                 {;fifo.c: 316:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  6154  04F8  300A               	movlw	10
  6155  04F9  00A0               	movwf	___awdiv@divisor
  6156  04FA  3000               	movlw	0
  6157  04FB  00A1               	movwf	___awdiv@divisor+1
  6158  04FC  0832               	movf	fifo_print@atraso,w
  6159  04FD  00A9               	movwf	??_fifo_print
  6160  04FE  01AA               	clrf	??_fifo_print+1
  6161  04FF  0829               	movf	??_fifo_print,w
  6162  0500  00A2               	movwf	___awdiv@dividend
  6163  0501  082A               	movf	??_fifo_print+1,w
  6164  0502  00A3               	movwf	___awdiv@dividend+1
  6165  0503  160A  118A  25A8  120A  118A  	fcall	___awdiv
  6166  0508  1283               	bcf	3,5	;RP0=0, select bank0
  6167  0509  1303               	bcf	3,6	;RP1=0, select bank0
  6168  050A  0820               	movf	?___awdiv,w
  6169  050B  3E30               	addlw	48
  6170  050C  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
  6171  0511                     l6671:
  6172                           
  6173                           ;fifo.c: 317:                     ++i;
  6174  0511  3001               	movlw	1
  6175  0512  1283               	bcf	3,5	;RP0=0, select bank0
  6176  0513  1303               	bcf	3,6	;RP1=0, select bank0
  6177  0514  00A9               	movwf	??_fifo_print
  6178  0515  0829               	movf	??_fifo_print,w
  6179  0516  07B0               	addwf	fifo_print@i,f
  6180  0517                     l6673:
  6181                           
  6182                           ;fifo.c: 318:                     atraso %= 10;
  6183  0517  300A               	movlw	10
  6184  0518  00A0               	movwf	___awmod@divisor
  6185  0519  3000               	movlw	0
  6186  051A  00A1               	movwf	___awmod@divisor+1
  6187  051B  0832               	movf	fifo_print@atraso,w
  6188  051C  00A9               	movwf	??_fifo_print
  6189  051D  01AA               	clrf	??_fifo_print+1
  6190  051E  0829               	movf	??_fifo_print,w
  6191  051F  00A2               	movwf	___awmod@dividend
  6192  0520  082A               	movf	??_fifo_print+1,w
  6193  0521  00A3               	movwf	___awmod@dividend+1
  6194  0522  160A  118A  254D  120A  118A  	fcall	___awmod
  6195  0527  1283               	bcf	3,5	;RP0=0, select bank0
  6196  0528  1303               	bcf	3,6	;RP1=0, select bank0
  6197  0529  0820               	movf	?___awmod,w
  6198  052A  00AB               	movwf	??_fifo_print+2
  6199  052B  082B               	movf	??_fifo_print+2,w
  6200  052C  00B2               	movwf	fifo_print@atraso
  6201  052D                     l6675:
  6202                           
  6203                           ;fifo.c: 321:                 dispLCD_dataReg(atraso + '0');
  6204  052D  0832               	movf	fifo_print@atraso,w
  6205  052E  3E30               	addlw	48
  6206  052F  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
  6207  0534                     l6677:
  6208                           
  6209                           ;fifo.c: 322:                 ++i;
  6210  0534  3001               	movlw	1
  6211  0535  1283               	bcf	3,5	;RP0=0, select bank0
  6212  0536  1303               	bcf	3,6	;RP1=0, select bank0
  6213  0537  00A9               	movwf	??_fifo_print
  6214  0538  0829               	movf	??_fifo_print,w
  6215  0539  07B0               	addwf	fifo_print@i,f
  6216                           
  6217                           ;fifo.c: 324:                 dispLCD_dataReg('s');
  6218  053A  3073               	movlw	115
  6219  053B  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
  6220  0540  2C94               	goto	l6641
  6221  0541                     l337:	
  6222                           ;fifo.c: 334:                     case 'D':
  6223                           
  6224  0541                     l6681:
  6225                           
  6226                           ;fifo.c: 339:                                 dispLCD_dataReg( comando & ~0x20 );
  6227  0541  0831               	movf	fifo_print@comando,w
  6228  0542  39DF               	andlw	223
  6229  0543  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
  6230  0548                     l6683:
  6231                           
  6232                           ;fifo.c: 340:                                 ++i;
  6233  0548  3001               	movlw	1
  6234  0549  1283               	bcf	3,5	;RP0=0, select bank0
  6235  054A  1303               	bcf	3,6	;RP1=0, select bank0
  6236  054B  00A9               	movwf	??_fifo_print
  6237  054C  0829               	movf	??_fifo_print,w
  6238  054D  07B0               	addwf	fifo_print@i,f
  6239  054E                     l6685:
  6240                           
  6241                           ;fifo.c: 341:                                 dispLCD_dataReg( comando & 0x20 ? '-': '+'
      +                           );
  6242  054E  1AB1               	btfsc	fifo_print@comando,5
  6243  054F  2D51               	goto	u4621
  6244  0550  2D52               	goto	u4620
  6245  0551                     u4621:
  6246  0551  2D57               	goto	l6689
  6247  0552                     u4620:
  6248  0552                     l6687:
  6249  0552  302B               	movlw	43
  6250  0553  00AC               	movwf	_fifo_print$375
  6251  0554  3000               	movlw	0
  6252  0555  00AD               	movwf	_fifo_print$375+1
  6253  0556  2D5B               	goto	l6691
  6254  0557                     l6689:
  6255  0557  302D               	movlw	45
  6256  0558  00AC               	movwf	_fifo_print$375
  6257  0559  3000               	movlw	0
  6258  055A  00AD               	movwf	_fifo_print$375+1
  6259  055B                     l6691:
  6260  055B  082C               	movf	_fifo_print$375,w
  6261  055C  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
  6262  0561  2C94               	goto	l6641
  6263  0562                     l6697:
  6264  0562  0831               	movf	fifo_print@comando,w
  6265  0563  00A9               	movwf	??_fifo_print
  6266  0564  01AA               	clrf	??_fifo_print+1
  6267                           
  6268                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6269                           ; Switch size 1, requested type "simple"
  6270                           ; Number of cases is 1, Range of values is 0 to 0
  6271                           ; switch strategies available:
  6272                           ; Name         Instructions Cycles
  6273                           ; simple_byte            4     3 (average)
  6274                           ; direct_byte           11     8 (fixed)
  6275                           ; jumptable            260     6 (fixed)
  6276                           ;	Chosen strategy is simple_byte
  6277  0565  082A               	movf	??_fifo_print+1,w
  6278  0566  3A00               	xorlw	0	; case 0
  6279  0567  1903               	skipnz
  6280  0568  2D6A               	goto	l8085
  6281  0569  2D84               	goto	l327
  6282  056A                     l8085:
  6283                           
  6284                           ; Switch size 1, requested type "simple"
  6285                           ; Number of cases is 8, Range of values is 65 to 100
  6286                           ; switch strategies available:
  6287                           ; Name         Instructions Cycles
  6288                           ; simple_byte           25    13 (average)
  6289                           ; direct_byte          119    11 (fixed)
  6290                           ; jumptable            263     9 (fixed)
  6291                           ;	Chosen strategy is simple_byte
  6292  056A  0829               	movf	??_fifo_print,w
  6293  056B  3A41               	xorlw	65	; case 65
  6294  056C  1903               	skipnz
  6295  056D  2D41               	goto	l337
  6296  056E  3A03               	xorlw	3	; case 66
  6297  056F  1903               	skipnz
  6298  0570  2D41               	goto	l6681
  6299  0571  3A01               	xorlw	1	; case 67
  6300  0572  1903               	skipnz
  6301  0573  2D41               	goto	l6681
  6302  0574  3A07               	xorlw	7	; case 68
  6303  0575  1903               	skipnz
  6304  0576  2D41               	goto	l6681
  6305  0577  3A25               	xorlw	37	; case 97
  6306  0578  1903               	skipnz
  6307  0579  2D41               	goto	l6681
  6308  057A  3A03               	xorlw	3	; case 98
  6309  057B  1903               	skipnz
  6310  057C  2D41               	goto	l6681
  6311  057D  3A01               	xorlw	1	; case 99
  6312  057E  1903               	skipnz
  6313  057F  2D41               	goto	l6681
  6314  0580  3A07               	xorlw	7	; case 100
  6315  0581  1903               	skipnz
  6316  0582  2D41               	goto	l6681
  6317  0583  2D84               	goto	l327
  6318  0584                     l327:
  6319  0584                     l6699:
  6320                           
  6321                           ;fifo.c: 349:     }
  6322  0584  3015               	movlw	21
  6323  0585  0230               	subwf	fifo_print@i,w
  6324  0586  1C03               	skipc
  6325  0587  2D89               	goto	u4631
  6326  0588  2D8A               	goto	u4630
  6327  0589                     u4631:
  6328  0589  2C87               	goto	l6637
  6329  058A                     u4630:
  6330  058A                     l348:
  6331  058A  0008               	return
  6332  058B                     __end_of_fifo_print:
  6333                           
  6334                           	psect	text30
  6335  154D                     __ptext30:	
  6336 ;; *************** function ___awmod *****************
  6337 ;; Defined at:
  6338 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\awmod.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  divisor         2    0[BANK0 ] int 
  6341 ;;  dividend        2    2[BANK0 ] int 
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;  sign            1    6[BANK0 ] unsigned char 
  6344 ;;  counter         1    5[BANK0 ] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  2    0[BANK0 ] int 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2, status,0
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6354 ;;      Params:         0       4       0       0       0
  6355 ;;      Locals:         0       2       0       0       0
  6356 ;;      Temps:          0       1       0       0       0
  6357 ;;      Totals:         0       7       0       0       0
  6358 ;;Total ram usage:        7 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    2
  6361 ;; This function calls:
  6362 ;;		Nothing
  6363 ;; This function is called by:
  6364 ;;		_dispLCD_num
  6365 ;;		_fifo_print
  6366 ;;		_main
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           
  6371                           ;psect for function ___awmod
  6372  154D                     ___awmod:
  6373  154D                     l6029:	
  6374                           ;incstack = 0
  6375                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6376                           
  6377  154D  1283               	bcf	3,5	;RP0=0, select bank0
  6378  154E  1303               	bcf	3,6	;RP1=0, select bank0
  6379  154F  01A6               	clrf	___awmod@sign
  6380  1550                     l6031:
  6381  1550  1FA3               	btfss	___awmod@dividend+1,7
  6382  1551  2D53               	goto	u3831
  6383  1552  2D54               	goto	u3830
  6384  1553                     u3831:
  6385  1553  2D5B               	goto	l6037
  6386  1554                     u3830:
  6387  1554                     l6033:
  6388  1554  09A2               	comf	___awmod@dividend,f
  6389  1555  09A3               	comf	___awmod@dividend+1,f
  6390  1556  0AA2               	incf	___awmod@dividend,f
  6391  1557  1903               	skipnz
  6392  1558  0AA3               	incf	___awmod@dividend+1,f
  6393  1559                     l6035:
  6394  1559  01A6               	clrf	___awmod@sign
  6395  155A  0AA6               	incf	___awmod@sign,f
  6396  155B                     l6037:
  6397  155B  1FA1               	btfss	___awmod@divisor+1,7
  6398  155C  2D5E               	goto	u3841
  6399  155D  2D5F               	goto	u3840
  6400  155E                     u3841:
  6401  155E  2D64               	goto	l6041
  6402  155F                     u3840:
  6403  155F                     l6039:
  6404  155F  09A0               	comf	___awmod@divisor,f
  6405  1560  09A1               	comf	___awmod@divisor+1,f
  6406  1561  0AA0               	incf	___awmod@divisor,f
  6407  1562  1903               	skipnz
  6408  1563  0AA1               	incf	___awmod@divisor+1,f
  6409  1564                     l6041:
  6410  1564  0820               	movf	___awmod@divisor,w
  6411  1565  0421               	iorwf	___awmod@divisor+1,w
  6412  1566  1903               	btfsc	3,2
  6413  1567  2D69               	goto	u3851
  6414  1568  2D6A               	goto	u3850
  6415  1569                     u3851:
  6416  1569  2D99               	goto	l6059
  6417  156A                     u3850:
  6418  156A                     l6043:
  6419  156A  01A5               	clrf	___awmod@counter
  6420  156B  0AA5               	incf	___awmod@counter,f
  6421  156C  2D78               	goto	l6049
  6422  156D                     l6045:
  6423  156D  3001               	movlw	1
  6424  156E                     u3865:
  6425  156E  1003               	clrc
  6426  156F  0DA0               	rlf	___awmod@divisor,f
  6427  1570  0DA1               	rlf	___awmod@divisor+1,f
  6428  1571  3EFF               	addlw	-1
  6429  1572  1D03               	skipz
  6430  1573  2D6E               	goto	u3865
  6431  1574                     l6047:
  6432  1574  3001               	movlw	1
  6433  1575  00A4               	movwf	??___awmod
  6434  1576  0824               	movf	??___awmod,w
  6435  1577  07A5               	addwf	___awmod@counter,f
  6436  1578                     l6049:
  6437  1578  1FA1               	btfss	___awmod@divisor+1,7
  6438  1579  2D7B               	goto	u3871
  6439  157A  2D7C               	goto	u3870
  6440  157B                     u3871:
  6441  157B  2D6D               	goto	l6045
  6442  157C                     u3870:
  6443  157C                     l6051:
  6444  157C  0821               	movf	___awmod@divisor+1,w
  6445  157D  0223               	subwf	___awmod@dividend+1,w
  6446  157E  1D03               	skipz
  6447  157F  2D82               	goto	u3885
  6448  1580  0820               	movf	___awmod@divisor,w
  6449  1581  0222               	subwf	___awmod@dividend,w
  6450  1582                     u3885:
  6451  1582  1C03               	skipc
  6452  1583  2D85               	goto	u3881
  6453  1584  2D86               	goto	u3880
  6454  1585                     u3881:
  6455  1585  2D8C               	goto	l6055
  6456  1586                     u3880:
  6457  1586                     l6053:
  6458  1586  0820               	movf	___awmod@divisor,w
  6459  1587  02A2               	subwf	___awmod@dividend,f
  6460  1588  0821               	movf	___awmod@divisor+1,w
  6461  1589  1C03               	skipc
  6462  158A  03A3               	decf	___awmod@dividend+1,f
  6463  158B  02A3               	subwf	___awmod@dividend+1,f
  6464  158C                     l6055:
  6465  158C  3001               	movlw	1
  6466  158D                     u3895:
  6467  158D  1003               	clrc
  6468  158E  0CA1               	rrf	___awmod@divisor+1,f
  6469  158F  0CA0               	rrf	___awmod@divisor,f
  6470  1590  3EFF               	addlw	-1
  6471  1591  1D03               	skipz
  6472  1592  2D8D               	goto	u3895
  6473  1593                     l6057:
  6474  1593  3001               	movlw	1
  6475  1594  02A5               	subwf	___awmod@counter,f
  6476  1595  1D03               	btfss	3,2
  6477  1596  2D98               	goto	u3901
  6478  1597  2D99               	goto	u3900
  6479  1598                     u3901:
  6480  1598  2D7C               	goto	l6051
  6481  1599                     u3900:
  6482  1599                     l6059:
  6483  1599  0826               	movf	___awmod@sign,w
  6484  159A  1903               	btfsc	3,2
  6485  159B  2D9D               	goto	u3911
  6486  159C  2D9E               	goto	u3910
  6487  159D                     u3911:
  6488  159D  2DA3               	goto	l6063
  6489  159E                     u3910:
  6490  159E                     l6061:
  6491  159E  09A2               	comf	___awmod@dividend,f
  6492  159F  09A3               	comf	___awmod@dividend+1,f
  6493  15A0  0AA2               	incf	___awmod@dividend,f
  6494  15A1  1903               	skipnz
  6495  15A2  0AA3               	incf	___awmod@dividend+1,f
  6496  15A3                     l6063:
  6497  15A3  0823               	movf	___awmod@dividend+1,w
  6498  15A4  00A1               	movwf	?___awmod+1
  6499  15A5  0822               	movf	___awmod@dividend,w
  6500  15A6  00A0               	movwf	?___awmod
  6501  15A7                     l1093:
  6502  15A7  0008               	return
  6503  15A8                     __end_of___awmod:
  6504                           
  6505                           	psect	text31
  6506  1E7E                     __ptext31:	
  6507 ;; *************** function _fifo_indicePrint_inc *****************
  6508 ;; Defined at:
  6509 ;;		line 258 in file "fifo.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;		None
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;		None
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      void 
  6516 ;; Registers used:
  6517 ;;		wreg, status,2, status,0
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6523 ;;      Params:         0       0       0       0       0
  6524 ;;      Locals:         0       0       0       0       0
  6525 ;;      Temps:          0       2       0       0       0
  6526 ;;      Totals:         0       2       0       0       0
  6527 ;;Total ram usage:        2 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    2
  6530 ;; This function calls:
  6531 ;;		Nothing
  6532 ;; This function is called by:
  6533 ;;		_main
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           
  6538                           ;psect for function _fifo_indicePrint_inc
  6539  1E7E                     _fifo_indicePrint_inc:
  6540  1E7E                     l6617:	
  6541                           ;incstack = 0
  6542                           ; Regs used in _fifo_indicePrint_inc: [wreg+status,2+status,0]
  6543                           
  6544                           
  6545                           ;fifo.c: 260:     if( ind_print < 18 -1 )
  6546  1E7E  3011               	movlw	17
  6547  1E7F  1283               	bcf	3,5	;RP0=0, select bank0
  6548  1E80  1303               	bcf	3,6	;RP1=0, select bank0
  6549  1E81  0266               	subwf	_ind_print,w
  6550  1E82  1803               	skipnc
  6551  1E83  2E85               	goto	u4531
  6552  1E84  2E86               	goto	u4530
  6553  1E85                     u4531:
  6554  1E85  2EA7               	goto	l6625
  6555  1E86                     u4530:
  6556  1E86                     l6619:
  6557                           
  6558                           ;fifo.c: 261:     {;fifo.c: 262:         if( ind_print < ind_fila-1 )
  6559  1E86  0867               	movf	_ind_fila,w
  6560  1E87  3EFF               	addlw	255
  6561  1E88  00A0               	movwf	??_fifo_indicePrint_inc
  6562  1E89  30FF               	movlw	255
  6563  1E8A  1803               	skipnc
  6564  1E8B  3000               	movlw	0
  6565  1E8C  00A1               	movwf	??_fifo_indicePrint_inc+1
  6566  1E8D  0821               	movf	??_fifo_indicePrint_inc+1,w
  6567  1E8E  3A80               	xorlw	128
  6568  1E8F  3C80               	sublw	128
  6569  1E90  1D03               	skipz
  6570  1E91  2E94               	goto	u4545
  6571  1E92  0820               	movf	??_fifo_indicePrint_inc,w
  6572  1E93  0266               	subwf	_ind_print,w
  6573  1E94                     u4545:
  6574  1E94  1803               	skipnc
  6575  1E95  2E97               	goto	u4541
  6576  1E96  2E98               	goto	u4540
  6577  1E97                     u4541:
  6578  1E97  2E9F               	goto	l6623
  6579  1E98                     u4540:
  6580  1E98                     l6621:
  6581                           
  6582                           ;fifo.c: 263:             ind_print++;
  6583  1E98  3001               	movlw	1
  6584  1E99  1283               	bcf	3,5	;RP0=0, select bank0
  6585  1E9A  1303               	bcf	3,6	;RP1=0, select bank0
  6586  1E9B  00A0               	movwf	??_fifo_indicePrint_inc
  6587  1E9C  0820               	movf	??_fifo_indicePrint_inc,w
  6588  1E9D  07E6               	addwf	_ind_print,f
  6589  1E9E  2EAB               	goto	l316
  6590  1E9F                     l6623:
  6591                           
  6592                           ;fifo.c: 265:             ind_print = ind_fila-1;
  6593  1E9F  1283               	bcf	3,5	;RP0=0, select bank0
  6594  1EA0  1303               	bcf	3,6	;RP1=0, select bank0
  6595  1EA1  0867               	movf	_ind_fila,w
  6596  1EA2  3EFF               	addlw	255
  6597  1EA3  00A0               	movwf	??_fifo_indicePrint_inc
  6598  1EA4  0820               	movf	??_fifo_indicePrint_inc,w
  6599  1EA5  00E6               	movwf	_ind_print
  6600  1EA6  2EAB               	goto	l316
  6601  1EA7                     l6625:
  6602                           
  6603                           ;fifo.c: 268:         ind_print = 18 -1;
  6604  1EA7  3011               	movlw	17
  6605  1EA8  00A0               	movwf	??_fifo_indicePrint_inc
  6606  1EA9  0820               	movf	??_fifo_indicePrint_inc,w
  6607  1EAA  00E6               	movwf	_ind_print
  6608  1EAB                     l316:
  6609  1EAB  0008               	return
  6610  1EAC                     __end_of_fifo_indicePrint_inc:
  6611                           
  6612                           	psect	text32
  6613  1B6F                     __ptext32:	
  6614 ;; *************** function _fifo_indicePrint_dec *****************
  6615 ;; Defined at:
  6616 ;;		line 270 in file "fifo.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6630 ;;      Params:         0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0
  6633 ;;      Totals:         0       0       0       0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    2
  6637 ;; This function calls:
  6638 ;;		Nothing
  6639 ;; This function is called by:
  6640 ;;		_main
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _fifo_indicePrint_dec
  6646  1B6F                     _fifo_indicePrint_dec:
  6647  1B6F                     l6627:	
  6648                           ;incstack = 0
  6649                           ; Regs used in _fifo_indicePrint_dec: [wreg+status,2+status,0]
  6650                           
  6651                           
  6652                           ;fifo.c: 272:     if( ind_print > 2 )
  6653  1B6F  3003               	movlw	3
  6654  1B70  1283               	bcf	3,5	;RP0=0, select bank0
  6655  1B71  1303               	bcf	3,6	;RP1=0, select bank0
  6656  1B72  0266               	subwf	_ind_print,w
  6657  1B73  1C03               	skipc
  6658  1B74  2B76               	goto	u4551
  6659  1B75  2B77               	goto	u4550
  6660  1B76                     u4551:
  6661  1B76  2B79               	goto	l320
  6662  1B77                     u4550:
  6663  1B77                     l6629:
  6664                           
  6665                           ;fifo.c: 273:         ind_print--;
  6666  1B77  3001               	movlw	1
  6667  1B78  02E6               	subwf	_ind_print,f
  6668  1B79                     l320:
  6669  1B79  0008               	return
  6670  1B7A                     __end_of_fifo_indicePrint_dec:
  6671                           
  6672                           	psect	text33
  6673  1B14                     __ptext33:	
  6674 ;; *************** function _fifo_indice *****************
  6675 ;; Defined at:
  6676 ;;		line 243 in file "fifo.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      unsigned char 
  6683 ;; Registers used:
  6684 ;;		wreg
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6690 ;;      Params:         0       0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0
  6693 ;;      Totals:         0       0       0       0       0
  6694 ;;Total ram usage:        0 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    2
  6697 ;; This function calls:
  6698 ;;		Nothing
  6699 ;; This function is called by:
  6700 ;;		_main
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function _fifo_indice
  6706  1B14                     _fifo_indice:
  6707  1B14                     l6605:	
  6708                           ;incstack = 0
  6709                           ; Regs used in _fifo_indice: [wreg]
  6710                           
  6711                           
  6712                           ;fifo.c: 245:     return ( ind_fila );
  6713  1B14  1283               	bcf	3,5	;RP0=0, select bank0
  6714  1B15  1303               	bcf	3,6	;RP1=0, select bank0
  6715  1B16  0867               	movf	_ind_fila,w
  6716  1B17                     l303:
  6717  1B17  0008               	return
  6718  1B18                     __end_of_fifo_indice:
  6719                           
  6720                           	psect	text34
  6721  1B64                     __ptext34:	
  6722 ;; *************** function _fifo_disponivel *****************
  6723 ;; Defined at:
  6724 ;;		line 248 in file "fifo.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;		None
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  1    wreg      unsigned char 
  6731 ;; Registers used:
  6732 ;;		wreg
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6738 ;;      Params:         0       0       0       0       0
  6739 ;;      Locals:         0       0       0       0       0
  6740 ;;      Temps:          0       0       0       0       0
  6741 ;;      Totals:         0       0       0       0       0
  6742 ;;Total ram usage:        0 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:    2
  6745 ;; This function calls:
  6746 ;;		Nothing
  6747 ;; This function is called by:
  6748 ;;		_main
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           
  6753                           ;psect for function _fifo_disponivel
  6754  1B64                     _fifo_disponivel:
  6755  1B64                     l6609:	
  6756                           ;incstack = 0
  6757                           ; Regs used in _fifo_disponivel: [wreg]
  6758                           
  6759                           
  6760                           ;fifo.c: 250:     return( ind_fila < 18 );
  6761  1B64  3012               	movlw	18
  6762  1B65  1283               	bcf	3,5	;RP0=0, select bank0
  6763  1B66  1303               	bcf	3,6	;RP1=0, select bank0
  6764  1B67  0267               	subwf	_ind_fila,w
  6765  1B68  1C03               	skipc
  6766  1B69  2B6B               	goto	u4511
  6767  1B6A  2B6D               	goto	u4510
  6768  1B6B                     u4511:
  6769  1B6B  3001               	movlw	1
  6770  1B6C  2B6E               	goto	u4520
  6771  1B6D                     u4510:
  6772  1B6D  3000               	movlw	0
  6773  1B6E                     u4520:
  6774  1B6E                     l306:
  6775  1B6E  0008               	return
  6776  1B6F                     __end_of_fifo_disponivel:
  6777                           
  6778                           	psect	text35
  6779  1DD5                     __ptext35:	
  6780 ;; *************** function _fifo_delete *****************
  6781 ;; Defined at:
  6782 ;;		line 181 in file "fifo.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;		None
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      void 
  6789 ;; Registers used:
  6790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6796 ;;      Params:         0       0       0       0       0
  6797 ;;      Locals:         0       0       0       0       0
  6798 ;;      Temps:          0       0       0       0       0
  6799 ;;      Totals:         0       0       0       0       0
  6800 ;;Total ram usage:        0 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    5
  6803 ;; This function calls:
  6804 ;;		_alt_atuador
  6805 ;;		_fifo_alinharPrint
  6806 ;; This function is called by:
  6807 ;;		_main
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           
  6812                           ;psect for function _fifo_delete
  6813  1DD5                     _fifo_delete:
  6814  1DD5                     l6553:	
  6815                           ;incstack = 0
  6816                           ; Regs used in _fifo_delete: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6817                           
  6818                           
  6819                           ;fifo.c: 183:     if(ind_fila)
  6820  1DD5  1283               	bcf	3,5	;RP0=0, select bank0
  6821  1DD6  1303               	bcf	3,6	;RP1=0, select bank0
  6822  1DD7  0867               	movf	_ind_fila,w
  6823  1DD8  1903               	btfsc	3,2
  6824  1DD9  2DDB               	goto	u4431
  6825  1DDA  2DDC               	goto	u4430
  6826  1DDB                     u4431:
  6827  1DDB  2DF6               	goto	l6563
  6828  1DDC                     u4430:
  6829  1DDC                     l6555:
  6830                           
  6831                           ;fifo.c: 184:     {;fifo.c: 185:         if(ind_fila > 2)
  6832  1DDC  3003               	movlw	3
  6833  1DDD  0267               	subwf	_ind_fila,w
  6834  1DDE  1C03               	skipc
  6835  1DDF  2DE1               	goto	u4441
  6836  1DE0  2DE2               	goto	u4440
  6837  1DE1                     u4441:
  6838  1DE1  2DE4               	goto	l6559
  6839  1DE2                     u4440:
  6840  1DE2                     l6557:
  6841                           
  6842                           ;fifo.c: 186:             ind_fila--;
  6843  1DE2  3001               	movlw	1
  6844  1DE3  02E7               	subwf	_ind_fila,f
  6845  1DE4                     l6559:
  6846                           
  6847                           ;fifo.c: 187:         alt_atuador(fila[ind_fila] & ~0x20);
  6848  1DE4  0867               	movf	_ind_fila,w
  6849  1DE5  3E54               	addlw	(low (_fila| 0))& (0+255)
  6850  1DE6  0084               	movwf	4
  6851  1DE7  1383               	bcf	3,7	;select IRP bank0
  6852  1DE8  0800               	movf	0,w
  6853  1DE9  39DF               	andlw	223
  6854  1DEA  160A  118A  224E  160A  158A  	fcall	_alt_atuador
  6855  1DEF                     l6561:
  6856                           
  6857                           ;fifo.c: 188:         fila[ind_fila] = 0;
  6858  1DEF  1283               	bcf	3,5	;RP0=0, select bank0
  6859  1DF0  1303               	bcf	3,6	;RP1=0, select bank0
  6860  1DF1  0867               	movf	_ind_fila,w
  6861  1DF2  3E54               	addlw	(low (_fila| 0))& (0+255)
  6862  1DF3  0084               	movwf	4
  6863  1DF4  1383               	bcf	3,7	;select IRP bank0
  6864  1DF5  0180               	clrf	0
  6865  1DF6                     l6563:
  6866                           
  6867                           ;fifo.c: 190:     fifo_alinharPrint();
  6868  1DF6  160A  118A  244C  160A  158A  	fcall	_fifo_alinharPrint
  6869  1DFB                     l282:
  6870  1DFB  0008               	return
  6871  1DFC                     __end_of_fifo_delete:
  6872                           
  6873                           	psect	text36
  6874  124E                     __ptext36:	
  6875 ;; *************** function _alt_atuador *****************
  6876 ;; Defined at:
  6877 ;;		line 90 in file "fifo.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;  tecla           1    wreg     unsigned char 
  6880 ;; Auto vars:     Size  Location     Type
  6881 ;;  tecla           1    2[BANK0 ] unsigned char 
  6882 ;; Return value:  Size  Location     Type
  6883 ;;                  1    wreg      void 
  6884 ;; Registers used:
  6885 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6886 ;; Tracked objects:
  6887 ;;		On entry : 0/0
  6888 ;;		On exit  : 0/0
  6889 ;;		Unchanged: 0/0
  6890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6891 ;;      Params:         0       0       0       0       0
  6892 ;;      Locals:         0       1       0       0       0
  6893 ;;      Temps:          0       2       0       0       0
  6894 ;;      Totals:         0       3       0       0       0
  6895 ;;Total ram usage:        3 bytes
  6896 ;; Hardware stack levels used:    1
  6897 ;; Hardware stack levels required when called:    2
  6898 ;; This function calls:
  6899 ;;		Nothing
  6900 ;; This function is called by:
  6901 ;;		_manipula_atuadores_init
  6902 ;;		_fifo_delete
  6903 ;;		_main
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           
  6908                           ;psect for function _alt_atuador
  6909  124E                     _alt_atuador:
  6910                           
  6911                           ;incstack = 0
  6912                           ; Regs used in _alt_atuador: [wreg-fsr0h+status,2+status,0]
  6913                           ;alt_atuador@tecla stored from wreg
  6914  124E  1283               	bcf	3,5	;RP0=0, select bank0
  6915  124F  1303               	bcf	3,6	;RP1=0, select bank0
  6916  1250  00A2               	movwf	alt_atuador@tecla
  6917  1251                     l6175:
  6918                           
  6919                           ;fifo.c: 90: void alt_atuador( char tecla );fifo.c: 91: {;fifo.c: 92:     switch(tecla)
  6920  1251  2A6E               	goto	l6179
  6921  1252                     l237:	
  6922                           ;fifo.c: 93:     {;fifo.c: 94:         case 'A': atuador.A = atuador.A ^ 1; break;
  6923                           
  6924  1252  1C7A               	btfss	_atuador,0
  6925  1253  2A55               	goto	u4031
  6926  1254  2A57               	goto	u4030
  6927  1255                     u4031:
  6928  1255  147A               	bsf	_atuador,0
  6929  1256  2A58               	goto	u4044
  6930  1257                     u4030:
  6931  1257  107A               	bcf	_atuador,0
  6932  1258                     u4044:
  6933  1258  2A84               	goto	l242
  6934  1259                     l239:	
  6935                           ;fifo.c: 95:         case 'B': atuador.B = atuador.B ^ 1; break;
  6936                           
  6937  1259  1CFA               	btfss	_atuador,1
  6938  125A  2A5C               	goto	u4051
  6939  125B  2A5E               	goto	u4050
  6940  125C                     u4051:
  6941  125C  14FA               	bsf	_atuador,1
  6942  125D  2A5F               	goto	u4064
  6943  125E                     u4050:
  6944  125E  10FA               	bcf	_atuador,1
  6945  125F                     u4064:
  6946  125F  2A84               	goto	l242
  6947  1260                     l240:	
  6948                           ;fifo.c: 96:         case 'C': atuador.C = atuador.C ^ 1; break;
  6949                           
  6950  1260  1D7A               	btfss	_atuador,2
  6951  1261  2A63               	goto	u4071
  6952  1262  2A65               	goto	u4070
  6953  1263                     u4071:
  6954  1263  157A               	bsf	_atuador,2
  6955  1264  2A66               	goto	u4084
  6956  1265                     u4070:
  6957  1265  117A               	bcf	_atuador,2
  6958  1266                     u4084:
  6959  1266  2A84               	goto	l242
  6960  1267                     l241:	
  6961                           ;fifo.c: 97:         case 'D': atuador.D = atuador.D ^ 1; break;
  6962                           
  6963  1267  1DFA               	btfss	_atuador,3
  6964  1268  2A6A               	goto	u4091
  6965  1269  2A6C               	goto	u4090
  6966  126A                     u4091:
  6967  126A  15FA               	bsf	_atuador,3
  6968  126B  2A6D               	goto	u4104
  6969  126C                     u4090:
  6970  126C  11FA               	bcf	_atuador,3
  6971  126D                     u4104:
  6972  126D  2A84               	goto	l242
  6973  126E                     l6179:
  6974  126E  0822               	movf	alt_atuador@tecla,w
  6975  126F  00A0               	movwf	??_alt_atuador
  6976  1270  01A1               	clrf	??_alt_atuador+1
  6977                           
  6978                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6979                           ; Switch size 1, requested type "simple"
  6980                           ; Number of cases is 1, Range of values is 0 to 0
  6981                           ; switch strategies available:
  6982                           ; Name         Instructions Cycles
  6983                           ; simple_byte            4     3 (average)
  6984                           ; direct_byte           11     8 (fixed)
  6985                           ; jumptable            260     6 (fixed)
  6986                           ;	Chosen strategy is simple_byte
  6987  1271  0821               	movf	??_alt_atuador+1,w
  6988  1272  3A00               	xorlw	0	; case 0
  6989  1273  1903               	skipnz
  6990  1274  2A76               	goto	l8087
  6991  1275  2A84               	goto	l242
  6992  1276                     l8087:
  6993                           
  6994                           ; Switch size 1, requested type "simple"
  6995                           ; Number of cases is 4, Range of values is 65 to 68
  6996                           ; switch strategies available:
  6997                           ; Name         Instructions Cycles
  6998                           ; simple_byte           13     7 (average)
  6999                           ; direct_byte           23    11 (fixed)
  7000                           ; jumptable            263     9 (fixed)
  7001                           ;	Chosen strategy is simple_byte
  7002  1276  0820               	movf	??_alt_atuador,w
  7003  1277  3A41               	xorlw	65	; case 65
  7004  1278  1903               	skipnz
  7005  1279  2A52               	goto	l237
  7006  127A  3A03               	xorlw	3	; case 66
  7007  127B  1903               	skipnz
  7008  127C  2A59               	goto	l239
  7009  127D  3A01               	xorlw	1	; case 67
  7010  127E  1903               	skipnz
  7011  127F  2A60               	goto	l240
  7012  1280  3A07               	xorlw	7	; case 68
  7013  1281  1903               	skipnz
  7014  1282  2A67               	goto	l241
  7015  1283  2A84               	goto	l242
  7016  1284                     l242:
  7017  1284  0008               	return
  7018  1285                     __end_of_alt_atuador:
  7019                           
  7020                           	psect	text37
  7021  1B09                     __ptext37:	
  7022 ;; *************** function _fifo_adrs *****************
  7023 ;; Defined at:
  7024 ;;		line 176 in file "fifo.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;		None
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;		None
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  1    wreg      PTR unsigned char 
  7031 ;; Registers used:
  7032 ;;		wreg
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7038 ;;      Params:         0       0       0       0       0
  7039 ;;      Locals:         0       0       0       0       0
  7040 ;;      Temps:          0       0       0       0       0
  7041 ;;      Totals:         0       0       0       0       0
  7042 ;;Total ram usage:        0 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    2
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_main
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _fifo_adrs
  7054  1B09                     _fifo_adrs:
  7055  1B09                     l6549:	
  7056                           ;incstack = 0
  7057                           ; Regs used in _fifo_adrs: [wreg]
  7058                           
  7059                           
  7060                           ;fifo.c: 178:     return fila;
  7061  1B09  3054               	movlw	(low (_fila| 0))& (0+255)
  7062  1B0A                     l277:
  7063  1B0A  0008               	return
  7064  1B0B                     __end_of_fifo_adrs:
  7065                           
  7066                           	psect	text38
  7067  1D63                     __ptext38:	
  7068 ;; *************** function _fifo_add_tempo *****************
  7069 ;; Defined at:
  7070 ;;		line 207 in file "fifo.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;  t               1    wreg     const unsigned char 
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;  t               1   20[BANK0 ] const unsigned char 
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  1    wreg      void 
  7077 ;; Registers used:
  7078 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7084 ;;      Params:         0       0       0       0       0
  7085 ;;      Locals:         0       1       0       0       0
  7086 ;;      Temps:          0       1       0       0       0
  7087 ;;      Totals:         0       2       0       0       0
  7088 ;;Total ram usage:        2 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    5
  7091 ;; This function calls:
  7092 ;;		_fifo_alinharPrint
  7093 ;; This function is called by:
  7094 ;;		_main
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           
  7099                           ;psect for function _fifo_add_tempo
  7100  1D63                     _fifo_add_tempo:
  7101                           
  7102                           ;incstack = 0
  7103                           ; Regs used in _fifo_add_tempo: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7104                           ;fifo_add_tempo@t stored from wreg
  7105  1D63  1283               	bcf	3,5	;RP0=0, select bank0
  7106  1D64  1303               	bcf	3,6	;RP1=0, select bank0
  7107  1D65  00B4               	movwf	fifo_add_tempo@t
  7108  1D66                     l6577:
  7109                           
  7110                           ;fifo.c: 207: void fifo_add_tempo(const char t);fifo.c: 208: {;fifo.c: 209:     if(ind_f
      +                          ila < 18)
  7111  1D66  3012               	movlw	18
  7112  1D67  0267               	subwf	_ind_fila,w
  7113  1D68  1803               	skipnc
  7114  1D69  2D6B               	goto	u4471
  7115  1D6A  2D6C               	goto	u4470
  7116  1D6B                     u4471:
  7117  1D6B  2D82               	goto	l6587
  7118  1D6C                     u4470:
  7119  1D6C                     l6579:
  7120                           
  7121                           ;fifo.c: 210:     {;fifo.c: 211:         if(t)
  7122  1D6C  0834               	movf	fifo_add_tempo@t,w
  7123  1D6D  1903               	btfsc	3,2
  7124  1D6E  2D70               	goto	u4481
  7125  1D6F  2D71               	goto	u4480
  7126  1D70                     u4481:
  7127  1D70  2D82               	goto	l6587
  7128  1D71                     u4480:
  7129  1D71                     l6581:
  7130                           
  7131                           ;fifo.c: 212:         {;fifo.c: 213:             fila[ind_fila] = t | 0x80;
  7132  1D71  0834               	movf	fifo_add_tempo@t,w
  7133  1D72  3880               	iorlw	128
  7134  1D73  00B3               	movwf	??_fifo_add_tempo
  7135  1D74  0867               	movf	_ind_fila,w
  7136  1D75  3E54               	addlw	(low (_fila| 0))& (0+255)
  7137  1D76  0084               	movwf	4
  7138  1D77  0833               	movf	??_fifo_add_tempo,w
  7139  1D78  1383               	bcf	3,7	;select IRP bank0
  7140  1D79  0080               	movwf	0
  7141  1D7A                     l6583:
  7142                           
  7143                           ;fifo.c: 214:             ind_fila++;
  7144  1D7A  3001               	movlw	1
  7145  1D7B  00B3               	movwf	??_fifo_add_tempo
  7146  1D7C  0833               	movf	??_fifo_add_tempo,w
  7147  1D7D  07E7               	addwf	_ind_fila,f
  7148  1D7E                     l6585:
  7149                           
  7150                           ;fifo.c: 215:             fila[ind_fila] = 0;
  7151  1D7E  0867               	movf	_ind_fila,w
  7152  1D7F  3E54               	addlw	(low (_fila| 0))& (0+255)
  7153  1D80  0084               	movwf	4
  7154  1D81  0180               	clrf	0
  7155  1D82                     l6587:
  7156                           
  7157                           ;fifo.c: 218:     fifo_alinharPrint();
  7158  1D82  160A  118A  244C  160A  158A  	fcall	_fifo_alinharPrint
  7159  1D87                     l292:
  7160  1D87  0008               	return
  7161  1D88                     __end_of_fifo_add_tempo:
  7162                           
  7163                           	psect	text39
  7164  1D3E                     __ptext39:	
  7165 ;; *************** function _fifo_add_control *****************
  7166 ;; Defined at:
  7167 ;;		line 221 in file "fifo.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  c               1    wreg     const unsigned char 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  c               1   20[BANK0 ] const unsigned char 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      void 
  7174 ;; Registers used:
  7175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7181 ;;      Params:         0       0       0       0       0
  7182 ;;      Locals:         0       1       0       0       0
  7183 ;;      Temps:          0       1       0       0       0
  7184 ;;      Totals:         0       2       0       0       0
  7185 ;;Total ram usage:        2 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    5
  7188 ;; This function calls:
  7189 ;;		_fifo_alinharPrint
  7190 ;; This function is called by:
  7191 ;;		_main
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           
  7196                           ;psect for function _fifo_add_control
  7197  1D3E                     _fifo_add_control:
  7198                           
  7199                           ;incstack = 0
  7200                           ; Regs used in _fifo_add_control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7201                           ;fifo_add_control@c stored from wreg
  7202  1D3E  1283               	bcf	3,5	;RP0=0, select bank0
  7203  1D3F  1303               	bcf	3,6	;RP1=0, select bank0
  7204  1D40  00B4               	movwf	fifo_add_control@c
  7205  1D41                     l6589:
  7206                           
  7207                           ;fifo.c: 221: void fifo_add_control(const char c);fifo.c: 222: {;fifo.c: 223:     if(ind
      +                          _fila < 18)
  7208  1D41  3012               	movlw	18
  7209  1D42  0267               	subwf	_ind_fila,w
  7210  1D43  1803               	skipnc
  7211  1D44  2D46               	goto	u4491
  7212  1D45  2D47               	goto	u4490
  7213  1D46                     u4491:
  7214  1D46  2D5D               	goto	l6599
  7215  1D47                     u4490:
  7216  1D47                     l6591:
  7217                           
  7218                           ;fifo.c: 224:     {;fifo.c: 225:         if(c)
  7219  1D47  0834               	movf	fifo_add_control@c,w
  7220  1D48  1903               	btfsc	3,2
  7221  1D49  2D4B               	goto	u4501
  7222  1D4A  2D4C               	goto	u4500
  7223  1D4B                     u4501:
  7224  1D4B  2D5D               	goto	l6599
  7225  1D4C                     u4500:
  7226  1D4C                     l6593:
  7227                           
  7228                           ;fifo.c: 226:         {;fifo.c: 227:             fila[ind_fila] = c | 0x80;
  7229  1D4C  0834               	movf	fifo_add_control@c,w
  7230  1D4D  3880               	iorlw	128
  7231  1D4E  00B3               	movwf	??_fifo_add_control
  7232  1D4F  0867               	movf	_ind_fila,w
  7233  1D50  3E54               	addlw	(low (_fila| 0))& (0+255)
  7234  1D51  0084               	movwf	4
  7235  1D52  0833               	movf	??_fifo_add_control,w
  7236  1D53  1383               	bcf	3,7	;select IRP bank0
  7237  1D54  0080               	movwf	0
  7238  1D55                     l6595:
  7239                           
  7240                           ;fifo.c: 228:             ind_fila++;
  7241  1D55  3001               	movlw	1
  7242  1D56  00B3               	movwf	??_fifo_add_control
  7243  1D57  0833               	movf	??_fifo_add_control,w
  7244  1D58  07E7               	addwf	_ind_fila,f
  7245  1D59                     l6597:
  7246                           
  7247                           ;fifo.c: 229:             fila[ind_fila] = 0;
  7248  1D59  0867               	movf	_ind_fila,w
  7249  1D5A  3E54               	addlw	(low (_fila| 0))& (0+255)
  7250  1D5B  0084               	movwf	4
  7251  1D5C  0180               	clrf	0
  7252  1D5D                     l6599:
  7253                           
  7254                           ;fifo.c: 232:     fifo_alinharPrint();
  7255  1D5D  160A  118A  244C  160A  158A  	fcall	_fifo_alinharPrint
  7256  1D62                     l297:
  7257  1D62  0008               	return
  7258  1D63                     __end_of_fifo_add_control:
  7259                           
  7260                           	psect	text40
  7261  1B59                     __ptext40:	
  7262 ;; *************** function _fifo_add_ciclo *****************
  7263 ;; Defined at:
  7264 ;;		line 235 in file "fifo.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  ciclos          2    0[BANK0 ] unsigned int 
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;		None
  7269 ;; Return value:  Size  Location     Type
  7270 ;;                  1    wreg      void 
  7271 ;; Registers used:
  7272 ;;		wreg, status,2
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7278 ;;      Params:         0       2       0       0       0
  7279 ;;      Locals:         0       0       0       0       0
  7280 ;;      Temps:          0       1       0       0       0
  7281 ;;      Totals:         0       3       0       0       0
  7282 ;;Total ram usage:        3 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    2
  7285 ;; This function calls:
  7286 ;;		Nothing
  7287 ;; This function is called by:
  7288 ;;		_main
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           
  7293                           ;psect for function _fifo_add_ciclo
  7294  1B59                     _fifo_add_ciclo:
  7295  1B59                     l6601:	
  7296                           ;incstack = 0
  7297                           ; Regs used in _fifo_add_ciclo: [wreg+status,2]
  7298                           
  7299                           
  7300                           ;fifo.c: 235: void fifo_add_ciclo(unsigned int ciclos);fifo.c: 236: {;fifo.c: 237:     f
      +                          ila[0] = ciclos & 0x00ff;
  7301  1B59  1283               	bcf	3,5	;RP0=0, select bank0
  7302  1B5A  1303               	bcf	3,6	;RP1=0, select bank0
  7303  1B5B  0820               	movf	fifo_add_ciclo@ciclos,w
  7304  1B5C  00A2               	movwf	??_fifo_add_ciclo
  7305  1B5D  0822               	movf	??_fifo_add_ciclo,w
  7306  1B5E  00D4               	movwf	_fila
  7307  1B5F                     l6603:
  7308                           
  7309                           ;fifo.c: 238:     fila[1] = ciclos >> 8;
  7310  1B5F  0821               	movf	fifo_add_ciclo@ciclos+1,w
  7311  1B60  00A2               	movwf	??_fifo_add_ciclo
  7312  1B61  0822               	movf	??_fifo_add_ciclo,w
  7313  1B62  00D5               	movwf	_fila+1
  7314  1B63                     l300:
  7315  1B63  0008               	return
  7316  1B64                     __end_of_fifo_add_ciclo:
  7317                           
  7318                           	psect	text41
  7319  1CD1                     __ptext41:	
  7320 ;; *************** function _fifo_add *****************
  7321 ;; Defined at:
  7322 ;;		line 193 in file "fifo.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;  passo           1    wreg     const unsigned char 
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;  passo           1   20[BANK0 ] const unsigned char 
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  1    wreg      void 
  7329 ;; Registers used:
  7330 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7336 ;;      Params:         0       0       0       0       0
  7337 ;;      Locals:         0       1       0       0       0
  7338 ;;      Temps:          0       1       0       0       0
  7339 ;;      Totals:         0       2       0       0       0
  7340 ;;Total ram usage:        2 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:    5
  7343 ;; This function calls:
  7344 ;;		_fifo_alinharPrint
  7345 ;; This function is called by:
  7346 ;;		_main
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           
  7351                           ;psect for function _fifo_add
  7352  1CD1                     _fifo_add:
  7353                           
  7354                           ;incstack = 0
  7355                           ; Regs used in _fifo_add: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7356                           ;fifo_add@passo stored from wreg
  7357  1CD1  1283               	bcf	3,5	;RP0=0, select bank0
  7358  1CD2  1303               	bcf	3,6	;RP1=0, select bank0
  7359  1CD3  00B4               	movwf	fifo_add@passo
  7360  1CD4                     l6565:
  7361                           
  7362                           ;fifo.c: 193: void fifo_add(const char passo);fifo.c: 194: {;fifo.c: 195:     if(ind_fil
      +                          a < 18)
  7363  1CD4  3012               	movlw	18
  7364  1CD5  0267               	subwf	_ind_fila,w
  7365  1CD6  1803               	skipnc
  7366  1CD7  2CD9               	goto	u4451
  7367  1CD8  2CDA               	goto	u4450
  7368  1CD9                     u4451:
  7369  1CD9  2CEF               	goto	l6575
  7370  1CDA                     u4450:
  7371  1CDA                     l6567:
  7372                           
  7373                           ;fifo.c: 196:     {;fifo.c: 197:         if(passo)
  7374  1CDA  0834               	movf	fifo_add@passo,w
  7375  1CDB  1903               	btfsc	3,2
  7376  1CDC  2CDE               	goto	u4461
  7377  1CDD  2CDF               	goto	u4460
  7378  1CDE                     u4461:
  7379  1CDE  2CEF               	goto	l6575
  7380  1CDF                     u4460:
  7381  1CDF                     l6569:
  7382                           
  7383                           ;fifo.c: 198:         {;fifo.c: 199:             fila[ind_fila] = passo;
  7384  1CDF  0834               	movf	fifo_add@passo,w
  7385  1CE0  00B3               	movwf	??_fifo_add
  7386  1CE1  0867               	movf	_ind_fila,w
  7387  1CE2  3E54               	addlw	(low (_fila| 0))& (0+255)
  7388  1CE3  0084               	movwf	4
  7389  1CE4  0833               	movf	??_fifo_add,w
  7390  1CE5  1383               	bcf	3,7	;select IRP bank0
  7391  1CE6  0080               	movwf	0
  7392  1CE7                     l6571:
  7393                           
  7394                           ;fifo.c: 200:             ind_fila++;
  7395  1CE7  3001               	movlw	1
  7396  1CE8  00B3               	movwf	??_fifo_add
  7397  1CE9  0833               	movf	??_fifo_add,w
  7398  1CEA  07E7               	addwf	_ind_fila,f
  7399  1CEB                     l6573:
  7400                           
  7401                           ;fifo.c: 201:             fila[ind_fila] = 0;
  7402  1CEB  0867               	movf	_ind_fila,w
  7403  1CEC  3E54               	addlw	(low (_fila| 0))& (0+255)
  7404  1CED  0084               	movwf	4
  7405  1CEE  0180               	clrf	0
  7406  1CEF                     l6575:
  7407                           
  7408                           ;fifo.c: 204:     fifo_alinharPrint();
  7409  1CEF  160A  118A  244C  160A  158A  	fcall	_fifo_alinharPrint
  7410  1CF4                     l287:
  7411  1CF4  0008               	return
  7412  1CF5                     __end_of_fifo_add:
  7413                           
  7414                           	psect	text42
  7415  144C                     __ptext42:	
  7416 ;; *************** function _fifo_alinharPrint *****************
  7417 ;; Defined at:
  7418 ;;		line 375 in file "fifo.c"
  7419 ;; Parameters:    Size  Location     Type
  7420 ;;		None
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;  i               1   18[BANK0 ] unsigned char 
  7423 ;;  aux             1   17[BANK0 ] unsigned char 
  7424 ;;  cont            1   16[BANK0 ] unsigned char 
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      void 
  7427 ;; Registers used:
  7428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7434 ;;      Params:         0       0       0       0       0
  7435 ;;      Locals:         0       3       0       0       0
  7436 ;;      Temps:          0       3       0       0       0
  7437 ;;      Totals:         0       6       0       0       0
  7438 ;;Total ram usage:        6 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    4
  7441 ;; This function calls:
  7442 ;;		_dignum_tam
  7443 ;; This function is called by:
  7444 ;;		_fifo_delete
  7445 ;;		_fifo_add
  7446 ;;		_fifo_add_tempo
  7447 ;;		_fifo_add_control
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           
  7452                           ;psect for function _fifo_alinharPrint
  7453  144C                     _fifo_alinharPrint:
  7454  144C                     l6187:	
  7455                           ;incstack = 0
  7456                           ; Regs used in _fifo_alinharPrint: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7457                           
  7458                           
  7459                           ;fifo.c: 377:     unsigned char i;;fifo.c: 378:     unsigned char aux;;fifo.c: 379:     
      +                          unsigned char cont = 0;
  7460  144C  1283               	bcf	3,5	;RP0=0, select bank0
  7461  144D  1303               	bcf	3,6	;RP1=0, select bank0
  7462  144E  01B0               	clrf	fifo_alinharPrint@cont
  7463  144F                     l6189:
  7464                           
  7465                           ;fifo.c: 381:     for( i=ind_fila-1; i>=2; i-- )
  7466  144F  0867               	movf	_ind_fila,w
  7467  1450  3EFF               	addlw	255
  7468  1451  00AD               	movwf	??_fifo_alinharPrint
  7469  1452  082D               	movf	??_fifo_alinharPrint,w
  7470  1453  00B2               	movwf	fifo_alinharPrint@i
  7471  1454                     l6191:
  7472  1454  3002               	movlw	2
  7473  1455  0232               	subwf	fifo_alinharPrint@i,w
  7474  1456  1803               	skipnc
  7475  1457  2C59               	goto	u4111
  7476  1458  2C5A               	goto	u4110
  7477  1459                     u4111:
  7478  1459  2C5B               	goto	l6195
  7479  145A                     u4110:
  7480  145A  2C99               	goto	l370
  7481  145B                     l6195:
  7482                           
  7483                           ;fifo.c: 382:     {;fifo.c: 383:         aux = fila[i];
  7484  145B  0832               	movf	fifo_alinharPrint@i,w
  7485  145C  3E54               	addlw	(low (_fila| 0))& (0+255)
  7486  145D  0084               	movwf	4
  7487  145E  1383               	bcf	3,7	;select IRP bank0
  7488  145F  0800               	movf	0,w
  7489  1460  00AD               	movwf	??_fifo_alinharPrint
  7490  1461  082D               	movf	??_fifo_alinharPrint,w
  7491  1462  00B1               	movwf	fifo_alinharPrint@aux
  7492  1463                     l6197:
  7493                           
  7494                           ;fifo.c: 384:         if( aux & 0x80 )
  7495  1463  1FB1               	btfss	fifo_alinharPrint@aux,7
  7496  1464  2C66               	goto	u4121
  7497  1465  2C67               	goto	u4120
  7498  1466                     u4121:
  7499  1466  2C7B               	goto	l6201
  7500  1467                     u4120:
  7501  1467                     l6199:
  7502                           
  7503                           ;fifo.c: 385:         {;fifo.c: 386:             cont += dignum_tam( aux & 0x7F )+1;
  7504  1467  0831               	movf	fifo_alinharPrint@aux,w
  7505  1468  397F               	andlw	127
  7506  1469  00AD               	movwf	??_fifo_alinharPrint
  7507  146A  01AE               	clrf	??_fifo_alinharPrint+1
  7508  146B  082D               	movf	??_fifo_alinharPrint,w
  7509  146C  00A9               	movwf	dignum_tam@num
  7510  146D  082E               	movf	??_fifo_alinharPrint+1,w
  7511  146E  00AA               	movwf	dignum_tam@num+1
  7512  146F  160A  158A  24AE  160A  118A  	fcall	_dignum_tam
  7513  1474  3E01               	addlw	1
  7514  1475  1283               	bcf	3,5	;RP0=0, select bank0
  7515  1476  1303               	bcf	3,6	;RP1=0, select bank0
  7516  1477  00AF               	movwf	??_fifo_alinharPrint+2
  7517  1478  082F               	movf	??_fifo_alinharPrint+2,w
  7518  1479  07B0               	addwf	fifo_alinharPrint@cont,f
  7519                           
  7520                           ;fifo.c: 387:         }
  7521  147A  2C8B               	goto	l6207
  7522  147B                     l6201:
  7523  147B  3041               	movlw	65
  7524  147C  0231               	subwf	fifo_alinharPrint@aux,w
  7525  147D  1C03               	skipc
  7526  147E  2C80               	goto	u4131
  7527  147F  2C81               	goto	u4130
  7528  1480                     u4131:
  7529  1480  2C8B               	goto	l6207
  7530  1481                     u4130:
  7531  1481                     l6203:
  7532  1481  307B               	movlw	123
  7533  1482  0231               	subwf	fifo_alinharPrint@aux,w
  7534  1483  1803               	skipnc
  7535  1484  2C86               	goto	u4141
  7536  1485  2C87               	goto	u4140
  7537  1486                     u4141:
  7538  1486  2C8B               	goto	l6207
  7539  1487                     u4140:
  7540  1487                     l6205:
  7541                           
  7542                           ;fifo.c: 389:         {;fifo.c: 390:             cont += 2;
  7543  1487  3002               	movlw	2
  7544  1488  00AD               	movwf	??_fifo_alinharPrint
  7545  1489  082D               	movf	??_fifo_alinharPrint,w
  7546  148A  07B0               	addwf	fifo_alinharPrint@cont,f
  7547  148B                     l6207:
  7548                           
  7549                           ;fifo.c: 393:         if( cont > 20 )
  7550  148B  3015               	movlw	21
  7551  148C  0230               	subwf	fifo_alinharPrint@cont,w
  7552  148D  1C03               	skipc
  7553  148E  2C90               	goto	u4151
  7554  148F  2C91               	goto	u4150
  7555  1490                     u4151:
  7556  1490  2C92               	goto	l6213
  7557  1491                     u4150:
  7558  1491  2C99               	goto	l370
  7559  1492                     l6213:
  7560                           
  7561                           ;fifo.c: 398:             ind_print = i;
  7562  1492  0832               	movf	fifo_alinharPrint@i,w
  7563  1493  00AD               	movwf	??_fifo_alinharPrint
  7564  1494  082D               	movf	??_fifo_alinharPrint,w
  7565  1495  00E6               	movwf	_ind_print
  7566  1496                     l6215:
  7567                           
  7568                           ;fifo.c: 399:     }
  7569  1496  3001               	movlw	1
  7570  1497  02B2               	subwf	fifo_alinharPrint@i,f
  7571  1498  2C54               	goto	l6191
  7572  1499                     l370:
  7573  1499  0008               	return
  7574  149A                     __end_of_fifo_alinharPrint:
  7575                           
  7576                           	psect	text43
  7577  1CAE                     __ptext43:	
  7578 ;; *************** function _dignum_tam *****************
  7579 ;; Defined at:
  7580 ;;		line 363 in file "fifo.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  num             2    9[BANK0 ] int 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;  tam             1   12[BANK0 ] unsigned char 
  7585 ;; Return value:  Size  Location     Type
  7586 ;;                  1    wreg      unsigned char 
  7587 ;; Registers used:
  7588 ;;		wreg, status,2, status,0, pclath, cstack
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7594 ;;      Params:         0       2       0       0       0
  7595 ;;      Locals:         0       1       0       0       0
  7596 ;;      Temps:          0       1       0       0       0
  7597 ;;      Totals:         0       4       0       0       0
  7598 ;;Total ram usage:        4 bytes
  7599 ;; Hardware stack levels used:    1
  7600 ;; Hardware stack levels required when called:    3
  7601 ;; This function calls:
  7602 ;;		___awdiv
  7603 ;; This function is called by:
  7604 ;;		_fifo_alinharPrint
  7605 ;;		_printExec
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _dignum_tam
  7611  1CAE                     _dignum_tam:
  7612  1CAE                     l6017:	
  7613                           ;incstack = 0
  7614                           ; Regs used in _dignum_tam: [wreg+status,2+status,0+pclath+cstack]
  7615                           
  7616                           
  7617                           ;fifo.c: 363: unsigned char dignum_tam(int num);fifo.c: 364: {;fifo.c: 365:     unsigned
      +                           char tam = 0;
  7618  1CAE  1283               	bcf	3,5	;RP0=0, select bank0
  7619  1CAF  1303               	bcf	3,6	;RP1=0, select bank0
  7620  1CB0  01AC               	clrf	dignum_tam@tam
  7621                           
  7622                           ;fifo.c: 367:     while(num != 0)
  7623  1CB1  2CC9               	goto	l6023
  7624  1CB2                     l6019:
  7625                           
  7626                           ;fifo.c: 368:     {;fifo.c: 369:         num /= 10;
  7627  1CB2  300A               	movlw	10
  7628  1CB3  00A0               	movwf	___awdiv@divisor
  7629  1CB4  3000               	movlw	0
  7630  1CB5  00A1               	movwf	___awdiv@divisor+1
  7631  1CB6  082A               	movf	dignum_tam@num+1,w
  7632  1CB7  00A3               	movwf	___awdiv@dividend+1
  7633  1CB8  0829               	movf	dignum_tam@num,w
  7634  1CB9  00A2               	movwf	___awdiv@dividend
  7635  1CBA  160A  118A  25A8  160A  158A  	fcall	___awdiv
  7636  1CBF  1283               	bcf	3,5	;RP0=0, select bank0
  7637  1CC0  1303               	bcf	3,6	;RP1=0, select bank0
  7638  1CC1  0821               	movf	?___awdiv+1,w
  7639  1CC2  00AA               	movwf	dignum_tam@num+1
  7640  1CC3  0820               	movf	?___awdiv,w
  7641  1CC4  00A9               	movwf	dignum_tam@num
  7642  1CC5                     l6021:
  7643                           
  7644                           ;fifo.c: 370:         tam++;
  7645  1CC5  3001               	movlw	1
  7646  1CC6  00AB               	movwf	??_dignum_tam
  7647  1CC7  082B               	movf	??_dignum_tam,w
  7648  1CC8  07AC               	addwf	dignum_tam@tam,f
  7649  1CC9                     l6023:
  7650                           
  7651                           ;fifo.c: 367:     while(num != 0)
  7652  1CC9  0829               	movf	dignum_tam@num,w
  7653  1CCA  042A               	iorwf	dignum_tam@num+1,w
  7654  1CCB  1D03               	btfss	3,2
  7655  1CCC  2CCE               	goto	u3821
  7656  1CCD  2CCF               	goto	u3820
  7657  1CCE                     u3821:
  7658  1CCE  2CB2               	goto	l6019
  7659  1CCF                     u3820:
  7660  1CCF                     l6025:
  7661                           
  7662                           ;fifo.c: 372:     return ( tam );
  7663  1CCF  082C               	movf	dignum_tam@tam,w
  7664  1CD0                     l360:
  7665  1CD0  0008               	return
  7666  1CD1                     __end_of_dignum_tam:
  7667                           
  7668                           	psect	text44
  7669  15A8                     __ptext44:	
  7670 ;; *************** function ___awdiv *****************
  7671 ;; Defined at:
  7672 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\awdiv.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;  divisor         2    0[BANK0 ] int 
  7675 ;;  dividend        2    2[BANK0 ] int 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  quotient        2    7[BANK0 ] int 
  7678 ;;  sign            1    6[BANK0 ] unsigned char 
  7679 ;;  counter         1    5[BANK0 ] unsigned char 
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  2    0[BANK0 ] int 
  7682 ;; Registers used:
  7683 ;;		wreg, status,2, status,0
  7684 ;; Tracked objects:
  7685 ;;		On entry : 0/0
  7686 ;;		On exit  : 0/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7689 ;;      Params:         0       4       0       0       0
  7690 ;;      Locals:         0       4       0       0       0
  7691 ;;      Temps:          0       1       0       0       0
  7692 ;;      Totals:         0       9       0       0       0
  7693 ;;Total ram usage:        9 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    2
  7696 ;; This function calls:
  7697 ;;		Nothing
  7698 ;; This function is called by:
  7699 ;;		_dispLCD_num
  7700 ;;		_fifo_print
  7701 ;;		_dignum_tam
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           
  7706                           ;psect for function ___awdiv
  7707  15A8                     ___awdiv:
  7708  15A8                     l5929:	
  7709                           ;incstack = 0
  7710                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7711                           
  7712  15A8  1283               	bcf	3,5	;RP0=0, select bank0
  7713  15A9  1303               	bcf	3,6	;RP1=0, select bank0
  7714  15AA  01A6               	clrf	___awdiv@sign
  7715  15AB                     l5931:
  7716  15AB  1FA1               	btfss	___awdiv@divisor+1,7
  7717  15AC  2DAE               	goto	u3711
  7718  15AD  2DAF               	goto	u3710
  7719  15AE                     u3711:
  7720  15AE  2DB6               	goto	l5937
  7721  15AF                     u3710:
  7722  15AF                     l5933:
  7723  15AF  09A0               	comf	___awdiv@divisor,f
  7724  15B0  09A1               	comf	___awdiv@divisor+1,f
  7725  15B1  0AA0               	incf	___awdiv@divisor,f
  7726  15B2  1903               	skipnz
  7727  15B3  0AA1               	incf	___awdiv@divisor+1,f
  7728  15B4                     l5935:
  7729  15B4  01A6               	clrf	___awdiv@sign
  7730  15B5  0AA6               	incf	___awdiv@sign,f
  7731  15B6                     l5937:
  7732  15B6  1FA3               	btfss	___awdiv@dividend+1,7
  7733  15B7  2DB9               	goto	u3721
  7734  15B8  2DBA               	goto	u3720
  7735  15B9                     u3721:
  7736  15B9  2DC3               	goto	l5943
  7737  15BA                     u3720:
  7738  15BA                     l5939:
  7739  15BA  09A2               	comf	___awdiv@dividend,f
  7740  15BB  09A3               	comf	___awdiv@dividend+1,f
  7741  15BC  0AA2               	incf	___awdiv@dividend,f
  7742  15BD  1903               	skipnz
  7743  15BE  0AA3               	incf	___awdiv@dividend+1,f
  7744  15BF                     l5941:
  7745  15BF  3001               	movlw	1
  7746  15C0  00A4               	movwf	??___awdiv
  7747  15C1  0824               	movf	??___awdiv,w
  7748  15C2  06A6               	xorwf	___awdiv@sign,f
  7749  15C3                     l5943:
  7750  15C3  01A7               	clrf	___awdiv@quotient
  7751  15C4  01A8               	clrf	___awdiv@quotient+1
  7752  15C5                     l5945:
  7753  15C5  0820               	movf	___awdiv@divisor,w
  7754  15C6  0421               	iorwf	___awdiv@divisor+1,w
  7755  15C7  1903               	btfsc	3,2
  7756  15C8  2DCA               	goto	u3731
  7757  15C9  2DCB               	goto	u3730
  7758  15CA                     u3731:
  7759  15CA  2E02               	goto	l5965
  7760  15CB                     u3730:
  7761  15CB                     l5947:
  7762  15CB  01A5               	clrf	___awdiv@counter
  7763  15CC  0AA5               	incf	___awdiv@counter,f
  7764  15CD  2DD9               	goto	l5953
  7765  15CE                     l5949:
  7766  15CE  3001               	movlw	1
  7767  15CF                     u3745:
  7768  15CF  1003               	clrc
  7769  15D0  0DA0               	rlf	___awdiv@divisor,f
  7770  15D1  0DA1               	rlf	___awdiv@divisor+1,f
  7771  15D2  3EFF               	addlw	-1
  7772  15D3  1D03               	skipz
  7773  15D4  2DCF               	goto	u3745
  7774  15D5                     l5951:
  7775  15D5  3001               	movlw	1
  7776  15D6  00A4               	movwf	??___awdiv
  7777  15D7  0824               	movf	??___awdiv,w
  7778  15D8  07A5               	addwf	___awdiv@counter,f
  7779  15D9                     l5953:
  7780  15D9  1FA1               	btfss	___awdiv@divisor+1,7
  7781  15DA  2DDC               	goto	u3751
  7782  15DB  2DDD               	goto	u3750
  7783  15DC                     u3751:
  7784  15DC  2DCE               	goto	l5949
  7785  15DD                     u3750:
  7786  15DD                     l5955:
  7787  15DD  3001               	movlw	1
  7788  15DE                     u3765:
  7789  15DE  1003               	clrc
  7790  15DF  0DA7               	rlf	___awdiv@quotient,f
  7791  15E0  0DA8               	rlf	___awdiv@quotient+1,f
  7792  15E1  3EFF               	addlw	-1
  7793  15E2  1D03               	skipz
  7794  15E3  2DDE               	goto	u3765
  7795  15E4  0821               	movf	___awdiv@divisor+1,w
  7796  15E5  0223               	subwf	___awdiv@dividend+1,w
  7797  15E6  1D03               	skipz
  7798  15E7  2DEA               	goto	u3775
  7799  15E8  0820               	movf	___awdiv@divisor,w
  7800  15E9  0222               	subwf	___awdiv@dividend,w
  7801  15EA                     u3775:
  7802  15EA  1C03               	skipc
  7803  15EB  2DED               	goto	u3771
  7804  15EC  2DEE               	goto	u3770
  7805  15ED                     u3771:
  7806  15ED  2DF5               	goto	l5961
  7807  15EE                     u3770:
  7808  15EE                     l5957:
  7809  15EE  0820               	movf	___awdiv@divisor,w
  7810  15EF  02A2               	subwf	___awdiv@dividend,f
  7811  15F0  0821               	movf	___awdiv@divisor+1,w
  7812  15F1  1C03               	skipc
  7813  15F2  03A3               	decf	___awdiv@dividend+1,f
  7814  15F3  02A3               	subwf	___awdiv@dividend+1,f
  7815  15F4                     l5959:
  7816  15F4  1427               	bsf	___awdiv@quotient,0
  7817  15F5                     l5961:
  7818  15F5  3001               	movlw	1
  7819  15F6                     u3785:
  7820  15F6  1003               	clrc
  7821  15F7  0CA1               	rrf	___awdiv@divisor+1,f
  7822  15F8  0CA0               	rrf	___awdiv@divisor,f
  7823  15F9  3EFF               	addlw	-1
  7824  15FA  1D03               	skipz
  7825  15FB  2DF6               	goto	u3785
  7826  15FC                     l5963:
  7827  15FC  3001               	movlw	1
  7828  15FD  02A5               	subwf	___awdiv@counter,f
  7829  15FE  1D03               	btfss	3,2
  7830  15FF  2E01               	goto	u3791
  7831  1600  2E02               	goto	u3790
  7832  1601                     u3791:
  7833  1601  2DDD               	goto	l5955
  7834  1602                     u3790:
  7835  1602                     l5965:
  7836  1602  0826               	movf	___awdiv@sign,w
  7837  1603  1903               	btfsc	3,2
  7838  1604  2E06               	goto	u3801
  7839  1605  2E07               	goto	u3800
  7840  1606                     u3801:
  7841  1606  2E0C               	goto	l5969
  7842  1607                     u3800:
  7843  1607                     l5967:
  7844  1607  09A7               	comf	___awdiv@quotient,f
  7845  1608  09A8               	comf	___awdiv@quotient+1,f
  7846  1609  0AA7               	incf	___awdiv@quotient,f
  7847  160A  1903               	skipnz
  7848  160B  0AA8               	incf	___awdiv@quotient+1,f
  7849  160C                     l5969:
  7850  160C  0828               	movf	___awdiv@quotient+1,w
  7851  160D  00A1               	movwf	?___awdiv+1
  7852  160E  0827               	movf	___awdiv@quotient,w
  7853  160F  00A0               	movwf	?___awdiv
  7854  1610                     l1080:
  7855  1610  0008               	return
  7856  1611                     __end_of___awdiv:
  7857                           
  7858                           	psect	text45
  7859  1333                     __ptext45:	
  7860 ;; *************** function _dispLCD_str *****************
  7861 ;; Defined at:
  7862 ;;		line 249 in file "dispLCD4vias.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;  str             2    8[BANK0 ] PTR const unsigned char 
  7865 ;;		 -> STR_17(78), STR_16(57), STR_5(81), STR_4(83), 
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;  c               1   12[BANK0 ] unsigned char 
  7868 ;;  lin             1   11[BANK0 ] unsigned char 
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  1    wreg      void 
  7871 ;; Registers used:
  7872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7878 ;;      Params:         0       2       0       0       0
  7879 ;;      Locals:         0       2       0       0       0
  7880 ;;      Temps:          0       1       0       0       0
  7881 ;;      Totals:         0       5       0       0       0
  7882 ;;Total ram usage:        5 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    4
  7885 ;; This function calls:
  7886 ;;		_dispLCD_dataReg
  7887 ;;		_dispLCD_lincol
  7888 ;; This function is called by:
  7889 ;;		_main
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           
  7894                           ;psect for function _dispLCD_str
  7895  1333                     _dispLCD_str:
  7896  1333                     l6423:	
  7897                           ;incstack = 0
  7898                           ; Regs used in _dispLCD_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7899                           
  7900                           
  7901                           ;dispLCD4vias.c: 249: void dispLCD_str( const char * str );dispLCD4vias.c: 250: {;dispLC
      +                          D4vias.c: 251:     char lin = 0;
  7902  1333  1283               	bcf	3,5	;RP0=0, select bank0
  7903  1334  1303               	bcf	3,6	;RP1=0, select bank0
  7904  1335  01AB               	clrf	dispLCD_str@lin
  7905  1336                     l6425:
  7906                           
  7907                           ;dispLCD4vias.c: 252:     char c;;dispLCD4vias.c: 253:     dispLCD_lincol(0,0);
  7908  1336  01A3               	clrf	dispLCD_lincol@col
  7909  1337  3000               	movlw	0
  7910  1338  160A  158A  276A  160A  118A  	fcall	_dispLCD_lincol
  7911                           
  7912                           ;dispLCD4vias.c: 255:     while( c = *str )
  7913  133D  2B5E               	goto	l6435
  7914  133E                     l6427:
  7915                           
  7916                           ;dispLCD4vias.c: 256:     {;dispLCD4vias.c: 257:         if( c != '\n' )
  7917  133E  300A               	movlw	10
  7918  133F  062C               	xorwf	dispLCD_str@c,w
  7919  1340  1903               	btfsc	3,2
  7920  1341  2B43               	goto	u4311
  7921  1342  2B44               	goto	u4310
  7922  1343                     u4311:
  7923  1343  2B4B               	goto	l6431
  7924  1344                     u4310:
  7925  1344                     l6429:
  7926                           
  7927                           ;dispLCD4vias.c: 258:             dispLCD_dataReg( c );
  7928  1344  082C               	movf	dispLCD_str@c,w
  7929  1345  160A  158A  2739  160A  118A  	fcall	_dispLCD_dataReg
  7930  134A  2B56               	goto	l6433
  7931  134B                     l6431:
  7932                           
  7933                           ;dispLCD4vias.c: 260:             dispLCD_lincol(++lin,0);
  7934  134B  01A3               	clrf	dispLCD_lincol@col
  7935  134C  3001               	movlw	1
  7936  134D  00AA               	movwf	??_dispLCD_str
  7937  134E  082A               	movf	??_dispLCD_str,w
  7938  134F  07AB               	addwf	dispLCD_str@lin,f
  7939  1350  082B               	movf	dispLCD_str@lin,w
  7940  1351  160A  158A  276A  160A  118A  	fcall	_dispLCD_lincol
  7941  1356                     l6433:
  7942                           
  7943                           ;dispLCD4vias.c: 261:         ++str;
  7944  1356  3001               	movlw	1
  7945  1357  1283               	bcf	3,5	;RP0=0, select bank0
  7946  1358  1303               	bcf	3,6	;RP1=0, select bank0
  7947  1359  07A8               	addwf	dispLCD_str@str,f
  7948  135A  1803               	skipnc
  7949  135B  0AA9               	incf	dispLCD_str@str+1,f
  7950  135C  3000               	movlw	0
  7951  135D  07A9               	addwf	dispLCD_str@str+1,f
  7952  135E                     l6435:
  7953                           
  7954                           ;dispLCD4vias.c: 255:     while( c = *str )
  7955  135E  1283               	bcf	3,5	;RP0=0, select bank0
  7956  135F  1303               	bcf	3,6	;RP1=0, select bank0
  7957  1360  0829               	movf	dispLCD_str@str+1,w
  7958  1361  00FF               	movwf	btemp+1
  7959  1362  0828               	movf	dispLCD_str@str,w
  7960  1363  0084               	movwf	4
  7961  1364  160A  158A  2000  160A  118A  	fcall	stringtab
  7962  1369  00AA               	movwf	??_dispLCD_str
  7963  136A  082A               	movf	??_dispLCD_str,w
  7964  136B  00AC               	movwf	dispLCD_str@c
  7965  136C  082C               	movf	dispLCD_str@c,w
  7966  136D  1D03               	btfss	3,2
  7967  136E  2B70               	goto	u4321
  7968  136F  2B71               	goto	u4320
  7969  1370                     u4321:
  7970  1370  2B3E               	goto	l6427
  7971  1371                     u4320:
  7972  1371                     l105:
  7973  1371  0008               	return
  7974  1372                     __end_of_dispLCD_str:
  7975                           
  7976                           	psect	text46
  7977  1F09                     __ptext46:	
  7978 ;; *************** function _dispLCD_init *****************
  7979 ;; Defined at:
  7980 ;;		line 165 in file "dispLCD4vias.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;		None
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;		None
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      void 
  7987 ;; Registers used:
  7988 ;;		wreg, status,2, status,0, pclath, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7994 ;;      Params:         0       0       0       0       0
  7995 ;;      Locals:         0       0       0       0       0
  7996 ;;      Temps:          0       0       0       0       0
  7997 ;;      Totals:         0       0       0       0       0
  7998 ;;Total ram usage:        0 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    3
  8001 ;; This function calls:
  8002 ;;		_delay
  8003 ;;		_dispLCD_instReg
  8004 ;; This function is called by:
  8005 ;;		_main
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           
  8010                           ;psect for function _dispLCD_init
  8011  1F09                     _dispLCD_init:
  8012  1F09                     l6383:	
  8013                           ;incstack = 0
  8014                           ; Regs used in _dispLCD_init: [wreg+status,2+status,0+pclath+cstack]
  8015                           
  8016                           
  8017                           ;dispLCD4vias.c: 167:     ANSELH = 0x00;
  8018  1F09  1683               	bsf	3,5	;RP0=1, select bank3
  8019  1F0A  1703               	bsf	3,6	;RP1=1, select bank3
  8020  1F0B  0189               	clrf	9	;volatile
  8021  1F0C                     l6385:
  8022                           
  8023                           ;dispLCD4vias.c: 169:     TRISBbits.TRISB4 = 0;
  8024  1F0C  1683               	bsf	3,5	;RP0=1, select bank1
  8025  1F0D  1303               	bcf	3,6	;RP1=0, select bank1
  8026  1F0E  1206               	bcf	6,4	;volatile
  8027  1F0F                     l6387:
  8028                           
  8029                           ;dispLCD4vias.c: 170:     TRISBbits.TRISB5 = 0;
  8030  1F0F  1286               	bcf	6,5	;volatile
  8031  1F10                     l6389:
  8032                           
  8033                           ;dispLCD4vias.c: 172:     TRISBbits.TRISB0 = 0;
  8034  1F10  1006               	bcf	6,0	;volatile
  8035  1F11                     l6391:
  8036                           
  8037                           ;dispLCD4vias.c: 173:     TRISBbits.TRISB1 = 0;
  8038  1F11  1086               	bcf	6,1	;volatile
  8039  1F12                     l6393:
  8040                           
  8041                           ;dispLCD4vias.c: 174:     TRISBbits.TRISB2 = 0;
  8042  1F12  1106               	bcf	6,2	;volatile
  8043  1F13                     l6395:
  8044                           
  8045                           ;dispLCD4vias.c: 175:     TRISBbits.TRISB3 = 0;
  8046  1F13  1186               	bcf	6,3	;volatile
  8047  1F14                     l6397:
  8048                           
  8049                           ;dispLCD4vias.c: 177:     LCDbits.EN = 1;
  8050  1F14  1283               	bcf	3,5	;RP0=0, select bank0
  8051  1F15  1303               	bcf	3,6	;RP1=0, select bank0
  8052  1F16  1686               	bsf	6,5	;volatile
  8053  1F17                     l6399:
  8054                           
  8055                           ;dispLCD4vias.c: 178:     delay(5);
  8056  1F17  3005               	movlw	5
  8057  1F18  00A0               	movwf	delay@t
  8058  1F19  3000               	movlw	0
  8059  1F1A  00A1               	movwf	delay@t+1
  8060  1F1B  120A  158A  2000  160A  158A  	fcall	_delay
  8061  1F20                     l6401:
  8062                           
  8063                           ;dispLCD4vias.c: 179:     dispLCD_instReg( 0x20|0x00|0x08);
  8064  1F20  3028               	movlw	40
  8065  1F21  160A  118A  2611  160A  158A  	fcall	_dispLCD_instReg
  8066  1F26                     l6403:
  8067                           
  8068                           ;dispLCD4vias.c: 180:     dispLCD_instReg( 0x08|0x04|0x00|0x00 );
  8069  1F26  300C               	movlw	12
  8070  1F27  160A  118A  2611  160A  158A  	fcall	_dispLCD_instReg
  8071  1F2C                     l6405:
  8072                           
  8073                           ;dispLCD4vias.c: 181:     dispLCD_instReg( 0x01 );
  8074  1F2C  3001               	movlw	1
  8075  1F2D  160A  118A  2611  160A  158A  	fcall	_dispLCD_instReg
  8076  1F32                     l6407:
  8077                           
  8078                           ;dispLCD4vias.c: 182:     dispLCD_instReg( 0x02 );
  8079  1F32  3002               	movlw	2
  8080  1F33  160A  118A  2611  160A  158A  	fcall	_dispLCD_instReg
  8081  1F38                     l71:
  8082  1F38  0008               	return
  8083  1F39                     __end_of_dispLCD_init:
  8084                           
  8085                           	psect	text47
  8086  0800                     __ptext47:	
  8087 ;; *************** function _delay *****************
  8088 ;; Defined at:
  8089 ;;		line 10 in file "delay.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  t               2    0[BANK0 ] unsigned int 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;		None
  8094 ;; Return value:  Size  Location     Type
  8095 ;;                  1    wreg      void 
  8096 ;; Registers used:
  8097 ;;		wreg, status,2, status,0
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8103 ;;      Params:         0       2       0       0       0
  8104 ;;      Locals:         0       0       0       0       0
  8105 ;;      Temps:          0       2       0       0       0
  8106 ;;      Totals:         0       4       0       0       0
  8107 ;;Total ram usage:        4 bytes
  8108 ;; Hardware stack levels used:    1
  8109 ;; Hardware stack levels required when called:    2
  8110 ;; This function calls:
  8111 ;;		Nothing
  8112 ;; This function is called by:
  8113 ;;		_dispLCD_init
  8114 ;;		_main
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           
  8119                           ;psect for function _delay
  8120  0800                     _delay:
  8121  0800                     l6067:	
  8122                           ;incstack = 0
  8123                           ; Regs used in _delay: [wreg+status,2+status,0]
  8124                           
  8125                           
  8126                           ;delay.c: 10: void delay( unsigned int t );delay.c: 11: {;delay.c: 12:     while( t )
  8127  0800  2814               	goto	l6071
  8128  0801                     l6069:
  8129                           
  8130                           ;delay.c: 13:     {;delay.c: 14:         _delay((unsigned long)((1)*(20000000/4000.0)));
  8131  0801  3007               	movlw	7
  8132  0802  1283               	bcf	3,5	;RP0=0, select bank0
  8133  0803  1303               	bcf	3,6	;RP1=0, select bank0
  8134  0804  00A3               	movwf	??_delay+1
  8135  0805  307C               	movlw	124
  8136  0806  00A2               	movwf	??_delay
  8137  0807                     u5347:
  8138  0807  0BA2               	decfsz	??_delay,f
  8139  0808  2807               	goto	u5347
  8140  0809  0BA3               	decfsz	??_delay+1,f
  8141  080A  2807               	goto	u5347
  8142  080B  0000               	nop
  8143                           
  8144                           ;delay.c: 15:         --t;
  8145  080C  3001               	movlw	1
  8146  080D  1283               	bcf	3,5	;RP0=0, select bank0
  8147  080E  1303               	bcf	3,6	;RP1=0, select bank0
  8148  080F  02A0               	subwf	delay@t,f
  8149  0810  3000               	movlw	0
  8150  0811  1C03               	skipc
  8151  0812  03A1               	decf	delay@t+1,f
  8152  0813  02A1               	subwf	delay@t+1,f
  8153  0814                     l6071:
  8154                           
  8155                           ;delay.c: 12:     while( t )
  8156  0814  1283               	bcf	3,5	;RP0=0, select bank0
  8157  0815  1303               	bcf	3,6	;RP1=0, select bank0
  8158  0816  0820               	movf	delay@t,w
  8159  0817  0421               	iorwf	delay@t+1,w
  8160  0818  1D03               	btfss	3,2
  8161  0819  281B               	goto	u3921
  8162  081A  281C               	goto	u3920
  8163  081B                     u3921:
  8164  081B  2801               	goto	l6069
  8165  081C                     u3920:
  8166  081C                     l35:
  8167  081C  0008               	return
  8168  081D                     __end_of_delay:
  8169                           
  8170                           	psect	text48
  8171  1B29                     __ptext48:	
  8172 ;; *************** function _dispLCD_clr *****************
  8173 ;; Defined at:
  8174 ;;		line 243 in file "dispLCD4vias.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  1    wreg      void 
  8181 ;; Registers used:
  8182 ;;		wreg, status,2, status,0, pclath, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8188 ;;      Params:         0       0       0       0       0
  8189 ;;      Locals:         0       0       0       0       0
  8190 ;;      Temps:          0       0       0       0       0
  8191 ;;      Totals:         0       0       0       0       0
  8192 ;;Total ram usage:        0 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    3
  8195 ;; This function calls:
  8196 ;;		_dispLCD_instReg
  8197 ;; This function is called by:
  8198 ;;		_main
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function _dispLCD_clr
  8204  1B29                     _dispLCD_clr:
  8205  1B29                     l6421:	
  8206                           ;incstack = 0
  8207                           ; Regs used in _dispLCD_clr: [wreg+status,2+status,0+pclath+cstack]
  8208                           
  8209                           
  8210                           ;dispLCD4vias.c: 245:     dispLCD_instReg(0x01);
  8211  1B29  3001               	movlw	1
  8212  1B2A  160A  118A  2611  160A  158A  	fcall	_dispLCD_instReg
  8213  1B2F                     l97:
  8214  1B2F  0008               	return
  8215  1B30                     __end_of_dispLCD_clr:
  8216                           
  8217                           	psect	text49
  8218  12F7                     __ptext49:	
  8219 ;; *************** function _dispLCD *****************
  8220 ;; Defined at:
  8221 ;;		line 186 in file "dispLCD4vias.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;  lin             1    8[BANK0 ] unsigned char 
  8224 ;;  col             1    9[BANK0 ] unsigned char 
  8225 ;;  str             2   10[BANK0 ] PTR const unsigned char 
  8226 ;;		 -> STR_22(21), STR_21(21), STR_20(21), STR_19(2), 
  8227 ;;		 -> STR_18(2), STR_15(21), STR_14(21), STR_13(21), 
  8228 ;;		 -> STR_12(21), STR_11(21), STR_10(8), STR_9(21), 
  8229 ;;		 -> STR_8(21), STR_7(21), STR_6(21), STR_3(21), 
  8230 ;;		 -> STR_2(2), STR_1(2), 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  pos             1   13[BANK0 ] unsigned char 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  1    wreg      void 
  8235 ;; Registers used:
  8236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8242 ;;      Params:         0       4       0       0       0
  8243 ;;      Locals:         0       1       0       0       0
  8244 ;;      Temps:          0       1       0       0       0
  8245 ;;      Totals:         0       6       0       0       0
  8246 ;;Total ram usage:        6 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    4
  8249 ;; This function calls:
  8250 ;;		_dispLCD_dataReg
  8251 ;;		_dispLCD_lincol
  8252 ;; This function is called by:
  8253 ;;		_main
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           
  8258                           ;psect for function _dispLCD
  8259  12F7                     _dispLCD:
  8260  12F7                     l6409:	
  8261                           ;incstack = 0
  8262                           ; Regs used in _dispLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8263                           
  8264                           
  8265                           ;dispLCD4vias.c: 186: void dispLCD( unsigned char lin, unsigned char col, const char * s
      +                          tr );dispLCD4vias.c: 187: {;dispLCD4vias.c: 188:     char pos = col;
  8266  12F7  1283               	bcf	3,5	;RP0=0, select bank0
  8267  12F8  1303               	bcf	3,6	;RP1=0, select bank0
  8268  12F9  0829               	movf	dispLCD@col,w
  8269  12FA  00AC               	movwf	??_dispLCD
  8270  12FB  082C               	movf	??_dispLCD,w
  8271  12FC  00AD               	movwf	dispLCD@pos
  8272  12FD                     l6411:
  8273                           
  8274                           ;dispLCD4vias.c: 189:     dispLCD_lincol( lin, col );
  8275  12FD  0829               	movf	dispLCD@col,w
  8276  12FE  00AC               	movwf	??_dispLCD
  8277  12FF  082C               	movf	??_dispLCD,w
  8278  1300  00A3               	movwf	dispLCD_lincol@col
  8279  1301  0828               	movf	dispLCD@lin,w
  8280  1302  160A  158A  276A  160A  118A  	fcall	_dispLCD_lincol
  8281                           
  8282                           ;dispLCD4vias.c: 191:     while( *str )
  8283  1307  2B22               	goto	l6419
  8284  1308                     l6413:
  8285                           
  8286                           ;dispLCD4vias.c: 192:     {;dispLCD4vias.c: 193:         dispLCD_dataReg( *str );
  8287  1308  082B               	movf	dispLCD@str+1,w
  8288  1309  00FF               	movwf	btemp+1
  8289  130A  082A               	movf	dispLCD@str,w
  8290  130B  0084               	movwf	4
  8291  130C  160A  158A  2000  160A  118A  	fcall	stringtab
  8292  1311  160A  158A  2739  160A  118A  	fcall	_dispLCD_dataReg
  8293  1316                     l6415:
  8294                           
  8295                           ;dispLCD4vias.c: 194:         ++str;
  8296  1316  3001               	movlw	1
  8297  1317  1283               	bcf	3,5	;RP0=0, select bank0
  8298  1318  1303               	bcf	3,6	;RP1=0, select bank0
  8299  1319  07AA               	addwf	dispLCD@str,f
  8300  131A  1803               	skipnc
  8301  131B  0AAB               	incf	dispLCD@str+1,f
  8302  131C  3000               	movlw	0
  8303  131D  07AB               	addwf	dispLCD@str+1,f
  8304  131E                     l6417:
  8305                           
  8306                           ;dispLCD4vias.c: 195:         ++pos;
  8307  131E  3001               	movlw	1
  8308  131F  00AC               	movwf	??_dispLCD
  8309  1320  082C               	movf	??_dispLCD,w
  8310  1321  07AD               	addwf	dispLCD@pos,f
  8311  1322                     l6419:
  8312                           
  8313                           ;dispLCD4vias.c: 191:     while( *str )
  8314  1322  1283               	bcf	3,5	;RP0=0, select bank0
  8315  1323  1303               	bcf	3,6	;RP1=0, select bank0
  8316  1324  082B               	movf	dispLCD@str+1,w
  8317  1325  00FF               	movwf	btemp+1
  8318  1326  082A               	movf	dispLCD@str,w
  8319  1327  0084               	movwf	4
  8320  1328  160A  158A  2000  160A  118A  	fcall	stringtab
  8321  132D  3A00               	xorlw	0
  8322  132E  1D03               	skipz
  8323  132F  2B31               	goto	u4301
  8324  1330  2B32               	goto	u4300
  8325  1331                     u4301:
  8326  1331  2B08               	goto	l6413
  8327  1332                     u4300:
  8328  1332                     l77:
  8329  1332  0008               	return
  8330  1333                     __end_of_dispLCD:
  8331                           
  8332                           	psect	text50
  8333  1F6A                     __ptext50:	
  8334 ;; *************** function _dispLCD_lincol *****************
  8335 ;; Defined at:
  8336 ;;		line 150 in file "dispLCD4vias.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  lin             1    wreg     unsigned char 
  8339 ;;  col             1    3[BANK0 ] unsigned char 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;  lin             1    6[BANK0 ] unsigned char 
  8342 ;;  aux             1    7[BANK0 ] unsigned char 
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  1    wreg      void 
  8345 ;; Registers used:
  8346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8352 ;;      Params:         0       1       0       0       0
  8353 ;;      Locals:         0       2       0       0       0
  8354 ;;      Temps:          0       2       0       0       0
  8355 ;;      Totals:         0       5       0       0       0
  8356 ;;Total ram usage:        5 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; Hardware stack levels required when called:    3
  8359 ;; This function calls:
  8360 ;;		_dispLCD_instReg
  8361 ;; This function is called by:
  8362 ;;		_dispLCD
  8363 ;;		_dispLCD_num
  8364 ;;		_dispLCD_str
  8365 ;;		_fifo_print
  8366 ;;		_printExec
  8367 ;;		_main
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           
  8372                           ;psect for function _dispLCD_lincol
  8373  1F6A                     _dispLCD_lincol:
  8374                           
  8375                           ;incstack = 0
  8376                           ; Regs used in _dispLCD_lincol: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8377                           ;dispLCD_lincol@lin stored from wreg
  8378  1F6A  1283               	bcf	3,5	;RP0=0, select bank0
  8379  1F6B  1303               	bcf	3,6	;RP1=0, select bank0
  8380  1F6C  00A6               	movwf	dispLCD_lincol@lin
  8381  1F6D                     l5991:
  8382                           
  8383                           ;dispLCD4vias.c: 150: void dispLCD_lincol( unsigned char lin, unsigned char col);dispLCD
      +                          4vias.c: 151: {;dispLCD4vias.c: 152:     char aux = 0x00;
  8384  1F6D  01A7               	clrf	dispLCD_lincol@aux
  8385                           
  8386                           ;dispLCD4vias.c: 154:     switch(lin)
  8387  1F6E  2F7E               	goto	l6001
  8388  1F6F                     l5993:
  8389  1F6F  3040               	movlw	64
  8390  1F70  00A4               	movwf	??_dispLCD_lincol
  8391  1F71  0824               	movf	??_dispLCD_lincol,w
  8392  1F72  00A7               	movwf	dispLCD_lincol@aux
  8393  1F73  2F91               	goto	l6003
  8394  1F74                     l5995:
  8395  1F74  3014               	movlw	20
  8396  1F75  00A4               	movwf	??_dispLCD_lincol
  8397  1F76  0824               	movf	??_dispLCD_lincol,w
  8398  1F77  00A7               	movwf	dispLCD_lincol@aux
  8399  1F78  2F91               	goto	l6003
  8400  1F79                     l5997:
  8401  1F79  3054               	movlw	84
  8402  1F7A  00A4               	movwf	??_dispLCD_lincol
  8403  1F7B  0824               	movf	??_dispLCD_lincol,w
  8404  1F7C  00A7               	movwf	dispLCD_lincol@aux
  8405  1F7D  2F91               	goto	l6003
  8406  1F7E                     l6001:
  8407  1F7E  0826               	movf	dispLCD_lincol@lin,w
  8408  1F7F  00A4               	movwf	??_dispLCD_lincol
  8409  1F80  01A5               	clrf	??_dispLCD_lincol+1
  8410                           
  8411                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8412                           ; Switch size 1, requested type "simple"
  8413                           ; Number of cases is 1, Range of values is 0 to 0
  8414                           ; switch strategies available:
  8415                           ; Name         Instructions Cycles
  8416                           ; simple_byte            4     3 (average)
  8417                           ; direct_byte           11     8 (fixed)
  8418                           ; jumptable            260     6 (fixed)
  8419                           ;	Chosen strategy is simple_byte
  8420  1F81  0825               	movf	??_dispLCD_lincol+1,w
  8421  1F82  3A00               	xorlw	0	; case 0
  8422  1F83  1903               	skipnz
  8423  1F84  2F86               	goto	l8089
  8424  1F85  2F91               	goto	l6003
  8425  1F86                     l8089:
  8426                           
  8427                           ; Switch size 1, requested type "simple"
  8428                           ; Number of cases is 3, Range of values is 1 to 3
  8429                           ; switch strategies available:
  8430                           ; Name         Instructions Cycles
  8431                           ; simple_byte           10     6 (average)
  8432                           ; direct_byte           20    11 (fixed)
  8433                           ; jumptable            263     9 (fixed)
  8434                           ;	Chosen strategy is simple_byte
  8435  1F86  0824               	movf	??_dispLCD_lincol,w
  8436  1F87  3A01               	xorlw	1	; case 1
  8437  1F88  1903               	skipnz
  8438  1F89  2F6F               	goto	l5993
  8439  1F8A  3A03               	xorlw	3	; case 2
  8440  1F8B  1903               	skipnz
  8441  1F8C  2F74               	goto	l5995
  8442  1F8D  3A01               	xorlw	1	; case 3
  8443  1F8E  1903               	skipnz
  8444  1F8F  2F79               	goto	l5997
  8445  1F90  2F91               	goto	l6003
  8446  1F91                     l6003:
  8447                           
  8448                           ;dispLCD4vias.c: 161:     dispLCD_instReg( (0x80+(aux + (col + 0x00) & 0x7F)) );
  8449  1F91  0823               	movf	dispLCD_lincol@col,w
  8450  1F92  0727               	addwf	dispLCD_lincol@aux,w
  8451  1F93  397F               	andlw	127
  8452  1F94  3E80               	addlw	128
  8453  1F95  160A  118A  2611  160A  158A  	fcall	_dispLCD_instReg
  8454  1F9A                     l68:
  8455  1F9A  0008               	return
  8456  1F9B                     __end_of_dispLCD_lincol:
  8457                           
  8458                           	psect	text51
  8459  1611                     __ptext51:	
  8460 ;; *************** function _dispLCD_instReg *****************
  8461 ;; Defined at:
  8462 ;;		line 101 in file "dispLCD4vias.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  i               1    wreg     unsigned char 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;  i               1    2[BANK0 ] unsigned char 
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      void 
  8469 ;; Registers used:
  8470 ;;		wreg, status,2, status,0
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8476 ;;      Params:         0       0       0       0       0
  8477 ;;      Locals:         0       1       0       0       0
  8478 ;;      Temps:          0       2       0       0       0
  8479 ;;      Totals:         0       3       0       0       0
  8480 ;;Total ram usage:        3 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    2
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_dispLCD_lincol
  8487 ;;		_dispLCD_init
  8488 ;;		_dispLCD_clr
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           
  8493                           ;psect for function _dispLCD_instReg
  8494  1611                     _dispLCD_instReg:
  8495                           
  8496                           ;incstack = 0
  8497                           ; Regs used in _dispLCD_instReg: [wreg+status,2+status,0]
  8498                           ;dispLCD_instReg@i stored from wreg
  8499  1611  1283               	bcf	3,5	;RP0=0, select bank0
  8500  1612  1303               	bcf	3,6	;RP1=0, select bank0
  8501  1613  00A2               	movwf	dispLCD_instReg@i
  8502  1614                     l5887:
  8503                           
  8504                           ;dispLCD4vias.c: 101: void dispLCD_instReg( unsigned char i );dispLCD4vias.c: 102: {;dis
      +                          pLCD4vias.c: 103:     LCDbits.RS = 0;
  8505  1614  1206               	bcf	6,4	;volatile
  8506  1615                     l5889:
  8507                           
  8508                           ;dispLCD4vias.c: 104:     LCDbits.BUS = (i>>4);
  8509  1615  0822               	movf	dispLCD_instReg@i,w
  8510  1616  00A0               	movwf	??_dispLCD_instReg
  8511  1617  3004               	movlw	4
  8512  1618                     u3645:
  8513  1618  1003               	clrc
  8514  1619  0CA0               	rrf	??_dispLCD_instReg,f
  8515  161A  3EFF               	addlw	-1
  8516  161B  1D03               	skipz
  8517  161C  2E18               	goto	u3645
  8518  161D  0806               	movf	6,w	;volatile
  8519  161E  0620               	xorwf	??_dispLCD_instReg,w
  8520  161F  39F0               	andlw	-16
  8521  1620  0620               	xorwf	??_dispLCD_instReg,w
  8522  1621  0086               	movwf	6	;volatile
  8523  1622                     l5891:
  8524                           
  8525                           ;dispLCD4vias.c: 106:     LCDbits.EN = 0;
  8526  1622  1286               	bcf	6,5	;volatile
  8527                           
  8528                           ;dispLCD4vias.c: 107:     if( i == 0x01 || i == 0x02 )
  8529  1623  0322               	decf	dispLCD_instReg@i,w
  8530  1624  1903               	btfsc	3,2
  8531  1625  2E27               	goto	u3651
  8532  1626  2E28               	goto	u3650
  8533  1627                     u3651:
  8534  1627  2E2E               	goto	l5895
  8535  1628                     u3650:
  8536  1628                     l5893:
  8537  1628  3002               	movlw	2
  8538  1629  0622               	xorwf	dispLCD_instReg@i,w
  8539  162A  1D03               	btfss	3,2
  8540  162B  2E2D               	goto	u3661
  8541  162C  2E2E               	goto	u3660
  8542  162D                     u3661:
  8543  162D  2E39               	goto	l5897
  8544  162E                     u3660:
  8545  162E                     l5895:
  8546                           
  8547                           ;dispLCD4vias.c: 108:         _delay((unsigned long)((2)*(20000000/4000.0)));
  8548  162E  300D               	movlw	13
  8549  162F  1283               	bcf	3,5	;RP0=0, select bank0
  8550  1630  1303               	bcf	3,6	;RP1=0, select bank0
  8551  1631  00A1               	movwf	??_dispLCD_instReg+1
  8552  1632  30FB               	movlw	251
  8553  1633  00A0               	movwf	??_dispLCD_instReg
  8554  1634                     u5357:
  8555  1634  0BA0               	decfsz	??_dispLCD_instReg,f
  8556  1635  2E34               	goto	u5357
  8557  1636  0BA1               	decfsz	??_dispLCD_instReg+1,f
  8558  1637  2E34               	goto	u5357
  8559  1638  2E40               	goto	l5899
  8560  1639                     l5897:
  8561                           
  8562                           ;dispLCD4vias.c: 110:         _delay((unsigned long)((40)*(20000000/4000000.0)));
  8563  1639  3041               	movlw	65
  8564  163A  1283               	bcf	3,5	;RP0=0, select bank0
  8565  163B  1303               	bcf	3,6	;RP1=0, select bank0
  8566  163C  00A0               	movwf	??_dispLCD_instReg
  8567  163D                     u5367:
  8568  163D  0BA0               	decfsz	??_dispLCD_instReg,f
  8569  163E  2E3D               	goto	u5367
  8570  163F  2E40               	nop2
  8571  1640                     l5899:
  8572                           
  8573                           ;dispLCD4vias.c: 111:     LCDbits.EN = 1;
  8574  1640  1283               	bcf	3,5	;RP0=0, select bank0
  8575  1641  1303               	bcf	3,6	;RP1=0, select bank0
  8576  1642  1686               	bsf	6,5	;volatile
  8577  1643                     l5901:
  8578                           
  8579                           ;dispLCD4vias.c: 114:     if( (i & 0xF0) == (0x20 | 0x00) )
  8580  1643  30F0               	movlw	240
  8581  1644  0522               	andwf	dispLCD_instReg@i,w
  8582  1645  00A0               	movwf	??_dispLCD_instReg
  8583  1646  3020               	movlw	32
  8584  1647  0620               	xorwf	??_dispLCD_instReg,w
  8585  1648  1D03               	btfss	3,2
  8586  1649  2E4B               	goto	u3671
  8587  164A  2E4C               	goto	u3670
  8588  164B                     u3671:
  8589  164B  2E65               	goto	l5913
  8590  164C                     u3670:
  8591  164C                     l5903:
  8592                           
  8593                           ;dispLCD4vias.c: 115:     {;dispLCD4vias.c: 116:         LCDbits.RS = 0;
  8594  164C  1206               	bcf	6,4	;volatile
  8595  164D                     l5905:
  8596                           
  8597                           ;dispLCD4vias.c: 117:         LCDbits.BUS = i>>4;
  8598  164D  0822               	movf	dispLCD_instReg@i,w
  8599  164E  00A0               	movwf	??_dispLCD_instReg
  8600  164F  3004               	movlw	4
  8601  1650                     u3685:
  8602  1650  1003               	clrc
  8603  1651  0CA0               	rrf	??_dispLCD_instReg,f
  8604  1652  3EFF               	addlw	-1
  8605  1653  1D03               	skipz
  8606  1654  2E50               	goto	u3685
  8607  1655  0806               	movf	6,w	;volatile
  8608  1656  0620               	xorwf	??_dispLCD_instReg,w
  8609  1657  39F0               	andlw	-16
  8610  1658  0620               	xorwf	??_dispLCD_instReg,w
  8611  1659  0086               	movwf	6	;volatile
  8612  165A                     l5907:
  8613                           
  8614                           ;dispLCD4vias.c: 118:         LCDbits.EN = 0;
  8615  165A  1286               	bcf	6,5	;volatile
  8616  165B                     l5909:
  8617                           
  8618                           ;dispLCD4vias.c: 119:         _delay((unsigned long)((40)*(20000000/4000000.0)));
  8619  165B  3041               	movlw	65
  8620  165C  1283               	bcf	3,5	;RP0=0, select bank0
  8621  165D  1303               	bcf	3,6	;RP1=0, select bank0
  8622  165E  00A0               	movwf	??_dispLCD_instReg
  8623  165F                     u5377:
  8624  165F  0BA0               	decfsz	??_dispLCD_instReg,f
  8625  1660  2E5F               	goto	u5377
  8626  1661  2E62               	nop2
  8627  1662                     l5911:
  8628                           
  8629                           ;dispLCD4vias.c: 120:         LCDbits.EN = 1;
  8630  1662  1283               	bcf	3,5	;RP0=0, select bank0
  8631  1663  1303               	bcf	3,6	;RP1=0, select bank0
  8632  1664  1686               	bsf	6,5	;volatile
  8633  1665                     l5913:
  8634                           
  8635                           ;dispLCD4vias.c: 123:     LCDbits.RS = 0;
  8636  1665  1206               	bcf	6,4	;volatile
  8637  1666                     l5915:
  8638                           
  8639                           ;dispLCD4vias.c: 124:     LCDbits.BUS = i & 0x0F;
  8640  1666  300F               	movlw	15
  8641  1667  0522               	andwf	dispLCD_instReg@i,w
  8642  1668  00A0               	movwf	??_dispLCD_instReg
  8643  1669  0806               	movf	6,w	;volatile
  8644  166A  0620               	xorwf	??_dispLCD_instReg,w
  8645  166B  39F0               	andlw	-16
  8646  166C  0620               	xorwf	??_dispLCD_instReg,w
  8647  166D  0086               	movwf	6	;volatile
  8648  166E                     l5917:
  8649                           
  8650                           ;dispLCD4vias.c: 125:     LCDbits.EN = 0;
  8651  166E  1286               	bcf	6,5	;volatile
  8652  166F                     l5919:
  8653                           
  8654                           ;dispLCD4vias.c: 126:     if( i == 0x01 || i == 0x02 )
  8655  166F  0322               	decf	dispLCD_instReg@i,w
  8656  1670  1903               	btfsc	3,2
  8657  1671  2E73               	goto	u3691
  8658  1672  2E74               	goto	u3690
  8659  1673                     u3691:
  8660  1673  2E7A               	goto	l5923
  8661  1674                     u3690:
  8662  1674                     l5921:
  8663  1674  3002               	movlw	2
  8664  1675  0622               	xorwf	dispLCD_instReg@i,w
  8665  1676  1D03               	btfss	3,2
  8666  1677  2E79               	goto	u3701
  8667  1678  2E7A               	goto	u3700
  8668  1679                     u3701:
  8669  1679  2E85               	goto	l5925
  8670  167A                     u3700:
  8671  167A                     l5923:
  8672                           
  8673                           ;dispLCD4vias.c: 127:         _delay((unsigned long)((2)*(20000000/4000.0)));
  8674  167A  300D               	movlw	13
  8675  167B  1283               	bcf	3,5	;RP0=0, select bank0
  8676  167C  1303               	bcf	3,6	;RP1=0, select bank0
  8677  167D  00A1               	movwf	??_dispLCD_instReg+1
  8678  167E  30FB               	movlw	251
  8679  167F  00A0               	movwf	??_dispLCD_instReg
  8680  1680                     u5387:
  8681  1680  0BA0               	decfsz	??_dispLCD_instReg,f
  8682  1681  2E80               	goto	u5387
  8683  1682  0BA1               	decfsz	??_dispLCD_instReg+1,f
  8684  1683  2E80               	goto	u5387
  8685  1684  2E8C               	goto	l5927
  8686  1685                     l5925:
  8687                           
  8688                           ;dispLCD4vias.c: 129:         _delay((unsigned long)((40)*(20000000/4000000.0)));
  8689  1685  3041               	movlw	65
  8690  1686  1283               	bcf	3,5	;RP0=0, select bank0
  8691  1687  1303               	bcf	3,6	;RP1=0, select bank0
  8692  1688  00A0               	movwf	??_dispLCD_instReg
  8693  1689                     u5397:
  8694  1689  0BA0               	decfsz	??_dispLCD_instReg,f
  8695  168A  2E89               	goto	u5397
  8696  168B  2E8C               	nop2
  8697  168C                     l5927:
  8698                           
  8699                           ;dispLCD4vias.c: 130:     LCDbits.EN = 1;
  8700  168C  1283               	bcf	3,5	;RP0=0, select bank0
  8701  168D  1303               	bcf	3,6	;RP1=0, select bank0
  8702  168E  1686               	bsf	6,5	;volatile
  8703  168F                     l57:
  8704  168F  0008               	return
  8705  1690                     __end_of_dispLCD_instReg:
  8706                           
  8707                           	psect	text52
  8708  1F39                     __ptext52:	
  8709 ;; *************** function _dispLCD_dataReg *****************
  8710 ;; Defined at:
  8711 ;;		line 134 in file "dispLCD4vias.c"
  8712 ;; Parameters:    Size  Location     Type
  8713 ;;  d               1    wreg     unsigned char 
  8714 ;; Auto vars:     Size  Location     Type
  8715 ;;  d               1    1[BANK0 ] unsigned char 
  8716 ;; Return value:  Size  Location     Type
  8717 ;;                  1    wreg      void 
  8718 ;; Registers used:
  8719 ;;		wreg, status,2, status,0
  8720 ;; Tracked objects:
  8721 ;;		On entry : 0/0
  8722 ;;		On exit  : 0/0
  8723 ;;		Unchanged: 0/0
  8724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8725 ;;      Params:         0       0       0       0       0
  8726 ;;      Locals:         0       1       0       0       0
  8727 ;;      Temps:          0       1       0       0       0
  8728 ;;      Totals:         0       2       0       0       0
  8729 ;;Total ram usage:        2 bytes
  8730 ;; Hardware stack levels used:    1
  8731 ;; Hardware stack levels required when called:    2
  8732 ;; This function calls:
  8733 ;;		Nothing
  8734 ;; This function is called by:
  8735 ;;		_dispLCD
  8736 ;;		_dispLCD_num
  8737 ;;		_dispLCD_str
  8738 ;;		_fifo_print
  8739 ;;		_printExec
  8740 ;;		_main
  8741 ;; This function uses a non-reentrant model
  8742 ;;
  8743                           
  8744                           
  8745                           ;psect for function _dispLCD_dataReg
  8746  1F39                     _dispLCD_dataReg:
  8747                           
  8748                           ;incstack = 0
  8749                           ; Regs used in _dispLCD_dataReg: [wreg+status,2+status,0]
  8750                           ;dispLCD_dataReg@d stored from wreg
  8751  1F39  1283               	bcf	3,5	;RP0=0, select bank0
  8752  1F3A  1303               	bcf	3,6	;RP1=0, select bank0
  8753  1F3B  00A1               	movwf	dispLCD_dataReg@d
  8754  1F3C                     l5973:
  8755                           
  8756                           ;dispLCD4vias.c: 134: void dispLCD_dataReg( unsigned char d );dispLCD4vias.c: 135: {;dis
      +                          pLCD4vias.c: 136:     LCDbits.RS = 1;
  8757  1F3C  1606               	bsf	6,4	;volatile
  8758  1F3D                     l5975:
  8759                           
  8760                           ;dispLCD4vias.c: 137:     LCDbits.BUS = d >> 4;
  8761  1F3D  0821               	movf	dispLCD_dataReg@d,w
  8762  1F3E  00A0               	movwf	??_dispLCD_dataReg
  8763  1F3F  3004               	movlw	4
  8764  1F40                     u3815:
  8765  1F40  1003               	clrc
  8766  1F41  0CA0               	rrf	??_dispLCD_dataReg,f
  8767  1F42  3EFF               	addlw	-1
  8768  1F43  1D03               	skipz
  8769  1F44  2F40               	goto	u3815
  8770  1F45  0806               	movf	6,w	;volatile
  8771  1F46  0620               	xorwf	??_dispLCD_dataReg,w
  8772  1F47  39F0               	andlw	-16
  8773  1F48  0620               	xorwf	??_dispLCD_dataReg,w
  8774  1F49  0086               	movwf	6	;volatile
  8775  1F4A                     l5977:
  8776                           
  8777                           ;dispLCD4vias.c: 138:     LCDbits.EN = 0;
  8778  1F4A  1286               	bcf	6,5	;volatile
  8779  1F4B                     l5979:
  8780                           
  8781                           ;dispLCD4vias.c: 139:     _delay((unsigned long)((40)*(20000000/4000000.0)));
  8782  1F4B  3041               	movlw	65
  8783  1F4C  1283               	bcf	3,5	;RP0=0, select bank0
  8784  1F4D  1303               	bcf	3,6	;RP1=0, select bank0
  8785  1F4E  00A0               	movwf	??_dispLCD_dataReg
  8786  1F4F                     u5407:
  8787  1F4F  0BA0               	decfsz	??_dispLCD_dataReg,f
  8788  1F50  2F4F               	goto	u5407
  8789  1F51  2F52               	nop2
  8790  1F52                     l5981:
  8791                           
  8792                           ;dispLCD4vias.c: 140:     LCDbits.EN = 1;
  8793  1F52  1283               	bcf	3,5	;RP0=0, select bank0
  8794  1F53  1303               	bcf	3,6	;RP1=0, select bank0
  8795  1F54  1686               	bsf	6,5	;volatile
  8796  1F55                     l5983:
  8797                           
  8798                           ;dispLCD4vias.c: 142:     LCDbits.RS = 1;
  8799  1F55  1606               	bsf	6,4	;volatile
  8800  1F56                     l5985:
  8801                           
  8802                           ;dispLCD4vias.c: 143:     LCDbits.BUS = d & 0x0F;
  8803  1F56  300F               	movlw	15
  8804  1F57  0521               	andwf	dispLCD_dataReg@d,w
  8805  1F58  00A0               	movwf	??_dispLCD_dataReg
  8806  1F59  0806               	movf	6,w	;volatile
  8807  1F5A  0620               	xorwf	??_dispLCD_dataReg,w
  8808  1F5B  39F0               	andlw	-16
  8809  1F5C  0620               	xorwf	??_dispLCD_dataReg,w
  8810  1F5D  0086               	movwf	6	;volatile
  8811  1F5E                     l5987:
  8812                           
  8813                           ;dispLCD4vias.c: 144:     LCDbits.EN = 0;
  8814  1F5E  1286               	bcf	6,5	;volatile
  8815                           
  8816                           ;dispLCD4vias.c: 145:     _delay((unsigned long)((40)*(20000000/4000000.0)));
  8817  1F5F  3041               	movlw	65
  8818  1F60  1283               	bcf	3,5	;RP0=0, select bank0
  8819  1F61  1303               	bcf	3,6	;RP1=0, select bank0
  8820  1F62  00A0               	movwf	??_dispLCD_dataReg
  8821  1F63                     u5417:
  8822  1F63  0BA0               	decfsz	??_dispLCD_dataReg,f
  8823  1F64  2F63               	goto	u5417
  8824  1F65  2F66               	nop2
  8825  1F66                     l5989:
  8826                           
  8827                           ;dispLCD4vias.c: 146:     LCDbits.EN = 1;
  8828  1F66  1283               	bcf	3,5	;RP0=0, select bank0
  8829  1F67  1303               	bcf	3,6	;RP1=0, select bank0
  8830  1F68  1686               	bsf	6,5	;volatile
  8831  1F69                     l60:
  8832  1F69  0008               	return
  8833  1F6A                     __end_of_dispLCD_dataReg:
  8834                           
  8835                           	psect	text53
  8836  1EDA                     __ptext53:	
  8837 ;; *************** function _dignum_conc *****************
  8838 ;; Defined at:
  8839 ;;		line 353 in file "fifo.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;  dig             1    wreg     unsigned char 
  8842 ;;  ptrNum          1    6[BANK0 ] PTR unsigned int 
  8843 ;;		 -> main@ciclos(2), main@num(2), 
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  dig             1   11[BANK0 ] unsigned char 
  8846 ;; Return value:  Size  Location     Type
  8847 ;;                  1    wreg      void 
  8848 ;; Registers used:
  8849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8855 ;;      Params:         0       1       0       0       0
  8856 ;;      Locals:         0       1       0       0       0
  8857 ;;      Temps:          0       4       0       0       0
  8858 ;;      Totals:         0       6       0       0       0
  8859 ;;Total ram usage:        6 bytes
  8860 ;; Hardware stack levels used:    1
  8861 ;; Hardware stack levels required when called:    3
  8862 ;; This function calls:
  8863 ;;		___wmul
  8864 ;; This function is called by:
  8865 ;;		_main
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function _dignum_conc
  8871  1EDA                     _dignum_conc:
  8872                           
  8873                           ;incstack = 0
  8874                           ; Regs used in _dignum_conc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8875                           ;dignum_conc@dig stored from wreg
  8876  1EDA  1283               	bcf	3,5	;RP0=0, select bank0
  8877  1EDB  1303               	bcf	3,6	;RP1=0, select bank0
  8878  1EDC  00AB               	movwf	dignum_conc@dig
  8879  1EDD                     l6707:
  8880                           
  8881                           ;fifo.c: 353: void dignum_conc(char dig, unsigned int * ptrNum );fifo.c: 354: {;fifo.c: 
      +                          355:     *ptrNum = (*ptrNum * 10) + (dig - '0');
  8882  1EDD  0826               	movf	dignum_conc@ptrNum,w
  8883  1EDE  0084               	movwf	4
  8884  1EDF  1783               	bsf	3,7	;select IRP bank2
  8885  1EE0  0800               	movf	0,w
  8886  1EE1  00A0               	movwf	___wmul@multiplier
  8887  1EE2  0A84               	incf	4,f
  8888  1EE3  0800               	movf	0,w
  8889  1EE4  00A1               	movwf	___wmul@multiplier+1
  8890  1EE5  300A               	movlw	10
  8891  1EE6  00A2               	movwf	___wmul@multiplicand
  8892  1EE7  3000               	movlw	0
  8893  1EE8  00A3               	movwf	___wmul@multiplicand+1
  8894  1EE9  160A  158A  25AE  160A  158A  	fcall	___wmul
  8895  1EEE  1283               	bcf	3,5	;RP0=0, select bank0
  8896  1EEF  1303               	bcf	3,6	;RP1=0, select bank0
  8897  1EF0  082B               	movf	dignum_conc@dig,w
  8898  1EF1  0720               	addwf	?___wmul,w
  8899  1EF2  00A7               	movwf	??_dignum_conc
  8900  1EF3  3000               	movlw	0
  8901  1EF4  1803               	skipnc
  8902  1EF5  3001               	movlw	1
  8903  1EF6  0721               	addwf	?___wmul+1,w
  8904  1EF7  00A8               	movwf	??_dignum_conc+1
  8905  1EF8  0827               	movf	??_dignum_conc,w
  8906  1EF9  3ED0               	addlw	208
  8907  1EFA  00A9               	movwf	??_dignum_conc+2
  8908  1EFB  0828               	movf	??_dignum_conc+1,w
  8909  1EFC  1803               	skipnc
  8910  1EFD  3E01               	addlw	1
  8911  1EFE  3EFF               	addlw	255
  8912  1EFF  00AA               	movwf	??_dignum_conc+3
  8913  1F00  0826               	movf	dignum_conc@ptrNum,w
  8914  1F01  0084               	movwf	4
  8915  1F02  0829               	movf	??_dignum_conc+2,w
  8916  1F03  1783               	bsf	3,7	;select IRP bank2
  8917  1F04  0080               	movwf	0
  8918  1F05  0A84               	incf	4,f
  8919  1F06  082A               	movf	??_dignum_conc+3,w
  8920  1F07  0080               	movwf	0
  8921  1F08                     l351:
  8922  1F08  0008               	return
  8923  1F09                     __end_of_dignum_conc:
  8924                           
  8925                           	psect	text54
  8926  1DAE                     __ptext54:	
  8927 ;; *************** function ___wmul *****************
  8928 ;; Defined at:
  8929 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8932 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;  product         2    4[BANK0 ] unsigned int 
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  2    0[BANK0 ] unsigned int 
  8937 ;; Registers used:
  8938 ;;		wreg, status,2, status,0
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8944 ;;      Params:         0       4       0       0       0
  8945 ;;      Locals:         0       2       0       0       0
  8946 ;;      Temps:          0       0       0       0       0
  8947 ;;      Totals:         0       6       0       0       0
  8948 ;;Total ram usage:        6 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    2
  8951 ;; This function calls:
  8952 ;;		Nothing
  8953 ;; This function is called by:
  8954 ;;		_dignum_conc
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function ___wmul
  8960  1DAE                     ___wmul:
  8961  1DAE                     l6249:	
  8962                           ;incstack = 0
  8963                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8964                           
  8965  1DAE  1283               	bcf	3,5	;RP0=0, select bank0
  8966  1DAF  1303               	bcf	3,6	;RP1=0, select bank0
  8967  1DB0  01A4               	clrf	___wmul@product
  8968  1DB1  01A5               	clrf	___wmul@product+1
  8969  1DB2                     l6251:
  8970  1DB2  1C20               	btfss	___wmul@multiplier,0
  8971  1DB3  2DB5               	goto	u4191
  8972  1DB4  2DB6               	goto	u4190
  8973  1DB5                     u4191:
  8974  1DB5  2DBC               	goto	l927
  8975  1DB6                     u4190:
  8976  1DB6                     l6253:
  8977  1DB6  0822               	movf	___wmul@multiplicand,w
  8978  1DB7  07A4               	addwf	___wmul@product,f
  8979  1DB8  1803               	skipnc
  8980  1DB9  0AA5               	incf	___wmul@product+1,f
  8981  1DBA  0823               	movf	___wmul@multiplicand+1,w
  8982  1DBB  07A5               	addwf	___wmul@product+1,f
  8983  1DBC                     l927:
  8984  1DBC  3001               	movlw	1
  8985  1DBD                     u4205:
  8986  1DBD  1003               	clrc
  8987  1DBE  0DA2               	rlf	___wmul@multiplicand,f
  8988  1DBF  0DA3               	rlf	___wmul@multiplicand+1,f
  8989  1DC0  3EFF               	addlw	-1
  8990  1DC1  1D03               	skipz
  8991  1DC2  2DBD               	goto	u4205
  8992  1DC3                     l6255:
  8993  1DC3  3001               	movlw	1
  8994  1DC4                     u4215:
  8995  1DC4  1003               	clrc
  8996  1DC5  0CA1               	rrf	___wmul@multiplier+1,f
  8997  1DC6  0CA0               	rrf	___wmul@multiplier,f
  8998  1DC7  3EFF               	addlw	-1
  8999  1DC8  1D03               	skipz
  9000  1DC9  2DC4               	goto	u4215
  9001  1DCA                     l6257:
  9002  1DCA  0820               	movf	___wmul@multiplier,w
  9003  1DCB  0421               	iorwf	___wmul@multiplier+1,w
  9004  1DCC  1D03               	btfss	3,2
  9005  1DCD  2DCF               	goto	u4221
  9006  1DCE  2DD0               	goto	u4220
  9007  1DCF                     u4221:
  9008  1DCF  2DB2               	goto	l6251
  9009  1DD0                     u4220:
  9010  1DD0                     l6259:
  9011  1DD0  0825               	movf	___wmul@product+1,w
  9012  1DD1  00A1               	movwf	?___wmul+1
  9013  1DD2  0824               	movf	___wmul@product,w
  9014  1DD3  00A0               	movwf	?___wmul
  9015  1DD4                     l929:
  9016  1DD4  0008               	return
  9017  1DD5                     __end_of___wmul:
  9018                           
  9019                           	psect	text55
  9020  1C4D                     __ptext55:	
  9021 ;; *************** function _dignum_apagar *****************
  9022 ;; Defined at:
  9023 ;;		line 358 in file "fifo.c"
  9024 ;; Parameters:    Size  Location     Type
  9025 ;;  ptrNum          1    wreg     PTR unsigned int 
  9026 ;;		 -> main@ciclos(2), main@num(2), 
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;  ptrNum          1    8[BANK0 ] PTR unsigned int 
  9029 ;;		 -> main@ciclos(2), main@num(2), 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      void 
  9032 ;; Registers used:
  9033 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9039 ;;      Params:         0       0       0       0       0
  9040 ;;      Locals:         0       1       0       0       0
  9041 ;;      Temps:          0       0       0       0       0
  9042 ;;      Totals:         0       1       0       0       0
  9043 ;;Total ram usage:        1 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    3
  9046 ;; This function calls:
  9047 ;;		___lwdiv
  9048 ;; This function is called by:
  9049 ;;		_main
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _dignum_apagar
  9055  1C4D                     _dignum_apagar:
  9056                           
  9057                           ;incstack = 0
  9058                           ; Regs used in _dignum_apagar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9059                           ;dignum_apagar@ptrNum stored from wreg
  9060  1C4D  1283               	bcf	3,5	;RP0=0, select bank0
  9061  1C4E  1303               	bcf	3,6	;RP1=0, select bank0
  9062  1C4F  00A8               	movwf	dignum_apagar@ptrNum
  9063  1C50                     l6709:
  9064                           
  9065                           ;fifo.c: 358: void dignum_apagar(unsigned int * ptrNum );fifo.c: 359: {;fifo.c: 360:    
      +                           *ptrNum /= 10;
  9066  1C50  300A               	movlw	10
  9067  1C51  00A0               	movwf	___lwdiv@divisor
  9068  1C52  3000               	movlw	0
  9069  1C53  00A1               	movwf	___lwdiv@divisor+1
  9070  1C54  0828               	movf	dignum_apagar@ptrNum,w
  9071  1C55  0084               	movwf	4
  9072  1C56  1783               	bsf	3,7	;select IRP bank2
  9073  1C57  0800               	movf	0,w
  9074  1C58  00A2               	movwf	___lwdiv@dividend
  9075  1C59  0A84               	incf	4,f
  9076  1C5A  0800               	movf	0,w
  9077  1C5B  00A3               	movwf	___lwdiv@dividend+1
  9078  1C5C  160A  118A  2372  160A  158A  	fcall	___lwdiv
  9079  1C61  1283               	bcf	3,5	;RP0=0, select bank0
  9080  1C62  1303               	bcf	3,6	;RP1=0, select bank0
  9081  1C63  0828               	movf	dignum_apagar@ptrNum,w
  9082  1C64  0084               	movwf	4
  9083  1C65  0820               	movf	?___lwdiv,w
  9084  1C66  1783               	bsf	3,7	;select IRP bank2
  9085  1C67  0080               	movwf	0
  9086  1C68  0A84               	incf	4,f
  9087  1C69  0821               	movf	?___lwdiv+1,w
  9088  1C6A  0080               	movwf	0
  9089  1C6B                     l354:
  9090  1C6B  0008               	return
  9091  1C6C                     __end_of_dignum_apagar:
  9092                           
  9093                           	psect	text56
  9094  1372                     __ptext56:	
  9095 ;; *************** function ___lwdiv *****************
  9096 ;; Defined at:
  9097 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;  divisor         2    0[BANK0 ] unsigned int 
  9100 ;;  dividend        2    2[BANK0 ] unsigned int 
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;  quotient        2    6[BANK0 ] unsigned int 
  9103 ;;  counter         1    5[BANK0 ] unsigned char 
  9104 ;; Return value:  Size  Location     Type
  9105 ;;                  2    0[BANK0 ] unsigned int 
  9106 ;; Registers used:
  9107 ;;		wreg, status,2, status,0
  9108 ;; Tracked objects:
  9109 ;;		On entry : 0/0
  9110 ;;		On exit  : 0/0
  9111 ;;		Unchanged: 0/0
  9112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9113 ;;      Params:         0       4       0       0       0
  9114 ;;      Locals:         0       3       0       0       0
  9115 ;;      Temps:          0       1       0       0       0
  9116 ;;      Totals:         0       8       0       0       0
  9117 ;;Total ram usage:        8 bytes
  9118 ;; Hardware stack levels used:    1
  9119 ;; Hardware stack levels required when called:    2
  9120 ;; This function calls:
  9121 ;;		Nothing
  9122 ;; This function is called by:
  9123 ;;		_dignum_apagar
  9124 ;; This function uses a non-reentrant model
  9125 ;;
  9126                           
  9127                           
  9128                           ;psect for function ___lwdiv
  9129  1372                     ___lwdiv:
  9130  1372                     l6263:	
  9131                           ;incstack = 0
  9132                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9133                           
  9134  1372  1283               	bcf	3,5	;RP0=0, select bank0
  9135  1373  1303               	bcf	3,6	;RP1=0, select bank0
  9136  1374  01A6               	clrf	___lwdiv@quotient
  9137  1375  01A7               	clrf	___lwdiv@quotient+1
  9138  1376                     l6265:
  9139  1376  0820               	movf	___lwdiv@divisor,w
  9140  1377  0421               	iorwf	___lwdiv@divisor+1,w
  9141  1378  1903               	btfsc	3,2
  9142  1379  2B7B               	goto	u4231
  9143  137A  2B7C               	goto	u4230
  9144  137B                     u4231:
  9145  137B  2BB3               	goto	l6285
  9146  137C                     u4230:
  9147  137C                     l6267:
  9148  137C  01A5               	clrf	___lwdiv@counter
  9149  137D  0AA5               	incf	___lwdiv@counter,f
  9150  137E  2B8A               	goto	l6273
  9151  137F                     l6269:
  9152  137F  3001               	movlw	1
  9153  1380                     u4245:
  9154  1380  1003               	clrc
  9155  1381  0DA0               	rlf	___lwdiv@divisor,f
  9156  1382  0DA1               	rlf	___lwdiv@divisor+1,f
  9157  1383  3EFF               	addlw	-1
  9158  1384  1D03               	skipz
  9159  1385  2B80               	goto	u4245
  9160  1386                     l6271:
  9161  1386  3001               	movlw	1
  9162  1387  00A4               	movwf	??___lwdiv
  9163  1388  0824               	movf	??___lwdiv,w
  9164  1389  07A5               	addwf	___lwdiv@counter,f
  9165  138A                     l6273:
  9166  138A  1FA1               	btfss	___lwdiv@divisor+1,7
  9167  138B  2B8D               	goto	u4251
  9168  138C  2B8E               	goto	u4250
  9169  138D                     u4251:
  9170  138D  2B7F               	goto	l6269
  9171  138E                     u4250:
  9172  138E                     l6275:
  9173  138E  3001               	movlw	1
  9174  138F                     u4265:
  9175  138F  1003               	clrc
  9176  1390  0DA6               	rlf	___lwdiv@quotient,f
  9177  1391  0DA7               	rlf	___lwdiv@quotient+1,f
  9178  1392  3EFF               	addlw	-1
  9179  1393  1D03               	skipz
  9180  1394  2B8F               	goto	u4265
  9181  1395  0821               	movf	___lwdiv@divisor+1,w
  9182  1396  0223               	subwf	___lwdiv@dividend+1,w
  9183  1397  1D03               	skipz
  9184  1398  2B9B               	goto	u4275
  9185  1399  0820               	movf	___lwdiv@divisor,w
  9186  139A  0222               	subwf	___lwdiv@dividend,w
  9187  139B                     u4275:
  9188  139B  1C03               	skipc
  9189  139C  2B9E               	goto	u4271
  9190  139D  2B9F               	goto	u4270
  9191  139E                     u4271:
  9192  139E  2BA6               	goto	l6281
  9193  139F                     u4270:
  9194  139F                     l6277:
  9195  139F  0820               	movf	___lwdiv@divisor,w
  9196  13A0  02A2               	subwf	___lwdiv@dividend,f
  9197  13A1  0821               	movf	___lwdiv@divisor+1,w
  9198  13A2  1C03               	skipc
  9199  13A3  03A3               	decf	___lwdiv@dividend+1,f
  9200  13A4  02A3               	subwf	___lwdiv@dividend+1,f
  9201  13A5                     l6279:
  9202  13A5  1426               	bsf	___lwdiv@quotient,0
  9203  13A6                     l6281:
  9204  13A6  3001               	movlw	1
  9205  13A7                     u4285:
  9206  13A7  1003               	clrc
  9207  13A8  0CA1               	rrf	___lwdiv@divisor+1,f
  9208  13A9  0CA0               	rrf	___lwdiv@divisor,f
  9209  13AA  3EFF               	addlw	-1
  9210  13AB  1D03               	skipz
  9211  13AC  2BA7               	goto	u4285
  9212  13AD                     l6283:
  9213  13AD  3001               	movlw	1
  9214  13AE  02A5               	subwf	___lwdiv@counter,f
  9215  13AF  1D03               	btfss	3,2
  9216  13B0  2BB2               	goto	u4291
  9217  13B1  2BB3               	goto	u4290
  9218  13B2                     u4291:
  9219  13B2  2B8E               	goto	l6275
  9220  13B3                     u4290:
  9221  13B3                     l6285:
  9222  13B3  0827               	movf	___lwdiv@quotient+1,w
  9223  13B4  00A1               	movwf	?___lwdiv+1
  9224  13B5  0826               	movf	___lwdiv@quotient,w
  9225  13B6  00A0               	movwf	?___lwdiv
  9226  13B7                     l1199:
  9227  13B7  0008               	return
  9228  13B8                     __end_of___lwdiv:
  9229                           
  9230                           	psect	text57
  9231  1DFC                     __ptext57:	
  9232 ;; *************** function _deletar_receita *****************
  9233 ;; Defined at:
  9234 ;;		line 77 in file "eeprom.c"
  9235 ;; Parameters:    Size  Location     Type
  9236 ;;  receita         1    7[BANK0 ] unsigned char 
  9237 ;; Auto vars:     Size  Location     Type
  9238 ;;  i               1   12[BANK0 ] unsigned char 
  9239 ;;  aux             2   10[BANK0 ] int 
  9240 ;; Return value:  Size  Location     Type
  9241 ;;                  1    wreg      void 
  9242 ;; Registers used:
  9243 ;;		wreg, status,2, status,0, pclath, cstack
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/0
  9246 ;;		On exit  : 0/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9249 ;;      Params:         0       1       0       0       0
  9250 ;;      Locals:         0       3       0       0       0
  9251 ;;      Temps:          0       2       0       0       0
  9252 ;;      Totals:         0       6       0       0       0
  9253 ;;Total ram usage:        6 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    3
  9256 ;; This function calls:
  9257 ;;		_EEPROM_write
  9258 ;;		_end_receita
  9259 ;; This function is called by:
  9260 ;;		_main
  9261 ;; This function uses a non-reentrant model
  9262 ;;
  9263                           
  9264                           
  9265                           ;psect for function _deletar_receita
  9266  1DFC                     _deletar_receita:
  9267  1DFC                     l6473:	
  9268                           ;incstack = 0
  9269                           ; Regs used in _deletar_receita: [wreg+status,2+status,0+pclath+cstack]
  9270                           
  9271                           
  9272                           ;eeprom.c: 77: void deletar_receita (char receita);eeprom.c: 78: {;eeprom.c: 79:    int 
      +                          aux;;eeprom.c: 80:    aux = end_receita(receita);
  9273  1DFC  1283               	bcf	3,5	;RP0=0, select bank0
  9274  1DFD  1303               	bcf	3,6	;RP1=0, select bank0
  9275  1DFE  0827               	movf	deletar_receita@receita,w
  9276  1DFF  00A8               	movwf	??_deletar_receita
  9277  1E00  01A9               	clrf	??_deletar_receita+1
  9278  1E01  0828               	movf	??_deletar_receita,w
  9279  1E02  00A0               	movwf	end_receita@x
  9280  1E03  0829               	movf	??_deletar_receita+1,w
  9281  1E04  00A1               	movwf	end_receita@x+1
  9282  1E05  160A  158A  23C9  160A  158A  	fcall	_end_receita
  9283  1E0A  1283               	bcf	3,5	;RP0=0, select bank0
  9284  1E0B  1303               	bcf	3,6	;RP1=0, select bank0
  9285  1E0C  0821               	movf	?_end_receita+1,w
  9286  1E0D  00AB               	movwf	deletar_receita@aux+1
  9287  1E0E  0820               	movf	?_end_receita,w
  9288  1E0F  00AA               	movwf	deletar_receita@aux
  9289  1E10                     l6475:
  9290                           
  9291                           ;eeprom.c: 81:    for( char i=0 ; i<16; i++)
  9292  1E10  01AC               	clrf	deletar_receita@i
  9293  1E11                     l6481:
  9294                           
  9295                           ;eeprom.c: 82:         EEPROM_write((aux+i),0);
  9296  1E11  01A0               	clrf	EEPROM_write@data
  9297  1E12  082A               	movf	deletar_receita@aux,w
  9298  1E13  072C               	addwf	deletar_receita@i,w
  9299  1E14  160A  158A  2411  160A  158A  	fcall	_EEPROM_write
  9300  1E19                     l6483:
  9301  1E19  3001               	movlw	1
  9302  1E1A  1283               	bcf	3,5	;RP0=0, select bank0
  9303  1E1B  1303               	bcf	3,6	;RP1=0, select bank0
  9304  1E1C  00A8               	movwf	??_deletar_receita
  9305  1E1D  0828               	movf	??_deletar_receita,w
  9306  1E1E  07AC               	addwf	deletar_receita@i,f
  9307  1E1F                     l6485:
  9308  1E1F  3010               	movlw	16
  9309  1E20  022C               	subwf	deletar_receita@i,w
  9310  1E21  1C03               	skipc
  9311  1E22  2E24               	goto	u4351
  9312  1E23  2E25               	goto	u4350
  9313  1E24                     u4351:
  9314  1E24  2E11               	goto	l6481
  9315  1E25                     u4350:
  9316  1E25                     l162:
  9317  1E25  0008               	return
  9318  1E26                     __end_of_deletar_receita:
  9319                           
  9320                           	psect	text58
  9321  1C11                     __ptext58:	
  9322 ;; *************** function _EEPROM_write *****************
  9323 ;; Defined at:
  9324 ;;		line 24 in file "eeprom.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;  addr            1    wreg     unsigned char 
  9327 ;;  data            1    0[BANK0 ] unsigned char 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  addr            1    1[BANK0 ] unsigned char 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  1    wreg      void 
  9332 ;; Registers used:
  9333 ;;		wreg
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9339 ;;      Params:         0       1       0       0       0
  9340 ;;      Locals:         0       1       0       0       0
  9341 ;;      Temps:          0       0       0       0       0
  9342 ;;      Totals:         0       2       0       0       0
  9343 ;;Total ram usage:        2 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    2
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		_salvar_receita
  9350 ;;		_salvar_dado
  9351 ;;		_deletar_receita
  9352 ;;		_formatar_receitas
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           
  9357                           ;psect for function _EEPROM_write
  9358  1C11                     _EEPROM_write:
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _EEPROM_write: [wreg]
  9362                           ;EEPROM_write@addr stored from wreg
  9363  1C11  1283               	bcf	3,5	;RP0=0, select bank0
  9364  1C12  1303               	bcf	3,6	;RP1=0, select bank0
  9365  1C13  00A1               	movwf	EEPROM_write@addr
  9366  1C14                     l6119:
  9367                           
  9368                           ;eeprom.c: 24: void EEPROM_write( unsigned char addr, unsigned char data );eeprom.c: 25:
      +                           {;eeprom.c: 26:     INTCONbits.GIE = 0;
  9369  1C14  138B               	bcf	11,7	;volatile
  9370  1C15                     l6121:
  9371                           
  9372                           ;eeprom.c: 27:     EEADR = addr;
  9373  1C15  0821               	movf	EEPROM_write@addr,w
  9374  1C16  1283               	bcf	3,5	;RP0=0, select bank2
  9375  1C17  1703               	bsf	3,6	;RP1=1, select bank2
  9376  1C18  008D               	movwf	13	;volatile
  9377                           
  9378                           ;eeprom.c: 28:     EEDAT = data;
  9379  1C19  1283               	bcf	3,5	;RP0=0, select bank0
  9380  1C1A  1303               	bcf	3,6	;RP1=0, select bank0
  9381  1C1B  0820               	movf	EEPROM_write@data,w
  9382  1C1C  1283               	bcf	3,5	;RP0=0, select bank2
  9383  1C1D  1703               	bsf	3,6	;RP1=1, select bank2
  9384  1C1E  008C               	movwf	12	;volatile
  9385  1C1F                     l6123:
  9386                           
  9387                           ;eeprom.c: 29:     EECON1bits.EEPGD = 0;
  9388  1C1F  1683               	bsf	3,5	;RP0=1, select bank3
  9389  1C20  1703               	bsf	3,6	;RP1=1, select bank3
  9390  1C21  138C               	bcf	12,7	;volsfr
  9391  1C22                     l6125:
  9392                           
  9393                           ;eeprom.c: 30:     EECON1bits.WREN = 1;
  9394  1C22  150C               	bsf	12,2	;volsfr
  9395                           
  9396                           ;eeprom.c: 31:     EECON2 = 0x55;
  9397  1C23  3055               	movlw	85
  9398  1C24  008D               	movwf	13	;volsfr
  9399                           
  9400                           ;eeprom.c: 32:     EECON2 = 0xAA;
  9401  1C25  30AA               	movlw	170
  9402  1C26  008D               	movwf	13	;volsfr
  9403  1C27                     l6127:
  9404                           
  9405                           ;eeprom.c: 33:     EECON1bits.WR = 1;
  9406  1C27  148C               	bsf	12,1	;volsfr
  9407  1C28                     l135:	
  9408                           ;eeprom.c: 35:     while( EECON1bits.WR );
  9409                           
  9410  1C28  188C               	btfsc	12,1	;volsfr
  9411  1C29  2C2B               	goto	u4021
  9412  1C2A  2C2C               	goto	u4020
  9413  1C2B                     u4021:
  9414  1C2B  2C28               	goto	l135
  9415  1C2C                     u4020:
  9416  1C2C                     l137:
  9417                           
  9418                           ;eeprom.c: 37:     EECON1bits.WREN = 0;
  9419  1C2C  110C               	bcf	12,2	;volsfr
  9420                           
  9421                           ;eeprom.c: 38:     INTCONbits.GIE = 1;
  9422  1C2D  178B               	bsf	11,7	;volatile
  9423  1C2E                     l138:
  9424  1C2E  0008               	return
  9425  1C2F                     __end_of_EEPROM_write:
  9426                           
  9427                           	psect	text59
  9428  1F9B                     __ptext59:	
  9429 ;; *************** function _buscar_receita *****************
  9430 ;; Defined at:
  9431 ;;		line 55 in file "eeprom.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;  adrs            1    7[BANK0 ] unsigned char 
  9434 ;;  data            1    8[BANK0 ] PTR unsigned char 
  9435 ;;		 -> main@vetor_aux(16), 
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  i               1   13[BANK0 ] unsigned char 
  9438 ;;  aux             2   11[BANK0 ] int 
  9439 ;; Return value:  Size  Location     Type
  9440 ;;                  1    wreg      void 
  9441 ;; Registers used:
  9442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9448 ;;      Params:         0       2       0       0       0
  9449 ;;      Locals:         0       3       0       0       0
  9450 ;;      Temps:          0       2       0       0       0
  9451 ;;      Totals:         0       7       0       0       0
  9452 ;;Total ram usage:        7 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; Hardware stack levels required when called:    3
  9455 ;; This function calls:
  9456 ;;		_EEPROM_read
  9457 ;;		_end_receita
  9458 ;; This function is called by:
  9459 ;;		_main
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           
  9464                           ;psect for function _buscar_receita
  9465  1F9B                     _buscar_receita:
  9466  1F9B                     l6451:	
  9467                           ;incstack = 0
  9468                           ; Regs used in _buscar_receita: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9469                           
  9470                           
  9471                           ;eeprom.c: 55: void buscar_receita (char adrs, unsigned char * data );eeprom.c: 56: {;ee
      +                          prom.c: 57:     int aux;;eeprom.c: 58:     aux = end_receita(adrs);
  9472  1F9B  1283               	bcf	3,5	;RP0=0, select bank0
  9473  1F9C  1303               	bcf	3,6	;RP1=0, select bank0
  9474  1F9D  0827               	movf	buscar_receita@adrs,w
  9475  1F9E  00A9               	movwf	??_buscar_receita
  9476  1F9F  01AA               	clrf	??_buscar_receita+1
  9477  1FA0  0829               	movf	??_buscar_receita,w
  9478  1FA1  00A0               	movwf	end_receita@x
  9479  1FA2  082A               	movf	??_buscar_receita+1,w
  9480  1FA3  00A1               	movwf	end_receita@x+1
  9481  1FA4  160A  158A  23C9  160A  158A  	fcall	_end_receita
  9482  1FA9  1283               	bcf	3,5	;RP0=0, select bank0
  9483  1FAA  1303               	bcf	3,6	;RP1=0, select bank0
  9484  1FAB  0821               	movf	?_end_receita+1,w
  9485  1FAC  00AC               	movwf	buscar_receita@aux+1
  9486  1FAD  0820               	movf	?_end_receita,w
  9487  1FAE  00AB               	movwf	buscar_receita@aux
  9488  1FAF                     l6453:
  9489                           
  9490                           ;eeprom.c: 59:     for( char i=0; i<16; i++ )
  9491  1FAF  01AD               	clrf	buscar_receita@i
  9492  1FB0                     l6459:
  9493                           
  9494                           ;eeprom.c: 60:        *(data+i) = EEPROM_read(aux+i);
  9495  1FB0  082B               	movf	buscar_receita@aux,w
  9496  1FB1  072D               	addwf	buscar_receita@i,w
  9497  1FB2  160A  158A  23B5  160A  158A  	fcall	_EEPROM_read
  9498  1FB7  1283               	bcf	3,5	;RP0=0, select bank0
  9499  1FB8  1303               	bcf	3,6	;RP1=0, select bank0
  9500  1FB9  00A9               	movwf	??_buscar_receita
  9501  1FBA  082D               	movf	buscar_receita@i,w
  9502  1FBB  0728               	addwf	buscar_receita@data,w
  9503  1FBC  00AA               	movwf	??_buscar_receita+1
  9504  1FBD  082A               	movf	??_buscar_receita+1,w
  9505  1FBE  0084               	movwf	4
  9506  1FBF  0829               	movf	??_buscar_receita,w
  9507  1FC0  1783               	bsf	3,7	;select IRP bank2
  9508  1FC1  0080               	movwf	0
  9509  1FC2                     l6461:
  9510  1FC2  3001               	movlw	1
  9511  1FC3  00A9               	movwf	??_buscar_receita
  9512  1FC4  0829               	movf	??_buscar_receita,w
  9513  1FC5  07AD               	addwf	buscar_receita@i,f
  9514  1FC6                     l6463:
  9515  1FC6  3010               	movlw	16
  9516  1FC7  022D               	subwf	buscar_receita@i,w
  9517  1FC8  1C03               	skipc
  9518  1FC9  2FCB               	goto	u4341
  9519  1FCA  2FCC               	goto	u4340
  9520  1FCB                     u4341:
  9521  1FCB  2FB0               	goto	l6459
  9522  1FCC                     u4340:
  9523  1FCC                     l151:
  9524  1FCC  0008               	return
  9525  1FCD                     __end_of_buscar_receita:
  9526                           
  9527                           	psect	text60
  9528  1D19                     __ptext60:	
  9529 ;; *************** function _buscar_dado *****************
  9530 ;; Defined at:
  9531 ;;		line 70 in file "eeprom.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;  adrs            1    wreg     unsigned char 
  9534 ;;  col             1    7[BANK0 ] unsigned char 
  9535 ;;  data            1    8[BANK0 ] PTR unsigned char 
  9536 ;;		 -> main@init_cond(1), 
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;  adrs            1   11[BANK0 ] unsigned char 
  9539 ;;  aux             2   12[BANK0 ] int 
  9540 ;; Return value:  Size  Location     Type
  9541 ;;                  1    wreg      void 
  9542 ;; Registers used:
  9543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9549 ;;      Params:         0       2       0       0       0
  9550 ;;      Locals:         0       3       0       0       0
  9551 ;;      Temps:          0       2       0       0       0
  9552 ;;      Totals:         0       7       0       0       0
  9553 ;;Total ram usage:        7 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    3
  9556 ;; This function calls:
  9557 ;;		_EEPROM_read
  9558 ;;		_end_receita
  9559 ;; This function is called by:
  9560 ;;		_main
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _buscar_dado
  9566  1D19                     _buscar_dado:
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _buscar_dado: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9570                           ;buscar_dado@adrs stored from wreg
  9571  1D19  1283               	bcf	3,5	;RP0=0, select bank0
  9572  1D1A  1303               	bcf	3,6	;RP1=0, select bank0
  9573  1D1B  00AB               	movwf	buscar_dado@adrs
  9574  1D1C                     l6469:
  9575                           
  9576                           ;eeprom.c: 70: void buscar_dado (char adrs, char col, unsigned char *data);eeprom.c: 71:
      +                           {;eeprom.c: 72:     int aux;;eeprom.c: 73:     aux = end_receita(adrs);
  9577  1D1C  082B               	movf	buscar_dado@adrs,w
  9578  1D1D  00A9               	movwf	??_buscar_dado
  9579  1D1E  01AA               	clrf	??_buscar_dado+1
  9580  1D1F  0829               	movf	??_buscar_dado,w
  9581  1D20  00A0               	movwf	end_receita@x
  9582  1D21  082A               	movf	??_buscar_dado+1,w
  9583  1D22  00A1               	movwf	end_receita@x+1
  9584  1D23  160A  158A  23C9  160A  158A  	fcall	_end_receita
  9585  1D28  1283               	bcf	3,5	;RP0=0, select bank0
  9586  1D29  1303               	bcf	3,6	;RP1=0, select bank0
  9587  1D2A  0821               	movf	?_end_receita+1,w
  9588  1D2B  00AD               	movwf	buscar_dado@aux+1
  9589  1D2C  0820               	movf	?_end_receita,w
  9590  1D2D  00AC               	movwf	buscar_dado@aux
  9591  1D2E                     l6471:
  9592                           
  9593                           ;eeprom.c: 74:     *data = EEPROM_read((aux+col));
  9594  1D2E  082C               	movf	buscar_dado@aux,w
  9595  1D2F  0727               	addwf	buscar_dado@col,w
  9596  1D30  160A  158A  23B5  160A  158A  	fcall	_EEPROM_read
  9597  1D35  1283               	bcf	3,5	;RP0=0, select bank0
  9598  1D36  1303               	bcf	3,6	;RP1=0, select bank0
  9599  1D37  00A9               	movwf	??_buscar_dado
  9600  1D38  0828               	movf	buscar_dado@data,w
  9601  1D39  0084               	movwf	4
  9602  1D3A  0829               	movf	??_buscar_dado,w
  9603  1D3B  1783               	bsf	3,7	;select IRP bank2
  9604  1D3C  0080               	movwf	0
  9605  1D3D                     l157:
  9606  1D3D  0008               	return
  9607  1D3E                     __end_of_buscar_dado:
  9608                           
  9609                           	psect	text61
  9610  1BC9                     __ptext61:	
  9611 ;; *************** function _end_receita *****************
  9612 ;; Defined at:
  9613 ;;		line 41 in file "eeprom.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;  x               2    0[BANK0 ] int 
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;		None
  9618 ;; Return value:  Size  Location     Type
  9619 ;;                  2    0[BANK0 ] int 
  9620 ;; Registers used:
  9621 ;;		wreg
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9627 ;;      Params:         0       2       0       0       0
  9628 ;;      Locals:         0       0       0       0       0
  9629 ;;      Temps:          0       2       0       0       0
  9630 ;;      Totals:         0       4       0       0       0
  9631 ;;Total ram usage:        4 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; Hardware stack levels required when called:    2
  9634 ;; This function calls:
  9635 ;;		Nothing
  9636 ;; This function is called by:
  9637 ;;		_salvar_receita
  9638 ;;		_buscar_receita
  9639 ;;		_salvar_dado
  9640 ;;		_buscar_dado
  9641 ;;		_deletar_receita
  9642 ;;		_receita_livre
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _end_receita
  9648  1BC9                     _end_receita:
  9649  1BC9                     l6129:	
  9650                           ;incstack = 0
  9651                           ; Regs used in _end_receita: [wreg]
  9652                           
  9653                           
  9654                           ;eeprom.c: 41: int end_receita (int x);eeprom.c: 42: {;eeprom.c: 43:     return(x*16);
  9655  1BC9  1283               	bcf	3,5	;RP0=0, select bank0
  9656  1BCA  1303               	bcf	3,6	;RP1=0, select bank0
  9657  1BCB  0821               	movf	end_receita@x+1,w
  9658  1BCC  00A3               	movwf	??_end_receita+1
  9659  1BCD  0820               	movf	end_receita@x,w
  9660  1BCE  00A2               	movwf	??_end_receita
  9661  1BCF  0EA2               	swapf	??_end_receita,f
  9662  1BD0  0EA3               	swapf	??_end_receita+1,f
  9663  1BD1  30F0               	movlw	240
  9664  1BD2  05A3               	andwf	??_end_receita+1,f
  9665  1BD3  0822               	movf	??_end_receita,w
  9666  1BD4  390F               	andlw	15
  9667  1BD5  04A3               	iorwf	??_end_receita+1,f
  9668  1BD6  30F0               	movlw	240
  9669  1BD7  05A2               	andwf	??_end_receita,f
  9670  1BD8  0822               	movf	??_end_receita,w
  9671  1BD9  00A0               	movwf	?_end_receita
  9672  1BDA  0823               	movf	??_end_receita+1,w
  9673  1BDB  00A1               	movwf	?_end_receita+1
  9674  1BDC                     l141:
  9675  1BDC  0008               	return
  9676  1BDD                     __end_of_end_receita:
  9677                           
  9678                           	psect	text62
  9679  1BB5                     __ptext62:	
  9680 ;; *************** function _EEPROM_read *****************
  9681 ;; Defined at:
  9682 ;;		line 14 in file "eeprom.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;  addr            1    wreg     unsigned char 
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;  addr            1    0[BANK0 ] unsigned char 
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  1    wreg      unsigned char 
  9689 ;; Registers used:
  9690 ;;		wreg, status,2
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9696 ;;      Params:         0       0       0       0       0
  9697 ;;      Locals:         0       1       0       0       0
  9698 ;;      Temps:          0       0       0       0       0
  9699 ;;      Totals:         0       1       0       0       0
  9700 ;;Total ram usage:        1 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:    2
  9703 ;; This function calls:
  9704 ;;		Nothing
  9705 ;; This function is called by:
  9706 ;;		_buscar_receita
  9707 ;;		_buscar_dado
  9708 ;;		_receita_livre
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           
  9713                           ;psect for function _EEPROM_read
  9714  1BB5                     _EEPROM_read:
  9715                           
  9716                           ;incstack = 0
  9717                           ; Regs used in _EEPROM_read: [wreg+status,2]
  9718                           ;EEPROM_read@addr stored from wreg
  9719  1BB5  1283               	bcf	3,5	;RP0=0, select bank0
  9720  1BB6  1303               	bcf	3,6	;RP1=0, select bank0
  9721  1BB7  00A0               	movwf	EEPROM_read@addr
  9722  1BB8                     l6107:
  9723                           
  9724                           ;eeprom.c: 14: char EEPROM_read( unsigned char addr );eeprom.c: 15: {;eeprom.c: 16:     
      +                          EEADRH = 0;
  9725  1BB8  1283               	bcf	3,5	;RP0=0, select bank2
  9726  1BB9  1703               	bsf	3,6	;RP1=1, select bank2
  9727  1BBA  018F               	clrf	15	;volatile
  9728  1BBB                     l6109:
  9729                           
  9730                           ;eeprom.c: 17:     EEADR = addr;
  9731  1BBB  1283               	bcf	3,5	;RP0=0, select bank0
  9732  1BBC  1303               	bcf	3,6	;RP1=0, select bank0
  9733  1BBD  0820               	movf	EEPROM_read@addr,w
  9734  1BBE  1283               	bcf	3,5	;RP0=0, select bank2
  9735  1BBF  1703               	bsf	3,6	;RP1=1, select bank2
  9736  1BC0  008D               	movwf	13	;volatile
  9737  1BC1                     l6111:
  9738                           
  9739                           ;eeprom.c: 18:     EECON1bits.EEPGD = 0;
  9740  1BC1  1683               	bsf	3,5	;RP0=1, select bank3
  9741  1BC2  1703               	bsf	3,6	;RP1=1, select bank3
  9742  1BC3  138C               	bcf	12,7	;volsfr
  9743  1BC4                     l6113:
  9744                           
  9745                           ;eeprom.c: 19:     EECON1bits.RD = 1;
  9746  1BC4  140C               	bsf	12,0	;volsfr
  9747  1BC5                     l6115:
  9748                           
  9749                           ;eeprom.c: 20:     return( EEDAT );
  9750  1BC5  1283               	bcf	3,5	;RP0=0, select bank2
  9751  1BC6  1703               	bsf	3,6	;RP1=1, select bank2
  9752  1BC7  080C               	movf	12,w	;volatile
  9753  1BC8                     l132:
  9754  1BC8  0008               	return
  9755  1BC9                     __end_of_EEPROM_read:
  9756                           
  9757                           	psect	text63
  9758  07F3                     __ptext63:	
  9759 ;; *************** function _addIndicePassos *****************
  9760 ;; Defined at:
  9761 ;;		line 17 in file "fifo.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;		None
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;		None
  9766 ;; Return value:  Size  Location     Type
  9767 ;;                  1    wreg      void 
  9768 ;; Registers used:
  9769 ;;		wreg, status,2, status,0
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9775 ;;      Params:         0       0       0       0       0
  9776 ;;      Locals:         0       0       0       0       0
  9777 ;;      Temps:          0       1       0       0       0
  9778 ;;      Totals:         0       1       0       0       0
  9779 ;;Total ram usage:        1 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    2
  9782 ;; This function calls:
  9783 ;;		Nothing
  9784 ;; This function is called by:
  9785 ;;		_main
  9786 ;; This function uses a non-reentrant model
  9787 ;;
  9788                           
  9789                           
  9790                           ;psect for function _addIndicePassos
  9791  07F3                     _addIndicePassos:
  9792  07F3                     l6487:	
  9793                           ;incstack = 0
  9794                           ; Regs used in _addIndicePassos: [wreg+status,2+status,0]
  9795                           
  9796                           
  9797                           ;fifo.c: 19:     if(indice_passos < ind_fila)
  9798  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  9799  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  9800  07F5  0867               	movf	_ind_fila,w
  9801  07F6  027B               	subwf	_indice_passos,w
  9802  07F7  1803               	skipnc
  9803  07F8  2FFA               	goto	u4361
  9804  07F9  2FFB               	goto	u4360
  9805  07FA                     u4361:
  9806  07FA  2FFF               	goto	l199
  9807  07FB                     u4360:
  9808  07FB                     l6489:
  9809                           
  9810                           ;fifo.c: 20:         indice_passos++;
  9811  07FB  3001               	movlw	1
  9812  07FC  00A0               	movwf	??_addIndicePassos
  9813  07FD  0820               	movf	??_addIndicePassos,w
  9814  07FE  07FB               	addwf	_indice_passos,f
  9815  07FF                     l199:
  9816  07FF  0008               	return
  9817  0800                     __end_of_addIndicePassos:
  9818                           
  9819                           	psect	text64
  9820  1B22                     __ptext64:	
  9821 ;; *************** function _addContCiclos *****************
  9822 ;; Defined at:
  9823 ;;		line 57 in file "fifo.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;		None
  9826 ;; Auto vars:     Size  Location     Type
  9827 ;;		None
  9828 ;; Return value:  Size  Location     Type
  9829 ;;                  1    wreg      void 
  9830 ;; Registers used:
  9831 ;;		wreg
  9832 ;; Tracked objects:
  9833 ;;		On entry : 0/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9837 ;;      Params:         0       0       0       0       0
  9838 ;;      Locals:         0       0       0       0       0
  9839 ;;      Temps:          0       0       0       0       0
  9840 ;;      Totals:         0       0       0       0       0
  9841 ;;Total ram usage:        0 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    2
  9844 ;; This function calls:
  9845 ;;		Nothing
  9846 ;; This function is called by:
  9847 ;;		_main
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           
  9852                           ;psect for function _addContCiclos
  9853  1B22                     _addContCiclos:
  9854  1B22                     l6503:	
  9855                           ;incstack = 0
  9856                           ; Regs used in _addContCiclos: [wreg]
  9857                           
  9858                           
  9859                           ;fifo.c: 59:     cont_ciclos++;
  9860  1B22  3001               	movlw	1
  9861  1B23  07F6               	addwf	_cont_ciclos,f
  9862  1B24  1803               	skipnc
  9863  1B25  0AF7               	incf	_cont_ciclos+1,f
  9864  1B26  3000               	movlw	0
  9865  1B27  07F7               	addwf	_cont_ciclos+1,f
  9866  1B28                     l221:
  9867  1B28  0008               	return
  9868  1B29                     __end_of_addContCiclos:
  9869                           
  9870                           	psect	text65
  9871  13B8                     __ptext65:	
  9872 ;; *************** function ___lmul *****************
  9873 ;; Defined at:
  9874 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul32.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;  multiplier      4    0[BANK0 ] unsigned long 
  9877 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;  product         4    9[BANK0 ] unsigned long 
  9880 ;; Return value:  Size  Location     Type
  9881 ;;                  4    0[BANK0 ] unsigned long 
  9882 ;; Registers used:
  9883 ;;		wreg, status,2, status,0
  9884 ;; Tracked objects:
  9885 ;;		On entry : 0/0
  9886 ;;		On exit  : 0/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9889 ;;      Params:         0       8       0       0       0
  9890 ;;      Locals:         0       4       0       0       0
  9891 ;;      Temps:          0       1       0       0       0
  9892 ;;      Totals:         0      13       0       0       0
  9893 ;;Total ram usage:       13 bytes
  9894 ;; Hardware stack levels used:    1
  9895 ;; Hardware stack levels required when called:    2
  9896 ;; This function calls:
  9897 ;;		Nothing
  9898 ;; This function is called by:
  9899 ;;		_main
  9900 ;; This function uses a non-reentrant model
  9901 ;;
  9902                           
  9903                           
  9904                           ;psect for function ___lmul
  9905  13B8                     ___lmul:
  9906  13B8                     l6827:	
  9907                           ;incstack = 0
  9908                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9909                           
  9910  13B8  3000               	movlw	0
  9911  13B9  1283               	bcf	3,5	;RP0=0, select bank0
  9912  13BA  1303               	bcf	3,6	;RP1=0, select bank0
  9913  13BB  00AC               	movwf	___lmul@product+3
  9914  13BC  3000               	movlw	0
  9915  13BD  00AB               	movwf	___lmul@product+2
  9916  13BE  3000               	movlw	0
  9917  13BF  00AA               	movwf	___lmul@product+1
  9918  13C0  3000               	movlw	0
  9919  13C1  00A9               	movwf	___lmul@product
  9920  13C2                     l6829:
  9921  13C2  1C20               	btfss	___lmul@multiplier,0
  9922  13C3  2BC5               	goto	u4721
  9923  13C4  2BC6               	goto	u4720
  9924  13C5                     u4721:
  9925  13C5  2BDD               	goto	l6833
  9926  13C6                     u4720:
  9927  13C6                     l6831:
  9928  13C6  0824               	movf	___lmul@multiplicand,w
  9929  13C7  07A9               	addwf	___lmul@product,f
  9930  13C8  0825               	movf	___lmul@multiplicand+1,w
  9931  13C9  1103               	clrz
  9932  13CA  1803               	skipnc
  9933  13CB  3E01               	addlw	1
  9934  13CC  1903               	skipnz
  9935  13CD  2BCF               	goto	u4731
  9936  13CE  07AA               	addwf	___lmul@product+1,f
  9937  13CF                     u4731:
  9938  13CF  0826               	movf	___lmul@multiplicand+2,w
  9939  13D0  1103               	clrz
  9940  13D1  1803               	skipnc
  9941  13D2  3E01               	addlw	1
  9942  13D3  1903               	skipnz
  9943  13D4  2BD6               	goto	u4732
  9944  13D5  07AB               	addwf	___lmul@product+2,f
  9945  13D6                     u4732:
  9946  13D6  0827               	movf	___lmul@multiplicand+3,w
  9947  13D7  1103               	clrz
  9948  13D8  1803               	skipnc
  9949  13D9  3E01               	addlw	1
  9950  13DA  1903               	skipnz
  9951  13DB  2BDD               	goto	u4733
  9952  13DC  07AC               	addwf	___lmul@product+3,f
  9953  13DD                     u4733:
  9954  13DD                     l6833:
  9955  13DD  3001               	movlw	1
  9956  13DE  00A8               	movwf	??___lmul
  9957  13DF                     u4745:
  9958  13DF  1003               	clrc
  9959  13E0  0DA4               	rlf	___lmul@multiplicand,f
  9960  13E1  0DA5               	rlf	___lmul@multiplicand+1,f
  9961  13E2  0DA6               	rlf	___lmul@multiplicand+2,f
  9962  13E3  0DA7               	rlf	___lmul@multiplicand+3,f
  9963  13E4  0BA8               	decfsz	??___lmul,f
  9964  13E5  2BDF               	goto	u4745
  9965  13E6                     l6835:
  9966  13E6  3001               	movlw	1
  9967  13E7                     u4755:
  9968  13E7  1003               	clrc
  9969  13E8  0CA3               	rrf	___lmul@multiplier+3,f
  9970  13E9  0CA2               	rrf	___lmul@multiplier+2,f
  9971  13EA  0CA1               	rrf	___lmul@multiplier+1,f
  9972  13EB  0CA0               	rrf	___lmul@multiplier,f
  9973  13EC  3EFF               	addlw	-1
  9974  13ED  1D03               	skipz
  9975  13EE  2BE7               	goto	u4755
  9976  13EF  0823               	movf	___lmul@multiplier+3,w
  9977  13F0  0422               	iorwf	___lmul@multiplier+2,w
  9978  13F1  0421               	iorwf	___lmul@multiplier+1,w
  9979  13F2  0420               	iorwf	___lmul@multiplier,w
  9980  13F3  1D03               	skipz
  9981  13F4  2BF6               	goto	u4761
  9982  13F5  2BF7               	goto	u4760
  9983  13F6                     u4761:
  9984  13F6  2BC2               	goto	l6829
  9985  13F7                     u4760:
  9986  13F7                     l6837:
  9987  13F7  082C               	movf	___lmul@product+3,w
  9988  13F8  00A3               	movwf	?___lmul+3
  9989  13F9  082B               	movf	___lmul@product+2,w
  9990  13FA  00A2               	movwf	?___lmul+2
  9991  13FB  082A               	movf	___lmul@product+1,w
  9992  13FC  00A1               	movwf	?___lmul+1
  9993  13FD  0829               	movf	___lmul@product,w
  9994  13FE  00A0               	movwf	?___lmul
  9995  13FF                     l941:
  9996  13FF  0008               	return
  9997  1400                     __end_of___lmul:
  9998                           
  9999                           	psect	text66
 10000  1BF4                     __ptext66:	
 10001 ;; *************** function _irq *****************
 10002 ;; Defined at:
 10003 ;;		line 53 in file "main.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;		None
 10008 ;; Return value:  Size  Location     Type
 10009 ;;                  1    wreg      void 
 10010 ;; Registers used:
 10011 ;;		wreg, status,2, status,0, pclath, cstack
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10017 ;;      Params:         0       0       0       0       0
 10018 ;;      Locals:         0       0       0       0       0
 10019 ;;      Temps:          2       0       0       0       0
 10020 ;;      Totals:         2       0       0       0       0
 10021 ;;Total ram usage:        2 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:    1
 10024 ;; This function calls:
 10025 ;;		_intt1_1ms
 10026 ;; This function is called by:
 10027 ;;		Interrupt level 1
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           
 10032                           ;psect for function _irq
 10033  1BF4                     _irq:
 10034  1BF4                     i1l4687:
 10035                           
 10036                           ;main.c: 55:     INTCONbits.GIE = 0;
 10037  1BF4  138B               	bcf	11,7	;volatile
 10038                           
 10039                           ;main.c: 56:     if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 10040  1BF5  1283               	bcf	3,5	;RP0=0, select bank0
 10041  1BF6  1303               	bcf	3,6	;RP1=0, select bank0
 10042  1BF7  1C0C               	btfss	12,0	;volatile
 10043  1BF8  2BFA               	goto	u306_21
 10044  1BF9  2BFB               	goto	u306_20
 10045  1BFA                     u306_21:
 10046  1BFA  2C09               	goto	i1l4695
 10047  1BFB                     u306_20:
 10048  1BFB                     i1l4689:
 10049  1BFB  1683               	bsf	3,5	;RP0=1, select bank1
 10050  1BFC  1303               	bcf	3,6	;RP1=0, select bank1
 10051  1BFD  1C0C               	btfss	12,0	;volatile
 10052  1BFE  2C00               	goto	u307_21
 10053  1BFF  2C01               	goto	u307_20
 10054  1C00                     u307_21:
 10055  1C00  2C09               	goto	i1l4695
 10056  1C01                     u307_20:
 10057  1C01                     i1l4691:
 10058                           
 10059                           ;main.c: 57:     {;main.c: 58:         PIR1bits.TMR1IF = 0;
 10060  1C01  1283               	bcf	3,5	;RP0=0, select bank0
 10061  1C02  1303               	bcf	3,6	;RP1=0, select bank0
 10062  1C03  100C               	bcf	12,0	;volatile
 10063  1C04                     i1l4693:
 10064                           
 10065                           ;main.c: 60:         intt1_1ms();
 10066  1C04  160A  158A  2651  160A  158A  	fcall	_intt1_1ms
 10067  1C09                     i1l4695:
 10068                           
 10069                           ;main.c: 62:     INTCONbits.GIE = 1;
 10070  1C09  178B               	bsf	11,7	;volatile
 10071  1C0A                     i1l606:
 10072  1C0A  0875               	movf	??_irq+1,w
 10073  1C0B  008A               	movwf	10
 10074  1C0C  0E74               	swapf	??_irq,w
 10075  1C0D  0083               	movwf	3
 10076  1C0E  0EFE               	swapf	btemp,f
 10077  1C0F  0E7E               	swapf	btemp,w
 10078  1C10  0009               	retfie
 10079  1C11                     __end_of_irq:
 10080                           
 10081                           	psect	intentry
 10082  0004                     __pintentry:	
 10083                           ;incstack = 0
 10084                           ; Regs used in _irq: [wreg+status,2+status,0+pclath+cstack]
 10085                           
 10086  0004                     interrupt_function:
 10087  007E                     saved_w	set	btemp
 10088  0004  00FE               	movwf	btemp
 10089  0005  0E03               	swapf	3,w
 10090  0006  00F4               	movwf	??_irq
 10091  0007  080A               	movf	10,w
 10092  0008  00F5               	movwf	??_irq+1
 10093  0009  160A  158A  2BF4   	ljmp	_irq
 10094                           
 10095                           	psect	text67
 10096  1E51                     __ptext67:	
 10097 ;; *************** function _intt1_1ms *****************
 10098 ;; Defined at:
 10099 ;;		line 5 in file "timer1.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;		None
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;		None
 10104 ;; Return value:  Size  Location     Type
 10105 ;;                  1    wreg      void 
 10106 ;; Registers used:
 10107 ;;		wreg
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10113 ;;      Params:         0       0       0       0       0
 10114 ;;      Locals:         0       0       0       0       0
 10115 ;;      Temps:          4       0       0       0       0
 10116 ;;      Totals:         4       0       0       0       0
 10117 ;;Total ram usage:        4 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; This function calls:
 10120 ;;		Nothing
 10121 ;; This function is called by:
 10122 ;;		_irq
 10123 ;; This function uses a non-reentrant model
 10124 ;;
 10125                           
 10126                           
 10127                           ;psect for function _intt1_1ms
 10128  1E51                     _intt1_1ms:
 10129  1E51                     i1l4599:	
 10130                           ;incstack = 0
 10131                           ; Regs used in _intt1_1ms: [wreg]
 10132                           
 10133                           
 10134                           ;timer1.c: 7:     TMR1H = ((65536-625)>>8) & 0x00FF;
 10135  1E51  30FD               	movlw	253
 10136  1E52  1283               	bcf	3,5	;RP0=0, select bank0
 10137  1E53  1303               	bcf	3,6	;RP1=0, select bank0
 10138  1E54  008F               	movwf	15	;volatile
 10139                           
 10140                           ;timer1.c: 8:     TMR1L = (65536-625) & 0x00FF;
 10141  1E55  308F               	movlw	143
 10142  1E56  008E               	movwf	14	;volatile
 10143                           
 10144                           ;timer1.c: 10:     if(t1cont)
 10145  1E57  084B               	movf	_t1cont+3,w
 10146  1E58  044A               	iorwf	_t1cont+2,w
 10147  1E59  0449               	iorwf	_t1cont+1,w
 10148  1E5A  0448               	iorwf	_t1cont,w
 10149  1E5B  1903               	skipnz
 10150  1E5C  2E5E               	goto	u297_21
 10151  1E5D  2E5F               	goto	u297_20
 10152  1E5E                     u297_21:
 10153  1E5E  2E7C               	goto	i1l473
 10154  1E5F                     u297_20:
 10155  1E5F                     i1l4601:
 10156                           
 10157                           ;timer1.c: 11:         --t1cont;
 10158  1E5F  3001               	movlw	1
 10159  1E60  00F0               	movwf	??_intt1_1ms
 10160  1E61  3000               	movlw	0
 10161  1E62  00F1               	movwf	??_intt1_1ms+1
 10162  1E63  3000               	movlw	0
 10163  1E64  00F2               	movwf	??_intt1_1ms+2
 10164  1E65  3000               	movlw	0
 10165  1E66  00F3               	movwf	??_intt1_1ms+3
 10166  1E67  0870               	movf	??_intt1_1ms,w
 10167  1E68  02C8               	subwf	_t1cont,f
 10168  1E69  0871               	movf	??_intt1_1ms+1,w
 10169  1E6A  1C03               	skipc
 10170  1E6B  0F71               	incfsz	??_intt1_1ms+1,w
 10171  1E6C  2E6E               	goto	u298_25
 10172  1E6D  2E6F               	goto	u298_26
 10173  1E6E                     u298_25:
 10174  1E6E  02C9               	subwf	_t1cont+1,f
 10175  1E6F                     u298_26:
 10176  1E6F  0872               	movf	??_intt1_1ms+2,w
 10177  1E70  1C03               	skipc
 10178  1E71  0F72               	incfsz	??_intt1_1ms+2,w
 10179  1E72  2E74               	goto	u298_27
 10180  1E73  2E75               	goto	u298_28
 10181  1E74                     u298_27:
 10182  1E74  02CA               	subwf	_t1cont+2,f
 10183  1E75                     u298_28:
 10184  1E75  0873               	movf	??_intt1_1ms+3,w
 10185  1E76  1C03               	skipc
 10186  1E77  0F73               	incfsz	??_intt1_1ms+3,w
 10187  1E78  2E7A               	goto	u298_29
 10188  1E79  2E7B               	goto	u298_20
 10189  1E7A                     u298_29:
 10190  1E7A  02CB               	subwf	_t1cont+3,f
 10191  1E7B                     u298_20:
 10192  1E7B  2E7D               	goto	i1l475
 10193  1E7C                     i1l473:	
 10194                           ;timer1.c: 12:     else
 10195                           
 10196                           
 10197                           ;timer1.c: 13:         T1CONbits.TMR1ON = 0;
 10198  1E7C  1010               	bcf	16,0	;volatile
 10199  1E7D                     i1l475:
 10200  1E7D  0008               	return
 10201  1E7E                     __end_of_intt1_1ms:
 10202  0010                     
 10203                           	psect	functab
 10204  0052                     __pfunctab:
 10205  0052                     __fptable:
 10206  0052                     fptable:
 10207  0052  00FF               	movwf	(btemp+1)& (0+127)
 10208  0053  3000               	movlw	high fptable
 10209  0054  008A               	movwf	10
 10210  0055  087F               	movf	(btemp+1)& (0+127),w
 10211  0056  0782               	addwf	2,f
 10212  0057                     fpbase:
 10213  0057  2857               	goto	fpbase	; Call via a null pointer and you will get stuck here.
 10214  0058                     fp__buscar_receita:
 10215  0058  160A  158A  2F9B   	ljmp	_buscar_receita
 10216  005B                     fp__deletar_receita:
 10217  005B  160A  158A  2DFC   	ljmp	_deletar_receita
 10218  005E                     fp__dispLCD:
 10219  005E  160A  118A  2AF7   	ljmp	_dispLCD
 10220  0061                     fp__dispLCD_clr:
 10221  0061                     entry__dispLCD_clr:
 10222  0061  160A  158A  2B29   	ljmp	_dispLCD_clr
 10223  0064                     fp__dispLCD_init:
 10224  0064                     entry__dispLCD_init:
 10225  0064  160A  158A  2F09   	ljmp	_dispLCD_init
 10226  0067                     fp__dispLCD_str:
 10227  0067  160A  118A  2B33   	ljmp	_dispLCD_str
 10228  006A                     fp__dispLCD_num:
 10229  006A                     entry__dispLCD_num:
 10230  006A  160A  118A  2F1B   	ljmp	_dispLCD_num
 10231  006D                     fp__salvar_receita:
 10232  006D  160A  158A  2FCD   	ljmp	_salvar_receita
 10233  0070                     __end_of__fptable:
 10234  007E                     btemp	set	126	;btemp
 10235  007E                     wtemp0	set	126
 10236                           
 10237                           	psect	config
 10238                           
 10239                           ;Config register CONFIG1 @ 0x2007
 10240                           ;	Oscillator Selection bits
 10241                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
 10242                           ;	Watchdog Timer Enable bit
 10243                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
 10244                           ;	Power-up Timer Enable bit
 10245                           ;	PWRTE = ON, PWRT enabled
 10246                           ;	RE3/MCLR pin function select bit
 10247                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
 10248                           ;	Code Protection bit
 10249                           ;	CP = OFF, Program memory code protection is disabled
 10250                           ;	Data Code Protection bit
 10251                           ;	CPD = OFF, Data memory code protection is disabled
 10252                           ;	Brown Out Reset Selection bits
 10253                           ;	BOREN = OFF, BOR disabled
 10254                           ;	Internal External Switchover bit
 10255                           ;	IESO = OFF, Internal/External Switchover mode is disabled
 10256                           ;	Fail-Safe Clock Monitor Enabled bit
 10257                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
 10258                           ;	Low Voltage Programming Enable bit
 10259                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
 10260                           ;	In-Circuit Debugger Mode bit
 10261                           ;	DEBUG = 0x1, unprogrammed default
 10262  2007                     	org	8199
 10263  2007  20C2               	dw	8386
 10264                           
 10265                           ;Config register CONFIG2 @ 0x2008
 10266                           ;	Brown-out Reset Selection bit
 10267                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
 10268                           ;	Flash Program Memory Self Write Enable bits
 10269                           ;	WRT = OFF, Write protection off
 10270  2008                     	org	8200
 10271  2008  3FFF               	dw	16383
 10272                           
 10273                           	psect	maintext_split_1
 10274  0070                     l6949:
 10275                           
 10276                           ;main.c: 135:                             {;main.c: 136:                                
      +                           dispLCD_lincol( 2, i );
 10277  0070  084B               	movf	main@i_856^(0+384),w
 10278  0071  1283               	bcf	3,5	;RP0=0, select bank0
 10279  0072  1303               	bcf	3,6	;RP1=0, select bank0
 10280  0073  00C4               	movwf	??_main
 10281  0074  0844               	movf	??_main,w
 10282  0075  00A3               	movwf	dispLCD_lincol@col
 10283  0076  3002               	movlw	2
 10284  0077  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
 10285                           
 10286                           ;main.c: 137:                                 dispLCD_dataReg( *ptr );
 10287  007C  1683               	bsf	3,5	;RP0=1, select bank3
 10288  007D  1703               	bsf	3,6	;RP1=1, select bank3
 10289  007E  084C               	movf	main@ptr^(0+384),w
 10290  007F  0084               	movwf	4
 10291  0080  1783               	bsf	3,7	;select IRP bank2
 10292  0081  0800               	movf	0,w
 10293  0082  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
 10294  0087                     l6951:
 10295                           
 10296                           ;main.c: 138:                                 i++;
 10297  0087  3001               	movlw	1
 10298  0088  1283               	bcf	3,5	;RP0=0, select bank0
 10299  0089  1303               	bcf	3,6	;RP1=0, select bank0
 10300  008A  00C4               	movwf	??_main
 10301  008B  0844               	movf	??_main,w
 10302  008C  1683               	bsf	3,5	;RP0=1, select bank3
 10303  008D  1703               	bsf	3,6	;RP1=1, select bank3
 10304  008E  07CB               	addwf	main@i_856^(0+384),f
 10305  008F                     l6953:
 10306                           
 10307                           ;main.c: 139:                                 delay(50);
 10308  008F  3032               	movlw	50
 10309  0090  1283               	bcf	3,5	;RP0=0, select bank0
 10310  0091  1303               	bcf	3,6	;RP1=0, select bank0
 10311  0092  00A0               	movwf	delay@t
 10312  0093  3000               	movlw	0
 10313  0094  00A1               	movwf	delay@t+1
 10314  0095  120A  158A  2000  120A  118A  	fcall	_delay
 10315  009A                     l6955:
 10316                           
 10317                           ;main.c: 140:                             }
 10318  009A  3001               	movlw	1
 10319  009B  1283               	bcf	3,5	;RP0=0, select bank0
 10320  009C  1303               	bcf	3,6	;RP1=0, select bank0
 10321  009D  00C4               	movwf	??_main
 10322  009E  0844               	movf	??_main,w
 10323  009F  1683               	bsf	3,5	;RP0=1, select bank3
 10324  00A0  1703               	bsf	3,6	;RP1=1, select bank3
 10325  00A1  07CC               	addwf	main@ptr^(0+384),f
 10326  00A2                     l6957:
 10327  00A2  084C               	movf	main@ptr^(0+384),w
 10328  00A3  0084               	movwf	4
 10329  00A4  1783               	bsf	3,7	;select IRP bank2
 10330  00A5  0800               	movf	0,w
 10331  00A6  1D03               	btfss	3,2
 10332  00A7  28A9               	goto	u4831
 10333  00A8  28AA               	goto	u4830
 10334  00A9                     u4831:
 10335  00A9  2870               	goto	l6949
 10336  00AA                     u4830:
 10337  00AA                     l6959:
 10338                           
 10339                           ;main.c: 142:                             setT1(1500);
 10340  00AA  3000               	movlw	0
 10341  00AB  1283               	bcf	3,5	;RP0=0, select bank0
 10342  00AC  1303               	bcf	3,6	;RP1=0, select bank0
 10343  00AD  00B0               	movwf	setT1@c+3
 10344  00AE  3000               	movlw	0
 10345  00AF  00AF               	movwf	setT1@c+2
 10346  00B0  3005               	movlw	5
 10347  00B1  00AE               	movwf	setT1@c+1
 10348  00B2  30DC               	movlw	220
 10349  00B3  00AD               	movwf	setT1@c
 10350  00B4  160A  158A  2385  120A  118A  	fcall	_setT1
 10351  00B9                     l6961:
 10352                           
 10353                           ;main.c: 143:                             estado = 2;
 10354  00B9  3002               	movlw	2
 10355  00BA  1283               	bcf	3,5	;RP0=0, select bank0
 10356  00BB  1303               	bcf	3,6	;RP1=0, select bank0
 10357  00BC  00C4               	movwf	??_main
 10358  00BD  0844               	movf	??_main,w
 10359  00BE  1683               	bsf	3,5	;RP0=1, select bank3
 10360  00BF  1703               	bsf	3,6	;RP1=1, select bank3
 10361  00C0  00E0               	movwf	main@estado^(0+384)
 10362                           
 10363                           ;main.c: 144:                             break;
 10364  00C1  28D0               	goto	u4841
 10365  00C2                     l6963:
 10366                           
 10367                           ;main.c: 147:                             if(!statusT1())
 10368  00C2  160A  158A  237A  120A  118A  	fcall	_statusT1
 10369  00C7  1283               	bcf	3,5	;RP0=0, select bank0
 10370  00C8  1303               	bcf	3,6	;RP1=0, select bank0
 10371  00C9  0823               	movf	?_statusT1+3,w
 10372  00CA  0422               	iorwf	?_statusT1+2,w
 10373  00CB  0421               	iorwf	?_statusT1+1,w
 10374  00CC  0420               	iorwf	?_statusT1,w
 10375  00CD  1D03               	skipz
 10376  00CE  28D0               	goto	u4841
 10377  00CF  28D3               	goto	u4840
 10378  00D0                     u4841:
 10379  00D0  120A  158A  2E60   	goto	l7429
 10380  00D3                     u4840:
 10381  00D3                     l6965:
 10382                           
 10383                           ;main.c: 148:                                 estado = 8;
 10384  00D3  3008               	movlw	8
 10385  00D4  00C4               	movwf	??_main
 10386  00D5  0844               	movf	??_main,w
 10387  00D6  1683               	bsf	3,5	;RP0=1, select bank3
 10388  00D7  1703               	bsf	3,6	;RP1=1, select bank3
 10389  00D8  00E0               	movwf	main@estado^(0+384)
 10390  00D9  28D0               	goto	u4841
 10391  00DA                     l6967:
 10392                           
 10393                           ;main.c: 167:                             init_atuadores();
 10394  00DA  160A  158A  2318  120A  118A  	fcall	_init_atuadores
 10395  00DF                     l6969:
 10396                           
 10397                           ;main.c: 168:                             IHM.print("1: INSERIR SEQUENCIA\n"
 10398  00DF  3000               	movlw	low (STR_4| (0+32768))
 10399  00E0  1283               	bcf	3,5	;RP0=0, select bank0
 10400  00E1  1303               	bcf	3,6	;RP1=0, select bank0
 10401  00E2  00A8               	movwf	dispLCD_str@str
 10402  00E3  3090               	movlw	high (STR_4| (0+32768))
 10403  00E4  00A9               	movwf	dispLCD_str@str+1
 10404  00E5  1683               	bsf	3,5	;RP0=1, select bank3
 10405  00E6  1703               	bsf	3,6	;RP1=1, select bank3
 10406  00E7  0863               	movf	(low ((_IHM| (0+256)+1)))^(0+128),w
 10407  00E8  120A  118A  2052  120A  118A  	fcall	fptable
 10408  00ED                     l6971:
 10409                           
 10410                           ;main.c: 172:                             setT1(1000);
 10411  00ED  3000               	movlw	0
 10412  00EE  1283               	bcf	3,5	;RP0=0, select bank0
 10413  00EF  1303               	bcf	3,6	;RP1=0, select bank0
 10414  00F0  00B0               	movwf	setT1@c+3
 10415  00F1  3000               	movlw	0
 10416  00F2  00AF               	movwf	setT1@c+2
 10417  00F3  3003               	movlw	3
 10418  00F4  00AE               	movwf	setT1@c+1
 10419  00F5  30E8               	movlw	232
 10420  00F6  00AD               	movwf	setT1@c
 10421  00F7  160A  158A  2385  120A  118A  	fcall	_setT1
 10422  00FC                     l6973:
 10423                           
 10424                           ;main.c: 173:                             estado = 9;
 10425  00FC  3009               	movlw	9
 10426  00FD  1283               	bcf	3,5	;RP0=0, select bank0
 10427  00FE  1303               	bcf	3,6	;RP1=0, select bank0
 10428  00FF  00C4               	movwf	??_main
 10429  0100  0844               	movf	??_main,w
 10430  0101  1683               	bsf	3,5	;RP0=1, select bank3
 10431  0102  1703               	bsf	3,6	;RP1=1, select bank3
 10432  0103  00E0               	movwf	main@estado^(0+384)
 10433                           
 10434                           ;main.c: 174:                             break;
 10435  0104  28D0               	goto	u4841
 10436  0105                     l6975:
 10437                           
 10438                           ;main.c: 177:                             if(!statusT1())
 10439  0105  160A  158A  237A  120A  118A  	fcall	_statusT1
 10440  010A  1283               	bcf	3,5	;RP0=0, select bank0
 10441  010B  1303               	bcf	3,6	;RP1=0, select bank0
 10442  010C  0823               	movf	?_statusT1+3,w
 10443  010D  0422               	iorwf	?_statusT1+2,w
 10444  010E  0421               	iorwf	?_statusT1+1,w
 10445  010F  0420               	iorwf	?_statusT1,w
 10446  0110  1D03               	skipz
 10447  0111  2913               	goto	u4851
 10448  0112  2914               	goto	u4850
 10449  0113                     u4851:
 10450  0113  28D0               	goto	u4841
 10451  0114                     u4850:
 10452  0114                     l6977:
 10453                           
 10454                           ;main.c: 178:                                 estado = 71;
 10455  0114  3047               	movlw	71
 10456  0115  00C4               	movwf	??_main
 10457  0116  0844               	movf	??_main,w
 10458  0117  1683               	bsf	3,5	;RP0=1, select bank3
 10459  0118  1703               	bsf	3,6	;RP1=1, select bank3
 10460  0119  00E0               	movwf	main@estado^(0+384)
 10461  011A  28D0               	goto	u4841
 10462  011B                     l6979:
 10463                           
 10464                           ;main.c: 182:                             tecla = teclado_borda();
 10465  011B  160A  158A  248D  120A  118A  	fcall	_teclado_borda
 10466  0120  1283               	bcf	3,5	;RP0=0, select bank0
 10467  0121  1303               	bcf	3,6	;RP1=0, select bank0
 10468  0122  00C4               	movwf	??_main
 10469  0123  0844               	movf	??_main,w
 10470  0124  1683               	bsf	3,5	;RP0=1, select bank3
 10471  0125  1703               	bsf	3,6	;RP1=1, select bank3
 10472  0126  00E1               	movwf	main@tecla^(0+384)
 10473                           
 10474                           ;main.c: 183:                             switch(tecla)
 10475  0127  2938               	goto	l6987
 10476  0128                     l6981:
 10477  0128  3003               	movlw	3
 10478  0129  1283               	bcf	3,5	;RP0=0, select bank0
 10479  012A  1303               	bcf	3,6	;RP1=0, select bank0
 10480  012B  00C4               	movwf	??_main
 10481  012C  0844               	movf	??_main,w
 10482  012D  1683               	bsf	3,5	;RP0=1, select bank3
 10483  012E  1703               	bsf	3,6	;RP1=1, select bank3
 10484  012F  00E0               	movwf	main@estado^(0+384)
 10485  0130  28D0               	goto	u4841
 10486  0131                     l6983:
 10487  0131  3048               	movlw	72
 10488  0132  00C4               	movwf	??_main
 10489  0133  0844               	movf	??_main,w
 10490  0134  1683               	bsf	3,5	;RP0=1, select bank3
 10491  0135  1703               	bsf	3,6	;RP1=1, select bank3
 10492  0136  00E0               	movwf	main@estado^(0+384)
 10493  0137  28D0               	goto	u4841
 10494  0138                     l6987:
 10495  0138  0861               	movf	main@tecla^(0+384),w
 10496  0139  1283               	bcf	3,5	;RP0=0, select bank0
 10497  013A  1303               	bcf	3,6	;RP1=0, select bank0
 10498  013B  00C4               	movwf	??_main
 10499  013C  01C5               	clrf	??_main+1
 10500                           
 10501                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10502                           ; Switch size 1, requested type "simple"
 10503                           ; Number of cases is 1, Range of values is 0 to 0
 10504                           ; switch strategies available:
 10505                           ; Name         Instructions Cycles
 10506                           ; simple_byte            4     3 (average)
 10507                           ; direct_byte           11     8 (fixed)
 10508                           ; jumptable            260     6 (fixed)
 10509                           ;	Chosen strategy is simple_byte
 10510  013D  0845               	movf	??_main+1,w
 10511  013E  3A00               	xorlw	0	; case 0
 10512  013F  1903               	skipnz
 10513  0140  2942               	goto	l8057
 10514  0141  28D0               	goto	u4841
 10515  0142                     l8057:
 10516                           
 10517                           ; Switch size 1, requested type "simple"
 10518                           ; Number of cases is 3, Range of values is 49 to 51
 10519                           ; switch strategies available:
 10520                           ; Name         Instructions Cycles
 10521                           ; simple_byte           10     6 (average)
 10522                           ; direct_byte           20    11 (fixed)
 10523                           ; jumptable            263     9 (fixed)
 10524                           ;	Chosen strategy is simple_byte
 10525  0142  0844               	movf	??_main,w
 10526  0143  3A31               	xorlw	49	; case 49
 10527  0144  1903               	skipnz
 10528  0145  2928               	goto	l6981
 10529  0146  3A03               	xorlw	3	; case 50
 10530  0147  1903               	skipnz
 10531  0148  2931               	goto	l6983
 10532  0149  3A01               	xorlw	1	; case 51
 10533  014A  1903               	skipnz
 10534  014B  28D0               	goto	u4841
 10535  014C  28D0               	goto	u4841
 10536  014D                     l6989:
 10537                           
 10538                           ;main.c: 264:                             IHM.clr();
 10539  014D  1683               	bsf	3,5	;RP0=1, select bank3
 10540  014E  1703               	bsf	3,6	;RP1=1, select bank3
 10541  014F  0866               	movf	(low ((_IHM| (0+256)+4)))^(0+128),w
 10542  0150  120A  118A  2052  120A  118A  	fcall	fptable
 10543  0155                     l6991:
 10544                           
 10545                           ;main.c: 265:                             IHM.print(" ESCOLHA A MEMORIA \n"
 10546  0155  3053               	movlw	low (STR_5| (0+32768))
 10547  0156  1283               	bcf	3,5	;RP0=0, select bank0
 10548  0157  1303               	bcf	3,6	;RP1=0, select bank0
 10549  0158  00A8               	movwf	dispLCD_str@str
 10550  0159  3090               	movlw	high (STR_5| (0+32768))
 10551  015A  00A9               	movwf	dispLCD_str@str+1
 10552  015B  1683               	bsf	3,5	;RP0=1, select bank3
 10553  015C  1703               	bsf	3,6	;RP1=1, select bank3
 10554  015D  0863               	movf	(low ((_IHM| (0+256)+1)))^(0+128),w
 10555  015E  120A  118A  2052  120A  118A  	fcall	fptable
 10556  0163                     l6993:
 10557                           
 10558                           ;main.c: 269:                             estado = 73;
 10559  0163  3049               	movlw	73
 10560  0164  1283               	bcf	3,5	;RP0=0, select bank0
 10561  0165  1303               	bcf	3,6	;RP1=0, select bank0
 10562  0166  00C4               	movwf	??_main
 10563  0167  0844               	movf	??_main,w
 10564  0168  1683               	bsf	3,5	;RP0=1, select bank3
 10565  0169  1703               	bsf	3,6	;RP1=1, select bank3
 10566  016A  00E0               	movwf	main@estado^(0+384)
 10567  016B                     l6995:
 10568                           
 10569                           ;main.c: 272:                             tecla = teclado_borda();
 10570  016B  160A  158A  248D  120A  118A  	fcall	_teclado_borda
 10571  0170  1283               	bcf	3,5	;RP0=0, select bank0
 10572  0171  1303               	bcf	3,6	;RP1=0, select bank0
 10573  0172  00C4               	movwf	??_main
 10574  0173  0844               	movf	??_main,w
 10575  0174  1683               	bsf	3,5	;RP0=1, select bank3
 10576  0175  1703               	bsf	3,6	;RP1=1, select bank3
 10577  0176  00E1               	movwf	main@tecla^(0+384)
 10578                           
 10579                           ;main.c: 273:                             switch(tecla)
 10580  0177  2AAE               	goto	l7041
 10581  0178                     l650:	
 10582                           ;main.c: 278:                                 case '3':
 10583                           
 10584  0178                     l6997:
 10585                           
 10586                           ;main.c: 285:                                            buscar_dado(10, tecla % 0x30, &
      +                          init_cond);
 10587  0178  3030               	movlw	48
 10588  0179  00A0               	movwf	___awmod@divisor
 10589  017A  3000               	movlw	0
 10590  017B  00A1               	movwf	___awmod@divisor+1
 10591  017C  1683               	bsf	3,5	;RP0=1, select bank3
 10592  017D  1703               	bsf	3,6	;RP1=1, select bank3
 10593  017E  0861               	movf	main@tecla^(0+384),w
 10594  017F  1283               	bcf	3,5	;RP0=0, select bank0
 10595  0180  1303               	bcf	3,6	;RP1=0, select bank0
 10596  0181  00C4               	movwf	??_main
 10597  0182  01C5               	clrf	??_main+1
 10598  0183  0844               	movf	??_main,w
 10599  0184  00A2               	movwf	___awmod@dividend
 10600  0185  0845               	movf	??_main+1,w
 10601  0186  00A3               	movwf	___awmod@dividend+1
 10602  0187  160A  118A  254D  120A  118A  	fcall	___awmod
 10603  018C  1283               	bcf	3,5	;RP0=0, select bank0
 10604  018D  1303               	bcf	3,6	;RP1=0, select bank0
 10605  018E  0820               	movf	?___awmod,w
 10606  018F  00C6               	movwf	??_main+2
 10607  0190  0846               	movf	??_main+2,w
 10608  0191  00A7               	movwf	buscar_dado@col
 10609  0192  30D5               	movlw	(low (main@init_cond| (0+256)))& (0+255)
 10610  0193  00C7               	movwf	??_main+3
 10611  0194  0847               	movf	??_main+3,w
 10612  0195  00A8               	movwf	buscar_dado@data
 10613  0196  300A               	movlw	10
 10614  0197  160A  158A  2519  120A  118A  	fcall	_buscar_dado
 10615                           
 10616                           ;main.c: 286:                                            manipula_atuadores_init(init_co
      +                          nd);
 10617  019C  1683               	bsf	3,5	;RP0=1, select bank3
 10618  019D  1703               	bsf	3,6	;RP1=1, select bank3
 10619  019E  0855               	movf	main@init_cond^(0+384),w
 10620  019F  160A  158A  2626  120A  118A  	fcall	_manipula_atuadores_init
 10621                           
 10622                           ;main.c: 288:                                            EEPROM.buscar(tecla % 0x30, vet
      +                          or_aux);
 10623  01A4  3030               	movlw	48
 10624  01A5  1283               	bcf	3,5	;RP0=0, select bank0
 10625  01A6  1303               	bcf	3,6	;RP1=0, select bank0
 10626  01A7  00A0               	movwf	___awmod@divisor
 10627  01A8  3000               	movlw	0
 10628  01A9  00A1               	movwf	___awmod@divisor+1
 10629  01AA  1683               	bsf	3,5	;RP0=1, select bank3
 10630  01AB  1703               	bsf	3,6	;RP1=1, select bank3
 10631  01AC  0861               	movf	main@tecla^(0+384),w
 10632  01AD  1283               	bcf	3,5	;RP0=0, select bank0
 10633  01AE  1303               	bcf	3,6	;RP1=0, select bank0
 10634  01AF  00C4               	movwf	??_main
 10635  01B0  01C5               	clrf	??_main+1
 10636  01B1  0844               	movf	??_main,w
 10637  01B2  00A2               	movwf	___awmod@dividend
 10638  01B3  0845               	movf	??_main+1,w
 10639  01B4  00A3               	movwf	___awmod@dividend+1
 10640  01B5  160A  118A  254D  120A  118A  	fcall	___awmod
 10641  01BA  1283               	bcf	3,5	;RP0=0, select bank0
 10642  01BB  1303               	bcf	3,6	;RP1=0, select bank0
 10643  01BC  0820               	movf	?___awmod,w
 10644  01BD  00C6               	movwf	??_main+2
 10645  01BE  0846               	movf	??_main+2,w
 10646  01BF  00A7               	movwf	buscar_receita@adrs
 10647  01C0  30A4               	movlw	(low (main@vetor_aux| (0+256)))& (0+255)
 10648  01C1  00C7               	movwf	??_main+3
 10649  01C2  0847               	movf	??_main+3,w
 10650  01C3  00A8               	movwf	buscar_receita@data
 10651  01C4  1683               	bsf	3,5	;RP0=1, select bank3
 10652  01C5  1703               	bsf	3,6	;RP1=1, select bank3
 10653  01C6  0868               	movf	(low ((_EEPROM| (0+256)+1)))^(0+128),w
 10654  01C7  120A  118A  2052  120A  118A  	fcall	fptable
 10655  01CC                     l6999:
 10656                           
 10657                           ;main.c: 289:                                            pt = vetor_aux;
 10658  01CC  30A4               	movlw	(low (main@vetor_aux| (0+256)))& (0+255)
 10659  01CD  1283               	bcf	3,5	;RP0=0, select bank0
 10660  01CE  1303               	bcf	3,6	;RP1=0, select bank0
 10661  01CF  00C4               	movwf	??_main
 10662  01D0  0844               	movf	??_main,w
 10663  01D1  1683               	bsf	3,5	;RP0=1, select bank3
 10664  01D2  1703               	bsf	3,6	;RP1=1, select bank3
 10665  01D3  00B6               	movwf	main@pt^(0+384)
 10666  01D4                     l7001:
 10667                           
 10668                           ;main.c: 291:                                            if(*pt == 0xFF)
 10669  01D4  0836               	movf	main@pt^(0+384),w
 10670  01D5  0084               	movwf	4
 10671  01D6  1783               	bsf	3,7	;select IRP bank2
 10672  01D7  0A00               	incf	0,w
 10673  01D8  1D03               	btfss	3,2
 10674  01D9  29DB               	goto	u4861
 10675  01DA  29DC               	goto	u4860
 10676  01DB                     u4861:
 10677  01DB  2A03               	goto	l7007
 10678  01DC                     u4860:
 10679  01DC                     l7003:
 10680                           
 10681                           ;main.c: 292:                                            {;main.c: 293:                 
      +                                                         EEPROM.deletar(tecla % 0x30);
 10682  01DC  3030               	movlw	48
 10683  01DD  1283               	bcf	3,5	;RP0=0, select bank0
 10684  01DE  1303               	bcf	3,6	;RP1=0, select bank0
 10685  01DF  00A0               	movwf	___awmod@divisor
 10686  01E0  3000               	movlw	0
 10687  01E1  00A1               	movwf	___awmod@divisor+1
 10688  01E2  1683               	bsf	3,5	;RP0=1, select bank3
 10689  01E3  1703               	bsf	3,6	;RP1=1, select bank3
 10690  01E4  0861               	movf	main@tecla^(0+384),w
 10691  01E5  1283               	bcf	3,5	;RP0=0, select bank0
 10692  01E6  1303               	bcf	3,6	;RP1=0, select bank0
 10693  01E7  00C4               	movwf	??_main
 10694  01E8  01C5               	clrf	??_main+1
 10695  01E9  0844               	movf	??_main,w
 10696  01EA  00A2               	movwf	___awmod@dividend
 10697  01EB  0845               	movf	??_main+1,w
 10698  01EC  00A3               	movwf	___awmod@dividend+1
 10699  01ED  160A  118A  254D  120A  118A  	fcall	___awmod
 10700  01F2  1283               	bcf	3,5	;RP0=0, select bank0
 10701  01F3  1303               	bcf	3,6	;RP1=0, select bank0
 10702  01F4  0820               	movf	?___awmod,w
 10703  01F5  00C6               	movwf	??_main+2
 10704  01F6  0846               	movf	??_main+2,w
 10705  01F7  00A7               	movwf	deletar_receita@receita
 10706  01F8  1683               	bsf	3,5	;RP0=1, select bank3
 10707  01F9  1703               	bsf	3,6	;RP1=1, select bank3
 10708  01FA  0869               	movf	(low ((_EEPROM| (0+256)+2)))^(0+128),w
 10709  01FB  120A  118A  2052  120A  118A  	fcall	fptable
 10710  0200                     l7005:
 10711                           
 10712                           ;main.c: 294:                                                vetor_aux[0] = 0;
 10713  0200  1683               	bsf	3,5	;RP0=1, select bank3
 10714  0201  1703               	bsf	3,6	;RP1=1, select bank3
 10715  0202  01A4               	clrf	main@vetor_aux^(0+384)
 10716  0203                     l7007:
 10717                           
 10718                           ;main.c: 298:                                            for(char *ptr = vetor_aux; *ptr
      +                           != 0; ptr++)
 10719  0203  30A4               	movlw	(low (main@vetor_aux| (0+256)))& (0+255)
 10720  0204  1283               	bcf	3,5	;RP0=0, select bank0
 10721  0205  1303               	bcf	3,6	;RP1=0, select bank0
 10722  0206  00C4               	movwf	??_main
 10723  0207  0844               	movf	??_main,w
 10724  0208  1683               	bsf	3,5	;RP0=1, select bank3
 10725  0209  1703               	bsf	3,6	;RP1=1, select bank3
 10726  020A  00DD               	movwf	main@ptr_867^(0+384)
 10727  020B  2A98               	goto	l7031
 10728  020C                     l7009:
 10729                           
 10730                           ;main.c: 299:                                            {;main.c: 300:                 
      +                                                          if(*ptr & 0x80)
 10731  020C  085D               	movf	main@ptr_867^(0+384),w
 10732  020D  0084               	movwf	4
 10733  020E  1F80               	btfss	0,7
 10734  020F  2A11               	goto	u4871
 10735  0210  2A12               	goto	u4870
 10736  0211                     u4871:
 10737  0211  2A26               	goto	l7017
 10738  0212                     u4870:
 10739  0212                     l7011:
 10740                           
 10741                           ;main.c: 301:                                                 {;main.c: 302:            
      +                                                                   fifo_add_tempo(*ptr);
 10742  0212  085D               	movf	main@ptr_867^(0+384),w
 10743  0213  0084               	movwf	4
 10744  0214  0800               	movf	0,w
 10745  0215  160A  158A  2563  120A  118A  	fcall	_fifo_add_tempo
 10746                           
 10747                           ;main.c: 303:                                                 }
 10748  021A  2A8B               	goto	l7027
 10749  021B                     l666:	
 10750                           ;main.c: 311:                                                         case 'D':
 10751                           
 10752  021B                     l7013:
 10753                           
 10754                           ;main.c: 316:                                                                 *ptr &= ~0
      +                          x20;
 10755  021B  30DF               	movlw	223
 10756  021C  00C4               	movwf	??_main
 10757  021D  1683               	bsf	3,5	;RP0=1, select bank3
 10758  021E  1703               	bsf	3,6	;RP1=1, select bank3
 10759  021F  085D               	movf	main@ptr_867^(0+384),w
 10760  0220  0084               	movwf	4
 10761  0221  1283               	bcf	3,5	;RP0=0, select bank0
 10762  0222  1303               	bcf	3,6	;RP1=0, select bank0
 10763  0223  0844               	movf	??_main,w
 10764  0224  0580               	andwf	0,f
 10765                           
 10766                           ;main.c: 317:                                                                 break;
 10767  0225  2A4C               	goto	l7019
 10768  0226                     l7017:
 10769  0226  085D               	movf	main@ptr_867^(0+384),w
 10770  0227  0084               	movwf	4
 10771  0228  0800               	movf	0,w
 10772  0229  1283               	bcf	3,5	;RP0=0, select bank0
 10773  022A  1303               	bcf	3,6	;RP1=0, select bank0
 10774  022B  00C4               	movwf	??_main
 10775  022C  01C5               	clrf	??_main+1
 10776                           
 10777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10778                           ; Switch size 1, requested type "simple"
 10779                           ; Number of cases is 1, Range of values is 0 to 0
 10780                           ; switch strategies available:
 10781                           ; Name         Instructions Cycles
 10782                           ; simple_byte            4     3 (average)
 10783                           ; direct_byte           11     8 (fixed)
 10784                           ; jumptable            260     6 (fixed)
 10785                           ;	Chosen strategy is simple_byte
 10786  022D  0845               	movf	??_main+1,w
 10787  022E  3A00               	xorlw	0	; case 0
 10788  022F  1903               	skipnz
 10789  0230  2A32               	goto	l8059
 10790  0231  2A4C               	goto	l7019
 10791  0232                     l8059:
 10792                           
 10793                           ; Switch size 1, requested type "simple"
 10794                           ; Number of cases is 8, Range of values is 65 to 100
 10795                           ; switch strategies available:
 10796                           ; Name         Instructions Cycles
 10797                           ; simple_byte           25    13 (average)
 10798                           ; direct_byte          119    11 (fixed)
 10799                           ; jumptable            263     9 (fixed)
 10800                           ;	Chosen strategy is simple_byte
 10801  0232  0844               	movf	??_main,w
 10802  0233  3A41               	xorlw	65	; case 65
 10803  0234  1903               	skipnz
 10804  0235  2A1B               	goto	l666
 10805  0236  3A03               	xorlw	3	; case 66
 10806  0237  1903               	skipnz
 10807  0238  2A1B               	goto	l7013
 10808  0239  3A01               	xorlw	1	; case 67
 10809  023A  1903               	skipnz
 10810  023B  2A1B               	goto	l7013
 10811  023C  3A07               	xorlw	7	; case 68
 10812  023D  1903               	skipnz
 10813  023E  2A1B               	goto	l7013
 10814  023F  3A25               	xorlw	37	; case 97
 10815  0240  1903               	skipnz
 10816  0241  2A1B               	goto	l7013
 10817  0242  3A03               	xorlw	3	; case 98
 10818  0243  1903               	skipnz
 10819  0244  2A1B               	goto	l7013
 10820  0245  3A01               	xorlw	1	; case 99
 10821  0246  1903               	skipnz
 10822  0247  2A1B               	goto	l7013
 10823  0248  3A07               	xorlw	7	; case 100
 10824  0249  1903               	skipnz
 10825  024A  2A1B               	goto	l7013
 10826  024B  2A4C               	goto	l7019
 10827  024C                     l7019:
 10828                           
 10829                           ;main.c: 319:                                                     alt_atuador(*ptr);
 10830  024C  1683               	bsf	3,5	;RP0=1, select bank3
 10831  024D  1703               	bsf	3,6	;RP1=1, select bank3
 10832  024E  085D               	movf	main@ptr_867^(0+384),w
 10833  024F  0084               	movwf	4
 10834  0250  0800               	movf	0,w
 10835  0251  160A  118A  224E  120A  118A  	fcall	_alt_atuador
 10836                           
 10837                           ;main.c: 320:                                                     fifo_add( ler_atuador(
      +                          *ptr) ? *ptr : *ptr|0x20 );
 10838  0256  1683               	bsf	3,5	;RP0=1, select bank3
 10839  0257  1703               	bsf	3,6	;RP1=1, select bank3
 10840  0258  085D               	movf	main@ptr_867^(0+384),w
 10841  0259  0084               	movwf	4
 10842  025A  1783               	bsf	3,7	;select IRP bank2
 10843  025B  0800               	movf	0,w
 10844  025C  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 10845  0261  3A00               	xorlw	0
 10846  0262  1D03               	skipz
 10847  0263  2A65               	goto	u4881
 10848  0264  2A66               	goto	u4880
 10849  0265                     u4881:
 10850  0265  2A71               	goto	l7023
 10851  0266                     u4880:
 10852  0266                     l7021:
 10853  0266  1683               	bsf	3,5	;RP0=1, select bank3
 10854  0267  1703               	bsf	3,6	;RP1=1, select bank3
 10855  0268  085D               	movf	main@ptr_867^(0+384),w
 10856  0269  0084               	movwf	4
 10857  026A  3020               	movlw	32
 10858  026B  1783               	bsf	3,7	;select IRP bank2
 10859  026C  0400               	iorwf	0,w
 10860  026D  00B7               	movwf	_main$870^(0+384)
 10861  026E  3000               	movlw	0
 10862  026F  00B8               	movwf	(_main$870+1)^(0+384)
 10863  0270  2A85               	goto	l7025
 10864  0271                     l7023:
 10865  0271  1683               	bsf	3,5	;RP0=1, select bank3
 10866  0272  1703               	bsf	3,6	;RP1=1, select bank3
 10867  0273  085D               	movf	main@ptr_867^(0+384),w
 10868  0274  0084               	movwf	4
 10869  0275  1783               	bsf	3,7	;select IRP bank2
 10870  0276  0800               	movf	0,w
 10871  0277  1283               	bcf	3,5	;RP0=0, select bank0
 10872  0278  1303               	bcf	3,6	;RP1=0, select bank0
 10873  0279  00C4               	movwf	??_main
 10874  027A  01C5               	clrf	??_main+1
 10875  027B  0844               	movf	??_main,w
 10876  027C  1683               	bsf	3,5	;RP0=1, select bank3
 10877  027D  1703               	bsf	3,6	;RP1=1, select bank3
 10878  027E  00B7               	movwf	_main$870^(0+384)
 10879  027F  1283               	bcf	3,5	;RP0=0, select bank0
 10880  0280  1303               	bcf	3,6	;RP1=0, select bank0
 10881  0281  0845               	movf	??_main+1,w
 10882  0282  1683               	bsf	3,5	;RP0=1, select bank3
 10883  0283  1703               	bsf	3,6	;RP1=1, select bank3
 10884  0284  00B8               	movwf	(_main$870+1)^(0+384)
 10885  0285                     l7025:
 10886  0285  0837               	movf	_main$870^(0+384),w
 10887  0286  160A  158A  24D1  120A  118A  	fcall	_fifo_add
 10888  028B                     l7027:
 10889                           
 10890                           ;main.c: 322:                                                 fifo_print();
 10891  028B  120A  118A  2477  120A  118A  	fcall	_fifo_print
 10892  0290                     l7029:
 10893                           
 10894                           ;main.c: 323:                                            }
 10895  0290  3001               	movlw	1
 10896  0291  1283               	bcf	3,5	;RP0=0, select bank0
 10897  0292  1303               	bcf	3,6	;RP1=0, select bank0
 10898  0293  00C4               	movwf	??_main
 10899  0294  0844               	movf	??_main,w
 10900  0295  1683               	bsf	3,5	;RP0=1, select bank3
 10901  0296  1703               	bsf	3,6	;RP1=1, select bank3
 10902  0297  07DD               	addwf	main@ptr_867^(0+384),f
 10903  0298                     l7031:
 10904  0298  085D               	movf	main@ptr_867^(0+384),w
 10905  0299  0084               	movwf	4
 10906  029A  1783               	bsf	3,7	;select IRP bank2
 10907  029B  0800               	movf	0,w
 10908  029C  1D03               	btfss	3,2
 10909  029D  2A9F               	goto	u4891
 10910  029E  2AA0               	goto	u4890
 10911  029F                     u4891:
 10912  029F  2A0C               	goto	l7009
 10913  02A0                     u4890:
 10914  02A0                     l7033:
 10915                           
 10916                           ;main.c: 325:                                            dispLCD_clr();
 10917  02A0  160A  158A  2329  120A  118A  	fcall	_dispLCD_clr
 10918  02A5                     l7035:
 10919                           
 10920                           ;main.c: 326:                                            estado = 16;
 10921  02A5  3010               	movlw	16
 10922  02A6  1283               	bcf	3,5	;RP0=0, select bank0
 10923  02A7  1303               	bcf	3,6	;RP1=0, select bank0
 10924  02A8  00C4               	movwf	??_main
 10925  02A9  0844               	movf	??_main,w
 10926  02AA  1683               	bsf	3,5	;RP0=1, select bank3
 10927  02AB  1703               	bsf	3,6	;RP1=1, select bank3
 10928  02AC  00E0               	movwf	main@estado^(0+384)
 10929                           
 10930                           ;main.c: 327:                                            break;
 10931  02AD  28D0               	goto	u4841
 10932  02AE                     l7041:
 10933  02AE  0861               	movf	main@tecla^(0+384),w
 10934  02AF  1283               	bcf	3,5	;RP0=0, select bank0
 10935  02B0  1303               	bcf	3,6	;RP1=0, select bank0
 10936  02B1  00C4               	movwf	??_main
 10937  02B2  01C5               	clrf	??_main+1
 10938                           
 10939                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10940                           ; Switch size 1, requested type "simple"
 10941                           ; Number of cases is 1, Range of values is 0 to 0
 10942                           ; switch strategies available:
 10943                           ; Name         Instructions Cycles
 10944                           ; simple_byte            4     3 (average)
 10945                           ; direct_byte           11     8 (fixed)
 10946                           ; jumptable            260     6 (fixed)
 10947                           ;	Chosen strategy is simple_byte
 10948  02B3  0845               	movf	??_main+1,w
 10949  02B4  3A00               	xorlw	0	; case 0
 10950  02B5  1903               	skipnz
 10951  02B6  2AB8               	goto	l8061
 10952  02B7  28D0               	goto	u4841
 10953  02B8                     l8061:
 10954                           
 10955                           ; Switch size 1, requested type "simple"
 10956                           ; Number of cases is 11, Range of values is 42 to 57
 10957                           ; switch strategies available:
 10958                           ; Name         Instructions Cycles
 10959                           ; simple_byte           34    18 (average)
 10960                           ; direct_byte           59    11 (fixed)
 10961                           ; jumptable            263     9 (fixed)
 10962                           ;	Chosen strategy is simple_byte
 10963  02B8  0844               	movf	??_main,w
 10964  02B9  3A2A               	xorlw	42	; case 42
 10965  02BA  1903               	skipnz
 10966  02BB  28D3               	goto	l6965
 10967  02BC  3A1A               	xorlw	26	; case 48
 10968  02BD  1903               	skipnz
 10969  02BE  2978               	goto	l650
 10970  02BF  3A01               	xorlw	1	; case 49
 10971  02C0  1903               	skipnz
 10972  02C1  2978               	goto	l650
 10973  02C2  3A03               	xorlw	3	; case 50
 10974  02C3  1903               	skipnz
 10975  02C4  2978               	goto	l6997
 10976  02C5  3A01               	xorlw	1	; case 51
 10977  02C6  1903               	skipnz
 10978  02C7  2978               	goto	l6997
 10979  02C8  3A07               	xorlw	7	; case 52
 10980  02C9  1903               	skipnz
 10981  02CA  2978               	goto	l6997
 10982  02CB  3A01               	xorlw	1	; case 53
 10983  02CC  1903               	skipnz
 10984  02CD  2978               	goto	l6997
 10985  02CE  3A03               	xorlw	3	; case 54
 10986  02CF  1903               	skipnz
 10987  02D0  2978               	goto	l6997
 10988  02D1  3A01               	xorlw	1	; case 55
 10989  02D2  1903               	skipnz
 10990  02D3  2978               	goto	l6997
 10991  02D4  3A0F               	xorlw	15	; case 56
 10992  02D5  1903               	skipnz
 10993  02D6  2978               	goto	l6997
 10994  02D7  3A01               	xorlw	1	; case 57
 10995  02D8  1903               	skipnz
 10996  02D9  2978               	goto	l6997
 10997  02DA  28D0               	goto	u4841
 10998  02DB                     l7043:
 10999                           
 11000                           ;main.c: 334:                             IHM.clr();
 11001  02DB  1683               	bsf	3,5	;RP0=1, select bank3
 11002  02DC  1703               	bsf	3,6	;RP1=1, select bank3
 11003  02DD  0866               	movf	(low ((_IHM| (0+256)+4)))^(0+128),w
 11004  02DE  120A  118A  2052  120A  118A  	fcall	fptable
 11005  02E3                     l7045:
 11006                           
 11007                           ;main.c: 335:                             IHM.printpos(0, 0, "   AJUSTE O INICIO  ");
 11008  02E3  1283               	bcf	3,5	;RP0=0, select bank0
 11009  02E4  1303               	bcf	3,6	;RP1=0, select bank0
 11010  02E5  01A8               	clrf	dispLCD@lin
 11011  02E6  01A9               	clrf	dispLCD@col
 11012  02E7  30D3               	movlw	low (STR_6| (0+32768))
 11013  02E8  00AA               	movwf	dispLCD@str
 11014  02E9  3091               	movlw	high (STR_6| (0+32768))
 11015  02EA  00AB               	movwf	dispLCD@str+1
 11016  02EB  1683               	bsf	3,5	;RP0=1, select bank3
 11017  02EC  1703               	bsf	3,6	;RP1=1, select bank3
 11018  02ED  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 11019  02EE  120A  118A  2052  120A  118A  	fcall	fptable
 11020  02F3                     l7047:
 11021                           
 11022                           ;main.c: 336:                             IHM.printpos(1, 0, "     DO SISTEMA     ");
 11023  02F3  1283               	bcf	3,5	;RP0=0, select bank0
 11024  02F4  1303               	bcf	3,6	;RP1=0, select bank0
 11025  02F5  01A8               	clrf	dispLCD@lin
 11026  02F6  0AA8               	incf	dispLCD@lin,f
 11027  02F7  01A9               	clrf	dispLCD@col
 11028  02F8  30A9               	movlw	low (STR_7| (0+32768))
 11029  02F9  00AA               	movwf	dispLCD@str
 11030  02FA  3091               	movlw	high (STR_7| (0+32768))
 11031  02FB  00AB               	movwf	dispLCD@str+1
 11032  02FC  1683               	bsf	3,5	;RP0=1, select bank3
 11033  02FD  1703               	bsf	3,6	;RP1=1, select bank3
 11034  02FE  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 11035  02FF  120A  118A  2052  120A  118A  	fcall	fptable
 11036  0304                     l7049:
 11037                           
 11038                           ;main.c: 337:                             estado = 6;
 11039  0304  3006               	movlw	6
 11040  0305  1283               	bcf	3,5	;RP0=0, select bank0
 11041  0306  1303               	bcf	3,6	;RP1=0, select bank0
 11042  0307  00C4               	movwf	??_main
 11043  0308  0844               	movf	??_main,w
 11044  0309  1683               	bsf	3,5	;RP0=1, select bank3
 11045  030A  1703               	bsf	3,6	;RP1=1, select bank3
 11046  030B  00E0               	movwf	main@estado^(0+384)
 11047                           
 11048                           ;main.c: 338:                             break;
 11049  030C  28D0               	goto	u4841
 11050                           
 11051                           	psect	maintext_split_2
 11052  0692                     l7051:
 11053                           
 11054                           ;main.c: 341:                             IHM.printpos(3,0,"   A   B   C   D    ");
 11055  0692  3003               	movlw	3
 11056  0693  00C4               	movwf	??_main
 11057  0694  0844               	movf	??_main,w
 11058  0695  00A8               	movwf	dispLCD@lin
 11059  0696  01A9               	clrf	dispLCD@col
 11060  0697  30BE               	movlw	low (STR_8| (0+32768))
 11061  0698  00AA               	movwf	dispLCD@str
 11062  0699  3091               	movlw	high (STR_8| (0+32768))
 11063  069A  00AB               	movwf	dispLCD@str+1
 11064  069B  1683               	bsf	3,5	;RP0=1, select bank3
 11065  069C  1703               	bsf	3,6	;RP1=1, select bank3
 11066  069D  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 11067  069E  120A  118A  2052  120A  118A  	fcall	fptable
 11068  06A3                     l7053:
 11069                           
 11070                           ;main.c: 342:                             dispLCD_lincol(3, 4); dispLCD_dataReg(ler_atua
      +                          dor('A') ? '+' : '-');
 11071  06A3  3004               	movlw	4
 11072  06A4  1283               	bcf	3,5	;RP0=0, select bank0
 11073  06A5  1303               	bcf	3,6	;RP1=0, select bank0
 11074  06A6  00C4               	movwf	??_main
 11075  06A7  0844               	movf	??_main,w
 11076  06A8  00A3               	movwf	dispLCD_lincol@col
 11077  06A9  3003               	movlw	3
 11078  06AA  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
 11079  06AF                     l7055:
 11080  06AF  3041               	movlw	65
 11081  06B0  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 11082  06B5  3A00               	xorlw	0
 11083  06B6  1D03               	skipz
 11084  06B7  2EB9               	goto	u4901
 11085  06B8  2EBA               	goto	u4900
 11086  06B9                     u4901:
 11087  06B9  2EC1               	goto	l7059
 11088  06BA                     u4900:
 11089  06BA                     l7057:
 11090  06BA  302D               	movlw	45
 11091  06BB  1683               	bsf	3,5	;RP0=1, select bank3
 11092  06BC  1703               	bsf	3,6	;RP1=1, select bank3
 11093  06BD  00B9               	movwf	_main$876^(0+384)
 11094  06BE  3000               	movlw	0
 11095  06BF  00BA               	movwf	(_main$876^(0+384)+1)
 11096  06C0  2EC7               	goto	l7061
 11097  06C1                     l7059:
 11098  06C1  302B               	movlw	43
 11099  06C2  1683               	bsf	3,5	;RP0=1, select bank3
 11100  06C3  1703               	bsf	3,6	;RP1=1, select bank3
 11101  06C4  00B9               	movwf	_main$876^(0+384)
 11102  06C5  3000               	movlw	0
 11103  06C6  00BA               	movwf	(_main$876^(0+384)+1)
 11104  06C7                     l7061:
 11105  06C7  0839               	movf	_main$876^(0+384),w
 11106  06C8  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
 11107  06CD                     l7063:
 11108                           
 11109                           ;main.c: 343:                             dispLCD_lincol(3, 8);dispLCD_dataReg(ler_atuad
      +                          or('B') ? '+' : '-');
 11110  06CD  3008               	movlw	8
 11111  06CE  1283               	bcf	3,5	;RP0=0, select bank0
 11112  06CF  1303               	bcf	3,6	;RP1=0, select bank0
 11113  06D0  00C4               	movwf	??_main
 11114  06D1  0844               	movf	??_main,w
 11115  06D2  00A3               	movwf	dispLCD_lincol@col
 11116  06D3  3003               	movlw	3
 11117  06D4  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
 11118  06D9                     l7065:
 11119  06D9  3042               	movlw	66
 11120  06DA  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 11121  06DF  3A00               	xorlw	0
 11122  06E0  1D03               	skipz
 11123  06E1  2EE3               	goto	u4911
 11124  06E2  2EE4               	goto	u4910
 11125  06E3                     u4911:
 11126  06E3  2EEB               	goto	l7069
 11127  06E4                     u4910:
 11128  06E4                     l7067:
 11129  06E4  302D               	movlw	45
 11130  06E5  1683               	bsf	3,5	;RP0=1, select bank3
 11131  06E6  1703               	bsf	3,6	;RP1=1, select bank3
 11132  06E7  00BB               	movwf	_main$877^(0+384)
 11133  06E8  3000               	movlw	0
 11134  06E9  00BC               	movwf	(_main$877^(0+384)+1)
 11135  06EA  2EF1               	goto	l7071
 11136  06EB                     l7069:
 11137  06EB  302B               	movlw	43
 11138  06EC  1683               	bsf	3,5	;RP0=1, select bank3
 11139  06ED  1703               	bsf	3,6	;RP1=1, select bank3
 11140  06EE  00BB               	movwf	_main$877^(0+384)
 11141  06EF  3000               	movlw	0
 11142  06F0  00BC               	movwf	(_main$877^(0+384)+1)
 11143  06F1                     l7071:
 11144  06F1  083B               	movf	_main$877^(0+384),w
 11145  06F2  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
 11146  06F7                     l7073:
 11147                           
 11148                           ;main.c: 344:                             dispLCD_lincol(3, 12);dispLCD_dataReg(ler_atua
      +                          dor('C') ? '+' : '-');
 11149  06F7  300C               	movlw	12
 11150  06F8  1283               	bcf	3,5	;RP0=0, select bank0
 11151  06F9  1303               	bcf	3,6	;RP1=0, select bank0
 11152  06FA  00C4               	movwf	??_main
 11153  06FB  0844               	movf	??_main,w
 11154  06FC  00A3               	movwf	dispLCD_lincol@col
 11155  06FD  3003               	movlw	3
 11156  06FE  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
 11157  0703                     l7075:
 11158  0703  3043               	movlw	67
 11159  0704  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 11160  0709  3A00               	xorlw	0
 11161  070A  1D03               	skipz
 11162  070B  2F0D               	goto	u4921
 11163  070C  2F0E               	goto	u4920
 11164  070D                     u4921:
 11165  070D  2F15               	goto	l7079
 11166  070E                     u4920:
 11167  070E                     l7077:
 11168  070E  302D               	movlw	45
 11169  070F  1683               	bsf	3,5	;RP0=1, select bank3
 11170  0710  1703               	bsf	3,6	;RP1=1, select bank3
 11171  0711  00BD               	movwf	_main$878^(0+384)
 11172  0712  3000               	movlw	0
 11173  0713  00BE               	movwf	(_main$878^(0+384)+1)
 11174  0714  2F1B               	goto	l7081
 11175  0715                     l7079:
 11176  0715  302B               	movlw	43
 11177  0716  1683               	bsf	3,5	;RP0=1, select bank3
 11178  0717  1703               	bsf	3,6	;RP1=1, select bank3
 11179  0718  00BD               	movwf	_main$878^(0+384)
 11180  0719  3000               	movlw	0
 11181  071A  00BE               	movwf	(_main$878^(0+384)+1)
 11182  071B                     l7081:
 11183  071B  083D               	movf	_main$878^(0+384),w
 11184  071C  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
 11185  0721                     l7083:
 11186                           
 11187                           ;main.c: 345:                             dispLCD_lincol(3, 16);dispLCD_dataReg(ler_atua
      +                          dor('D') ? '+' : '-');
 11188  0721  3010               	movlw	16
 11189  0722  1283               	bcf	3,5	;RP0=0, select bank0
 11190  0723  1303               	bcf	3,6	;RP1=0, select bank0
 11191  0724  00C4               	movwf	??_main
 11192  0725  0844               	movf	??_main,w
 11193  0726  00A3               	movwf	dispLCD_lincol@col
 11194  0727  3003               	movlw	3
 11195  0728  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
 11196  072D                     l7085:
 11197  072D  3044               	movlw	68
 11198  072E  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 11199  0733  3A00               	xorlw	0
 11200  0734  1D03               	skipz
 11201  0735  2F37               	goto	u4931
 11202  0736  2F38               	goto	u4930
 11203  0737                     u4931:
 11204  0737  2F3F               	goto	l7089
 11205  0738                     u4930:
 11206  0738                     l7087:
 11207  0738  302D               	movlw	45
 11208  0739  1683               	bsf	3,5	;RP0=1, select bank3
 11209  073A  1703               	bsf	3,6	;RP1=1, select bank3
 11210  073B  00BF               	movwf	_main$879^(0+384)
 11211  073C  3000               	movlw	0
 11212  073D  00C0               	movwf	(_main$879^(0+384)+1)
 11213  073E  2F45               	goto	l7091
 11214  073F                     l7089:
 11215  073F  302B               	movlw	43
 11216  0740  1683               	bsf	3,5	;RP0=1, select bank3
 11217  0741  1703               	bsf	3,6	;RP1=1, select bank3
 11218  0742  00BF               	movwf	_main$879^(0+384)
 11219  0743  3000               	movlw	0
 11220  0744  00C0               	movwf	(_main$879^(0+384)+1)
 11221  0745                     l7091:
 11222  0745  083F               	movf	_main$879^(0+384),w
 11223  0746  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
 11224  074B                     l7093:
 11225                           
 11226                           ;main.c: 346:                             estado = 7;
 11227  074B  3007               	movlw	7
 11228  074C  1283               	bcf	3,5	;RP0=0, select bank0
 11229  074D  1303               	bcf	3,6	;RP1=0, select bank0
 11230  074E  00C4               	movwf	??_main
 11231  074F  0844               	movf	??_main,w
 11232  0750  1683               	bsf	3,5	;RP0=1, select bank3
 11233  0751  1703               	bsf	3,6	;RP1=1, select bank3
 11234  0752  00E0               	movwf	main@estado^(0+384)
 11235  0753                     L13:
 11236                           
 11237                           ;main.c: 347:                             break;
 11238  0753  120A  158A  2E60   	goto	l7429
 11239  0756                     l7095:
 11240                           
 11241                           ;main.c: 350:                             tecla = teclado_borda();
 11242  0756  160A  158A  248D  120A  118A  	fcall	_teclado_borda
 11243  075B  1283               	bcf	3,5	;RP0=0, select bank0
 11244  075C  1303               	bcf	3,6	;RP1=0, select bank0
 11245  075D  00C4               	movwf	??_main
 11246  075E  0844               	movf	??_main,w
 11247  075F  1683               	bsf	3,5	;RP0=1, select bank3
 11248  0760  1703               	bsf	3,6	;RP1=1, select bank3
 11249  0761  00E1               	movwf	main@tecla^(0+384)
 11250                           
 11251                           ;main.c: 351:                             switch(tecla)
 11252  0762  120A  118A  2BAD   	goto	l7135
 11253  0765                     l7097:
 11254  0765  1683               	bsf	3,5	;RP0=1, select bank3
 11255  0766  1703               	bsf	3,6	;RP1=1, select bank3
 11256  0767  0861               	movf	main@tecla^(0+384),w
 11257  0768  160A  118A  224E  120A  118A  	fcall	_alt_atuador
 11258  076D  3004               	movlw	4
 11259  076E  1283               	bcf	3,5	;RP0=0, select bank0
 11260  076F  1303               	bcf	3,6	;RP1=0, select bank0
 11261  0770  00C4               	movwf	??_main
 11262  0771  0844               	movf	??_main,w
 11263  0772  00A3               	movwf	dispLCD_lincol@col
 11264  0773  3003               	movlw	3
 11265  0774  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
 11266  0779  3041               	movlw	65
 11267  077A  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 11268  077F  3A00               	xorlw	0
 11269  0780  1D03               	skipz
 11270  0781  2F83               	goto	u4941
 11271  0782  2F84               	goto	u4940
 11272  0783                     u4941:
 11273  0783  2F8B               	goto	l7101
 11274  0784                     u4940:
 11275  0784                     l7099:
 11276  0784  302D               	movlw	45
 11277  0785  1683               	bsf	3,5	;RP0=1, select bank3
 11278  0786  1703               	bsf	3,6	;RP1=1, select bank3
 11279  0787  00C1               	movwf	_main$880^(0+384)
 11280  0788  3000               	movlw	0
 11281  0789  00C2               	movwf	(_main$880^(0+384)+1)
 11282  078A  2F91               	goto	l7103
 11283  078B                     l7101:
 11284  078B  302B               	movlw	43
 11285  078C  1683               	bsf	3,5	;RP0=1, select bank3
 11286  078D  1703               	bsf	3,6	;RP1=1, select bank3
 11287  078E  00C1               	movwf	_main$880^(0+384)
 11288  078F  3000               	movlw	0
 11289  0790  00C2               	movwf	(_main$880^(0+384)+1)
 11290  0791                     l7103:
 11291  0791  0841               	movf	_main$880^(0+384),w
 11292  0792  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
 11293  0797  2F53               	goto	L13
 11294                           
 11295                           	psect	maintext_split_3
 11296  030D                     l7105:
 11297  030D  1683               	bsf	3,5	;RP0=1, select bank3
 11298  030E  1703               	bsf	3,6	;RP1=1, select bank3
 11299  030F  0861               	movf	main@tecla^(0+384),w
 11300  0310  160A  118A  224E  120A  118A  	fcall	_alt_atuador
 11301  0315  3008               	movlw	8
 11302  0316  1283               	bcf	3,5	;RP0=0, select bank0
 11303  0317  1303               	bcf	3,6	;RP1=0, select bank0
 11304  0318  00C4               	movwf	??_main
 11305  0319  0844               	movf	??_main,w
 11306  031A  00A3               	movwf	dispLCD_lincol@col
 11307  031B  3003               	movlw	3
 11308  031C  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
 11309  0321  3042               	movlw	66
 11310  0322  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 11311  0327  3A00               	xorlw	0
 11312  0328  1D03               	skipz
 11313  0329  2B2B               	goto	u4951
 11314  032A  2B2C               	goto	u4950
 11315  032B                     u4951:
 11316  032B  2B33               	goto	l7109
 11317  032C                     u4950:
 11318  032C                     l7107:
 11319  032C  302D               	movlw	45
 11320  032D  1683               	bsf	3,5	;RP0=1, select bank3
 11321  032E  1703               	bsf	3,6	;RP1=1, select bank3
 11322  032F  00C3               	movwf	_main$881^(0+384)
 11323  0330  3000               	movlw	0
 11324  0331  00C4               	movwf	(_main$881^(0+384)+1)
 11325  0332  2B39               	goto	l7111
 11326  0333                     l7109:
 11327  0333  302B               	movlw	43
 11328  0334  1683               	bsf	3,5	;RP0=1, select bank3
 11329  0335  1703               	bsf	3,6	;RP1=1, select bank3
 11330  0336  00C3               	movwf	_main$881^(0+384)
 11331  0337  3000               	movlw	0
 11332  0338  00C4               	movwf	(_main$881^(0+384)+1)
 11333  0339                     l7111:
 11334  0339  0843               	movf	_main$881^(0+384),w
 11335  033A  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
 11336  033F  2C12               	goto	u4981
 11337  0340                     l7113:
 11338  0340  1683               	bsf	3,5	;RP0=1, select bank3
 11339  0341  1703               	bsf	3,6	;RP1=1, select bank3
 11340  0342  0861               	movf	main@tecla^(0+384),w
 11341  0343  160A  118A  224E  120A  118A  	fcall	_alt_atuador
 11342  0348  300C               	movlw	12
 11343  0349  1283               	bcf	3,5	;RP0=0, select bank0
 11344  034A  1303               	bcf	3,6	;RP1=0, select bank0
 11345  034B  00C4               	movwf	??_main
 11346  034C  0844               	movf	??_main,w
 11347  034D  00A3               	movwf	dispLCD_lincol@col
 11348  034E  3003               	movlw	3
 11349  034F  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
 11350  0354  3043               	movlw	67
 11351  0355  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 11352  035A  3A00               	xorlw	0
 11353  035B  1D03               	skipz
 11354  035C  2B5E               	goto	u4961
 11355  035D  2B5F               	goto	u4960
 11356  035E                     u4961:
 11357  035E  2B66               	goto	l7117
 11358  035F                     u4960:
 11359  035F                     l7115:
 11360  035F  302D               	movlw	45
 11361  0360  1683               	bsf	3,5	;RP0=1, select bank3
 11362  0361  1703               	bsf	3,6	;RP1=1, select bank3
 11363  0362  00C5               	movwf	_main$882^(0+384)
 11364  0363  3000               	movlw	0
 11365  0364  00C6               	movwf	(_main$882^(0+384)+1)
 11366  0365  2B6C               	goto	l7119
 11367  0366                     l7117:
 11368  0366  302B               	movlw	43
 11369  0367  1683               	bsf	3,5	;RP0=1, select bank3
 11370  0368  1703               	bsf	3,6	;RP1=1, select bank3
 11371  0369  00C5               	movwf	_main$882^(0+384)
 11372  036A  3000               	movlw	0
 11373  036B  00C6               	movwf	(_main$882^(0+384)+1)
 11374  036C                     l7119:
 11375  036C  0845               	movf	_main$882^(0+384),w
 11376  036D  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
 11377  0372  2C12               	goto	u4981
 11378  0373                     l7121:
 11379  0373  1683               	bsf	3,5	;RP0=1, select bank3
 11380  0374  1703               	bsf	3,6	;RP1=1, select bank3
 11381  0375  0861               	movf	main@tecla^(0+384),w
 11382  0376  160A  118A  224E  120A  118A  	fcall	_alt_atuador
 11383  037B  3010               	movlw	16
 11384  037C  1283               	bcf	3,5	;RP0=0, select bank0
 11385  037D  1303               	bcf	3,6	;RP1=0, select bank0
 11386  037E  00C4               	movwf	??_main
 11387  037F  0844               	movf	??_main,w
 11388  0380  00A3               	movwf	dispLCD_lincol@col
 11389  0381  3003               	movlw	3
 11390  0382  160A  158A  276A  120A  118A  	fcall	_dispLCD_lincol
 11391  0387  3044               	movlw	68
 11392  0388  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 11393  038D  3A00               	xorlw	0
 11394  038E  1D03               	skipz
 11395  038F  2B91               	goto	u4971
 11396  0390  2B92               	goto	u4970
 11397  0391                     u4971:
 11398  0391  2B99               	goto	l7125
 11399  0392                     u4970:
 11400  0392                     l7123:
 11401  0392  302D               	movlw	45
 11402  0393  1683               	bsf	3,5	;RP0=1, select bank3
 11403  0394  1703               	bsf	3,6	;RP1=1, select bank3
 11404  0395  00C7               	movwf	_main$883^(0+384)
 11405  0396  3000               	movlw	0
 11406  0397  00C8               	movwf	(_main$883^(0+384)+1)
 11407  0398  2B9F               	goto	l7127
 11408  0399                     l7125:
 11409  0399  302B               	movlw	43
 11410  039A  1683               	bsf	3,5	;RP0=1, select bank3
 11411  039B  1703               	bsf	3,6	;RP1=1, select bank3
 11412  039C  00C7               	movwf	_main$883^(0+384)
 11413  039D  3000               	movlw	0
 11414  039E  00C8               	movwf	(_main$883^(0+384)+1)
 11415  039F                     l7127:
 11416  039F  0847               	movf	_main$883^(0+384),w
 11417  03A0  160A  158A  2739  120A  118A  	fcall	_dispLCD_dataReg
 11418  03A5  2C12               	goto	u4981
 11419  03A6                     l7129:
 11420  03A6  300A               	movlw	10
 11421  03A7  00C4               	movwf	??_main
 11422  03A8  0844               	movf	??_main,w
 11423  03A9  1683               	bsf	3,5	;RP0=1, select bank3
 11424  03AA  1703               	bsf	3,6	;RP1=1, select bank3
 11425  03AB  00E0               	movwf	main@estado^(0+384)
 11426  03AC  2C12               	goto	u4981
 11427  03AD                     l7135:
 11428  03AD  0861               	movf	main@tecla^(0+384),w
 11429  03AE  1283               	bcf	3,5	;RP0=0, select bank0
 11430  03AF  1303               	bcf	3,6	;RP1=0, select bank0
 11431  03B0  00C4               	movwf	??_main
 11432  03B1  01C5               	clrf	??_main+1
 11433                           
 11434                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11435                           ; Switch size 1, requested type "simple"
 11436                           ; Number of cases is 1, Range of values is 0 to 0
 11437                           ; switch strategies available:
 11438                           ; Name         Instructions Cycles
 11439                           ; simple_byte            4     3 (average)
 11440                           ; direct_byte           11     8 (fixed)
 11441                           ; jumptable            260     6 (fixed)
 11442                           ;	Chosen strategy is simple_byte
 11443  03B2  0845               	movf	??_main+1,w
 11444  03B3  3A00               	xorlw	0	; case 0
 11445  03B4  1903               	skipnz
 11446  03B5  2BB7               	goto	l8063
 11447  03B6  2C12               	goto	u4981
 11448  03B7                     l8063:
 11449                           
 11450                           ; Switch size 1, requested type "simple"
 11451                           ; Number of cases is 6, Range of values is 35 to 68
 11452                           ; switch strategies available:
 11453                           ; Name         Instructions Cycles
 11454                           ; simple_byte           19    10 (average)
 11455                           ; direct_byte          113    11 (fixed)
 11456                           ; jumptable            263     9 (fixed)
 11457                           ;	Chosen strategy is simple_byte
 11458  03B7  0844               	movf	??_main,w
 11459  03B8  3A23               	xorlw	35	; case 35
 11460  03B9  1903               	skipnz
 11461  03BA  2BA6               	goto	l7129
 11462  03BB  3A09               	xorlw	9	; case 42
 11463  03BC  120A  158A  1903   	skipnz
 11464  03BF  2FD3  120A  118A   	goto	L3
 11465  03C2  3A6B               	xorlw	107	; case 65
 11466  03C3  1903               	skipnz
 11467  03C4  2C74               	goto	L23
 11468  03C5  3A03               	xorlw	3	; case 66
 11469  03C6  1903               	skipnz
 11470  03C7  2B0D               	goto	l7105
 11471  03C8  3A01               	xorlw	1	; case 67
 11472  03C9  1903               	skipnz
 11473  03CA  2B40               	goto	l7113
 11474  03CB  3A07               	xorlw	7	; case 68
 11475  03CC  1903               	skipnz
 11476  03CD  2B73               	goto	l7121
 11477  03CE  2C12               	goto	u4981
 11478  03CF                     l7137:
 11479                           
 11480                           ;main.c: 365:                             init_cond = salva_atuadores_init();
 11481  03CF  160A  118A  24F3  120A  118A  	fcall	_salva_atuadores_init
 11482  03D4  1283               	bcf	3,5	;RP0=0, select bank0
 11483  03D5  1303               	bcf	3,6	;RP1=0, select bank0
 11484  03D6  00C4               	movwf	??_main
 11485  03D7  0844               	movf	??_main,w
 11486  03D8  1683               	bsf	3,5	;RP0=1, select bank3
 11487  03D9  1703               	bsf	3,6	;RP1=1, select bank3
 11488  03DA  00D5               	movwf	main@init_cond^(0+384)
 11489  03DB                     l7139:
 11490                           
 11491                           ;main.c: 366:                             IHM.clr();
 11492  03DB  0866               	movf	(low ((_IHM| (0+256)+4)))^(0+128),w
 11493  03DC  120A  118A  2052  120A  118A  	fcall	fptable
 11494  03E1                     l7141:
 11495                           
 11496                           ;main.c: 367:                             IHM.printpos(0, 0, "  INSIRA OS PASSOS  ");
 11497  03E1  1283               	bcf	3,5	;RP0=0, select bank0
 11498  03E2  1303               	bcf	3,6	;RP1=0, select bank0
 11499  03E3  01A8               	clrf	dispLCD@lin
 11500  03E4  01A9               	clrf	dispLCD@col
 11501  03E5  30E8               	movlw	low (STR_9| (0+32768))
 11502  03E6  00AA               	movwf	dispLCD@str
 11503  03E7  3091               	movlw	high (STR_9| (0+32768))
 11504  03E8  00AB               	movwf	dispLCD@str+1
 11505  03E9  1683               	bsf	3,5	;RP0=1, select bank3
 11506  03EA  1703               	bsf	3,6	;RP1=1, select bank3
 11507  03EB  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 11508  03EC  120A  118A  2052  120A  118A  	fcall	fptable
 11509  03F1                     l7143:
 11510                           
 11511                           ;main.c: 368:                             estado = 14;
 11512  03F1  300E               	movlw	14
 11513  03F2  1283               	bcf	3,5	;RP0=0, select bank0
 11514  03F3  1303               	bcf	3,6	;RP1=0, select bank0
 11515  03F4  00C4               	movwf	??_main
 11516  03F5  0844               	movf	??_main,w
 11517  03F6  1683               	bsf	3,5	;RP0=1, select bank3
 11518  03F7  1703               	bsf	3,6	;RP1=1, select bank3
 11519  03F8  00E0               	movwf	main@estado^(0+384)
 11520                           
 11521                           ;main.c: 369:                             break;
 11522  03F9  2C12               	goto	u4981
 11523  03FA                     l7145:
 11524                           
 11525                           ;main.c: 372:                             tecla = teclado_borda();
 11526  03FA  160A  158A  248D  120A  118A  	fcall	_teclado_borda
 11527  03FF  1283               	bcf	3,5	;RP0=0, select bank0
 11528  0400  1303               	bcf	3,6	;RP1=0, select bank0
 11529  0401  00C4               	movwf	??_main
 11530  0402  0844               	movf	??_main,w
 11531  0403  1683               	bsf	3,5	;RP0=1, select bank3
 11532  0404  1703               	bsf	3,6	;RP1=1, select bank3
 11533  0405  00E1               	movwf	main@tecla^(0+384)
 11534                           
 11535                           ;main.c: 373:                             switch( tecla )
 11536  0406  120A  158A  282B   	goto	l7183
 11537  0409                     l727:	
 11538                           ;main.c: 377:                                 case 'C':
 11539                           
 11540  0409                     l7147:
 11541                           
 11542                           ;main.c: 379:                                             if( fifo_disponivel() )
 11543  0409  160A  158A  2364  120A  118A  	fcall	_fifo_disponivel
 11544  040E  3A00               	xorlw	0
 11545  040F  1903               	skipnz
 11546  0410  2C12               	goto	u4981
 11547  0411  2C15               	goto	u4980
 11548  0412                     u4981:
 11549  0412  120A  158A  2E60   	goto	l7429
 11550  0415                     u4980:
 11551  0415                     l7149:
 11552                           
 11553                           ;main.c: 380:                                             {;main.c: 381:                
      +                                                           alt_atuador(tecla);
 11554  0415  1683               	bsf	3,5	;RP0=1, select bank3
 11555  0416  1703               	bsf	3,6	;RP1=1, select bank3
 11556  0417  0861               	movf	main@tecla^(0+384),w
 11557  0418  160A  118A  224E  120A  118A  	fcall	_alt_atuador
 11558                           
 11559                           ;main.c: 382:                                                 fifo_add( ler_atuador(tecl
      +                          a) ? tecla : tecla|0x20 );
 11560  041D  1683               	bsf	3,5	;RP0=1, select bank3
 11561  041E  1703               	bsf	3,6	;RP1=1, select bank3
 11562  041F  0861               	movf	main@tecla^(0+384),w
 11563  0420  160A  158A  26AC  120A  118A  	fcall	_ler_atuador
 11564  0425  3A00               	xorlw	0
 11565  0426  1D03               	skipz
 11566  0427  2C29               	goto	u4991
 11567  0428  2C2A               	goto	u4990
 11568  0429                     u4991:
 11569  0429  2C32               	goto	l7153
 11570  042A                     u4990:
 11571  042A                     l7151:
 11572  042A  3020               	movlw	32
 11573  042B  1683               	bsf	3,5	;RP0=1, select bank3
 11574  042C  1703               	bsf	3,6	;RP1=1, select bank3
 11575  042D  0461               	iorwf	main@tecla^(0+384),w
 11576  042E  00C9               	movwf	_main$887^(0+384)
 11577  042F  3000               	movlw	0
 11578  0430  00CA               	movwf	(_main$887+1)^(0+384)
 11579  0431  2C43               	goto	l7155
 11580  0432                     l7153:
 11581  0432  1683               	bsf	3,5	;RP0=1, select bank3
 11582  0433  1703               	bsf	3,6	;RP1=1, select bank3
 11583  0434  0861               	movf	main@tecla^(0+384),w
 11584  0435  1283               	bcf	3,5	;RP0=0, select bank0
 11585  0436  1303               	bcf	3,6	;RP1=0, select bank0
 11586  0437  00C4               	movwf	??_main
 11587  0438  01C5               	clrf	??_main+1
 11588  0439  0844               	movf	??_main,w
 11589  043A  1683               	bsf	3,5	;RP0=1, select bank3
 11590  043B  1703               	bsf	3,6	;RP1=1, select bank3
 11591  043C  00C9               	movwf	_main$887^(0+384)
 11592  043D  1283               	bcf	3,5	;RP0=0, select bank0
 11593  043E  1303               	bcf	3,6	;RP1=0, select bank0
 11594  043F  0845               	movf	??_main+1,w
 11595  0440  1683               	bsf	3,5	;RP0=1, select bank3
 11596  0441  1703               	bsf	3,6	;RP1=1, select bank3
 11597  0442  00CA               	movwf	(_main$887+1)^(0+384)
 11598  0443                     l7155:
 11599  0443  0849               	movf	_main$887^(0+384),w
 11600  0444  160A  158A  24D1  120A  118A  	fcall	_fifo_add
 11601  0449                     L4:
 11602  0449  120A  118A  2AA5   	goto	l7035
 11603  044C                     l7159:
 11604                           
 11605                           ;main.c: 387:                                             fifo_indicePrint_inc();
 11606  044C  160A  158A  267E  120A  118A  	fcall	_fifo_indicePrint_inc
 11607  0451  2C49               	goto	L4
 11608  0452                     l7163:
 11609                           
 11610                           ;main.c: 391:                                             fifo_indicePrint_dec();
 11611  0452  160A  158A  236F  120A  118A  	fcall	_fifo_indicePrint_dec
 11612  0457  2C49               	goto	L4
 11613  0458                     l7167:
 11614                           
 11615                           ;main.c: 396:                                             if(fifo_indice() == 2 )
 11616  0458  160A  158A  2314  120A  118A  	fcall	_fifo_indice
 11617  045D  3A02               	xorlw	2
 11618  045E  1D03               	skipz
 11619  045F  2C61               	goto	u5001
 11620  0460  2C62               	goto	u5000
 11621  0461                     u5001:
 11622  0461  2C65               	goto	l7171
 11623  0462                     u5000:
 11624  0462  120A  118A  2928   	goto	l6981
 11625  0465                     l7171:
 11626                           
 11627                           ;main.c: 399:                                             {;main.c: 400:                
      +                                                           fifo_delete();
 11628  0465  160A  158A  25D5  120A  118A  	fcall	_fifo_delete
 11629  046A  2C49               	goto	L4
 11630  046B                     l7175:
 11631  046B  304A               	movlw	74
 11632  046C  1283               	bcf	3,5	;RP0=0, select bank0
 11633  046D  1303               	bcf	3,6	;RP1=0, select bank0
 11634  046E  00C4               	movwf	??_main
 11635  046F  0844               	movf	??_main,w
 11636  0470  1683               	bsf	3,5	;RP0=1, select bank3
 11637  0471  1703               	bsf	3,6	;RP1=1, select bank3
 11638  0472  00E0               	movwf	main@estado^(0+384)
 11639  0473  2C12               	goto	u4981
 11640  0474                     L23:
 11641  0474                     L22:
 11642  0474  120A  158A  2FE2   	ljmp	L15
 11643                           
 11644                           	psect	maintext_split_4
 11645  081D                     l7177:
 11646  081D  3029               	movlw	41
 11647  081E  00C4               	movwf	??_main
 11648  081F  0844               	movf	??_main,w
 11649  0820  1683               	bsf	3,5	;RP0=1, select bank3
 11650  0821  1703               	bsf	3,6	;RP1=1, select bank3
 11651  0822  00E0               	movwf	main@estado^(0+384)
 11652  0823  2E60               	goto	l7429
 11653  0824                     l7179:
 11654  0824  305A               	movlw	90
 11655  0825  00C4               	movwf	??_main
 11656  0826  0844               	movf	??_main,w
 11657  0827  1683               	bsf	3,5	;RP0=1, select bank3
 11658  0828  1703               	bsf	3,6	;RP1=1, select bank3
 11659  0829  00E0               	movwf	main@estado^(0+384)
 11660  082A  2E60               	goto	l7429
 11661  082B                     l7183:
 11662  082B  0861               	movf	main@tecla^(0+384),w
 11663  082C  1283               	bcf	3,5	;RP0=0, select bank0
 11664  082D  1303               	bcf	3,6	;RP1=0, select bank0
 11665  082E  00C4               	movwf	??_main
 11666  082F  01C5               	clrf	??_main+1
 11667                           
 11668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11669                           ; Switch size 1, requested type "simple"
 11670                           ; Number of cases is 1, Range of values is 0 to 0
 11671                           ; switch strategies available:
 11672                           ; Name         Instructions Cycles
 11673                           ; simple_byte            4     3 (average)
 11674                           ; direct_byte           11     8 (fixed)
 11675                           ; jumptable            260     6 (fixed)
 11676                           ;	Chosen strategy is simple_byte
 11677  0830  0845               	movf	??_main+1,w
 11678  0831  3A00               	xorlw	0	; case 0
 11679  0832  1903               	skipnz
 11680  0833  2835               	goto	l8065
 11681  0834  2E60               	goto	l7429
 11682  0835                     l8065:
 11683                           
 11684                           ; Switch size 1, requested type "simple"
 11685                           ; Number of cases is 10, Range of values is 35 to 68
 11686                           ; switch strategies available:
 11687                           ; Name         Instructions Cycles
 11688                           ; simple_byte           31    16 (average)
 11689                           ; direct_byte          113    11 (fixed)
 11690                           ; jumptable            263     9 (fixed)
 11691                           ;	Chosen strategy is simple_byte
 11692  0835  0844               	movf	??_main,w
 11693  0836  3A23               	xorlw	35	; case 35
 11694  0837  1903               	skipnz
 11695  0838  2C1A               	goto	L24
 11696  0839  3A09               	xorlw	9	; case 42
 11697  083A  1903               	skipnz
 11698  083B  2FEE               	goto	L26
 11699  083C  3A1A               	xorlw	26	; case 48
 11700  083D  1903               	skipnz
 11701  083E  281D               	goto	l7177
 11702  083F  3A04               	xorlw	4	; case 52
 11703  0840  120A  118A  1903   	skipnz
 11704  0843  2C52  120A  158A   	goto	l7163
 11705  0846  3A02               	xorlw	2	; case 54
 11706  0847  1903               	skipnz
 11707  0848  2FF1               	goto	L28
 11708  0849  3A0F               	xorlw	15	; case 57
 11709  084A  1903               	skipnz
 11710  084B  2824               	goto	l7179
 11711  084C  3A78               	xorlw	120	; case 65
 11712  084D  120A  118A  1903   	skipnz
 11713  0850  2C09  120A  158A   	goto	l727
 11714  0853  3A03               	xorlw	3	; case 66
 11715  0854  1903               	skipnz
 11716  0855  2FF4               	goto	L29
 11717  0856  3A01               	xorlw	1	; case 67
 11718  0857  1903               	skipnz
 11719  0858  2FF4               	goto	L30
 11720  0859  3A07               	xorlw	7	; case 68
 11721  085A  1903               	skipnz
 11722  085B  2FF4               	goto	L30
 11723  085C  2E60               	goto	l7429
 11724  085D                     l7185:
 11725                           
 11726                           ;main.c: 414:                             fifo_print();
 11727  085D  120A  118A  2477  120A  158A  	fcall	_fifo_print
 11728  0862  120A  118A  2BF1   	goto	l7143
 11729  0865                     l7189:
 11730                           
 11731                           ;main.c: 419:                             IHM.printpos(3,0,"<  /  >");
 11732  0865  3003               	movlw	3
 11733  0866  00C4               	movwf	??_main
 11734  0867  0844               	movf	??_main,w
 11735  0868  00A8               	movwf	dispLCD@lin
 11736  0869  01A9               	clrf	dispLCD@col
 11737  086A  303C               	movlw	low (STR_10| (0+32768))
 11738  086B  00AA               	movwf	dispLCD@str
 11739  086C  3092               	movlw	high (STR_10| (0+32768))
 11740  086D  00AB               	movwf	dispLCD@str+1
 11741  086E  1683               	bsf	3,5	;RP0=1, select bank3
 11742  086F  1703               	bsf	3,6	;RP1=1, select bank3
 11743  0870  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 11744  0871  120A  118A  2052  120A  158A  	fcall	fptable
 11745                           
 11746                           ;main.c: 420:                             IHM.printv(3, 1,( fifo_indice()-2 ), 2);
 11747  0876  3003               	movlw	3
 11748  0877  1283               	bcf	3,5	;RP0=0, select bank0
 11749  0878  1303               	bcf	3,6	;RP1=0, select bank0
 11750  0879  00C4               	movwf	??_main
 11751  087A  0844               	movf	??_main,w
 11752  087B  00AD               	movwf	dispLCD_num@lin
 11753  087C  01AE               	clrf	dispLCD_num@col
 11754  087D  0AAE               	incf	dispLCD_num@col,f
 11755  087E  160A  158A  2314  120A  158A  	fcall	_fifo_indice
 11756  0883  3EFE               	addlw	254
 11757  0884  1283               	bcf	3,5	;RP0=0, select bank0
 11758  0885  1303               	bcf	3,6	;RP1=0, select bank0
 11759  0886  00AF               	movwf	dispLCD_num@num
 11760  0887  30FF               	movlw	255
 11761  0888  1803               	skipnc
 11762  0889  3000               	movlw	0
 11763  088A  00B0               	movwf	dispLCD_num@num+1
 11764  088B  3002               	movlw	2
 11765  088C  00C5               	movwf	??_main+1
 11766  088D  0845               	movf	??_main+1,w
 11767  088E  00B1               	movwf	dispLCD_num@tam
 11768  088F  1683               	bsf	3,5	;RP0=1, select bank3
 11769  0890  1703               	bsf	3,6	;RP1=1, select bank3
 11770  0891  0865               	movf	(low ((_IHM| (0+256)+3)))^(0+128),w
 11771  0892  120A  118A  2052  120A  158A  	fcall	fptable
 11772                           
 11773                           ;main.c: 421:                             IHM.printv(3, 4,( fifo_tam()-2 ), 2);
 11774  0897  3003               	movlw	3
 11775  0898  1283               	bcf	3,5	;RP0=0, select bank0
 11776  0899  1303               	bcf	3,6	;RP1=0, select bank0
 11777  089A  00C4               	movwf	??_main
 11778  089B  0844               	movf	??_main,w
 11779  089C  00AD               	movwf	dispLCD_num@lin
 11780  089D  3004               	movlw	4
 11781  089E  00C5               	movwf	??_main+1
 11782  089F  0845               	movf	??_main+1,w
 11783  08A0  00AE               	movwf	dispLCD_num@col
 11784  08A1  160A  158A  230B  120A  158A  	fcall	_fifo_tam
 11785  08A6  3EFE               	addlw	254
 11786  08A7  1283               	bcf	3,5	;RP0=0, select bank0
 11787  08A8  1303               	bcf	3,6	;RP1=0, select bank0
 11788  08A9  00AF               	movwf	dispLCD_num@num
 11789  08AA  30FF               	movlw	255
 11790  08AB  1803               	skipnc
 11791  08AC  3000               	movlw	0
 11792  08AD  00B0               	movwf	dispLCD_num@num+1
 11793  08AE  3002               	movlw	2
 11794  08AF  00C6               	movwf	??_main+2
 11795  08B0  0846               	movf	??_main+2,w
 11796  08B1  00B1               	movwf	dispLCD_num@tam
 11797  08B2  1683               	bsf	3,5	;RP0=1, select bank3
 11798  08B3  1703               	bsf	3,6	;RP1=1, select bank3
 11799  08B4  0865               	movf	(low ((_IHM| (0+256)+3)))^(0+128),w
 11800  08B5  120A  118A  2052  120A  158A  	fcall	fptable
 11801  08BA                     l7191:
 11802                           
 11803                           ;main.c: 422:                             estado = 11;
 11804  08BA  300B               	movlw	11
 11805  08BB  1283               	bcf	3,5	;RP0=0, select bank0
 11806  08BC  1303               	bcf	3,6	;RP1=0, select bank0
 11807  08BD  00C4               	movwf	??_main
 11808  08BE  0844               	movf	??_main,w
 11809  08BF  1683               	bsf	3,5	;RP0=1, select bank3
 11810  08C0  1703               	bsf	3,6	;RP1=1, select bank3
 11811  08C1  00E0               	movwf	main@estado^(0+384)
 11812                           
 11813                           ;main.c: 423:                             break;
 11814  08C2  2E60               	goto	l7429
 11815  08C3                     l7193:
 11816                           
 11817                           ;main.c: 427:                             estado = 70;
 11818  08C3  3046               	movlw	70
 11819  08C4  00C4               	movwf	??_main
 11820  08C5  0844               	movf	??_main,w
 11821  08C6  1683               	bsf	3,5	;RP0=1, select bank3
 11822  08C7  1703               	bsf	3,6	;RP1=1, select bank3
 11823  08C8  00E0               	movwf	main@estado^(0+384)
 11824  08C9                     l7195:
 11825                           
 11826                           ;main.c: 428:                             meAtuadores = 1;
 11827  08C9  01D8               	clrf	main@meAtuadores^(0+384)
 11828  08CA  0AD8               	incf	main@meAtuadores^(0+384),f
 11829                           
 11830                           ;main.c: 429:                             break;
 11831  08CB  2E60               	goto	l7429
 11832  08CC                     l7197:
 11833                           
 11834                           ;main.c: 432:                             if( meAtuadores == 3 && botao != 2 )
 11835  08CC  3003               	movlw	3
 11836  08CD  1683               	bsf	3,5	;RP0=1, select bank3
 11837  08CE  1703               	bsf	3,6	;RP1=1, select bank3
 11838  08CF  0658               	xorwf	main@meAtuadores^(0+384),w
 11839  08D0  1D03               	btfss	3,2
 11840  08D1  28D3               	goto	u5011
 11841  08D2  28D4               	goto	u5010
 11842  08D3                     u5011:
 11843  08D3  2985               	goto	l7203
 11844  08D4                     u5010:
 11845  08D4                     l7199:
 11846  08D4  3002               	movlw	2
 11847  08D5  065C               	xorwf	main@botao^(0+384),w
 11848  08D6  1903               	btfsc	3,2
 11849  08D7  28D9               	goto	u5021
 11850  08D8  28DA               	goto	u5020
 11851  08D9                     u5021:
 11852  08D9  2985               	goto	l7203
 11853  08DA                     u5020:
 11854  08DA                     l7201:
 11855                           
 11856                           ;main.c: 433:                             {;main.c: 434:                                
      +                           IHM.printpos(0, 0, "       [    ]       ");
 11857  08DA  1283               	bcf	3,5	;RP0=0, select bank0
 11858  08DB  1303               	bcf	3,6	;RP1=0, select bank0
 11859  08DC  01A8               	clrf	dispLCD@lin
 11860  08DD  01A9               	clrf	dispLCD@col
 11861  08DE  307F               	movlw	low (STR_11| (0+32768))
 11862  08DF  00AA               	movwf	dispLCD@str
 11863  08E0  3091               	movlw	high (STR_11| (0+32768))
 11864  08E1  00AB               	movwf	dispLCD@str+1
 11865  08E2  1683               	bsf	3,5	;RP0=1, select bank3
 11866  08E3  1703               	bsf	3,6	;RP1=1, select bank3
 11867  08E4  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 11868  08E5  120A  118A  2052  120A  158A  	fcall	fptable
 11869                           
 11870                           ;main.c: 435:                                 printExec(1, -1);
 11871  08EA  30FF               	movlw	255
 11872  08EB  1283               	bcf	3,5	;RP0=0, select bank0
 11873  08EC  1303               	bcf	3,6	;RP1=0, select bank0
 11874  08ED  00C4               	movwf	??_main
 11875  08EE  0844               	movf	??_main,w
 11876  08EF  00B9               	movwf	printExec@ind
 11877  08F0  3001               	movlw	1
 11878  08F1  160A  118A  2690  120A  158A  	fcall	_printExec
 11879                           
 11880                           ;main.c: 436:                                 printExec(9, 0);
 11881  08F6  1283               	bcf	3,5	;RP0=0, select bank0
 11882  08F7  1303               	bcf	3,6	;RP1=0, select bank0
 11883  08F8  01B9               	clrf	printExec@ind
 11884  08F9  3009               	movlw	9
 11885  08FA  160A  118A  2690  120A  158A  	fcall	_printExec
 11886                           
 11887                           ;main.c: 437:                                 printExec(14, 1);
 11888  08FF  1283               	bcf	3,5	;RP0=0, select bank0
 11889  0900  1303               	bcf	3,6	;RP1=0, select bank0
 11890  0901  01B9               	clrf	printExec@ind
 11891  0902  0AB9               	incf	printExec@ind,f
 11892  0903  300E               	movlw	14
 11893  0904  160A  118A  2690  120A  158A  	fcall	_printExec
 11894                           
 11895                           ;main.c: 438:                                 IHM.printpos(2, 0, "<  /  > c:          ")
      +                          ;
 11896  0909  3002               	movlw	2
 11897  090A  1283               	bcf	3,5	;RP0=0, select bank0
 11898  090B  1303               	bcf	3,6	;RP1=0, select bank0
 11899  090C  00C4               	movwf	??_main
 11900  090D  0844               	movf	??_main,w
 11901  090E  00A8               	movwf	dispLCD@lin
 11902  090F  01A9               	clrf	dispLCD@col
 11903  0910  3040               	movlw	low (STR_12| (0+32768))
 11904  0911  00AA               	movwf	dispLCD@str
 11905  0912  3091               	movlw	high (STR_12| (0+32768))
 11906  0913  00AB               	movwf	dispLCD@str+1
 11907  0914  1683               	bsf	3,5	;RP0=1, select bank3
 11908  0915  1703               	bsf	3,6	;RP1=1, select bank3
 11909  0916  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 11910  0917  120A  118A  2052  120A  158A  	fcall	fptable
 11911                           
 11912                           ;main.c: 439:                                 IHM.printv(2, 4,( fifo_indice() - 2 ), 2);
 11913  091C  3002               	movlw	2
 11914  091D  1283               	bcf	3,5	;RP0=0, select bank0
 11915  091E  1303               	bcf	3,6	;RP1=0, select bank0
 11916  091F  00C4               	movwf	??_main
 11917  0920  0844               	movf	??_main,w
 11918  0921  00AD               	movwf	dispLCD_num@lin
 11919  0922  3004               	movlw	4
 11920  0923  00C5               	movwf	??_main+1
 11921  0924  0845               	movf	??_main+1,w
 11922  0925  00AE               	movwf	dispLCD_num@col
 11923  0926  160A  158A  2314  120A  158A  	fcall	_fifo_indice
 11924  092B  3EFE               	addlw	254
 11925  092C  1283               	bcf	3,5	;RP0=0, select bank0
 11926  092D  1303               	bcf	3,6	;RP1=0, select bank0
 11927  092E  00AF               	movwf	dispLCD_num@num
 11928  092F  30FF               	movlw	255
 11929  0930  1803               	skipnc
 11930  0931  3000               	movlw	0
 11931  0932  00B0               	movwf	dispLCD_num@num+1
 11932  0933  3002               	movlw	2
 11933  0934  00C6               	movwf	??_main+2
 11934  0935  0846               	movf	??_main+2,w
 11935  0936  00B1               	movwf	dispLCD_num@tam
 11936  0937  1683               	bsf	3,5	;RP0=1, select bank3
 11937  0938  1703               	bsf	3,6	;RP1=1, select bank3
 11938  0939  0865               	movf	(low ((_IHM| (0+256)+3)))^(0+128),w
 11939  093A  120A  118A  2052  120A  158A  	fcall	fptable
 11940                           
 11941                           ;main.c: 440:                                 IHM.printv(2, 1, ( getIndicePassos() - 1 )
      +                          , 2);
 11942  093F  3002               	movlw	2
 11943  0940  1283               	bcf	3,5	;RP0=0, select bank0
 11944  0941  1303               	bcf	3,6	;RP1=0, select bank0
 11945  0942  00C4               	movwf	??_main
 11946  0943  0844               	movf	??_main,w
 11947  0944  00AD               	movwf	dispLCD_num@lin
 11948  0945  01AE               	clrf	dispLCD_num@col
 11949  0946  0AAE               	incf	dispLCD_num@col,f
 11950  0947  160A  158A  230D  120A  158A  	fcall	_getIndicePassos
 11951  094C  3EFF               	addlw	255
 11952  094D  1283               	bcf	3,5	;RP0=0, select bank0
 11953  094E  1303               	bcf	3,6	;RP1=0, select bank0
 11954  094F  00AF               	movwf	dispLCD_num@num
 11955  0950  30FF               	movlw	255
 11956  0951  1803               	skipnc
 11957  0952  3000               	movlw	0
 11958  0953  00B0               	movwf	dispLCD_num@num+1
 11959  0954  3002               	movlw	2
 11960  0955  00C5               	movwf	??_main+1
 11961  0956  0845               	movf	??_main+1,w
 11962  0957  00B1               	movwf	dispLCD_num@tam
 11963  0958  1683               	bsf	3,5	;RP0=1, select bank3
 11964  0959  1703               	bsf	3,6	;RP1=1, select bank3
 11965  095A  0865               	movf	(low ((_IHM| (0+256)+3)))^(0+128),w
 11966  095B  120A  118A  2052  120A  158A  	fcall	fptable
 11967                           
 11968                           ;main.c: 441:                                 IHM.printv(2, 11, ( getContCiclos() + 1 ),
      +                           5);
 11969  0960  3002               	movlw	2
 11970  0961  1283               	bcf	3,5	;RP0=0, select bank0
 11971  0962  1303               	bcf	3,6	;RP1=0, select bank0
 11972  0963  00C4               	movwf	??_main
 11973  0964  0844               	movf	??_main,w
 11974  0965  00AD               	movwf	dispLCD_num@lin
 11975  0966  300B               	movlw	11
 11976  0967  00C5               	movwf	??_main+1
 11977  0968  0845               	movf	??_main+1,w
 11978  0969  00AE               	movwf	dispLCD_num@col
 11979  096A  160A  158A  2330  120A  158A  	fcall	_getContCiclos
 11980  096F  1283               	bcf	3,5	;RP0=0, select bank0
 11981  0970  1303               	bcf	3,6	;RP1=0, select bank0
 11982  0971  0820               	movf	?_getContCiclos,w
 11983  0972  3E01               	addlw	1
 11984  0973  00AF               	movwf	dispLCD_num@num
 11985  0974  0821               	movf	?_getContCiclos+1,w
 11986  0975  1803               	skipnc
 11987  0976  3E01               	addlw	1
 11988  0977  3E00               	addlw	0
 11989  0978  00B0               	movwf	dispLCD_num@num+1
 11990  0979  3005               	movlw	5
 11991  097A  00C6               	movwf	??_main+2
 11992  097B  0846               	movf	??_main+2,w
 11993  097C  00B1               	movwf	dispLCD_num@tam
 11994  097D  1683               	bsf	3,5	;RP0=1, select bank3
 11995  097E  1703               	bsf	3,6	;RP1=1, select bank3
 11996  097F  0865               	movf	(low ((_IHM| (0+256)+3)))^(0+128),w
 11997  0980  120A  118A  2052  120A  158A  	fcall	fptable
 11998  0985                     l7203:
 11999                           
 12000                           ;main.c: 444:                             if(meAtuadores == 0)
 12001  0985  1683               	bsf	3,5	;RP0=1, select bank3
 12002  0986  1703               	bsf	3,6	;RP1=1, select bank3
 12003  0987  0858               	movf	main@meAtuadores^(0+384),w
 12004  0988  1D03               	btfss	3,2
 12005  0989  298B               	goto	u5031
 12006  098A  298C               	goto	u5030
 12007  098B                     u5031:
 12008  098B  299A               	goto	l7209
 12009  098C                     u5030:
 12010  098C                     l7205:
 12011                           
 12012                           ;main.c: 445:                             {;main.c: 446:                                
      +                           estado = 16;
 12013  098C  3010               	movlw	16
 12014  098D  1283               	bcf	3,5	;RP0=0, select bank0
 12015  098E  1303               	bcf	3,6	;RP1=0, select bank0
 12016  098F  00C4               	movwf	??_main
 12017  0990  0844               	movf	??_main,w
 12018  0991  1683               	bsf	3,5	;RP0=1, select bank3
 12019  0992  1703               	bsf	3,6	;RP1=1, select bank3
 12020  0993  00E0               	movwf	main@estado^(0+384)
 12021  0994                     l7207:
 12022                           
 12023                           ;main.c: 447:                                 IHM.clr();
 12024  0994  0866               	movf	(low ((_IHM| (0+256)+4)))^(0+128),w
 12025  0995  120A  118A  2052  120A  158A  	fcall	fptable
 12026  099A                     l7209:
 12027                           
 12028                           ;main.c: 449:                             tecla = teclado_borda();
 12029  099A  160A  158A  248D  120A  158A  	fcall	_teclado_borda
 12030  099F  1283               	bcf	3,5	;RP0=0, select bank0
 12031  09A0  1303               	bcf	3,6	;RP1=0, select bank0
 12032  09A1  00C4               	movwf	??_main
 12033  09A2  0844               	movf	??_main,w
 12034  09A3  1683               	bsf	3,5	;RP0=1, select bank3
 12035  09A4  1703               	bsf	3,6	;RP1=1, select bank3
 12036  09A5  00E1               	movwf	main@tecla^(0+384)
 12037                           
 12038                           ;main.c: 450:                             switch(tecla)
 12039  09A6  29C8               	goto	l7221
 12040  09A7                     l750:	
 12041                           ;main.c: 451:                             {;main.c: 452:                                
      +                           case '#':
 12042                           
 12043                           
 12044                           ;main.c: 453:                                     botao = 1;
 12045  09A7  1683               	bsf	3,5	;RP0=1, select bank3
 12046  09A8  1703               	bsf	3,6	;RP1=1, select bank3
 12047  09A9  01DC               	clrf	main@botao^(0+384)
 12048  09AA  0ADC               	incf	main@botao^(0+384),f
 12049                           
 12050                           ;main.c: 454:                                     break;
 12051  09AB  2E60               	goto	l7429
 12052  09AC                     l7211:
 12053                           
 12054                           ;main.c: 457:                                     botao = 2;
 12055  09AC  3002               	movlw	2
 12056  09AD  00C4               	movwf	??_main
 12057  09AE  0844               	movf	??_main,w
 12058  09AF  1683               	bsf	3,5	;RP0=1, select bank3
 12059  09B0  1703               	bsf	3,6	;RP1=1, select bank3
 12060  09B1  00DC               	movwf	main@botao^(0+384)
 12061                           
 12062                           ;main.c: 458:                                     break;
 12063  09B2  2E60               	goto	l7429
 12064  09B3                     l7213:
 12065                           
 12066                           ;main.c: 461:                                     botao = 0;
 12067  09B3  1683               	bsf	3,5	;RP0=1, select bank3
 12068  09B4  1703               	bsf	3,6	;RP1=1, select bank3
 12069  09B5  01DC               	clrf	main@botao^(0+384)
 12070                           
 12071                           ;main.c: 462:                                     break;
 12072  09B6  2E60               	goto	l7429
 12073  09B7                     l7215:
 12074                           
 12075                           ;main.c: 465:                                     if(botao == 2)
 12076  09B7  3002               	movlw	2
 12077  09B8  1683               	bsf	3,5	;RP0=1, select bank3
 12078  09B9  1703               	bsf	3,6	;RP1=1, select bank3
 12079  09BA  065C               	xorwf	main@botao^(0+384),w
 12080  09BB  1D03               	btfss	3,2
 12081  09BC  29BE               	goto	u5041
 12082  09BD  29BF               	goto	u5040
 12083  09BE                     u5041:
 12084  09BE  2E60               	goto	l7429
 12085  09BF                     u5040:
 12086  09BF                     l7217:
 12087                           
 12088                           ;main.c: 466:                                         botao = 3;
 12089  09BF  3003               	movlw	3
 12090  09C0  1283               	bcf	3,5	;RP0=0, select bank0
 12091  09C1  1303               	bcf	3,6	;RP1=0, select bank0
 12092  09C2  00C4               	movwf	??_main
 12093  09C3  0844               	movf	??_main,w
 12094  09C4  1683               	bsf	3,5	;RP0=1, select bank3
 12095  09C5  1703               	bsf	3,6	;RP1=1, select bank3
 12096  09C6  00DC               	movwf	main@botao^(0+384)
 12097  09C7  2E60               	goto	l7429
 12098  09C8                     l7221:
 12099  09C8  0861               	movf	main@tecla^(0+384),w
 12100  09C9  1283               	bcf	3,5	;RP0=0, select bank0
 12101  09CA  1303               	bcf	3,6	;RP1=0, select bank0
 12102  09CB  00C4               	movwf	??_main
 12103  09CC  01C5               	clrf	??_main+1
 12104                           
 12105                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12106                           ; Switch size 1, requested type "simple"
 12107                           ; Number of cases is 1, Range of values is 0 to 0
 12108                           ; switch strategies available:
 12109                           ; Name         Instructions Cycles
 12110                           ; simple_byte            4     3 (average)
 12111                           ; direct_byte           11     8 (fixed)
 12112                           ; jumptable            260     6 (fixed)
 12113                           ;	Chosen strategy is simple_byte
 12114  09CD  0845               	movf	??_main+1,w
 12115  09CE  3A00               	xorlw	0	; case 0
 12116  09CF  1903               	skipnz
 12117  09D0  29D2               	goto	l8067
 12118  09D1  2E60               	goto	l7429
 12119  09D2                     l8067:
 12120                           
 12121                           ; Switch size 1, requested type "simple"
 12122                           ; Number of cases is 4, Range of values is 35 to 53
 12123                           ; switch strategies available:
 12124                           ; Name         Instructions Cycles
 12125                           ; simple_byte           13     7 (average)
 12126                           ; direct_byte           68    11 (fixed)
 12127                           ; jumptable            263     9 (fixed)
 12128                           ;	Chosen strategy is simple_byte
 12129  09D2  0844               	movf	??_main,w
 12130  09D3  3A23               	xorlw	35	; case 35
 12131  09D4  1903               	skipnz
 12132  09D5  29A7               	goto	l750
 12133  09D6  3A13               	xorlw	19	; case 48
 12134  09D7  1903               	skipnz
 12135  09D8  29B3               	goto	l7213
 12136  09D9  3A01               	xorlw	1	; case 49
 12137  09DA  1903               	skipnz
 12138  09DB  29B7               	goto	l7215
 12139  09DC  3A04               	xorlw	4	; case 53
 12140  09DD  1903               	skipnz
 12141  09DE  29AC               	goto	l7211
 12142  09DF  2E60               	goto	l7429
 12143  09E0                     l7223:
 12144                           
 12145                           ;main.c: 472:                             tecla = teclado_borda();
 12146  09E0  160A  158A  248D  120A  158A  	fcall	_teclado_borda
 12147  09E5  1283               	bcf	3,5	;RP0=0, select bank0
 12148  09E6  1303               	bcf	3,6	;RP1=0, select bank0
 12149  09E7  00C4               	movwf	??_main
 12150  09E8  0844               	movf	??_main,w
 12151  09E9  1683               	bsf	3,5	;RP0=1, select bank3
 12152  09EA  1703               	bsf	3,6	;RP1=1, select bank3
 12153  09EB  00E1               	movwf	main@tecla^(0+384)
 12154  09EC                     l7225:
 12155                           
 12156                           ;main.c: 473:                             if(tecla >= '0' && tecla <= '9')
 12157  09EC  3030               	movlw	48
 12158  09ED  0261               	subwf	main@tecla^(0+384),w
 12159  09EE  1C03               	skipc
 12160  09EF  29F1               	goto	u5051
 12161  09F0  29F2               	goto	u5050
 12162  09F1                     u5051:
 12163  09F1  2A1D               	goto	l7235
 12164  09F2                     u5050:
 12165  09F2                     l7227:
 12166  09F2  303A               	movlw	58
 12167  09F3  0261               	subwf	main@tecla^(0+384),w
 12168  09F4  1803               	skipnc
 12169  09F5  29F7               	goto	u5061
 12170  09F6  29F8               	goto	u5060
 12171  09F7                     u5061:
 12172  09F7  2A1D               	goto	l7235
 12173  09F8                     u5060:
 12174  09F8                     l7229:
 12175                           
 12176                           ;main.c: 474:                             {;main.c: 475:                                
      +                           dignum_conc(tecla, &num);
 12177  09F8  30DE               	movlw	(low (main@num| (0+256)))& (0+255)
 12178  09F9  1283               	bcf	3,5	;RP0=0, select bank0
 12179  09FA  1303               	bcf	3,6	;RP1=0, select bank0
 12180  09FB  00C4               	movwf	??_main
 12181  09FC  0844               	movf	??_main,w
 12182  09FD  00A6               	movwf	dignum_conc@ptrNum
 12183  09FE  1683               	bsf	3,5	;RP0=1, select bank3
 12184  09FF  1703               	bsf	3,6	;RP1=1, select bank3
 12185  0A00  0861               	movf	main@tecla^(0+384),w
 12186  0A01  160A  158A  26DA  120A  158A  	fcall	_dignum_conc
 12187  0A06                     l7231:
 12188                           
 12189                           ;main.c: 476:                                 if(num > 120)
 12190  0A06  3000               	movlw	0
 12191  0A07  1683               	bsf	3,5	;RP0=1, select bank3
 12192  0A08  1703               	bsf	3,6	;RP1=1, select bank3
 12193  0A09  025F               	subwf	(main@num+1)^(0+384),w
 12194  0A0A  3079               	movlw	121
 12195  0A0B  1903               	skipnz
 12196  0A0C  025E               	subwf	main@num^(0+384),w
 12197  0A0D  1C03               	skipc
 12198  0A0E  2A10               	goto	u5071
 12199  0A0F  2A11               	goto	u5070
 12200  0A10                     u5071:
 12201  0A10  2A15               	goto	l758
 12202  0A11                     u5070:
 12203  0A11                     l7233:
 12204                           
 12205                           ;main.c: 477:                                     num = 120;
 12206  0A11  3078               	movlw	120
 12207  0A12  00DE               	movwf	main@num^(0+384)
 12208  0A13  3000               	movlw	0
 12209  0A14  00DF               	movwf	(main@num^(0+384)+1)
 12210  0A15                     l758:
 12211                           
 12212                           ;main.c: 478:                                 estado = 41;
 12213  0A15  3029               	movlw	41
 12214  0A16  1283               	bcf	3,5	;RP0=0, select bank0
 12215  0A17  1303               	bcf	3,6	;RP1=0, select bank0
 12216  0A18  00C4               	movwf	??_main
 12217  0A19  0844               	movf	??_main,w
 12218  0A1A  1683               	bsf	3,5	;RP0=1, select bank3
 12219  0A1B  1703               	bsf	3,6	;RP1=1, select bank3
 12220  0A1C  00E0               	movwf	main@estado^(0+384)
 12221  0A1D                     l7235:
 12222                           
 12223                           ;main.c: 480:                             if(tecla == '*')
 12224  0A1D  302A               	movlw	42
 12225  0A1E  0661               	xorwf	main@tecla^(0+384),w
 12226  0A1F  1D03               	btfss	3,2
 12227  0A20  2A22               	goto	u5081
 12228  0A21  2A23               	goto	u5080
 12229  0A22                     u5081:
 12230  0A22  2A31               	goto	l7241
 12231  0A23                     u5080:
 12232  0A23                     l7237:
 12233                           
 12234                           ;main.c: 481:                             {;main.c: 482:                                
      +                           dignum_apagar(&num);
 12235  0A23  30DE               	movlw	(low (main@num| (0+256)))& (0+255)
 12236  0A24  160A  158A  244D  120A  158A  	fcall	_dignum_apagar
 12237  0A29                     l7239:
 12238                           
 12239                           ;main.c: 483:                                 estado = 41;
 12240  0A29  3029               	movlw	41
 12241  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
 12242  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
 12243  0A2C  00C4               	movwf	??_main
 12244  0A2D  0844               	movf	??_main,w
 12245  0A2E  1683               	bsf	3,5	;RP0=1, select bank3
 12246  0A2F  1703               	bsf	3,6	;RP1=1, select bank3
 12247  0A30  00E0               	movwf	main@estado^(0+384)
 12248  0A31                     l7241:
 12249                           
 12250                           ;main.c: 485:                             if(tecla == '#')
 12251  0A31  3023               	movlw	35
 12252  0A32  0661               	xorwf	main@tecla^(0+384),w
 12253  0A33  1D03               	btfss	3,2
 12254  0A34  2A36               	goto	u5091
 12255  0A35  2A37               	goto	u5090
 12256  0A36                     u5091:
 12257  0A36  2E60               	goto	l7429
 12258  0A37                     u5090:
 12259  0A37                     l7243:
 12260                           
 12261                           ;main.c: 486:                                 estado = 42;
 12262  0A37  302A               	movlw	42
 12263  0A38  1283               	bcf	3,5	;RP0=0, select bank0
 12264  0A39  1303               	bcf	3,6	;RP1=0, select bank0
 12265  0A3A  00C4               	movwf	??_main
 12266  0A3B  0844               	movf	??_main,w
 12267  0A3C  1683               	bsf	3,5	;RP0=1, select bank3
 12268  0A3D  1703               	bsf	3,6	;RP1=1, select bank3
 12269  0A3E  00E0               	movwf	main@estado^(0+384)
 12270  0A3F  2E60               	goto	l7429
 12271  0A40                     l7245:
 12272                           
 12273                           ;main.c: 491:                             IHM.printpos(2, 0, "config tempo:      s");
 12274  0A40  3002               	movlw	2
 12275  0A41  00C4               	movwf	??_main
 12276  0A42  0844               	movf	??_main,w
 12277  0A43  00A8               	movwf	dispLCD@lin
 12278  0A44  01A9               	clrf	dispLCD@col
 12279  0A45  3027               	movlw	low (STR_13| (0+32768))
 12280  0A46  00AA               	movwf	dispLCD@str
 12281  0A47  3092               	movlw	high (STR_13| (0+32768))
 12282  0A48  00AB               	movwf	dispLCD@str+1
 12283  0A49  1683               	bsf	3,5	;RP0=1, select bank3
 12284  0A4A  1703               	bsf	3,6	;RP1=1, select bank3
 12285  0A4B  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 12286  0A4C  120A  118A  2052  120A  158A  	fcall	fptable
 12287                           
 12288                           ;main.c: 492:                             IHM.printv(2, 15, num, 3);
 12289  0A51  3002               	movlw	2
 12290  0A52  1283               	bcf	3,5	;RP0=0, select bank0
 12291  0A53  1303               	bcf	3,6	;RP1=0, select bank0
 12292  0A54  00C4               	movwf	??_main
 12293  0A55  0844               	movf	??_main,w
 12294  0A56  00AD               	movwf	dispLCD_num@lin
 12295  0A57  300F               	movlw	15
 12296  0A58  00C5               	movwf	??_main+1
 12297  0A59  0845               	movf	??_main+1,w
 12298  0A5A  00AE               	movwf	dispLCD_num@col
 12299  0A5B  1683               	bsf	3,5	;RP0=1, select bank3
 12300  0A5C  1703               	bsf	3,6	;RP1=1, select bank3
 12301  0A5D  085F               	movf	(main@num+1)^(0+384),w
 12302  0A5E  1283               	bcf	3,5	;RP0=0, select bank0
 12303  0A5F  1303               	bcf	3,6	;RP1=0, select bank0
 12304  0A60  00B0               	movwf	dispLCD_num@num+1
 12305  0A61  1683               	bsf	3,5	;RP0=1, select bank3
 12306  0A62  1703               	bsf	3,6	;RP1=1, select bank3
 12307  0A63  085E               	movf	main@num^(0+384),w
 12308  0A64  1283               	bcf	3,5	;RP0=0, select bank0
 12309  0A65  1303               	bcf	3,6	;RP1=0, select bank0
 12310  0A66  00AF               	movwf	dispLCD_num@num
 12311  0A67  3003               	movlw	3
 12312  0A68  00C6               	movwf	??_main+2
 12313  0A69  0846               	movf	??_main+2,w
 12314  0A6A  00B1               	movwf	dispLCD_num@tam
 12315  0A6B  1683               	bsf	3,5	;RP0=1, select bank3
 12316  0A6C  1703               	bsf	3,6	;RP1=1, select bank3
 12317  0A6D  0865               	movf	(low ((_IHM| (0+256)+3)))^(0+128),w
 12318  0A6E  120A  118A  2052  120A  158A  	fcall	fptable
 12319  0A73                     l7247:
 12320                           
 12321                           ;main.c: 493:                             estado = 40;
 12322  0A73  3028               	movlw	40
 12323  0A74  1283               	bcf	3,5	;RP0=0, select bank0
 12324  0A75  1303               	bcf	3,6	;RP1=0, select bank0
 12325  0A76  00C4               	movwf	??_main
 12326  0A77  0844               	movf	??_main,w
 12327  0A78  1683               	bsf	3,5	;RP0=1, select bank3
 12328  0A79  1703               	bsf	3,6	;RP1=1, select bank3
 12329  0A7A  00E0               	movwf	main@estado^(0+384)
 12330                           
 12331                           ;main.c: 494:                             break;
 12332  0A7B  2E60               	goto	l7429
 12333  0A7C                     l7249:
 12334                           
 12335                           ;main.c: 497:                             fifo_add_tempo(num);
 12336  0A7C  1683               	bsf	3,5	;RP0=1, select bank3
 12337  0A7D  1703               	bsf	3,6	;RP1=1, select bank3
 12338  0A7E  085E               	movf	main@num^(0+384),w
 12339  0A7F  160A  158A  2563  120A  158A  	fcall	_fifo_add_tempo
 12340  0A84                     l7251:
 12341                           
 12342                           ;main.c: 498:                             IHM.clr();
 12343  0A84  1683               	bsf	3,5	;RP0=1, select bank3
 12344  0A85  1703               	bsf	3,6	;RP1=1, select bank3
 12345  0A86  0866               	movf	(low ((_IHM| (0+256)+4)))^(0+128),w
 12346  0A87  120A  118A  2052  120A  158A  	fcall	fptable
 12347  0A8C  120A  118A  2C49   	goto	L4
 12348  0A8F                     l7255:
 12349                           
 12350                           ;main.c: 531:                             tecla = teclado_borda();
 12351  0A8F  160A  158A  248D  120A  158A  	fcall	_teclado_borda
 12352  0A94  1283               	bcf	3,5	;RP0=0, select bank0
 12353  0A95  1303               	bcf	3,6	;RP1=0, select bank0
 12354  0A96  00C4               	movwf	??_main
 12355  0A97  0844               	movf	??_main,w
 12356  0A98  1683               	bsf	3,5	;RP0=1, select bank3
 12357  0A99  1703               	bsf	3,6	;RP1=1, select bank3
 12358  0A9A  00E1               	movwf	main@tecla^(0+384)
 12359  0A9B                     l7257:
 12360                           
 12361                           ;main.c: 532:                             if(tecla >= '0' && tecla <= '9')
 12362  0A9B  3030               	movlw	48
 12363  0A9C  0261               	subwf	main@tecla^(0+384),w
 12364  0A9D  1C03               	skipc
 12365  0A9E  2AA0               	goto	u5101
 12366  0A9F  2AA1               	goto	u5100
 12367  0AA0                     u5101:
 12368  0AA0  2ADE               	goto	l7279
 12369  0AA1                     u5100:
 12370  0AA1                     l7259:
 12371  0AA1  303A               	movlw	58
 12372  0AA2  0261               	subwf	main@tecla^(0+384),w
 12373  0AA3  1803               	skipnc
 12374  0AA4  2AA6               	goto	u5111
 12375  0AA5  2AA7               	goto	u5110
 12376  0AA6                     u5111:
 12377  0AA6  2ADE               	goto	l7279
 12378  0AA7                     u5110:
 12379  0AA7                     l7261:
 12380                           
 12381                           ;main.c: 533:                                {;main.c: 534:                             
      +                              dignum_conc(tecla, &ciclos);
 12382  0AA7  30D9               	movlw	(low (main@ciclos| (0+256)))& (0+255)
 12383  0AA8  1283               	bcf	3,5	;RP0=0, select bank0
 12384  0AA9  1303               	bcf	3,6	;RP1=0, select bank0
 12385  0AAA  00C4               	movwf	??_main
 12386  0AAB  0844               	movf	??_main,w
 12387  0AAC  00A6               	movwf	dignum_conc@ptrNum
 12388  0AAD  1683               	bsf	3,5	;RP0=1, select bank3
 12389  0AAE  1703               	bsf	3,6	;RP1=1, select bank3
 12390  0AAF  0861               	movf	main@tecla^(0+384),w
 12391  0AB0  160A  158A  26DA  120A  158A  	fcall	_dignum_conc
 12392  0AB5                     l7263:
 12393                           
 12394                           ;main.c: 535:                                 if(ciclos > 10000)
 12395  0AB5  3027               	movlw	39
 12396  0AB6  1683               	bsf	3,5	;RP0=1, select bank3
 12397  0AB7  1703               	bsf	3,6	;RP1=1, select bank3
 12398  0AB8  025A               	subwf	(main@ciclos+1)^(0+384),w
 12399  0AB9  3011               	movlw	17
 12400  0ABA  1903               	skipnz
 12401  0ABB  0259               	subwf	main@ciclos^(0+384),w
 12402  0ABC  1C03               	skipc
 12403  0ABD  2ABF               	goto	u5121
 12404  0ABE  2AC0               	goto	u5120
 12405  0ABF                     u5121:
 12406  0ABF  2AC4               	goto	l765
 12407  0AC0                     u5120:
 12408  0AC0                     l7265:
 12409                           
 12410                           ;main.c: 536:                                     ciclos = 10000;
 12411  0AC0  3010               	movlw	16
 12412  0AC1  00D9               	movwf	main@ciclos^(0+384)
 12413  0AC2  3027               	movlw	39
 12414  0AC3  00DA               	movwf	(main@ciclos^(0+384)+1)
 12415  0AC4                     l765:
 12416                           
 12417                           ;main.c: 537:                                 estado = 53;
 12418  0AC4  3035               	movlw	53
 12419  0AC5  1283               	bcf	3,5	;RP0=0, select bank0
 12420  0AC6  1303               	bcf	3,6	;RP1=0, select bank0
 12421  0AC7  00C4               	movwf	??_main
 12422  0AC8  0844               	movf	??_main,w
 12423  0AC9  1683               	bsf	3,5	;RP0=1, select bank3
 12424  0ACA  1703               	bsf	3,6	;RP1=1, select bank3
 12425  0ACB  00E0               	movwf	main@estado^(0+384)
 12426                           
 12427                           ;main.c: 538:                                 break;
 12428  0ACC  2E60               	goto	l7429
 12429  0ACD                     l769:	
 12430                           ;main.c: 544:                                    case 'C':
 12431                           
 12432  0ACD  120A  118A  2AA0   	goto	l7033
 12433  0AD0                     l7271:
 12434                           
 12435                           ;main.c: 550:                                        estado = 54;
 12436  0AD0  3036               	movlw	54
 12437  0AD1  00C4               	movwf	??_main
 12438  0AD2  0844               	movf	??_main,w
 12439  0AD3  1683               	bsf	3,5	;RP0=1, select bank3
 12440  0AD4  1703               	bsf	3,6	;RP1=1, select bank3
 12441  0AD5  00E0               	movwf	main@estado^(0+384)
 12442                           
 12443                           ;main.c: 551:                                        break;
 12444  0AD6  2E60               	goto	l7429
 12445  0AD7                     l7273:
 12446                           
 12447                           ;main.c: 553:                                        dignum_apagar(&ciclos);
 12448  0AD7  30D9               	movlw	(low (main@ciclos| (0+256)))& (0+255)
 12449  0AD8  160A  158A  244D  120A  158A  	fcall	_dignum_apagar
 12450  0ADD  2AC4               	goto	l765
 12451  0ADE                     l7279:
 12452  0ADE  0861               	movf	main@tecla^(0+384),w
 12453  0ADF  1283               	bcf	3,5	;RP0=0, select bank0
 12454  0AE0  1303               	bcf	3,6	;RP1=0, select bank0
 12455  0AE1  00C4               	movwf	??_main
 12456  0AE2  01C5               	clrf	??_main+1
 12457                           
 12458                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12459                           ; Switch size 1, requested type "simple"
 12460                           ; Number of cases is 1, Range of values is 0 to 0
 12461                           ; switch strategies available:
 12462                           ; Name         Instructions Cycles
 12463                           ; simple_byte            4     3 (average)
 12464                           ; direct_byte           11     8 (fixed)
 12465                           ; jumptable            260     6 (fixed)
 12466                           ;	Chosen strategy is simple_byte
 12467  0AE3  0845               	movf	??_main+1,w
 12468  0AE4  3A00               	xorlw	0	; case 0
 12469  0AE5  1903               	skipnz
 12470  0AE6  2AE8               	goto	l8069
 12471  0AE7  2E60               	goto	l7429
 12472  0AE8                     l8069:
 12473                           
 12474                           ; Switch size 1, requested type "simple"
 12475                           ; Number of cases is 6, Range of values is 35 to 68
 12476                           ; switch strategies available:
 12477                           ; Name         Instructions Cycles
 12478                           ; simple_byte           19    10 (average)
 12479                           ; direct_byte          113    11 (fixed)
 12480                           ; jumptable            263     9 (fixed)
 12481                           ;	Chosen strategy is simple_byte
 12482  0AE8  0844               	movf	??_main,w
 12483  0AE9  3A23               	xorlw	35	; case 35
 12484  0AEA  1903               	skipnz
 12485  0AEB  2AD0               	goto	l7271
 12486  0AEC  3A09               	xorlw	9	; case 42
 12487  0AED  1903               	skipnz
 12488  0AEE  2AD7               	goto	l7273
 12489  0AEF  3A6B               	xorlw	107	; case 65
 12490  0AF0  1903               	skipnz
 12491  0AF1  2ACD               	goto	l769
 12492  0AF2  3A03               	xorlw	3	; case 66
 12493  0AF3  1903               	skipnz
 12494  0AF4  2ACD               	goto	l769
 12495  0AF5  3A01               	xorlw	1	; case 67
 12496  0AF6  1903               	skipnz
 12497  0AF7  2ACD               	goto	l769
 12498  0AF8  3A07               	xorlw	7	; case 68
 12499  0AF9  1903               	skipnz
 12500  0AFA  2ACD               	goto	l769
 12501  0AFB  2E60               	goto	l7429
 12502  0AFC                     l7281:
 12503                           
 12504                           ;main.c: 560:                             IHM.clr();
 12505  0AFC  1683               	bsf	3,5	;RP0=1, select bank3
 12506  0AFD  1703               	bsf	3,6	;RP1=1, select bank3
 12507  0AFE  0866               	movf	(low ((_IHM| (0+256)+4)))^(0+128),w
 12508  0AFF  120A  118A  2052  120A  158A  	fcall	fptable
 12509  0B04                     l7283:
 12510                           
 12511                           ;main.c: 561:                             IHM.printpos(0, 0, "Ciclos:             ");
 12512  0B04  1283               	bcf	3,5	;RP0=0, select bank0
 12513  0B05  1303               	bcf	3,6	;RP1=0, select bank0
 12514  0B06  01A8               	clrf	dispLCD@lin
 12515  0B07  01A9               	clrf	dispLCD@col
 12516  0B08  302B               	movlw	low (STR_14| (0+32768))
 12517  0B09  00AA               	movwf	dispLCD@str
 12518  0B0A  3091               	movlw	high (STR_14| (0+32768))
 12519  0B0B  00AB               	movwf	dispLCD@str+1
 12520  0B0C  1683               	bsf	3,5	;RP0=1, select bank3
 12521  0B0D  1703               	bsf	3,6	;RP1=1, select bank3
 12522  0B0E  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 12523  0B0F  120A  118A  2052  120A  158A  	fcall	fptable
 12524  0B14                     l7285:
 12525                           
 12526                           ;main.c: 562:                             IHM.printv(0, 15, ciclos, 5);
 12527  0B14  1283               	bcf	3,5	;RP0=0, select bank0
 12528  0B15  1303               	bcf	3,6	;RP1=0, select bank0
 12529  0B16  01AD               	clrf	dispLCD_num@lin
 12530  0B17  300F               	movlw	15
 12531  0B18  00C4               	movwf	??_main
 12532  0B19  0844               	movf	??_main,w
 12533  0B1A  00AE               	movwf	dispLCD_num@col
 12534  0B1B  1683               	bsf	3,5	;RP0=1, select bank3
 12535  0B1C  1703               	bsf	3,6	;RP1=1, select bank3
 12536  0B1D  085A               	movf	(main@ciclos+1)^(0+384),w
 12537  0B1E  1283               	bcf	3,5	;RP0=0, select bank0
 12538  0B1F  1303               	bcf	3,6	;RP1=0, select bank0
 12539  0B20  00B0               	movwf	dispLCD_num@num+1
 12540  0B21  1683               	bsf	3,5	;RP0=1, select bank3
 12541  0B22  1703               	bsf	3,6	;RP1=1, select bank3
 12542  0B23  0859               	movf	main@ciclos^(0+384),w
 12543  0B24  1283               	bcf	3,5	;RP0=0, select bank0
 12544  0B25  1303               	bcf	3,6	;RP1=0, select bank0
 12545  0B26  00AF               	movwf	dispLCD_num@num
 12546  0B27  3005               	movlw	5
 12547  0B28  00C5               	movwf	??_main+1
 12548  0B29  0845               	movf	??_main+1,w
 12549  0B2A  00B1               	movwf	dispLCD_num@tam
 12550  0B2B  1683               	bsf	3,5	;RP0=1, select bank3
 12551  0B2C  1703               	bsf	3,6	;RP1=1, select bank3
 12552  0B2D  0865               	movf	(low ((_IHM| (0+256)+3)))^(0+128),w
 12553  0B2E  120A  118A  2052  120A  158A  	fcall	fptable
 12554  0B33                     l7287:
 12555                           
 12556                           ;main.c: 563:                             IHM.printpos(2, 0, "0 - Ciclo continuo  ");
 12557  0B33  3002               	movlw	2
 12558  0B34  1283               	bcf	3,5	;RP0=0, select bank0
 12559  0B35  1303               	bcf	3,6	;RP1=0, select bank0
 12560  0B36  00C4               	movwf	??_main
 12561  0B37  0844               	movf	??_main,w
 12562  0B38  00A8               	movwf	dispLCD@lin
 12563  0B39  01A9               	clrf	dispLCD@col
 12564  0B3A  30FD               	movlw	low (STR_15| (0+32768))
 12565  0B3B  00AA               	movwf	dispLCD@str
 12566  0B3C  3091               	movlw	high (STR_15| (0+32768))
 12567  0B3D  00AB               	movwf	dispLCD@str+1
 12568  0B3E  1683               	bsf	3,5	;RP0=1, select bank3
 12569  0B3F  1703               	bsf	3,6	;RP1=1, select bank3
 12570  0B40  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 12571  0B41  120A  118A  2052  120A  158A  	fcall	fptable
 12572  0B46                     l7289:
 12573                           
 12574                           ;main.c: 564:                             estado = 52;
 12575  0B46  3034               	movlw	52
 12576  0B47  1283               	bcf	3,5	;RP0=0, select bank0
 12577  0B48  1303               	bcf	3,6	;RP1=0, select bank0
 12578  0B49  00C4               	movwf	??_main
 12579  0B4A  0844               	movf	??_main,w
 12580  0B4B  1683               	bsf	3,5	;RP0=1, select bank3
 12581  0B4C  1703               	bsf	3,6	;RP1=1, select bank3
 12582  0B4D  00E0               	movwf	main@estado^(0+384)
 12583                           
 12584                           ;main.c: 565:                             break;
 12585  0B4E  2E60               	goto	l7429
 12586  0B4F                     l7291:
 12587                           
 12588                           ;main.c: 568:                             IHM.print("    DESEJA SALVAR\n"
 12589  0B4F  30F2               	movlw	low (STR_16| (0+32768))
 12590  0B50  00A8               	movwf	dispLCD_str@str
 12591  0B51  3090               	movlw	high (STR_16| (0+32768))
 12592  0B52  00A9               	movwf	dispLCD_str@str+1
 12593  0B53  1683               	bsf	3,5	;RP0=1, select bank3
 12594  0B54  1703               	bsf	3,6	;RP1=1, select bank3
 12595  0B55  0863               	movf	(low ((_IHM| (0+256)+1)))^(0+128),w
 12596  0B56  120A  118A  2052  120A  158A  	fcall	fptable
 12597  0B5B                     l7293:
 12598                           
 12599                           ;main.c: 572:                             tecla = teclado_borda();
 12600  0B5B  160A  158A  248D  120A  158A  	fcall	_teclado_borda
 12601  0B60  1283               	bcf	3,5	;RP0=0, select bank0
 12602  0B61  1303               	bcf	3,6	;RP1=0, select bank0
 12603  0B62  00C4               	movwf	??_main
 12604  0B63  0844               	movf	??_main,w
 12605  0B64  1683               	bsf	3,5	;RP0=1, select bank3
 12606  0B65  1703               	bsf	3,6	;RP1=1, select bank3
 12607  0B66  00E1               	movwf	main@tecla^(0+384)
 12608                           
 12609                           ;main.c: 573:                             switch(tecla)
 12610  0B67  2B75               	goto	l7303
 12611  0B68                     l7295:
 12612  0B68  304B               	movlw	75
 12613  0B69  00C4               	movwf	??_main
 12614  0B6A  0844               	movf	??_main,w
 12615  0B6B  1683               	bsf	3,5	;RP0=1, select bank3
 12616  0B6C  1703               	bsf	3,6	;RP1=1, select bank3
 12617  0B6D  00E0               	movwf	main@estado^(0+384)
 12618  0B6E  2E60               	goto	l7429
 12619  0B6F                     l7297:
 12620  0B6F  160A  158A  2329  120A  158A  	fcall	_dispLCD_clr
 12621  0B74  2AC4               	goto	l765
 12622  0B75                     l7303:
 12623  0B75  0861               	movf	main@tecla^(0+384),w
 12624  0B76  1283               	bcf	3,5	;RP0=0, select bank0
 12625  0B77  1303               	bcf	3,6	;RP1=0, select bank0
 12626  0B78  00C4               	movwf	??_main
 12627  0B79  01C5               	clrf	??_main+1
 12628                           
 12629                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12630                           ; Switch size 1, requested type "simple"
 12631                           ; Number of cases is 1, Range of values is 0 to 0
 12632                           ; switch strategies available:
 12633                           ; Name         Instructions Cycles
 12634                           ; simple_byte            4     3 (average)
 12635                           ; direct_byte           11     8 (fixed)
 12636                           ; jumptable            260     6 (fixed)
 12637                           ;	Chosen strategy is simple_byte
 12638  0B7A  0845               	movf	??_main+1,w
 12639  0B7B  3A00               	xorlw	0	; case 0
 12640  0B7C  1903               	skipnz
 12641  0B7D  2B7F               	goto	l8071
 12642  0B7E  2E60               	goto	l7429
 12643  0B7F                     l8071:
 12644                           
 12645                           ; Switch size 1, requested type "simple"
 12646                           ; Number of cases is 2, Range of values is 35 to 42
 12647                           ; switch strategies available:
 12648                           ; Name         Instructions Cycles
 12649                           ; simple_byte            7     4 (average)
 12650                           ; direct_byte           35    11 (fixed)
 12651                           ; jumptable            263     9 (fixed)
 12652                           ;	Chosen strategy is simple_byte
 12653  0B7F  0844               	movf	??_main,w
 12654  0B80  3A23               	xorlw	35	; case 35
 12655  0B81  1903               	skipnz
 12656  0B82  2B68               	goto	l7295
 12657  0B83  3A09               	xorlw	9	; case 42
 12658  0B84  1903               	skipnz
 12659  0B85  2B6F               	goto	l7297
 12660  0B86  2E60               	goto	l7429
 12661  0B87                     l7305:
 12662                           
 12663                           ;main.c: 581:                             IHM.clr();
 12664  0B87  1683               	bsf	3,5	;RP0=1, select bank3
 12665  0B88  1703               	bsf	3,6	;RP1=1, select bank3
 12666  0B89  0866               	movf	(low ((_IHM| (0+256)+4)))^(0+128),w
 12667  0B8A  120A  118A  2052  120A  158A  	fcall	fptable
 12668  0B8F                     l7307:
 12669                           
 12670                           ;main.c: 582:                             IHM.print(" ESCOLHA A MEMORIA\n"
 12671  0B8F  30A4               	movlw	low (STR_17| (0+32768))
 12672  0B90  1283               	bcf	3,5	;RP0=0, select bank0
 12673  0B91  1303               	bcf	3,6	;RP1=0, select bank0
 12674  0B92  00A8               	movwf	dispLCD_str@str
 12675  0B93  3090               	movlw	high (STR_17| (0+32768))
 12676  0B94  00A9               	movwf	dispLCD_str@str+1
 12677  0B95  1683               	bsf	3,5	;RP0=1, select bank3
 12678  0B96  1703               	bsf	3,6	;RP1=1, select bank3
 12679  0B97  0863               	movf	(low ((_IHM| (0+256)+1)))^(0+128),w
 12680  0B98  120A  118A  2052  120A  158A  	fcall	fptable
 12681  0B9D                     l7309:
 12682                           
 12683                           ;main.c: 586:                             estado = 76;
 12684  0B9D  304C               	movlw	76
 12685  0B9E  1283               	bcf	3,5	;RP0=0, select bank0
 12686  0B9F  1303               	bcf	3,6	;RP1=0, select bank0
 12687  0BA0  00C4               	movwf	??_main
 12688  0BA1  0844               	movf	??_main,w
 12689  0BA2  1683               	bsf	3,5	;RP0=1, select bank3
 12690  0BA3  1703               	bsf	3,6	;RP1=1, select bank3
 12691  0BA4  00E0               	movwf	main@estado^(0+384)
 12692  0BA5                     l7311:
 12693                           
 12694                           ;main.c: 589:                             tecla = teclado_borda();
 12695  0BA5  160A  158A  248D  120A  158A  	fcall	_teclado_borda
 12696  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
 12697  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
 12698  0BAC  00C4               	movwf	??_main
 12699  0BAD  0844               	movf	??_main,w
 12700  0BAE  1683               	bsf	3,5	;RP0=1, select bank3
 12701  0BAF  1703               	bsf	3,6	;RP1=1, select bank3
 12702  0BB0  00E1               	movwf	main@tecla^(0+384)
 12703                           
 12704                           ;main.c: 590:                             switch(tecla)
 12705  0BB1  2C1D               	goto	l7325
 12706  0BB2                     l786:	
 12707                           ;main.c: 595:                                 case '3':
 12708                           
 12709  0BB2                     l7313:
 12710                           
 12711                           ;main.c: 602:                                            salvar_dado(10, tecla % 0x30, i
      +                          nit_cond);
 12712  0BB2  3030               	movlw	48
 12713  0BB3  00A0               	movwf	___awmod@divisor
 12714  0BB4  3000               	movlw	0
 12715  0BB5  00A1               	movwf	___awmod@divisor+1
 12716  0BB6  1683               	bsf	3,5	;RP0=1, select bank3
 12717  0BB7  1703               	bsf	3,6	;RP1=1, select bank3
 12718  0BB8  0861               	movf	main@tecla^(0+384),w
 12719  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
 12720  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
 12721  0BBB  00C4               	movwf	??_main
 12722  0BBC  01C5               	clrf	??_main+1
 12723  0BBD  0844               	movf	??_main,w
 12724  0BBE  00A2               	movwf	___awmod@dividend
 12725  0BBF  0845               	movf	??_main+1,w
 12726  0BC0  00A3               	movwf	___awmod@dividend+1
 12727  0BC1  160A  118A  254D  120A  158A  	fcall	___awmod
 12728  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
 12729  0BC7  1303               	bcf	3,6	;RP1=0, select bank0
 12730  0BC8  0820               	movf	?___awmod,w
 12731  0BC9  00C6               	movwf	??_main+2
 12732  0BCA  0846               	movf	??_main+2,w
 12733  0BCB  00A7               	movwf	salvar_dado@col
 12734  0BCC  1683               	bsf	3,5	;RP0=1, select bank3
 12735  0BCD  1703               	bsf	3,6	;RP1=1, select bank3
 12736  0BCE  0855               	movf	main@init_cond^(0+384),w
 12737  0BCF  1283               	bcf	3,5	;RP0=0, select bank0
 12738  0BD0  1303               	bcf	3,6	;RP1=0, select bank0
 12739  0BD1  00C7               	movwf	??_main+3
 12740  0BD2  0847               	movf	??_main+3,w
 12741  0BD3  00A8               	movwf	salvar_dado@data
 12742  0BD4  300A               	movlw	10
 12743  0BD5  160A  158A  246C  120A  158A  	fcall	_salvar_dado
 12744  0BDA                     l7315:
 12745                           
 12746                           ;main.c: 603:                                            EEPROM.salvar(tecla % 0x30, fif
      +                          o_adrs() + 2);
 12747  0BDA  3030               	movlw	48
 12748  0BDB  1283               	bcf	3,5	;RP0=0, select bank0
 12749  0BDC  1303               	bcf	3,6	;RP1=0, select bank0
 12750  0BDD  00A0               	movwf	___awmod@divisor
 12751  0BDE  3000               	movlw	0
 12752  0BDF  00A1               	movwf	___awmod@divisor+1
 12753  0BE0  1683               	bsf	3,5	;RP0=1, select bank3
 12754  0BE1  1703               	bsf	3,6	;RP1=1, select bank3
 12755  0BE2  0861               	movf	main@tecla^(0+384),w
 12756  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
 12757  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
 12758  0BE5  00C4               	movwf	??_main
 12759  0BE6  01C5               	clrf	??_main+1
 12760  0BE7  0844               	movf	??_main,w
 12761  0BE8  00A2               	movwf	___awmod@dividend
 12762  0BE9  0845               	movf	??_main+1,w
 12763  0BEA  00A3               	movwf	___awmod@dividend+1
 12764  0BEB  160A  118A  254D  120A  158A  	fcall	___awmod
 12765  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
 12766  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
 12767  0BF2  0820               	movf	?___awmod,w
 12768  0BF3  00C6               	movwf	??_main+2
 12769  0BF4  0846               	movf	??_main+2,w
 12770  0BF5  00A7               	movwf	salvar_receita@adrs
 12771  0BF6  160A  158A  2309  120A  158A  	fcall	_fifo_adrs
 12772  0BFB  3E02               	addlw	2
 12773  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
 12774  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
 12775  0BFE  00C7               	movwf	??_main+3
 12776  0BFF  0847               	movf	??_main+3,w
 12777  0C00  00A8               	movwf	salvar_receita@data
 12778  0C01  1683               	bsf	3,5	;RP0=1, select bank3
 12779  0C02  1703               	bsf	3,6	;RP1=1, select bank3
 12780  0C03  0867               	movf	_EEPROM^(0+384),w
 12781  0C04  120A  118A  2052  120A  158A  	fcall	fptable
 12782  0C09                     l7317:
 12783                           
 12784                           ;main.c: 604:                                            estado = 77;
 12785  0C09  304D               	movlw	77
 12786  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
 12787  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
 12788  0C0C  00C4               	movwf	??_main
 12789  0C0D  0844               	movf	??_main,w
 12790  0C0E  1683               	bsf	3,5	;RP0=1, select bank3
 12791  0C0F  1703               	bsf	3,6	;RP1=1, select bank3
 12792  0C10  00E0               	movwf	main@estado^(0+384)
 12793                           
 12794                           ;main.c: 605:                                            break;
 12795  0C11  2E60               	goto	l7429
 12796  0C12                     l7319:
 12797  0C12  1683               	bsf	3,5	;RP0=1, select bank3
 12798  0C13  1703               	bsf	3,6	;RP1=1, select bank3
 12799  0C14  0866               	movf	(low ((_IHM| (0+256)+4)))^(0+128),w
 12800  0C15  120A  118A  2052  120A  158A  	fcall	fptable
 12801  0C1A                     L24:
 12802  0C1A  120A  118A  2C6B   	goto	l7175
 12803  0C1D                     l7325:
 12804  0C1D  0861               	movf	main@tecla^(0+384),w
 12805  0C1E  1283               	bcf	3,5	;RP0=0, select bank0
 12806  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
 12807  0C20  00C4               	movwf	??_main
 12808  0C21  01C5               	clrf	??_main+1
 12809                           
 12810                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12811                           ; Switch size 1, requested type "simple"
 12812                           ; Number of cases is 1, Range of values is 0 to 0
 12813                           ; switch strategies available:
 12814                           ; Name         Instructions Cycles
 12815                           ; simple_byte            4     3 (average)
 12816                           ; direct_byte           11     8 (fixed)
 12817                           ; jumptable            260     6 (fixed)
 12818                           ;	Chosen strategy is simple_byte
 12819  0C22  0845               	movf	??_main+1,w
 12820  0C23  3A00               	xorlw	0	; case 0
 12821  0C24  1903               	skipnz
 12822  0C25  2C27               	goto	l8073
 12823  0C26  2E60               	goto	l7429
 12824  0C27                     l8073:
 12825                           
 12826                           ; Switch size 1, requested type "simple"
 12827                           ; Number of cases is 11, Range of values is 42 to 57
 12828                           ; switch strategies available:
 12829                           ; Name         Instructions Cycles
 12830                           ; simple_byte           34    18 (average)
 12831                           ; direct_byte           59    11 (fixed)
 12832                           ; jumptable            263     9 (fixed)
 12833                           ;	Chosen strategy is simple_byte
 12834  0C27  0844               	movf	??_main,w
 12835  0C28  3A2A               	xorlw	42	; case 42
 12836  0C29  1903               	skipnz
 12837  0C2A  2C12               	goto	l7319
 12838  0C2B  3A1A               	xorlw	26	; case 48
 12839  0C2C  1903               	skipnz
 12840  0C2D  2BB2               	goto	l786
 12841  0C2E  3A01               	xorlw	1	; case 49
 12842  0C2F  1903               	skipnz
 12843  0C30  2BB2               	goto	l786
 12844  0C31  3A03               	xorlw	3	; case 50
 12845  0C32  1903               	skipnz
 12846  0C33  2BB2               	goto	l7313
 12847  0C34  3A01               	xorlw	1	; case 51
 12848  0C35  1903               	skipnz
 12849  0C36  2BB2               	goto	l7313
 12850  0C37  3A07               	xorlw	7	; case 52
 12851  0C38  1903               	skipnz
 12852  0C39  2BB2               	goto	l7313
 12853  0C3A  3A01               	xorlw	1	; case 53
 12854  0C3B  1903               	skipnz
 12855  0C3C  2BB2               	goto	l7313
 12856  0C3D  3A03               	xorlw	3	; case 54
 12857  0C3E  1903               	skipnz
 12858  0C3F  2BB2               	goto	l7313
 12859  0C40  3A01               	xorlw	1	; case 55
 12860  0C41  1903               	skipnz
 12861  0C42  2BB2               	goto	l7313
 12862  0C43  3A0F               	xorlw	15	; case 56
 12863  0C44  1903               	skipnz
 12864  0C45  2BB2               	goto	l7313
 12865  0C46  3A01               	xorlw	1	; case 57
 12866  0C47  1903               	skipnz
 12867  0C48  2BB2               	goto	l7313
 12868  0C49  2E60               	goto	l7429
 12869  0C4A                     l7327:
 12870                           
 12871                           ;main.c: 612:                             IHM.clr();
 12872  0C4A  1683               	bsf	3,5	;RP0=1, select bank3
 12873  0C4B  1703               	bsf	3,6	;RP1=1, select bank3
 12874  0C4C  0866               	movf	(low ((_IHM| (0+256)+4)))^(0+128),w
 12875  0C4D  120A  118A  2052  120A  158A  	fcall	fptable
 12876  0C52                     l7329:
 12877                           
 12878                           ;main.c: 613:                             for(char i = 0; i <= 3; i++)
 12879  0C52  1683               	bsf	3,5	;RP0=1, select bank3
 12880  0C53  1703               	bsf	3,6	;RP1=1, select bank3
 12881  0C54  01D1               	clrf	main@i_906^(0+384)
 12882  0C55                     l7331:
 12883  0C55  3004               	movlw	4
 12884  0C56  0251               	subwf	main@i_906^(0+384),w
 12885  0C57  1C03               	skipc
 12886  0C58  2C5A               	goto	u5131
 12887  0C59  2C5B               	goto	u5130
 12888  0C5A                     u5131:
 12889  0C5A  2C5C               	goto	l7335
 12890  0C5B                     u5130:
 12891  0C5B  2C9B               	goto	l7353
 12892  0C5C                     l7335:
 12893                           
 12894                           ;main.c: 614:                             {;main.c: 615:                                
      +                           for(char j = 0; j <= 19; j++)
 12895  0C5C  01D2               	clrf	main@j_907^(0+384)
 12896  0C5D                     l7337:
 12897  0C5D  3014               	movlw	20
 12898  0C5E  0252               	subwf	main@j_907^(0+384),w
 12899  0C5F  1C03               	skipc
 12900  0C60  2C62               	goto	u5141
 12901  0C61  2C63               	goto	u5140
 12902  0C62                     u5141:
 12903  0C62  2C64               	goto	l7341
 12904  0C63                     u5140:
 12905  0C63  2C92               	goto	l7349
 12906  0C64                     l7341:
 12907                           
 12908                           ;main.c: 616:                                 {;main.c: 617:                            
      +                                   IHM.printpos(i, j, "\377");
 12909  0C64  0851               	movf	main@i_906^(0+384),w
 12910  0C65  1283               	bcf	3,5	;RP0=0, select bank0
 12911  0C66  1303               	bcf	3,6	;RP1=0, select bank0
 12912  0C67  00C4               	movwf	??_main
 12913  0C68  0844               	movf	??_main,w
 12914  0C69  00A8               	movwf	dispLCD@lin
 12915  0C6A  1683               	bsf	3,5	;RP0=1, select bank3
 12916  0C6B  1703               	bsf	3,6	;RP1=1, select bank3
 12917  0C6C  0852               	movf	main@j_907^(0+384),w
 12918  0C6D  1283               	bcf	3,5	;RP0=0, select bank0
 12919  0C6E  1303               	bcf	3,6	;RP1=0, select bank0
 12920  0C6F  00C5               	movwf	??_main+1
 12921  0C70  0845               	movf	??_main+1,w
 12922  0C71  00A9               	movwf	dispLCD@col
 12923  0C72  3044               	movlw	low (STR_1| (0+32768))
 12924  0C73  00AA               	movwf	dispLCD@str
 12925  0C74  3092               	movlw	high (STR_1| (0+32768))
 12926  0C75  00AB               	movwf	dispLCD@str+1
 12927  0C76  1683               	bsf	3,5	;RP0=1, select bank3
 12928  0C77  1703               	bsf	3,6	;RP1=1, select bank3
 12929  0C78  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 12930  0C79  120A  118A  2052  120A  158A  	fcall	fptable
 12931  0C7E                     l7343:
 12932                           
 12933                           ;main.c: 618:                                     delay(10);
 12934  0C7E  300A               	movlw	10
 12935  0C7F  1283               	bcf	3,5	;RP0=0, select bank0
 12936  0C80  1303               	bcf	3,6	;RP1=0, select bank0
 12937  0C81  00A0               	movwf	delay@t
 12938  0C82  3000               	movlw	0
 12939  0C83  00A1               	movwf	delay@t+1
 12940  0C84  120A  158A  2000  120A  158A  	fcall	_delay
 12941  0C89                     l7345:
 12942                           
 12943                           ;main.c: 619:                                 }
 12944  0C89  3001               	movlw	1
 12945  0C8A  1283               	bcf	3,5	;RP0=0, select bank0
 12946  0C8B  1303               	bcf	3,6	;RP1=0, select bank0
 12947  0C8C  00C4               	movwf	??_main
 12948  0C8D  0844               	movf	??_main,w
 12949  0C8E  1683               	bsf	3,5	;RP0=1, select bank3
 12950  0C8F  1703               	bsf	3,6	;RP1=1, select bank3
 12951  0C90  07D2               	addwf	main@j_907^(0+384),f
 12952  0C91  2C5D               	goto	l7337
 12953  0C92                     l7349:
 12954                           
 12955                           ;main.c: 620:                             }
 12956  0C92  3001               	movlw	1
 12957  0C93  1283               	bcf	3,5	;RP0=0, select bank0
 12958  0C94  1303               	bcf	3,6	;RP1=0, select bank0
 12959  0C95  00C4               	movwf	??_main
 12960  0C96  0844               	movf	??_main,w
 12961  0C97  1683               	bsf	3,5	;RP0=1, select bank3
 12962  0C98  1703               	bsf	3,6	;RP1=1, select bank3
 12963  0C99  07D1               	addwf	main@i_906^(0+384),f
 12964  0C9A  2C55               	goto	l7331
 12965  0C9B                     l7353:
 12966                           
 12967                           ;main.c: 622:                             for(char i = 0; i <= 3; i++)
 12968  0C9B  01D3               	clrf	main@i_909^(0+384)
 12969  0C9C                     l7355:
 12970  0C9C  3004               	movlw	4
 12971  0C9D  0253               	subwf	main@i_909^(0+384),w
 12972  0C9E  1C03               	skipc
 12973  0C9F  2CA1               	goto	u5151
 12974  0CA0  2CA2               	goto	u5150
 12975  0CA1                     u5151:
 12976  0CA1  2CA3               	goto	l7359
 12977  0CA2                     u5150:
 12978  0CA2  2CE2               	goto	l7377
 12979  0CA3                     l7359:
 12980                           
 12981                           ;main.c: 623:                             {;main.c: 624:                                
      +                           for(char j = 0; j <= 19; j++)
 12982  0CA3  01D4               	clrf	main@j_910^(0+384)
 12983  0CA4                     l7361:
 12984  0CA4  3014               	movlw	20
 12985  0CA5  0254               	subwf	main@j_910^(0+384),w
 12986  0CA6  1C03               	skipc
 12987  0CA7  2CA9               	goto	u5161
 12988  0CA8  2CAA               	goto	u5160
 12989  0CA9                     u5161:
 12990  0CA9  2CAB               	goto	l7365
 12991  0CAA                     u5160:
 12992  0CAA  2CD9               	goto	l7373
 12993  0CAB                     l7365:
 12994                           
 12995                           ;main.c: 625:                                 {;main.c: 626:                            
      +                                   IHM.printpos(i, j, " ");
 12996  0CAB  0853               	movf	main@i_909^(0+384),w
 12997  0CAC  1283               	bcf	3,5	;RP0=0, select bank0
 12998  0CAD  1303               	bcf	3,6	;RP1=0, select bank0
 12999  0CAE  00C4               	movwf	??_main
 13000  0CAF  0844               	movf	??_main,w
 13001  0CB0  00A8               	movwf	dispLCD@lin
 13002  0CB1  1683               	bsf	3,5	;RP0=1, select bank3
 13003  0CB2  1703               	bsf	3,6	;RP1=1, select bank3
 13004  0CB3  0854               	movf	main@j_910^(0+384),w
 13005  0CB4  1283               	bcf	3,5	;RP0=0, select bank0
 13006  0CB5  1303               	bcf	3,6	;RP1=0, select bank0
 13007  0CB6  00C5               	movwf	??_main+1
 13008  0CB7  0845               	movf	??_main+1,w
 13009  0CB8  00A9               	movwf	dispLCD@col
 13010  0CB9  303E               	movlw	low ((STR_14+19)| (0+32768))
 13011  0CBA  00AA               	movwf	dispLCD@str
 13012  0CBB  3091               	movlw	high ((STR_14+19)| (0+32768))
 13013  0CBC  00AB               	movwf	dispLCD@str+1
 13014  0CBD  1683               	bsf	3,5	;RP0=1, select bank3
 13015  0CBE  1703               	bsf	3,6	;RP1=1, select bank3
 13016  0CBF  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 13017  0CC0  120A  118A  2052  120A  158A  	fcall	fptable
 13018  0CC5                     l7367:
 13019                           
 13020                           ;main.c: 627:                                     delay(10);
 13021  0CC5  300A               	movlw	10
 13022  0CC6  1283               	bcf	3,5	;RP0=0, select bank0
 13023  0CC7  1303               	bcf	3,6	;RP1=0, select bank0
 13024  0CC8  00A0               	movwf	delay@t
 13025  0CC9  3000               	movlw	0
 13026  0CCA  00A1               	movwf	delay@t+1
 13027  0CCB  120A  158A  2000  120A  158A  	fcall	_delay
 13028  0CD0                     l7369:
 13029                           
 13030                           ;main.c: 628:                                 }
 13031  0CD0  3001               	movlw	1
 13032  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
 13033  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
 13034  0CD3  00C4               	movwf	??_main
 13035  0CD4  0844               	movf	??_main,w
 13036  0CD5  1683               	bsf	3,5	;RP0=1, select bank3
 13037  0CD6  1703               	bsf	3,6	;RP1=1, select bank3
 13038  0CD7  07D4               	addwf	main@j_910^(0+384),f
 13039  0CD8  2CA4               	goto	l7361
 13040  0CD9                     l7373:
 13041                           
 13042                           ;main.c: 629:                             }
 13043  0CD9  3001               	movlw	1
 13044  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
 13045  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
 13046  0CDC  00C4               	movwf	??_main
 13047  0CDD  0844               	movf	??_main,w
 13048  0CDE  1683               	bsf	3,5	;RP0=1, select bank3
 13049  0CDF  1703               	bsf	3,6	;RP1=1, select bank3
 13050  0CE0  07D3               	addwf	main@i_909^(0+384),f
 13051  0CE1  2C9C               	goto	l7355
 13052  0CE2                     l7377:
 13053                           
 13054                           ;main.c: 630:                             IHM.printpos(1, 0, "      SEQUENCIA     ");
 13055  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
 13056  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
 13057  0CE4  01A8               	clrf	dispLCD@lin
 13058  0CE5  0AA8               	incf	dispLCD@lin,f
 13059  0CE6  01A9               	clrf	dispLCD@col
 13060  0CE7  3094               	movlw	low (STR_20| (0+32768))
 13061  0CE8  00AA               	movwf	dispLCD@str
 13062  0CE9  3091               	movlw	high (STR_20| (0+32768))
 13063  0CEA  00AB               	movwf	dispLCD@str+1
 13064  0CEB  1683               	bsf	3,5	;RP0=1, select bank3
 13065  0CEC  1703               	bsf	3,6	;RP1=1, select bank3
 13066  0CED  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 13067  0CEE  120A  118A  2052  120A  158A  	fcall	fptable
 13068                           
 13069                           ;main.c: 631:                             IHM.printpos(2, 0, "        SALVA       ");
 13070  0CF3  3002               	movlw	2
 13071  0CF4  1283               	bcf	3,5	;RP0=0, select bank0
 13072  0CF5  1303               	bcf	3,6	;RP1=0, select bank0
 13073  0CF6  00C4               	movwf	??_main
 13074  0CF7  0844               	movf	??_main,w
 13075  0CF8  00A8               	movwf	dispLCD@lin
 13076  0CF9  01A9               	clrf	dispLCD@col
 13077  0CFA  3055               	movlw	low (STR_21| (0+32768))
 13078  0CFB  00AA               	movwf	dispLCD@str
 13079  0CFC  3091               	movlw	high (STR_21| (0+32768))
 13080  0CFD  00AB               	movwf	dispLCD@str+1
 13081  0CFE  1683               	bsf	3,5	;RP0=1, select bank3
 13082  0CFF  1703               	bsf	3,6	;RP1=1, select bank3
 13083  0D00  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 13084  0D01  120A  118A  2052  120A  158A  	fcall	fptable
 13085  0D06                     l7379:
 13086                           
 13087                           ;main.c: 633:                             setT1(1000);
 13088  0D06  3000               	movlw	0
 13089  0D07  1283               	bcf	3,5	;RP0=0, select bank0
 13090  0D08  1303               	bcf	3,6	;RP1=0, select bank0
 13091  0D09  00B0               	movwf	setT1@c+3
 13092  0D0A  3000               	movlw	0
 13093  0D0B  00AF               	movwf	setT1@c+2
 13094  0D0C  3003               	movlw	3
 13095  0D0D  00AE               	movwf	setT1@c+1
 13096  0D0E  30E8               	movlw	232
 13097  0D0F  00AD               	movwf	setT1@c
 13098  0D10  160A  158A  2385  120A  158A  	fcall	_setT1
 13099  0D15                     l7381:
 13100                           
 13101                           ;main.c: 634:                             estado = 78;
 13102  0D15  304E               	movlw	78
 13103  0D16  1283               	bcf	3,5	;RP0=0, select bank0
 13104  0D17  1303               	bcf	3,6	;RP1=0, select bank0
 13105  0D18  00C4               	movwf	??_main
 13106  0D19  0844               	movf	??_main,w
 13107  0D1A  1683               	bsf	3,5	;RP0=1, select bank3
 13108  0D1B  1703               	bsf	3,6	;RP1=1, select bank3
 13109  0D1C  00E0               	movwf	main@estado^(0+384)
 13110                           
 13111                           ;main.c: 635:                             break;
 13112  0D1D  2E60               	goto	l7429
 13113  0D1E                     l7383:
 13114                           
 13115                           ;main.c: 638:                             if(!statusT1())
 13116  0D1E  160A  158A  237A  120A  158A  	fcall	_statusT1
 13117  0D23  1283               	bcf	3,5	;RP0=0, select bank0
 13118  0D24  1303               	bcf	3,6	;RP1=0, select bank0
 13119  0D25  0823               	movf	?_statusT1+3,w
 13120  0D26  0422               	iorwf	?_statusT1+2,w
 13121  0D27  0421               	iorwf	?_statusT1+1,w
 13122  0D28  0420               	iorwf	?_statusT1,w
 13123  0D29  1D03               	skipz
 13124  0D2A  2D2C               	goto	u5171
 13125  0D2B  2D2D               	goto	u5170
 13126  0D2C                     u5171:
 13127  0D2C  2E60               	goto	l7429
 13128  0D2D                     u5170:
 13129  0D2D  2AC4               	goto	l765
 13130  0D2E                     l7387:
 13131                           
 13132                           ;main.c: 643:                             IHM.printpos(2, 0, "config contrl:     %");
 13133  0D2E  3002               	movlw	2
 13134  0D2F  00C4               	movwf	??_main
 13135  0D30  0844               	movf	??_main,w
 13136  0D31  00A8               	movwf	dispLCD@lin
 13137  0D32  01A9               	clrf	dispLCD@col
 13138  0D33  3012               	movlw	low (STR_22| (0+32768))
 13139  0D34  00AA               	movwf	dispLCD@str
 13140  0D35  3092               	movlw	high (STR_22| (0+32768))
 13141  0D36  00AB               	movwf	dispLCD@str+1
 13142  0D37  1683               	bsf	3,5	;RP0=1, select bank3
 13143  0D38  1703               	bsf	3,6	;RP1=1, select bank3
 13144  0D39  0864               	movf	(low ((_IHM| (0+256)+2)))^(0+128),w
 13145  0D3A  120A  118A  2052  120A  158A  	fcall	fptable
 13146                           
 13147                           ;main.c: 644:                             IHM.printv(2, 15, num, 3);
 13148  0D3F  3002               	movlw	2
 13149  0D40  1283               	bcf	3,5	;RP0=0, select bank0
 13150  0D41  1303               	bcf	3,6	;RP1=0, select bank0
 13151  0D42  00C4               	movwf	??_main
 13152  0D43  0844               	movf	??_main,w
 13153  0D44  00AD               	movwf	dispLCD_num@lin
 13154  0D45  300F               	movlw	15
 13155  0D46  00C5               	movwf	??_main+1
 13156  0D47  0845               	movf	??_main+1,w
 13157  0D48  00AE               	movwf	dispLCD_num@col
 13158  0D49  1683               	bsf	3,5	;RP0=1, select bank3
 13159  0D4A  1703               	bsf	3,6	;RP1=1, select bank3
 13160  0D4B  085F               	movf	(main@num+1)^(0+384),w
 13161  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
 13162  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
 13163  0D4E  00B0               	movwf	dispLCD_num@num+1
 13164  0D4F  1683               	bsf	3,5	;RP0=1, select bank3
 13165  0D50  1703               	bsf	3,6	;RP1=1, select bank3
 13166  0D51  085E               	movf	main@num^(0+384),w
 13167  0D52  1283               	bcf	3,5	;RP0=0, select bank0
 13168  0D53  1303               	bcf	3,6	;RP1=0, select bank0
 13169  0D54  00AF               	movwf	dispLCD_num@num
 13170  0D55  3003               	movlw	3
 13171  0D56  00C6               	movwf	??_main+2
 13172  0D57  0846               	movf	??_main+2,w
 13173  0D58  00B1               	movwf	dispLCD_num@tam
 13174  0D59  1683               	bsf	3,5	;RP0=1, select bank3
 13175  0D5A  1703               	bsf	3,6	;RP1=1, select bank3
 13176  0D5B  0865               	movf	(low ((_IHM| (0+256)+3)))^(0+128),w
 13177  0D5C  120A  118A  2052  120A  158A  	fcall	fptable
 13178  0D61                     l7389:
 13179                           
 13180                           ;main.c: 645:                             estado = 91;
 13181  0D61  305B               	movlw	91
 13182  0D62  1283               	bcf	3,5	;RP0=0, select bank0
 13183  0D63  1303               	bcf	3,6	;RP1=0, select bank0
 13184  0D64  00C4               	movwf	??_main
 13185  0D65  0844               	movf	??_main,w
 13186  0D66  1683               	bsf	3,5	;RP0=1, select bank3
 13187  0D67  1703               	bsf	3,6	;RP1=1, select bank3
 13188  0D68  00E0               	movwf	main@estado^(0+384)
 13189                           
 13190                           ;main.c: 646:                             break;
 13191  0D69  2E60               	goto	l7429
 13192  0D6A                     l7391:
 13193                           
 13194                           ;main.c: 649:                             tecla = teclado_borda();
 13195  0D6A  160A  158A  248D  120A  158A  	fcall	_teclado_borda
 13196  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
 13197  0D70  1303               	bcf	3,6	;RP1=0, select bank0
 13198  0D71  00C4               	movwf	??_main
 13199  0D72  0844               	movf	??_main,w
 13200  0D73  1683               	bsf	3,5	;RP0=1, select bank3
 13201  0D74  1703               	bsf	3,6	;RP1=1, select bank3
 13202  0D75  00E1               	movwf	main@tecla^(0+384)
 13203  0D76                     l7393:
 13204                           
 13205                           ;main.c: 650:                             if(tecla >= '0' && tecla <= '9')
 13206  0D76  3030               	movlw	48
 13207  0D77  0261               	subwf	main@tecla^(0+384),w
 13208  0D78  1C03               	skipc
 13209  0D79  2D7B               	goto	u5181
 13210  0D7A  2D7C               	goto	u5180
 13211  0D7B                     u5181:
 13212  0D7B  2DA7               	goto	l7403
 13213  0D7C                     u5180:
 13214  0D7C                     l7395:
 13215  0D7C  303A               	movlw	58
 13216  0D7D  0261               	subwf	main@tecla^(0+384),w
 13217  0D7E  1803               	skipnc
 13218  0D7F  2D81               	goto	u5191
 13219  0D80  2D82               	goto	u5190
 13220  0D81                     u5191:
 13221  0D81  2DA7               	goto	l7403
 13222  0D82                     u5190:
 13223  0D82                     l7397:
 13224                           
 13225                           ;main.c: 651:                             {;main.c: 652:                                
      +                           dignum_conc(tecla, &num);
 13226  0D82  30DE               	movlw	(low (main@num| (0+256)))& (0+255)
 13227  0D83  1283               	bcf	3,5	;RP0=0, select bank0
 13228  0D84  1303               	bcf	3,6	;RP1=0, select bank0
 13229  0D85  00C4               	movwf	??_main
 13230  0D86  0844               	movf	??_main,w
 13231  0D87  00A6               	movwf	dignum_conc@ptrNum
 13232  0D88  1683               	bsf	3,5	;RP0=1, select bank3
 13233  0D89  1703               	bsf	3,6	;RP1=1, select bank3
 13234  0D8A  0861               	movf	main@tecla^(0+384),w
 13235  0D8B  160A  158A  26DA  120A  158A  	fcall	_dignum_conc
 13236  0D90                     l7399:
 13237                           
 13238                           ;main.c: 653:                                 if(num > 100)
 13239  0D90  3000               	movlw	0
 13240  0D91  1683               	bsf	3,5	;RP0=1, select bank3
 13241  0D92  1703               	bsf	3,6	;RP1=1, select bank3
 13242  0D93  025F               	subwf	(main@num+1)^(0+384),w
 13243  0D94  3065               	movlw	101
 13244  0D95  1903               	skipnz
 13245  0D96  025E               	subwf	main@num^(0+384),w
 13246  0D97  1C03               	skipc
 13247  0D98  2D9A               	goto	u5201
 13248  0D99  2D9B               	goto	u5200
 13249  0D9A                     u5201:
 13250  0D9A  2D9F               	goto	l809
 13251  0D9B                     u5200:
 13252  0D9B                     l7401:
 13253                           
 13254                           ;main.c: 654:                                     num = 100;
 13255  0D9B  3064               	movlw	100
 13256  0D9C  00DE               	movwf	main@num^(0+384)
 13257  0D9D  3000               	movlw	0
 13258  0D9E  00DF               	movwf	(main@num^(0+384)+1)
 13259  0D9F                     l809:
 13260                           
 13261                           ;main.c: 655:                                 estado = 90;
 13262  0D9F  305A               	movlw	90
 13263  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
 13264  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
 13265  0DA2  00C4               	movwf	??_main
 13266  0DA3  0844               	movf	??_main,w
 13267  0DA4  1683               	bsf	3,5	;RP0=1, select bank3
 13268  0DA5  1703               	bsf	3,6	;RP1=1, select bank3
 13269  0DA6  00E0               	movwf	main@estado^(0+384)
 13270  0DA7                     l7403:
 13271                           
 13272                           ;main.c: 657:                             if(tecla == '*')
 13273  0DA7  302A               	movlw	42
 13274  0DA8  0661               	xorwf	main@tecla^(0+384),w
 13275  0DA9  1D03               	btfss	3,2
 13276  0DAA  2DAC               	goto	u5211
 13277  0DAB  2DAD               	goto	u5210
 13278  0DAC                     u5211:
 13279  0DAC  2DBB               	goto	l7409
 13280  0DAD                     u5210:
 13281  0DAD                     l7405:
 13282                           
 13283                           ;main.c: 658:                             {;main.c: 659:                                
      +                           dignum_apagar(&num);
 13284  0DAD  30DE               	movlw	(low (main@num| (0+256)))& (0+255)
 13285  0DAE  160A  158A  244D  120A  158A  	fcall	_dignum_apagar
 13286  0DB3                     l7407:
 13287                           
 13288                           ;main.c: 660:                                 estado = 90;
 13289  0DB3  305A               	movlw	90
 13290  0DB4  1283               	bcf	3,5	;RP0=0, select bank0
 13291  0DB5  1303               	bcf	3,6	;RP1=0, select bank0
 13292  0DB6  00C4               	movwf	??_main
 13293  0DB7  0844               	movf	??_main,w
 13294  0DB8  1683               	bsf	3,5	;RP0=1, select bank3
 13295  0DB9  1703               	bsf	3,6	;RP1=1, select bank3
 13296  0DBA  00E0               	movwf	main@estado^(0+384)
 13297  0DBB                     l7409:
 13298                           
 13299                           ;main.c: 662:                             if(tecla == '#')
 13300  0DBB  3023               	movlw	35
 13301  0DBC  0661               	xorwf	main@tecla^(0+384),w
 13302  0DBD  1D03               	btfss	3,2
 13303  0DBE  2DC0               	goto	u5221
 13304  0DBF  2DC1               	goto	u5220
 13305  0DC0                     u5221:
 13306  0DC0  2E60               	goto	l7429
 13307  0DC1                     u5220:
 13308  0DC1                     l7411:
 13309                           
 13310                           ;main.c: 663:                                 estado = 92;
 13311  0DC1  305C               	movlw	92
 13312  0DC2  1283               	bcf	3,5	;RP0=0, select bank0
 13313  0DC3  1303               	bcf	3,6	;RP1=0, select bank0
 13314  0DC4  00C4               	movwf	??_main
 13315  0DC5  0844               	movf	??_main,w
 13316  0DC6  1683               	bsf	3,5	;RP0=1, select bank3
 13317  0DC7  1703               	bsf	3,6	;RP1=1, select bank3
 13318  0DC8  00E0               	movwf	main@estado^(0+384)
 13319  0DC9  2E60               	goto	l7429
 13320  0DCA                     l7413:
 13321                           
 13322                           ;main.c: 667:                             fifo_add_control(num);
 13323  0DCA  1683               	bsf	3,5	;RP0=1, select bank3
 13324  0DCB  1703               	bsf	3,6	;RP1=1, select bank3
 13325  0DCC  085E               	movf	main@num^(0+384),w
 13326  0DCD  160A  158A  253E  120A  158A  	fcall	_fifo_add_control
 13327  0DD2  2A84               	goto	l7251
 13328  0DD3                     l7419:
 13329                           
 13330                           ;main.c: 673:                             fifo_add_ciclo(ciclos);
 13331  0DD3  1683               	bsf	3,5	;RP0=1, select bank3
 13332  0DD4  1703               	bsf	3,6	;RP1=1, select bank3
 13333  0DD5  085A               	movf	(main@ciclos+1)^(0+384),w
 13334  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
 13335  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
 13336  0DD8  00A1               	movwf	fifo_add_ciclo@ciclos+1
 13337  0DD9  1683               	bsf	3,5	;RP0=1, select bank3
 13338  0DDA  1703               	bsf	3,6	;RP1=1, select bank3
 13339  0DDB  0859               	movf	main@ciclos^(0+384),w
 13340  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
 13341  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
 13342  0DDE  00A0               	movwf	fifo_add_ciclo@ciclos
 13343  0DDF  160A  158A  2359  120A  158A  	fcall	_fifo_add_ciclo
 13344  0DE4                     l7421:
 13345                           
 13346                           ;main.c: 674:                             estado = 30;
 13347  0DE4  301E               	movlw	30
 13348  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
 13349  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
 13350  0DE7  00C4               	movwf	??_main
 13351  0DE8  0844               	movf	??_main,w
 13352  0DE9  1683               	bsf	3,5	;RP0=1, select bank3
 13353  0DEA  1703               	bsf	3,6	;RP1=1, select bank3
 13354  0DEB  00E0               	movwf	main@estado^(0+384)
 13355  0DEC  29A7               	goto	l750
 13356  0DED                     l616:
 13357  0DED                     l7427:
 13358  0DED  1683               	bsf	3,5	;RP0=1, select bank3
 13359  0DEE  1703               	bsf	3,6	;RP1=1, select bank3
 13360  0DEF  0860               	movf	main@estado^(0+384),w
 13361  0DF0  1283               	bcf	3,5	;RP0=0, select bank0
 13362  0DF1  1303               	bcf	3,6	;RP1=0, select bank0
 13363  0DF2  00C4               	movwf	??_main
 13364  0DF3  01C5               	clrf	??_main+1
 13365                           
 13366                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13367                           ; Switch size 1, requested type "simple"
 13368                           ; Number of cases is 1, Range of values is 0 to 0
 13369                           ; switch strategies available:
 13370                           ; Name         Instructions Cycles
 13371                           ; simple_byte            4     3 (average)
 13372                           ; direct_byte           11     8 (fixed)
 13373                           ; jumptable            260     6 (fixed)
 13374                           ;	Chosen strategy is simple_byte
 13375  0DF4  0845               	movf	??_main+1,w
 13376  0DF5  3A00               	xorlw	0	; case 0
 13377  0DF6  1903               	skipnz
 13378  0DF7  2DF9               	goto	l8075
 13379  0DF8  2E60               	goto	l7429
 13380  0DF9                     l8075:
 13381                           
 13382                           ; Switch size 1, requested type "simple"
 13383                           ; Number of cases is 31, Range of values is 0 to 92
 13384                           ; switch strategies available:
 13385                           ; Name         Instructions Cycles
 13386                           ; simple_byte           94    48 (average)
 13387                           ; jumptable            260     6 (fixed)
 13388                           ;	Chosen strategy is simple_byte
 13389  0DF9  0844               	movf	??_main,w
 13390  0DFA  3A00               	xorlw	0	; case 0
 13391  0DFB  1903               	skipnz
 13392  0DFC  2FD6               	goto	L6
 13393  0DFD  3A01               	xorlw	1	; case 1
 13394  0DFE  1903               	skipnz
 13395  0DFF  2FD0               	goto	L1
 13396  0E00  3A03               	xorlw	3	; case 2
 13397  0E01  1903               	skipnz
 13398  0E02  2FE5               	goto	L17
 13399  0E03  3A01               	xorlw	1	; case 3
 13400  0E04  1903               	skipnz
 13401  0E05  2FD9               	goto	L8
 13402  0E06  3A05               	xorlw	5	; case 6
 13403  0E07  120A  118A  1903   	skipnz
 13404  0E0A  2E92  120A  158A   	goto	l7051
 13405  0E0D  3A01               	xorlw	1	; case 7
 13406  0E0E  1903               	skipnz
 13407  0E0F  2FF7               	goto	L32
 13408  0E10  3A0F               	xorlw	15	; case 8
 13409  0E11  1903               	skipnz
 13410  0E12  2FE8               	goto	L19
 13411  0E13  3A01               	xorlw	1	; case 9
 13412  0E14  1903               	skipnz
 13413  0E15  2FDC               	goto	L10
 13414  0E16  3A03               	xorlw	3	; case 10
 13415  0E17  120A  118A  1903   	skipnz
 13416  0E1A  2BCF  120A  158A   	goto	l7137
 13417  0E1D  3A01               	xorlw	1	; case 11
 13418  0E1E  1903               	skipnz
 13419  0E1F  2FFA               	goto	L34
 13420  0E20  3A05               	xorlw	5	; case 14
 13421  0E21  1903               	skipnz
 13422  0E22  2865               	goto	l7189
 13423  0E23  3A1E               	xorlw	30	; case 16
 13424  0E24  1903               	skipnz
 13425  0E25  285D               	goto	l7185
 13426  0E26  3A0E               	xorlw	14	; case 30
 13427  0E27  1903               	skipnz
 13428  0E28  28C3               	goto	l7193
 13429  0E29  3A36               	xorlw	54	; case 40
 13430  0E2A  1903               	skipnz
 13431  0E2B  29E0               	goto	l7223
 13432  0E2C  3A01               	xorlw	1	; case 41
 13433  0E2D  1903               	skipnz
 13434  0E2E  2A40               	goto	l7245
 13435  0E2F  3A03               	xorlw	3	; case 42
 13436  0E30  1903               	skipnz
 13437  0E31  2A7C               	goto	l7249
 13438  0E32  3A1E               	xorlw	30	; case 52
 13439  0E33  1903               	skipnz
 13440  0E34  2A8F               	goto	l7255
 13441  0E35  3A01               	xorlw	1	; case 53
 13442  0E36  1903               	skipnz
 13443  0E37  2AFC               	goto	l7281
 13444  0E38  3A03               	xorlw	3	; case 54
 13445  0E39  1903               	skipnz
 13446  0E3A  2DD3               	goto	l7419
 13447  0E3B  3A70               	xorlw	112	; case 70
 13448  0E3C  1903               	skipnz
 13449  0E3D  28CC               	goto	l7197
 13450  0E3E  3A01               	xorlw	1	; case 71
 13451  0E3F  1903               	skipnz
 13452  0E40  2FFD               	goto	L36
 13453  0E41  3A0F               	xorlw	15	; case 72
 13454  0E42  1903               	skipnz
 13455  0E43  2FEB               	goto	L21
 13456  0E44  3A01               	xorlw	1	; case 73
 13457  0E45  1903               	skipnz
 13458  0E46  2FDF               	goto	L12
 13459  0E47  3A03               	xorlw	3	; case 74
 13460  0E48  1903               	skipnz
 13461  0E49  2B4F               	goto	l7291
 13462  0E4A  3A01               	xorlw	1	; case 75
 13463  0E4B  1903               	skipnz
 13464  0E4C  2B87               	goto	l7305
 13465  0E4D  3A07               	xorlw	7	; case 76
 13466  0E4E  1903               	skipnz
 13467  0E4F  2BA5               	goto	l7311
 13468  0E50  3A01               	xorlw	1	; case 77
 13469  0E51  1903               	skipnz
 13470  0E52  2C4A               	goto	l7327
 13471  0E53  3A03               	xorlw	3	; case 78
 13472  0E54  1903               	skipnz
 13473  0E55  2D1E               	goto	l7383
 13474  0E56  3A14               	xorlw	20	; case 90
 13475  0E57  1903               	skipnz
 13476  0E58  2D2E               	goto	l7387
 13477  0E59  3A01               	xorlw	1	; case 91
 13478  0E5A  1903               	skipnz
 13479  0E5B  2D6A               	goto	l7391
 13480  0E5C  3A07               	xorlw	7	; case 92
 13481  0E5D  1903               	skipnz
 13482  0E5E  2DCA               	goto	l7413
 13483  0E5F  2E60               	goto	l7429
 13484  0E60                     l7429:
 13485                           
 13486                           ;main.c: 679:         serialIOscan();
 13487  0E60  160A  118A  22BC  120A  158A  	fcall	_serialIOscan
 13488                           
 13489                           ;main.c: 681:         switch(meAtuadores)
 13490  0E65  2FA4               	goto	l7489
 13491  0E66                     l7431:
 13492                           
 13493                           ;main.c: 686:                             resetIndicePassos();
 13494  0E66  160A  158A  2337  120A  158A  	fcall	_resetIndicePassos
 13495  0E6B                     l7433:
 13496                           
 13497                           ;main.c: 687:                             resetContCiclos();
 13498  0E6B  160A  158A  2311  120A  158A  	fcall	_resetContCiclos
 13499                           
 13500                           ;main.c: 688:                             meAtuadores = 2;
 13501  0E70  3002               	movlw	2
 13502  0E71  1283               	bcf	3,5	;RP0=0, select bank0
 13503  0E72  1303               	bcf	3,6	;RP1=0, select bank0
 13504  0E73  00C4               	movwf	??_main
 13505  0E74  0844               	movf	??_main,w
 13506  0E75  1683               	bsf	3,5	;RP0=1, select bank3
 13507  0E76  1703               	bsf	3,6	;RP1=1, select bank3
 13508  0E77  00D8               	movwf	main@meAtuadores^(0+384)
 13509                           
 13510                           ;main.c: 689:                             break;
 13511  0E78  2DED               	goto	l7427
 13512  0E79                     l7435:
 13513                           
 13514                           ;main.c: 692:                             auxPasso = fifo_lerPos(getIndicePassos());
 13515  0E79  160A  158A  230D  120A  158A  	fcall	_getIndicePassos
 13516  0E7E  160A  158A  2346  120A  158A  	fcall	_fifo_lerPos
 13517  0E83  1283               	bcf	3,5	;RP0=0, select bank0
 13518  0E84  1303               	bcf	3,6	;RP1=0, select bank0
 13519  0E85  00C4               	movwf	??_main
 13520  0E86  0844               	movf	??_main,w
 13521  0E87  1683               	bsf	3,5	;RP0=1, select bank3
 13522  0E88  1703               	bsf	3,6	;RP1=1, select bank3
 13523  0E89  00D6               	movwf	main@auxPasso^(0+384)
 13524  0E8A                     l7437:
 13525                           
 13526                           ;main.c: 694:                             if(botao == 1 || botao == 3 || botao == 0)
 13527  0E8A  035C               	decf	main@botao^(0+384),w
 13528  0E8B  1903               	btfsc	3,2
 13529  0E8C  2E8E               	goto	u5231
 13530  0E8D  2E8F               	goto	u5230
 13531  0E8E                     u5231:
 13532  0E8E  2E9A               	goto	l7443
 13533  0E8F                     u5230:
 13534  0E8F                     l7439:
 13535  0E8F  3003               	movlw	3
 13536  0E90  065C               	xorwf	main@botao^(0+384),w
 13537  0E91  1903               	btfsc	3,2
 13538  0E92  2E94               	goto	u5241
 13539  0E93  2E95               	goto	u5240
 13540  0E94                     u5241:
 13541  0E94  2E9A               	goto	l7443
 13542  0E95                     u5240:
 13543  0E95                     l7441:
 13544  0E95  085C               	movf	main@botao^(0+384),w
 13545  0E96  1D03               	btfss	3,2
 13546  0E97  2E99               	goto	u5251
 13547  0E98  2E9A               	goto	u5250
 13548  0E99                     u5251:
 13549  0E99  2DED               	goto	l616
 13550  0E9A                     u5250:
 13551  0E9A                     l7443:
 13552                           
 13553                           ;main.c: 695:                                 meAtuadores = 3;
 13554  0E9A  3003               	movlw	3
 13555  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
 13556  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
 13557  0E9D  00C4               	movwf	??_main
 13558  0E9E  0844               	movf	??_main,w
 13559  0E9F  1683               	bsf	3,5	;RP0=1, select bank3
 13560  0EA0  1703               	bsf	3,6	;RP1=1, select bank3
 13561  0EA1  00D8               	movwf	main@meAtuadores^(0+384)
 13562  0EA2  2DED               	goto	l7427
 13563  0EA3                     l822:	
 13564                           ;main.c: 698:             case 3:
 13565                           
 13566                           
 13567                           ;main.c: 699:                             if(auxPasso & 0x80)
 13568  0EA3  1683               	bsf	3,5	;RP0=1, select bank3
 13569  0EA4  1703               	bsf	3,6	;RP1=1, select bank3
 13570  0EA5  1FD6               	btfss	main@auxPasso^(0+384),7
 13571  0EA6  2EA8               	goto	u5261
 13572  0EA7  2EA9               	goto	u5260
 13573  0EA8                     u5261:
 13574  0EA8  2EDE               	goto	l7449
 13575  0EA9                     u5260:
 13576  0EA9                     l7445:
 13577                           
 13578                           ;main.c: 700:                             {;main.c: 701:                                
      +                           setT1( (unsigned long int)(auxPasso & 0x7F) * 1000 );
 13579  0EA9  0856               	movf	main@auxPasso^(0+384),w
 13580  0EAA  397F               	andlw	127
 13581  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
 13582  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
 13583  0EAD  00C4               	movwf	??_main
 13584  0EAE  01C5               	clrf	??_main+1
 13585  0EAF  01C6               	clrf	??_main+2
 13586  0EB0  01C7               	clrf	??_main+3
 13587  0EB1  0847               	movf	??_main+3,w
 13588  0EB2  00A3               	movwf	___lmul@multiplier+3
 13589  0EB3  0846               	movf	??_main+2,w
 13590  0EB4  00A2               	movwf	___lmul@multiplier+2
 13591  0EB5  0845               	movf	??_main+1,w
 13592  0EB6  00A1               	movwf	___lmul@multiplier+1
 13593  0EB7  0844               	movf	??_main,w
 13594  0EB8  00A0               	movwf	___lmul@multiplier
 13595  0EB9  3000               	movlw	0
 13596  0EBA  00A7               	movwf	___lmul@multiplicand+3
 13597  0EBB  3000               	movlw	0
 13598  0EBC  00A6               	movwf	___lmul@multiplicand+2
 13599  0EBD  3003               	movlw	3
 13600  0EBE  00A5               	movwf	___lmul@multiplicand+1
 13601  0EBF  30E8               	movlw	232
 13602  0EC0  00A4               	movwf	___lmul@multiplicand
 13603  0EC1  160A  118A  23B8  120A  158A  	fcall	___lmul
 13604  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
 13605  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
 13606  0EC8  0823               	movf	?___lmul+3,w
 13607  0EC9  00B0               	movwf	setT1@c+3
 13608  0ECA  0822               	movf	?___lmul+2,w
 13609  0ECB  00AF               	movwf	setT1@c+2
 13610  0ECC  0821               	movf	?___lmul+1,w
 13611  0ECD  00AE               	movwf	setT1@c+1
 13612  0ECE  0820               	movf	?___lmul,w
 13613  0ECF  00AD               	movwf	setT1@c
 13614  0ED0  160A  158A  2385  120A  158A  	fcall	_setT1
 13615  0ED5                     l7447:
 13616                           
 13617                           ;main.c: 702:                                 meAtuadores = 4;
 13618  0ED5  3004               	movlw	4
 13619  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
 13620  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
 13621  0ED8  00C4               	movwf	??_main
 13622  0ED9  0844               	movf	??_main,w
 13623  0EDA  1683               	bsf	3,5	;RP0=1, select bank3
 13624  0EDB  1703               	bsf	3,6	;RP1=1, select bank3
 13625  0EDC  00D8               	movwf	main@meAtuadores^(0+384)
 13626                           
 13627                           ;main.c: 703:                             }
 13628  0EDD  2DED               	goto	l7427
 13629  0EDE                     l7449:
 13630                           
 13631                           ;main.c: 705:                             {;main.c: 706:                                
      +                           set_passo(auxPasso, vetorOut);
 13632  0EDE  30DB               	movlw	(low (main@vetorOut| (0+256)))& (0+255)
 13633  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
 13634  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
 13635  0EE1  00C4               	movwf	??_main
 13636  0EE2  0844               	movf	??_main,w
 13637  0EE3  00A0               	movwf	set_passo@ptr
 13638  0EE4  1683               	bsf	3,5	;RP0=1, select bank3
 13639  0EE5  1703               	bsf	3,6	;RP1=1, select bank3
 13640  0EE6  0856               	movf	main@auxPasso^(0+384),w
 13641  0EE7  120A  118A  2798  120A  158A  	fcall	_set_passo
 13642  0EEC                     l7451:
 13643                           
 13644                           ;main.c: 707:                                 meAtuadores = 5;
 13645  0EEC  3005               	movlw	5
 13646  0EED  1283               	bcf	3,5	;RP0=0, select bank0
 13647  0EEE  1303               	bcf	3,6	;RP1=0, select bank0
 13648  0EEF  00C4               	movwf	??_main
 13649  0EF0  0844               	movf	??_main,w
 13650  0EF1  1683               	bsf	3,5	;RP0=1, select bank3
 13651  0EF2  1703               	bsf	3,6	;RP1=1, select bank3
 13652  0EF3  00D8               	movwf	main@meAtuadores^(0+384)
 13653  0EF4  2DED               	goto	l7427
 13654  0EF5                     l7453:
 13655                           
 13656                           ;main.c: 712:                             if(!statusT1())
 13657  0EF5  160A  158A  237A  120A  158A  	fcall	_statusT1
 13658  0EFA  1283               	bcf	3,5	;RP0=0, select bank0
 13659  0EFB  1303               	bcf	3,6	;RP1=0, select bank0
 13660  0EFC  0823               	movf	?_statusT1+3,w
 13661  0EFD  0422               	iorwf	?_statusT1+2,w
 13662  0EFE  0421               	iorwf	?_statusT1+1,w
 13663  0EFF  0420               	iorwf	?_statusT1,w
 13664  0F00  1D03               	skipz
 13665  0F01  2F03               	goto	u5271
 13666  0F02  2F04               	goto	u5270
 13667  0F03                     u5271:
 13668  0F03  2DED               	goto	l616
 13669  0F04                     u5270:
 13670  0F04                     l7455:
 13671                           
 13672                           ;main.c: 713:                                 meAtuadores = 6;
 13673  0F04  3006               	movlw	6
 13674  0F05  1283               	bcf	3,5	;RP0=0, select bank0
 13675  0F06  1303               	bcf	3,6	;RP1=0, select bank0
 13676  0F07  00C4               	movwf	??_main
 13677  0F08  0844               	movf	??_main,w
 13678  0F09  1683               	bsf	3,5	;RP0=1, select bank3
 13679  0F0A  1703               	bsf	3,6	;RP1=1, select bank3
 13680  0F0B  00D8               	movwf	main@meAtuadores^(0+384)
 13681  0F0C  2DED               	goto	l7427
 13682  0F0D                     l7457:
 13683                           
 13684                           ;main.c: 717:                             if(ler_sensor(auxPasso, vetorIn))
 13685  0F0D  30D7               	movlw	(low (main@vetorIn| (0+256)))& (0+255)
 13686  0F0E  00C4               	movwf	??_main
 13687  0F0F  0844               	movf	??_main,w
 13688  0F10  00A0               	movwf	ler_sensor@ptr
 13689  0F11  1683               	bsf	3,5	;RP0=1, select bank3
 13690  0F12  1703               	bsf	3,6	;RP1=1, select bank3
 13691  0F13  0856               	movf	main@auxPasso^(0+384),w
 13692  0F14  160A  118A  249A  120A  158A  	fcall	_ler_sensor
 13693  0F19  3A00               	xorlw	0
 13694  0F1A  1903               	skipnz
 13695  0F1B  2F1D               	goto	u5281
 13696  0F1C  2F1E               	goto	u5280
 13697  0F1D                     u5281:
 13698  0F1D  2DED               	goto	l616
 13699  0F1E                     u5280:
 13700  0F1E  2F04               	goto	l7455
 13701  0F1F                     l7461:
 13702                           
 13703                           ;main.c: 722:                             if(botao == 3)
 13704  0F1F  3003               	movlw	3
 13705  0F20  1683               	bsf	3,5	;RP0=1, select bank3
 13706  0F21  1703               	bsf	3,6	;RP1=1, select bank3
 13707  0F22  065C               	xorwf	main@botao^(0+384),w
 13708  0F23  1D03               	btfss	3,2
 13709  0F24  2F26               	goto	u5291
 13710  0F25  2F27               	goto	u5290
 13711  0F26                     u5291:
 13712  0F26  2F2F               	goto	l830
 13713  0F27                     u5290:
 13714  0F27                     l7463:
 13715                           
 13716                           ;main.c: 723:                             {;main.c: 724:                                
      +                           botao = 2;
 13717  0F27  3002               	movlw	2
 13718  0F28  1283               	bcf	3,5	;RP0=0, select bank0
 13719  0F29  1303               	bcf	3,6	;RP1=0, select bank0
 13720  0F2A  00C4               	movwf	??_main
 13721  0F2B  0844               	movf	??_main,w
 13722  0F2C  1683               	bsf	3,5	;RP0=1, select bank3
 13723  0F2D  1703               	bsf	3,6	;RP1=1, select bank3
 13724  0F2E  00DC               	movwf	main@botao^(0+384)
 13725  0F2F                     l830:	
 13726                           ;main.c: 725:                             }
 13727                           
 13728                           
 13729                           ;main.c: 726:                             meAtuadores = 7;
 13730  0F2F  3007               	movlw	7
 13731  0F30  1283               	bcf	3,5	;RP0=0, select bank0
 13732  0F31  1303               	bcf	3,6	;RP1=0, select bank0
 13733  0F32  00C4               	movwf	??_main
 13734  0F33  0844               	movf	??_main,w
 13735  0F34  1683               	bsf	3,5	;RP0=1, select bank3
 13736  0F35  1703               	bsf	3,6	;RP1=1, select bank3
 13737  0F36  00D8               	movwf	main@meAtuadores^(0+384)
 13738                           
 13739                           ;main.c: 728:                             break;
 13740  0F37  2DED               	goto	l7427
 13741  0F38                     l7465:
 13742                           
 13743                           ;main.c: 731:                             addIndicePassos();
 13744  0F38  120A  118A  27F3  120A  158A  	fcall	_addIndicePassos
 13745  0F3D                     l7467:
 13746                           
 13747                           ;main.c: 732:                             if(getIndicePassos() < fifo_indice())
 13748  0F3D  160A  158A  2314  120A  158A  	fcall	_fifo_indice
 13749  0F42  1283               	bcf	3,5	;RP0=0, select bank0
 13750  0F43  1303               	bcf	3,6	;RP1=0, select bank0
 13751  0F44  00C4               	movwf	??_main
 13752  0F45  160A  158A  230D  120A  158A  	fcall	_getIndicePassos
 13753  0F4A  1283               	bcf	3,5	;RP0=0, select bank0
 13754  0F4B  1303               	bcf	3,6	;RP1=0, select bank0
 13755  0F4C  00C5               	movwf	??_main+1
 13756  0F4D  0844               	movf	??_main,w
 13757  0F4E  0245               	subwf	??_main+1,w
 13758  0F4F  1803               	skipnc
 13759  0F50  2F52               	goto	u5301
 13760  0F51  2F53               	goto	u5300
 13761  0F52                     u5301:
 13762  0F52  2F5C               	goto	l7471
 13763  0F53                     u5300:
 13764  0F53                     l7469:
 13765                           
 13766                           ;main.c: 733:                                 meAtuadores = 2;
 13767  0F53  3002               	movlw	2
 13768  0F54  1283               	bcf	3,5	;RP0=0, select bank0
 13769  0F55  1303               	bcf	3,6	;RP1=0, select bank0
 13770  0F56  00C4               	movwf	??_main
 13771  0F57  0844               	movf	??_main,w
 13772  0F58  1683               	bsf	3,5	;RP0=1, select bank3
 13773  0F59  1703               	bsf	3,6	;RP1=1, select bank3
 13774  0F5A  00D8               	movwf	main@meAtuadores^(0+384)
 13775  0F5B  2DED               	goto	l7427
 13776  0F5C                     l7471:
 13777                           
 13778                           ;main.c: 735:                             {;main.c: 736:                                
      +                           addContCiclos();
 13779  0F5C  160A  158A  2322  120A  158A  	fcall	_addContCiclos
 13780  0F61                     l7473:
 13781                           
 13782                           ;main.c: 737:                                 meAtuadores = 8;
 13783  0F61  3008               	movlw	8
 13784  0F62  1283               	bcf	3,5	;RP0=0, select bank0
 13785  0F63  1303               	bcf	3,6	;RP1=0, select bank0
 13786  0F64  00C4               	movwf	??_main
 13787  0F65  0844               	movf	??_main,w
 13788  0F66  1683               	bsf	3,5	;RP0=1, select bank3
 13789  0F67  1703               	bsf	3,6	;RP1=1, select bank3
 13790  0F68  00D8               	movwf	main@meAtuadores^(0+384)
 13791  0F69  2DED               	goto	l7427
 13792  0F6A                     l7475:
 13793                           
 13794                           ;main.c: 742:                             if((botao != 0) && ((getContCiclos() < getCicl
      +                          os()) || (getCiclos() == 0)))
 13795  0F6A  1683               	bsf	3,5	;RP0=1, select bank3
 13796  0F6B  1703               	bsf	3,6	;RP1=1, select bank3
 13797  0F6C  085C               	movf	main@botao^(0+384),w
 13798  0F6D  1903               	btfsc	3,2
 13799  0F6E  2F70               	goto	u5311
 13800  0F6F  2F71               	goto	u5310
 13801  0F70                     u5311:
 13802  0F70  2FA0               	goto	l7485
 13803  0F71                     u5310:
 13804  0F71                     l7477:
 13805  0F71  160A  158A  2330  120A  158A  	fcall	_getContCiclos
 13806  0F76  1283               	bcf	3,5	;RP0=0, select bank0
 13807  0F77  1303               	bcf	3,6	;RP1=0, select bank0
 13808  0F78  0820               	movf	?_getContCiclos,w
 13809  0F79  00C4               	movwf	??_main
 13810  0F7A  0821               	movf	?_getContCiclos+1,w
 13811  0F7B  00C5               	movwf	??_main+1
 13812  0F7C  160A  158A  242F  120A  158A  	fcall	_getCiclos
 13813  0F81  1283               	bcf	3,5	;RP0=0, select bank0
 13814  0F82  1303               	bcf	3,6	;RP1=0, select bank0
 13815  0F83  0821               	movf	?_getCiclos+1,w
 13816  0F84  0245               	subwf	??_main+1,w
 13817  0F85  1D03               	skipz
 13818  0F86  2F89               	goto	u5325
 13819  0F87  0820               	movf	?_getCiclos,w
 13820  0F88  0244               	subwf	??_main,w
 13821  0F89                     u5325:
 13822  0F89  1C03               	skipc
 13823  0F8A  2F8C               	goto	u5321
 13824  0F8B  2F8D               	goto	u5320
 13825  0F8C                     u5321:
 13826  0F8C  2F9A               	goto	l7481
 13827  0F8D                     u5320:
 13828  0F8D                     l7479:
 13829  0F8D  160A  158A  242F  120A  158A  	fcall	_getCiclos
 13830  0F92  1283               	bcf	3,5	;RP0=0, select bank0
 13831  0F93  1303               	bcf	3,6	;RP1=0, select bank0
 13832  0F94  0820               	movf	?_getCiclos,w
 13833  0F95  0421               	iorwf	?_getCiclos+1,w
 13834  0F96  1D03               	btfss	3,2
 13835  0F97  2F99               	goto	u5331
 13836  0F98  2F9A               	goto	u5330
 13837  0F99                     u5331:
 13838  0F99  2FA0               	goto	l7485
 13839  0F9A                     u5330:
 13840  0F9A                     l7481:
 13841                           
 13842                           ;main.c: 743:                             {;main.c: 744:                                
      +                           resetIndicePassos();
 13843  0F9A  160A  158A  2337  120A  158A  	fcall	_resetIndicePassos
 13844  0F9F  2F53               	goto	l7469
 13845  0FA0                     l7485:
 13846                           
 13847                           ;main.c: 748:                             {;main.c: 749:                                
      +                           meAtuadores = 0;
 13848  0FA0  1683               	bsf	3,5	;RP0=1, select bank3
 13849  0FA1  1703               	bsf	3,6	;RP1=1, select bank3
 13850  0FA2  01D8               	clrf	main@meAtuadores^(0+384)
 13851  0FA3  2DED               	goto	l7427
 13852  0FA4                     l7489:
 13853  0FA4  1683               	bsf	3,5	;RP0=1, select bank3
 13854  0FA5  1703               	bsf	3,6	;RP1=1, select bank3
 13855  0FA6  0858               	movf	main@meAtuadores^(0+384),w
 13856  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
 13857  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
 13858  0FA9  00C4               	movwf	??_main
 13859  0FAA  01C5               	clrf	??_main+1
 13860                           
 13861                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13862                           ; Switch size 1, requested type "simple"
 13863                           ; Number of cases is 1, Range of values is 0 to 0
 13864                           ; switch strategies available:
 13865                           ; Name         Instructions Cycles
 13866                           ; simple_byte            4     3 (average)
 13867                           ; direct_byte           11     8 (fixed)
 13868                           ; jumptable            260     6 (fixed)
 13869                           ;	Chosen strategy is simple_byte
 13870  0FAB  0845               	movf	??_main+1,w
 13871  0FAC  3A00               	xorlw	0	; case 0
 13872  0FAD  1903               	skipnz
 13873  0FAE  2FB0               	goto	l8077
 13874  0FAF  2DED               	goto	l7427
 13875  0FB0                     l8077:
 13876                           
 13877                           ; Switch size 1, requested type "simple"
 13878                           ; Number of cases is 9, Range of values is 0 to 8
 13879                           ; switch strategies available:
 13880                           ; Name         Instructions Cycles
 13881                           ; simple_byte           28    15 (average)
 13882                           ; direct_byte           35     8 (fixed)
 13883                           ; jumptable            260     6 (fixed)
 13884                           ;	Chosen strategy is simple_byte
 13885  0FB0  0844               	movf	??_main,w
 13886  0FB1  3A00               	xorlw	0	; case 0
 13887  0FB2  1903               	skipnz
 13888  0FB3  2DED               	goto	l616
 13889  0FB4  3A01               	xorlw	1	; case 1
 13890  0FB5  1903               	skipnz
 13891  0FB6  2E66               	goto	l7431
 13892  0FB7  3A03               	xorlw	3	; case 2
 13893  0FB8  1903               	skipnz
 13894  0FB9  2E79               	goto	l7435
 13895  0FBA  3A01               	xorlw	1	; case 3
 13896  0FBB  1903               	skipnz
 13897  0FBC  2EA3               	goto	l822
 13898  0FBD  3A07               	xorlw	7	; case 4
 13899  0FBE  1903               	skipnz
 13900  0FBF  2EF5               	goto	l7453
 13901  0FC0  3A01               	xorlw	1	; case 5
 13902  0FC1  1903               	skipnz
 13903  0FC2  2F0D               	goto	l7457
 13904  0FC3  3A03               	xorlw	3	; case 6
 13905  0FC4  1903               	skipnz
 13906  0FC5  2F1F               	goto	l7461
 13907  0FC6  3A01               	xorlw	1	; case 7
 13908  0FC7  1903               	skipnz
 13909  0FC8  2F38               	goto	l7465
 13910  0FC9  3A0F               	xorlw	15	; case 8
 13911  0FCA  1903               	skipnz
 13912  0FCB  2F6A               	goto	l7475
 13913  0FCC  2DED               	goto	l7427
 13914  0FCD  120A  118A  280C   	ljmp	start
 13915  0FD0                     L1:
 13916  0FD0                     __end_of_main:
 13917  0FD0  120A  118A  2E5D   	ljmp	l6941
 13918  0FD3                     L3:
 13919  0FD3                     L2:
 13920  0FD3  120A  118A  28D3   	ljmp	l6965
 13921  0FD6                     L6:
 13922  0FD6                     L5:
 13923  0FD6  120A  118A  2DC8   	ljmp	l6893
 13924  0FD9                     L8:
 13925  0FD9                     L7:
 13926  0FD9  120A  118A  2ADB   	ljmp	l7043
 13927  0FDC                     L10:
 13928  0FDC                     L9:
 13929  0FDC  120A  118A  2905   	ljmp	l6975
 13930  0FDF                     L12:
 13931  0FDF                     L11:
 13932  0FDF  120A  118A  296B   	ljmp	l6995
 13933  0FE2                     L15:
 13934  0FE2                     L14:
 13935  0FE2  120A  118A  2F65   	ljmp	l7097
 13936  0FE5                     L17:
 13937  0FE5                     L16:
 13938  0FE5  120A  118A  28C2   	ljmp	l6963
 13939  0FE8                     L19:
 13940  0FE8                     L18:
 13941  0FE8  120A  118A  28DA   	ljmp	l6967
 13942  0FEB                     L21:
 13943  0FEB                     L20:
 13944  0FEB  120A  118A  294D   	ljmp	l6989
 13945  0FEE                     L26:
 13946  0FEE                     L25:
 13947  0FEE  120A  118A  2C58   	ljmp	l7167
 13948  0FF1                     L28:
 13949  0FF1                     L27:
 13950  0FF1  120A  118A  2C4C   	ljmp	l7159
 13951  0FF4                     L30:
 13952  0FF4                     L29:
 13953  0FF4  120A  118A  2C09   	ljmp	l7147
 13954  0FF7                     L32:
 13955  0FF7                     L31:
 13956  0FF7  120A  118A  2F56   	ljmp	l7095
 13957  0FFA                     L34:
 13958  0FFA                     L33:
 13959  0FFA  120A  118A  2BFA   	ljmp	l7145
 13960  0FFD                     L36:
 13961  0FFD                     L35:
 13962  0FFD  120A  118A  291B   	ljmp	l6979

Data Sizes:
    Strings     582
    Constant    0
    Data        49
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     40      72
    BANK1            80      0      36
    BANK3            96     82      94
    BANK2            96      0       0

Pointer List with Targets:

    S122$3$0	PTR unsigned char  size(1) Largest target is 0

    S122$0$1	PTR unsigned char  size(1) Largest target is 18
		 -> fila(BANK0[18]), 

    S122$1$1	PTR unsigned char  size(1) Largest target is 16
		 -> main@vetor_aux(BANK3[16]), 

    S648$1$0	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_17(CODE[78]), STR_16(CODE[57]), STR_5(CODE[81]), STR_4(CODE[83]), 

    S648$2$2	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_22(CODE[21]), STR_21(CODE[21]), STR_20(CODE[21]), STR_19(CODE[2]), 
		 -> STR_18(CODE[2]), STR_15(CODE[21]), STR_14(CODE[21]), STR_13(CODE[21]), 
		 -> STR_12(CODE[21]), STR_11(CODE[21]), STR_10(CODE[8]), STR_9(CODE[21]), 
		 -> STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), STR_3(CODE[21]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    main@ptr_867	PTR unsigned char  size(1) Largest target is 16
		 -> main@vetor_aux(BANK3[16]), 

    main@pt	PTR unsigned char  size(1) Largest target is 16
		 -> main@vetor_aux(BANK3[16]), 

    main@ptr	PTR unsigned char  size(1) Largest target is 20
		 -> main@lema(BANK3[20]), 

    S648$clr	PTR FTN()void  size(1) Largest target is 1
		 -> dispLCD_clr(), 

    IHM.clr	PTR FTN()void  size(1) Largest target is 1
		 -> dispLCD_clr(), 

    S648$printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD_num(), 

    IHM.printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD_num(), 

    S648$printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD(), 

    IHM.printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD(), 

    S648$print	PTR FTN(PTR const unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD_str(), 

    IHM.print	PTR FTN(PTR const unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD_str(), 

    S648$init	PTR FTN()void  size(1) Largest target is 1
		 -> dispLCD_init(), 

    IHM.init	PTR FTN()void  size(1) Largest target is 1
		 -> dispLCD_init(), 

    initSerialIO@ptrOut	PTR unsigned char  size(1) Largest target is 1
		 -> main@vetorOut(BANK3[1]), 

    initSerialIO@ptrIn	PTR unsigned char  size(1) Largest target is 1
		 -> main@vetorIn(BANK3[1]), 

    ptrSerialOut	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), main@vetorOut(BANK3[1]), 

    ptrSerialIn	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), main@vetorIn(BANK3[1]), 

    dignum_apagar@ptrNum	PTR unsigned int  size(1) Largest target is 2
		 -> main@ciclos(BANK3[2]), main@num(BANK3[2]), 

    dignum_conc@ptrNum	PTR unsigned int  size(1) Largest target is 2
		 -> main@ciclos(BANK3[2]), main@num(BANK3[2]), 

    sp__fifo_adrs	PTR unsigned char  size(1) Largest target is 18
		 -> fila(BANK0[18]), 

    salva_atuadores_init@pt	PTR unsigned char  size(1) Largest target is 4
		 -> salva_atuadores_init@condi_init(BANK0[4]), 

    buscar_dado@data	PTR unsigned char  size(1) Largest target is 1
		 -> main@init_cond(BANK3[1]), 

    buscar_receita@data	PTR unsigned char  size(1) Largest target is 16
		 -> main@vetor_aux(BANK3[16]), 

    salvar_receita@data	PTR unsigned char  size(1) Largest target is 18
		 -> fila(BANK0[18]), 

    S122$formatar	PTR FTN()void  size(1) Largest target is 1
		 -> formatar_receitas(), 

    EEPROM.formatar	PTR FTN()void  size(1) Largest target is 1
		 -> formatar_receitas(), 

    S122$livre	PTR FTN(PTR unsigned char ,)void  size(1) Largest target is 1
		 -> receita_livre(), 

    EEPROM.livre	PTR FTN(PTR unsigned char ,)void  size(1) Largest target is 1
		 -> receita_livre(), 

    S122$deletar	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> deletar_receita(), 

    EEPROM.deletar	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> deletar_receita(), 

    S122$buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(1) Largest target is 1
		 -> buscar_receita(), 

    EEPROM.buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(1) Largest target is 1
		 -> buscar_receita(), 

    S122$salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(1) Largest target is 1
		 -> salvar_receita(), 

    EEPROM.salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(1) Largest target is 1
		 -> salvar_receita(), 

    dispLCD_str@str	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_17(CODE[78]), STR_16(CODE[57]), STR_5(CODE[81]), STR_4(CODE[83]), 

    dispLCD@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_22(CODE[21]), STR_21(CODE[21]), STR_20(CODE[21]), STR_19(CODE[2]), 
		 -> STR_18(CODE[2]), STR_15(CODE[21]), STR_14(CODE[21]), STR_13(CODE[21]), 
		 -> STR_12(CODE[21]), STR_11(CODE[21]), STR_10(CODE[8]), STR_9(CODE[21]), 
		 -> STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), STR_3(CODE[21]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    ler_sensor@ptr	PTR unsigned char  size(1) Largest target is 1
		 -> main@vetorIn(BANK3[1]), 

    set_passo@ptr	PTR unsigned char  size(1) Largest target is 1
		 -> main@vetorOut(BANK3[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _irq in COMMON

    _irq->_intt1_1ms

Critical Paths under _main in BANK0

    _main->_printExec
    _teclado_borda->_teclado_scan
    _setT1->___lmul
    _serialIOscan->_serialIObyteShift
    _salvar_receita->___awmod
    _salvar_dado->___awmod
    _salva_atuadores_init->_ler_atuador
    _printExec->_dispLCD_num
    _posAtual->_fifo_lerPos
    _dispLCD_num->_dignum_tam
    _manipula_atuadores_init->_alt_atuador
    _fifo_print->___awdiv
    _fifo_delete->_fifo_alinharPrint
    _fifo_add_tempo->_fifo_alinharPrint
    _fifo_add_control->_fifo_alinharPrint
    _fifo_add->_fifo_alinharPrint
    _fifo_alinharPrint->_dignum_tam
    _dignum_tam->___awdiv
    _dispLCD_str->_dispLCD_lincol
    _dispLCD_init->_delay
    _dispLCD_clr->_dispLCD_instReg
    _dispLCD->_dispLCD_lincol
    _dispLCD_lincol->_dispLCD_instReg
    _dignum_conc->___wmul
    _dignum_apagar->___lwdiv
    _deletar_receita->___awmod
    _buscar_receita->___awmod
    _buscar_dado->___awmod

Critical Paths under _irq in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _irq in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _irq in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _irq in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                87    87      0   63153
                                             36 BANK0      4     4      0
                                              0 BANK3     82    82      0
                            ___awmod
                             ___lmul
                      _addContCiclos
                    _addIndicePassos
                        _alt_atuador
                        _buscar_dado
                     _buscar_receita *
                              _delay
                    _deletar_receita *
                      _dignum_apagar
                        _dignum_conc
                            _dispLCD *
                        _dispLCD_clr *
                    _dispLCD_dataReg
                       _dispLCD_init
                     _dispLCD_lincol
                        _dispLCD_num *
                        _dispLCD_str *
                           _fifo_add
                     _fifo_add_ciclo
                   _fifo_add_control
                     _fifo_add_tempo
                          _fifo_adrs
                        _fifo_delete
                    _fifo_disponivel
                        _fifo_indice
               _fifo_indicePrint_dec
               _fifo_indicePrint_inc
                        _fifo_lerPos
                         _fifo_print
                           _fifo_tam
                          _getCiclos
                      _getContCiclos
                    _getIndicePassos
                       _initSerialIO
                     _init_atuadores
                        _ler_atuador
                         _ler_sensor
            _manipula_atuadores_init
                          _printExec
                    _resetContCiclos
                  _resetIndicePassos
               _salva_atuadores_init
                        _salvar_dado
                     _salvar_receita *
                       _serialIOscan
                              _setT1
                          _set_passo
                           _statusT1
                      _teclado_borda
                       _teclado_init
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_borda                                        3     3      0     340
                                              7 BANK0      3     3      0
                       _teclado_scan
 ---------------------------------------------------------------------------------
 (2) _teclado_scan                                         7     7      0     204
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _statusT1                                             4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _set_passo                                            4     3      1     369
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _setT1                                                4     0      4     391
                                             13 BANK0      4     0      4
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _serialIOscan                                         6     6      0     300
                                              4 BANK0      6     6      0
                  _serialIObyteShift
                       _serialIOload
 ---------------------------------------------------------------------------------
 (2) _serialIOload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialIObyteShift                                    4     4      0     167
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _salvar_receita                                       7     5      2    1349
                                              7 BANK0      7     5      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
                          _fifo_adrs (ARG)
 ---------------------------------------------------------------------------------
 (1) _salvar_dado                                          7     5      2    1300
                                              7 BANK0      7     5      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _salva_atuadores_init                                 8     8      0     355
                                              3 BANK0      8     8      0
                        _ler_atuador
 ---------------------------------------------------------------------------------
 (2) _ler_atuador                                          3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetIndicePassos                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _resetContCiclos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printExec                                           11    10      1   12668
                                             25 BANK0     11    10      1
                         _dignum_tam
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _dispLCD_num
                           _posAtual
 ---------------------------------------------------------------------------------
 (2) _posAtual                                             3     3      0      99
                                              1 BANK0      3     3      0
                        _fifo_lerPos
                    _getIndicePassos
 ---------------------------------------------------------------------------------
 (3) _getIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fifo_lerPos                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _dispLCD_num                                         12     7      5    8250
                                             13 BANK0     12     7      5
                            ___awdiv
                            ___awmod
                         _dignum_tam (ARG)
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _fifo_indice (ARG)
                           _fifo_tam (ARG)
                      _getContCiclos (ARG)
                    _getIndicePassos (ARG)
 ---------------------------------------------------------------------------------
 (1) _manipula_atuadores_init                              4     4      0     198
                                              3 BANK0      4     4      0
                        _alt_atuador
 ---------------------------------------------------------------------------------
 (1) _ler_sensor                                           4     3      1     369
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_atuadores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSerialIO                                         4     2      2     309
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _getContCiclos                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getCiclos                                            6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _fifo_tam                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_print                                          10    10      0    5753
                                              9 BANK0     10    10      0
                            ___awdiv
                            ___awmod
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1873
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_inc                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_dec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_indice                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_disponivel                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_delete                                          0     0      0    2225
                        _alt_atuador
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _alt_atuador                                          3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _fifo_adrs                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_add_tempo                                       2     2      0    2256
                                             19 BANK0      2     2      0
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_control                                     2     2      0    2256
                                             19 BANK0      2     2      0
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_ciclo                                       3     1      2     152
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add                                             2     2      0    2256
                                             19 BANK0      2     2      0
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _fifo_alinharPrint                                    6     6      0    2194
                                             13 BANK0      6     6      0
                         _dignum_tam
 ---------------------------------------------------------------------------------
 (2) _dignum_tam                                           4     2      2    1897
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1525
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _dispLCD_str                                          5     3      2    2158
                                              8 BANK0      5     3      2
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (1) _dispLCD_init                                         0     0      0     822
                              _delay
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (2) _delay                                                4     2      2     574
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _dispLCD_clr                                          0     0      0     248
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD                                              6     2      4    5439
                                              8 BANK0      6     2      4
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) _dispLCD_lincol                                       5     4      1    1703
                                              3 BANK0      5     4      1
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (4) _dispLCD_instReg                                      3     3      0     248
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _dispLCD_dataReg                                      2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _dignum_conc                                          6     5      1     679
                                              6 BANK0      6     5      1
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     316
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _dignum_apagar                                        1     1      0     591
                                              8 BANK0      1     1      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _deletar_receita                                      6     5      1    1222
                                              7 BANK0      6     5      1
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         2     1      1     422
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _buscar_receita                                       7     5      2     958
                                              7 BANK0      7     5      2
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _buscar_dado                                          7     5      2     909
                                              7 BANK0      7     5      2
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _end_receita                                          4     2      2     571
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _EEPROM_read                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _addIndicePassos                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _addContCiclos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _irq                                                  2     2      0       0
                                              4 COMMON     2     2      0
                          _intt1_1ms
 ---------------------------------------------------------------------------------
 (6) _intt1_1ms                                            4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   ___lmul
   _addContCiclos
   _addIndicePassos
   _alt_atuador
   _buscar_dado
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _buscar_receita *
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _delay *
   _deletar_receita *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
   _dignum_apagar *
     ___lwdiv
   _dignum_conc *
     ___wmul
   _dispLCD *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _dispLCD_clr *
     _dispLCD_instReg
   _dispLCD_dataReg *
   _dispLCD_init *
     _delay
     _dispLCD_instReg
   _dispLCD_lincol *
     _dispLCD_instReg
   _dispLCD_num *
     ___awdiv
     ___awmod
     _dignum_tam (ARG)
       ___awdiv
     _dispLCD_dataReg (ARG)
     _dispLCD_lincol (ARG)
       _dispLCD_instReg
     _fifo_indice (ARG)
     _fifo_tam (ARG)
     _getContCiclos (ARG)
     _getIndicePassos (ARG)
   _dispLCD_str *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_add *
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_ciclo *
   _fifo_add_control *
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_tempo *
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_adrs *
   _fifo_delete *
     _alt_atuador
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_disponivel *
   _fifo_indice *
   _fifo_indicePrint_dec *
   _fifo_indicePrint_inc *
   _fifo_lerPos *
   _fifo_print *
     ___awdiv
     ___awmod
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_tam *
   _getCiclos *
   _getContCiclos *
   _getIndicePassos *
   _initSerialIO *
   _init_atuadores *
   _ler_atuador *
   _ler_sensor *
   _manipula_atuadores_init *
     _alt_atuador
   _printExec *
     _dignum_tam
       ___awdiv
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
     _dispLCD_num
       ___awdiv
       ___awmod
       _dignum_tam (ARG)
         ___awdiv
       _dispLCD_dataReg (ARG)
       _dispLCD_lincol (ARG)
         _dispLCD_instReg
       _fifo_indice (ARG)
       _fifo_tam (ARG)
       _getContCiclos (ARG)
       _getIndicePassos (ARG)
     _posAtual
       _fifo_lerPos
       _getIndicePassos
   _resetContCiclos *
   _resetIndicePassos *
   _salva_atuadores_init *
     _ler_atuador
   _salvar_dado *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
   _salvar_receita *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
     _fifo_adrs (ARG)
   _serialIOscan *
     _serialIObyteShift
     _serialIOload
   _setT1 *
     ___lmul (ARG)
   _set_passo *
   _statusT1 *
   _teclado_borda *
     _teclado_scan
   _teclado_init *
   _timer1_init *

 _irq (ROOT)
   _intt1_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     52      5E       9       97.9%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      24       7       45.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     28      48       5       90.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D6      12        0.0%
ABS                  0      0      D6       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sun Oct 24 16:16:04 2021

              ??_fifo_add_control 0033                  ??_fifo_add_tempo 0033     __size_of_fifo_indicePrint_dec 000B  
   __size_of_fifo_indicePrint_inc 002E                                 pc 0002                                l13 07F2  
                              l18 14F2                                l35 081C                                l60 1F69  
                              l71 1F38                                l57 168F                                l68 1F9A  
                              l92 17B2                                l77 1332                                l94 17FF  
                              l97 1B2F                      ___awdiv@sign 0026           __end_of_dispLCD_dataReg 1F6A  
                              fsr 0004               ___wmul@multiplicand 0022                      printExec@col 0042  
                    printExec@ind 0039                    salvar_dado@col 0027                    salvar_dado@aux 002C  
                             l105 1371                               l132 1BC8                               l300 1B63  
                             l212 1C4C                               l221 1B28                               l141 1BDC  
                             l206 1B0E                               l151 1FCC                               l135 1C28  
                             l303 1B17                               l215 1B36                               l240 1260  
                             l320 1B79                               l137 1C2C                               l241 1267  
                             l209 1B3D                               l401 1B21                               l138 1C2E  
                             l162 1E25                               l242 1284                               l306 1B6E  
                             l218 1B13                               l154 1C8C                               l146 1FFF  
                             l410 1DAD                               l316 1EAB                               l228 1ED9  
                             l252 1540                               l157 1D3D                               l237 1252  
                             l309 1B0C                               l245 1B1C                               l405 1D91  
                             l326 04AF                               l254 154C                               l406 1D9A  
                             l351 1F08                               l239 1259                               l327 0584  
                             l263 1E50                               l271 1B4E                               l407 1D9B  
                             l360 1CD0                               l416 12F6                               l337 0541  
                             l409 1DAB                               l441 1CA8                               l354 1C6B  
                             l370 1499                               l282 1DFB                               l442 1CAD  
                             l426 1B45                               l419 12BB                               l292 1D87  
                             l348 058A                               l436 144B                               l277 1B0A  
                             l373 1BF3                               l199 07FF                               l287 1CF4  
                             l623 0658                               l384 171A                               l616 0DED  
                             l297 1D62                               l481 1B90                               l650 0178  
                             l484 1B84                               l478 1BA1                               l830 0F2F  
                             l822 0EA3                               l750 09A7                               l727 0409  
                             l809 0D9F                               l666 021B                               l941 13FF  
                             l765 0AC4                               l758 0A15                               l927 1DBC  
                             l929 1DD4                               l769 0ACD                               l786 0BB2  
                             _IHM 01E2                deletar_receita@aux 002A                               _irq 1BF4  
         __size_of_buscar_receita 0032                               fsr0 0004                 fp__buscar_receita 0058  
                             indf 0000           __end_of_dispLCD_instReg 1690                      ___awmod@sign 0026  
                 salvar_dado@data 0028                   salvar_dado@adrs 002B                  alt_atuador@tecla 0022  
                    ?_buscar_dado 0027                              l1080 1610                              l1093 15A7  
                            l1199 13B7                              l4031 1417                              l4023 140B  
                            l4033 1426                              l4025 1416                              l4017 1400  
                            l4035 143B                              l4043 144A                              l4019 1404  
                            l4037 143F                              l4039 1445                              l6001 1F7E  
                            l6003 1F91                              l6021 1CC5                              l6101 17A5  
                            l6013 1B49                              l6111 1BC1                              l6023 1CC9  
                            l6031 1550                              l6103 17AC                              l6113 1BC4  
                            l6121 1C15                              l6025 1CCF                              l6017 1CAE  
                            l6201 147B                              l6041 1564                              l6033 1554  
                            l6105 17F2                              l6009 1B0D                              l7001 01D4  
                            l6115 1BC5                              l6107 1BB8                              l6123 1C1F  
                            l6019 1CB2                              l6203 1481                              l6051 157C  
                            l6043 156A                              l6035 1559                              l7011 0212  
                            l7003 01DC                              l6109 1BBB                              l6125 1C22  
                            l6213 1492                              l6205 1487                              l6061 159E  
                            l6053 1586                              l6045 156D                              l6037 155B  
                            l6029 154D                              l6221 1BE0                              l6141 1EB3  
                            l6133 1EAF                              l6301 07BB                              l7101 078B  
                            l7021 0266                              l7013 021B                              l7005 0200  
                            l6127 1C27                              l6119 1C14                              l6071 0814  
                            l6215 1496                              l6207 148B                              l6063 15A3  
                            l6055 158C                              l6047 1574                              l6039 155F  
                            l6223 1BF2                              l6135 1EB0                              l6231 1D8F  
                            l6303 07C3                              l7111 0339                              l7103 0791  
                            l7023 0271                              l7031 0298                              l7007 0203  
                            l6129 1BC9                              l6401 1F20                              l6057 1593  
                            l6049 1578                              l6081 173A                              l6073 171B  
                            l6153 1EBB                              l6241 1DA4                              l6233 1D92  
                            l6305 07C8                              l7201 08DA                              l7121 0373  
                            l7113 0340                              l7105 030D                              l7033 02A0  
                            l7025 0285                              l7017 0226                              l7009 020C  
                            l7041 02AE                              l6251 1DB2                              l6411 12FD  
                            l6067 0800                              l6403 1F26                              l6059 1599  
                            l6331 14AA                              l6091 1771                              l6083 1740  
                            l6075 1726                              l6219 1BE0                              l6147 1EB6  
                            l6235 1D98                              l6243 1DA6                              l6227 1B1D  
                            l7211 09AC                              l7203 0985                              l7123 0392  
                            l7115 035F                              l7107 032C                              l7051 0692  
                            l7043 02DB                              l7035 02A5                              l7019 024C  
                            l7027 028B                              l6253 1DB6                              l6413 1308  
                            l6421 1B29                              l6069 0801                              l6405 1F2C  
                            l6325 14A4                              l6317 149D                              l6093 177F  
                            l6085 1745                              l6077 172B                              l6501 1B11  
                            l6245 1DAC                              l6237 1D9F                              l6229 1D8B  
                            l6309 07D0                              l7213 09B3                              l7221 09C8  
                            l7205 098C                              l7141 03E1                              l7125 0399  
                            l7117 0366                              l7109 0333                              l7061 06C7  
                            l7053 06A3                              l7045 02E3                              l7029 0290  
                            l6503 1B22                              l6271 1386                              l6263 1372  
                            l6255 1DC3                              l6415 1316                              l6407 1F32  
                            l6431 134B                              l6423 1333                              l6191 1454  
                            l6175 1251                              l6343 14B6                              l6319 149E  
                            l6095 1785                              l6087 175C                              l6079 1730  
                            l6159 1EC1                              l6167 1EC3                              l6511 1508  
                            l6239 1DA3                              l7311 0BA5                              l7303 0B75  
                            l7231 0A06                              l7223 09E0                              l7215 09B7  
                            l7207 0994                              l7151 042A                              l7143 03F1  
                            l7127 039F                              l7119 036C                              l7135 03AD  
                            l7071 06F1                              l7063 06CD                              l7055 06AF  
                            l7047 02F3                              l6281 13A6                              l6273 138A  
                            l6265 1376                              l6257 1DCA                              l6249 1DAE  
                            l6417 131E                              l6409 12F7                              l6433 1356  
                            l6425 1336                              l6601 1B59                              l6505 1B18  
                            l6361 14C8                              l6337 14B0                              l6089 175E  
                            l6097 1789                              l6521 1533                              l6513 1513  
                            l7401 0D9B                              l7313 0BB2                              l7305 0B87  
                            l7241 0A31                              l7233 0A11                              l7225 09EC  
                            l7217 09BF                              l7209 099A                              l7153 0432  
                            l7145 03FA                              l7137 03CF                              l7129 03A6  
                            l7081 071B                              l7073 06F7                              l7065 06D9  
                            l7057 06BA                              l7049 0304                              l6451 1F9B  
                            l6283 13AD                              l6275 138E                              l6267 137C  
                            l6259 1DD0                              l6419 1322                              l6427 133E  
                            l6435 135E                              l6195 145B                              l6187 144C  
                            l6603 1B5F                              l6179 126E                              l6355 14C2  
                            l6099 179D                              l6523 153B                              l6515 151E  
                            l6507 14F3                              l6291 079C                              l7411 0DC1  
                            l7403 0DA7                              l7331 0C55                              l7315 0BDA  
                            l7307 0B8F                              l7251 0A84                              l7243 0A37  
                            l7227 09F2                              l7235 0A1D                              l7171 0465  
                            l7163 0452                              l7155 0443                              l7147 0409  
                            l7139 03DB                              l7091 0745                              l7083 0721  
                            l7075 0703                              l7067 06E4                              l7059 06C1  
                            l6461 1FC2                              l6453 1FAF                              l6277 139F  
                            l6269 137F                              l6285 13B3                              l5901 1643  
                            l6429 1344                              l6197 1463                              l6189 144F  
                            l6605 1B14                              l6621 1E98                              l6613 1B0B  
                            l6349 14BC                              l6541 1E3D                              l6533 1E29  
                            l6525 1544                              l6517 152D                              l6509 14FD  
                            l6445 1FE2                              l6437 1FCD                              l6293 07A1  
                            l7421 0DE4                              l7413 0DCA                              l7405 0DAD  
                            l7341 0C64                              l7317 0C09                              l7325 0C1D  
                            l7309 0B9D                              l7261 0AA7                              l7245 0A40  
                            l7237 0A23                              l7229 09F8                              l7149 0415  
                            l7093 074B                              l7085 072D                              l7077 070E  
                            l7069 06EB                              l8061 02B8                              l6471 1D2E  
                            l6463 1FC6                              l6279 13A5                              l5911 1662  
                            l5903 164C                              l6391 1F11                              l6383 1F09  
                            l6199 1467                              l6623 1E9F                              l6631 0477  
                            l6367 14CE                              l6375 14D0                              l6543 1E43  
                            l6535 1E31                              l6711 1693                              l6527 1546  
                            l6519 152E                              l6447 1FF3                              l6439 1FE1  
                            l6295 07A9                              l7431 0E66                              l7407 0DB3  
                            l7343 0C7E                              l7335 0C5C                              l7327 0C4A  
                            l7319 0C12                              l8071 0B7F                              l7271 0AD0  
                            l7263 0AB5                              l7255 0A8F                              l7247 0A73  
                            l7239 0A29                              l7191 08BA                              l7175 046B  
                            l7167 0458                              l7159 044C                              l7183 082B  
                            l8063 03B7                              l7095 0756                              l7087 0738  
                            l7079 0715                              l6481 1E11                              l6473 1DFC  
                            l5921 1674                              l5905 164D                              l5913 1665  
                            l6393 1F12                              l6385 1F0C                              l6561 1DEF  
                            l6553 1DD5                              l6609 1B64                              l6625 1EA7  
                            l6617 1E7E                              l6641 0494                              l6633 047C  
                            l6545 1E49                              l6721 16BB                              l6713 169E  
                            l8081 1ECB                              l6529 154B                              l6465 1C6F  
                            l6449 1FF9                              l6297 07AE                              l6289 079B  
                            l6801 1B91                              l7441 0E95                              l7433 0E6B  
                            l7409 0DBB                              l7361 0CA4                              l7345 0C89  
                            l7337 0C5D                              l7353 0C9B                              l7329 0C52  
                            l8073 0C27                              l7281 0AFC                              l7273 0AD7  
                            l7265 0AC0                              l7257 0A9B                              l7249 0A7C  
                            l7193 08C3                              l7185 085D                              l8065 0835  
                            l7177 081D                              l7097 0765                              l7089 073F  
                            l8057 0142                              ?_irq 0070                              l6459 1FB0  
                            l6483 1E19                              l6475 1E10                              l6707 1EDD  
                            l5923 167A                              l5915 1666                              l5907 165A  
                            l6395 1F13                              l6387 1F0F                              l5931 15AB  
                            l6571 1CE7                              l6555 1DDC                              l6563 1DF6  
                            l6627 1B6F                              l6619 1E86                              l6651 04B3  
                            l6643 049B                              l6635 0480                              l8083 14D8  
                            l6539 1E37                              l6547 1E4B                              l6731 16FC  
                            l6723 16DF                              l6715 16A2                              l6491 1B37  
                            l6467 1C81                              l6299 07B6                              l6811 1B9B  
                            l6803 1B94                              l7451 0EEC                              l7443 0E9A  
                            l7435 0E79                              l8075 0DF9                              l7419 0DD3  
                            l7355 0C9C                              l7291 0B4F                              l7283 0B04  
                            l7259 0AA1                              l8067 09D2                              l7195 08C9  
                            l7179 0824                              l7099 0784                              l8059 0232  
                            l7427 0DED                              l6469 1D1C                              l6485 1E1F  
                            l6709 1C50                              l5925 1685                              l5917 166E  
                            l5909 165B                              l6397 1F14                              l6389 1F10  
                            l5941 15BF                              l5933 15AF                              l6573 1CEB  
                            l6565 1CD4                              l6581 1D71                              l6549 1B09  
                            l6557 1DE2                              l6629 1B77                              l8085 056A  
                            l6661 04E0                              l6653 04B8                              l6645 04A3  
                            l6637 0487                              l6493 1C2F                              l6733 1705  
                            l6717 16A6                              l6725 16E6                              l6741 12BC  
                            l6821 1B8F                              l6813 1B9C                              l6805 1B96  
                            l8077 0FB0                              l7461 0F1F                              l7453 0EF5  
                            l7445 0EA9                              l7437 0E8A                              l7381 0D15  
                            l7373 0CD9                              l7365 0CAB                              l7349 0C92  
                            l7293 0B5B                              l7285 0B14                              l8069 0AE8  
                            l7197 08CC                              l7189 0865                              l7429 0E60  
                            l6901 05D3                              l6831 13C6                              l6487 07F3  
                            l5927 168C                              l5919 166F                              l6399 1F17  
                            l5951 15D5                              l5943 15C3                              l5935 15B4  
                            l6567 1CDA                              l6575 1CEF                              l6591 1D47  
                            l6583 1D7A                              l8087 1276                              l6559 1DE4  
                            l6671 0511                              l6663 04E6                              l6655 04BE  
                            l6647 04A7                              l6639 048E                              l6735 170B  
                            l6727 16EC                              l6719 16B7                              l6751 12EB  
                            l6743 12C3                              l8079 07D8                              l6823 1B7A  
                            l6815 1B9F                              l6807 1B97                              l7471 0F5C  
                            l7463 0F27                              l7455 0F04                              l7447 0ED5  
                            l7439 0E8F                              l7391 0D6A                              l7383 0D1E  
                            l7367 0CC5                              l7359 0CA3                              l7295 0B68  
                            l7287 0B33                              l7279 0ADE                              l7199 08D4  
                            l6833 13DD                              l6489 07FB                              l8089 1F86  
                            l5961 15F5                              l5953 15D9                              l5945 15C5  
                            l5937 15B6                              l5929 15A8                              l6569 1CDF  
                            l6593 1D4C                              l6585 1D7E                              l6577 1D66  
                            l6681 0541                              l6673 0517                              l6665 04EC  
                            l6657 04C4                              l6649 04AC                              l6497 1B30  
                            l6761 1298                              l6737 1710                              l6729 16F2  
                            l6753 12F1                              l6745 12C8                              l6817 1BA0  
                            l6809 1B99                              l7481 0F9A                              l7473 0F61  
                            l7465 0F38                              l7457 0F0D                              l7449 0EDE  
                            l7393 0D76                              l7369 0CD0                              l7377 0CE2  
                            l7297 0B6F                              l7289 0B46                              l6913 0608  
                            l6905 05DA                              l6835 13E6                              l6827 13B8  
                            l5891 1622                              l5963 15FC                              l5955 15DD  
                            l5947 15CB                              l5939 15BA                              l6595 1D55  
                            l6579 1D6C                              l6587 1D82                              l6691 055B  
                            l6683 0548                              l6675 052D                              l6659 04CA  
                            l6667 04F2                              l6771 12A7                              l6763 129B  
                            l6755 1288                              l6739 1714                              l6747 12CC  
                            l6819 1B85                              l7475 0F6A                              l7467 0F3D  
                            l7395 0D7C                              l7387 0D2E                              l7379 0D06  
                            l6931 063B                              l6923 0619                              l6907 05F4  
                            l6837 13F7                              l6829 13C2                              l5981 1F52  
                            l5973 1F3C                              l5893 1628                              l5957 15EE  
                            l5949 15CE                              l5965 1602                              l6597 1D59  
                            l6589 1D41                              l6685 054E                              l6677 0534  
                            l6669 04F8                              l6781 12B9                              l6773 12AA  
                            l6765 129E                              l6757 1294                              l6749 12E7  
                            l7477 0F71                              l7485 0FA0                              l7469 0F53  
                            l7397 0D82                              l7389 0D61                              l6941 065D  
                            l6933 0646                              l6925 061A                              l6909 05FF  
                            l6917 0611                              l5983 1F55                              l5975 1F3D  
                            l5895 162E                              l5887 1614                              l5991 1F6D  
                            l5967 1607                              l5959 15F4                              l6599 1D5D  
                            l6687 0552                              l6783 12BA                              l6775 12B0  
                            l6767 12A1                              l6759 1295                              l6791 1C90  
                            l7479 0F8D                              l7399 0D90                              l6951 0087  
                            l6943 066C                              l6919 0612                              l6871 059A  
                            l5985 1F56                              l5977 1F4A                              l5897 1639  
                            l5889 1615                              l5993 1F6F                              l5969 160C  
                            l6689 0557                              l6697 0562                              l6777 12B3  
                            l6769 12A4                              l6793 1C9A                              l6785 1B3E  
                            l7489 0FA4                              l6961 00B9                              l6953 008F  
                            l6945 0684                              l6937 064F                              l6929 0621  
                            l6881 05AF                              l6873 059D                              l5987 1F5E  
                            l5979 1F4B                              l5899 1640                              l5995 1F74  
                            l6699 0584                              l6779 12B6                              l6795 1C9F  
                            l6787 1B41                              l6971 00ED                              l6963 00C2  
                            l6955 009A                              l6947 0687                              l6891 05C4  
                            l6883 05B7                              l6875 059E                              l6867 058B  
                            l5989 1F66                              l5997 1F79                              l6797 1CA4  
                            l6789 1C8D                              l6981 0128                              l6973 00FC  
                            l6965 00D3                              l6949 0070                              l6957 00A2  
                            l6893 05C8                              l6885 05B8                              l6877 059F  
                            l6869 059A                              l6991 0155                              l6983 0131  
                            l6975 0105                              l6967 00DA                              l6959 00AA  
                            l6895 05CB                              l6887 05C0                              l6879 05A0  
                            l6993 0163                              l6977 0114                              l6969 00DF  
                            l6889 05C2                              l6995 016B                              l6987 0138  
                            l6979 011B                              l6899 05D2                              l6997 0178  
                            l6989 014D                              l6999 01CC           __end_of_getIndicePassos 1B0F  
                            STR_1 1244                              STR_2 113E                              STR_3 116A  
                            STR_4 1000                              STR_5 1053                              STR_6 11D3  
                            STR_7 11A9                              STR_8 11BE                              STR_9 11E8  
                            u4000 17AC                              u4001 17AB                              u4010 17FF  
                            u2410 1426                              u4011 17FE                              u2411 1425  
                            u4020 1C2C                              u2404 141D                              u4021 1C2B  
                            u2405 141B                              u4110 145A                              u4030 1257  
                            u2430 1445                              u4111 1459                              u4031 1255  
                            u4015 17FB                              u2431 1444                              u4120 1467  
                            u4104 126D                              u5000 0462                              u4121 1466  
                            u2425 1429                              u5001 0461                              u4130 1481  
                            u4050 125E                              u5010 08D4                              u4131 1480  
                            u4051 125C                              u5011 08D3                              u4220 1DD0  
                            u4300 1332                              u4140 1487                              u4044 1258  
                            u2380 140A                              u5100 0AA1                              u5020 08DA  
                            u4221 1DCF                              u4205 1DBD                              u4301 1331  
                            u4141 1486                              u2381 1409                              u5101 0AA0  
                            u5021 08D9                              u4230 137C                              u4310 1344  
                            u4150 1491                              u4070 1265                              u5110 0AA7  
                            u5030 098C                              u4231 137B                              u4215 1DC4  
                            u4311 1343                              u4151 1490                              u4071 1263  
                            u5111 0AA6                              u5031 098B                              u4320 1371  
                            u4064 125F                              u4400 1E36                              u4160 1D98  
                            u5200 0D9B                              u5120 0AC0                              u5040 09BF  
                            u4321 1370                              u4401 1E35                              u4161 1D97  
                            u5201 0D9A                              u5121 0ABF                              u5041 09BE  
                            u4250 138E                              u4090 126C                              u4410 1E3D  
                            u4330 1FFF                              u4170 1D9F                              u2394 1411  
                            u5210 0DAD                              u5130 0C5B                              u5050 09F2  
                            u4251 138D                              u4091 126A                              u4411 1E3C  
                            u4331 1FFE                              u4171 1D9E                              u2395 140F  
                            u5211 0DAC                              u5131 0C5A                              u5051 09F1  
                            u4340 1FCC                              u3700 167A                              u4500 1D4C  
                            u4084 1266                              u4420 1E50                              u4180 1DAB  
                            u5300 0F53                              u5220 0DC1                              u5140 0C63  
                            u5060 09F8                              u4341 1FCB                              u4245 1380  
                            u3701 1679                              u4501 1D4B                              u4421 1E4F  
                            u4181 1DAA                              u5301 0F52                              u5221 0DC0  
                            u5141 0C62                              u5061 09F7                              u4350 1E25  
                            u4270 139F                              u4190 1DB6                              u3710 15AF  
                            u4430 1DDC                              u4510 1B6D                              u5310 0F71  
                            u5230 0E8F                              u5150 0CA2                              u5070 0A11  
                            u4351 1E24                              u4271 139E                              u4191 1DB5  
                            u3711 15AE                              u4431 1DDB                              u4511 1B6B  
                            u5311 0F70                              u5231 0E8E                              u5151 0CA1  
                            u5071 0A10                              u4360 07FB                              u3800 1607  
                            u3720 15BA                              u4440 1DE2                              u4520 1B6E  
                            u4600 04E6                              u5320 0F8D                              u5240 0E95  
                            u5160 0CAA                              u5080 0A23                              u4361 07FA  
                            u4265 138F                              u3801 1606                              u3721 15B9  
                            u4441 1DE1                              u4601 04E5                              u5321 0F8C  
                            u5241 0E94                              u5161 0CA9                              u5081 0A22  
                            u4290 13B3                              u3650 1628                              u3730 15CB  
                            u4450 1CDA                              u4530 1E86                              u4610 04F8  
                            u5330 0F9A                              u5250 0E9A                              u5170 0D2D  
                            u5090 0A37                              u4291 13B2                              u4275 139B  
                            u3651 1627                              u3731 15CA                              u4451 1CD9  
                            u4531 1E85                              u4611 04F7                              u5331 0F99  
                            u5251 0E99                              u5171 0D2C                              u5091 0A36  
                            u3660 162E                              u3820 1CCF                              u4460 1CDF  
                            u4540 1E98                              u3900 1599                              u4620 0552  
                            u4380 153B                              u4700 1C9F                              u5260 0EA9  
                            u5180 0D7C                              u4285 13A7                              u3661 162D  
                            u3645 1618                              u3821 1CCE                              u4461 1CDE  
                            u4541 1E97                              u3901 1598                              u4621 0551  
                            u4381 153A                              u4701 1C9E                              u5325 0F89  
                            u5261 0EA8                              u5181 0D7B                              u3670 164C  
                            u3750 15DD                              u4470 1D6C                              u4550 1B77  
                            u3910 159E                              u3830 1554                              u4630 058A  
                            u4390 154B                              u4710 1CA4                              u5270 0F04  
                            u5190 0D82                              u5407 1F4F                              u3815 1F40  
                            u3671 164B                              u3751 15DC                              u4471 1D6B  
                            u4551 1B76                              u3911 159D                              u3831 1553  
                            u4631 0589                              u4375 1C39                              u4391 154A  
                            u4711 1CA3                              u5271 0F03                              u5191 0D81  
                            u4720 13C6                              u3920 081C                              u4480 1D71  
                            u3840 155F                              u4560 048E                              u4640 16A2  
                            u5280 0F1E                              u4800 0618                              u4721 13C5  
                            u5417 1F63                              u3921 081B                              u3745 15CF  
                            u4481 1D70                              u4545 1E94                              u3841 155E  
                            u4561 048D                              u4641 16A1                              u5281 0F1D  
                            u4801 0617                              u3690 1674                              u3770 15EE  
                            u4490 1D47                              u3850 156A                              u4570 04AC  
                            u3930 1722                              u4650 16B7                              u5290 0F27  
                            u4810 0620                              u4731 13CF                              u3691 1673  
                            u5347 0807                              u3771 15ED                              u4491 1D46  
                            u3851 1569                              u4571 04AB                              u3931 1720  
                            u4651 16B6                              u5291 0F26                              u4811 061F  
                            u4732 13D6                              u4580 04B3                              u3940 1723  
                            u4660 16EC                              u4900 06BA                              u4820 0676  
                            u4733 13DD                              u3685 1650                              u5357 1634  
                            u3765 15DE                              u4581 04B2                              u4661 16EB  
                            u4901 06B9                              u3790 1602                              u3870 157C  
                            u4590 04BE                              u3950 172B                              u4670 16F2  
                            u4910 06E4                              u4830 00AA                              u5367 163D  
                            u3791 1601                              u3775 15EA                              u3871 157B  
                            u4591 04BD                              u3951 172A                              u4671 16F1  
                            u4911 06E3                              u4831 00A9                              u4760 13F7  
                            u3880 1586                              u3960 175C                              u4680 170B  
                            u4920 070E                              u4840 00D3                              u4761 13F6  
                            u4745 13DF                              u5377 165F                              u3785 15F6  
                            u3881 1585                              u3865 156E                              u3961 175B  
                            u4681 170A                              u4921 070D                              u4841 00D0  
                            u3970 177E                              u4690 12F1                              u4930 0738  
                            u4850 0114                              u4755 13E7                              u5387 1680  
                            u3971 177D                              u4691 12F0                              u4931 0737  
                            u4851 0113                              u3980 179D                              u4940 0784  
                            u4860 01DC                              u4780 05D1                              u5397 1689  
                            u3885 1582                              u3981 179C                              u4941 0783  
                            u4861 01DB                              u4781 05D0                              u3990 17A5  
                            u4950 032C                              u4870 0212                              u4790 05D9  
                            u3895 158D                              u3991 17A4                              u3975 177A  
                            u4951 032B                              u4871 0211                              u4791 05D8  
                            u4960 035F                              u4880 0266                              u3985 1799  
                            u4961 035E                              u4881 0265                              u4970 0392  
                            u4890 02A0                              u4971 0391                              u4891 029F  
                            u4980 0415                              u4981 0412                              u4990 042A  
                            u4991 0429                              _fila 0054                       main@ptr_867 01DD  
                            _main 058B                              btemp 007E                    ?_addContCiclos 0070  
                     main@vetorIn 01D7                              start 000C           __size_of_salvar_receita 0033  
               fp__salvar_receita 006D                 _formatar_receitas 0000                      ?_ler_atuador 0070  
                  printExec@passo 0043      __end_of_salva_atuadores_init 154D                             ??_irq 0074  
                 _addIndicePassos 07F3              __end_of_EEPROM_write 1C2F                      main@auxPasso 01D6  
                           ?_main 0070                   __end_of___awdiv 1611                             _EEADR 010D  
                           STR_10 123C                             _EEDAT 010C                             STR_11 117F  
                           STR_20 1194                             STR_12 1140                             STR_13 1227  
                           STR_21 1155                             STR_22 1212                             STR_14 112B  
                           STR_15 11FD                             STR_16 10F2                             STR_17 10A4  
                           STR_18 1244                             STR_19 113E                   __end_of___awmod 15A8  
                 ___awdiv@divisor 0020                   __end_of___lwdiv 13B8                             i1l606 1C0A  
                           i1l473 1E7C                             i1l475 1E7D                   ___awdiv@counter 0025  
                           _TMR1H 000F                             _TMR1L 000E                             _PORTD 0008  
                           _TRISD 0088  __size_of_manipula_atuadores_init 002B               ___lmul@multiplicand 0024  
                 __end_of_dispLCD 1333                 ??_fifo_disponivel 0020             __end_of_teclado_borda 1CAE  
                           _delay 0800                             _setT1 1B85                   salvar_receita@i 002D  
                           main@i 01CD                             main@j 01CE                             fpbase 0057  
                           pclath 000A                      main@vetorOut 01DB                             status 0003  
                           wtemp0 007E                   EEPROM_read@addr 0020                     _indice_passos 007B  
            __end_of_dispLCD_init 1F39              __size_of_EEPROM_read 0014                   __initialization 000F  
                    __end_of_main 0FD0                  ?_dispLCD_dataReg 0070                            ??_main 0044  
                   ?_initSerialIO 0020              __size_of_dispLCD_clr 0007              __size_of_dispLCD_num 00E5  
            __size_of_dispLCD_str 003F              __size_of_alt_atuador 0037                  ?_dispLCD_instReg 0070  
                          ?_delay 0020                      ?_salvar_dado 0027                            ?_setT1 002D  
                          _EEADRH 010F                            _EECON2 018D                  ___awdiv@dividend 0022  
            __size_of_dignum_conc 002F                            _ANSELH 0189                            _EEPROM 01E7  
                ?_getIndicePassos 0070                            i1l4601 1E5F                            i1l4691 1C01  
                          i1l4693 1C04                            i1l4599 1E51                            i1l4695 1C09  
                          i1l4687 1BF4                            i1l4689 1BFB                            u306_20 1BFB  
                          u306_21 1BFA                            u307_20 1C01                            u307_21 1C00  
            __size_of_fifo_delete 0027                            u297_20 1E5F                            u297_21 1E5E  
                          u298_20 1E7B                   ??_addContCiclos 0020                            u298_25 1E6E  
                          u298_26 1E6F                            u298_27 1E74                            u298_28 1E75  
                          u298_29 1E7A              __size_of_end_receita 0014              __size_of_fifo_indice 0004  
            __size_of_fifo_lerPos 0009                  __end_of__fptable 0070                     main@init_cond 01D5  
                 ler_sensor@passo 0023                  __end_of_fifo_add 1CF5                  __end_of_fifo_tam 1B0D  
         __end_of_addIndicePassos 0800                            _t1cont 0048                            ___lmul 13B8  
                          ___wmul 1DAE                         ??___awdiv 0024                         ??___awmod 0024  
                          _ciclos 0078                 _fifo_alinharPrint 144C                      ?_timer1_init 0070  
                       ??___lwdiv 0024                            delay@t 0020                  ___awdiv@quotient 0027  
                          _teclas 00B4                   ___awmod@divisor 0020                ?_fifo_alinharPrint 0070  
                       ??_dispLCD 002C                   ___awmod@counter 0025                    ??_initSerialIO 0022  
                          main@pt 01B6                 entry__dispLCD_clr 0061                 entry__dispLCD_num 006A  
                          fptable 0052                    _buscar_receita 1F9B                  __end_of_posAtual 1BF4  
                          setT1@c 002D                      __pdataCOMMON 007B                            fptotal 0010  
                          saved_w 007E               ??_fifo_alinharPrint 002D             __end_of_getContCiclos 1B37  
                   main@vetor_aux 01A4                  __end_of_statusT1 1B85            salva_atuadores_init@pt 0028  
            _salva_atuadores_init 14F3           __end_of__initialization 004E              __size_of_buscar_dado 0025  
        __size_of_deletar_receita 002A                fp__deletar_receita 005B                 _serialIObyteShift 1D88  
                  _salvar_receita 1FCD           __size_of_dispLCD_lincol 0031                ?_serialIObyteShift 0070  
       __end_of_fifo_alinharPrint 149A                    __pcstackCOMMON 0070             __size_of_EEPROM_write 001E  
        __size_of_resetContCiclos 0003                      __pidataBANK0 1B0F                      __pidataBANK1 1CF5  
                    __pidataBANK3 1B4F                     __end_of_delay 081D                     __end_of_setT1 1B91  
               fifo_add_control@c 0034              __size_of_ler_atuador 002E               ??_serialIObyteShift 0020  
          __end_of_buscar_receita 1FCD                __size_of_getCiclos 001E           _manipula_atuadores_init 1E26  
       __size_of_fifo_add_control 0025                 initSerialIO@ptrIn 0023                __size_of_fifo_adrs 0002  
    __end_of_fifo_indicePrint_dec 1B7A      __end_of_fifo_indicePrint_inc 1EAC                           ??_delay 0022  
                         ??_setT1 0031                teclado_borda@tecla 0029             ?_salva_atuadores_init 0070  
                      __pbssBANK0 0048                        __pbssBANK3 01EC             __size_of_dispLCD_init 0030  
       __end_of_serialIObyteShift 1DAE            __end_of_salvar_receita 2000                     ?_teclado_init 0070  
                   ?_teclado_scan 0070                __size_of_intt1_1ms 002D                      _EEPROM_write 1C11  
                teclado_borda@aux 0028             __end_of_dignum_apagar 1C6C                        __pmaintext 058B  
                ?_addIndicePassos 0070                    main@contPassos 01B4                           ?___lmul 0020  
                         ?___wmul 0020                        __pintentry 0004                   _fifo_disponivel 1B64  
                  ___lmul@product 0029           serialIObyteShift@dataIn 0021                   ?_buscar_receita 0027  
                      _dignum_tam 1CAE                __size_of_set_passo 005B                        _fifo_print 0477  
              __size_of_printExec 008B                           _LCDbits 0006                      _dispLCD_init 1F09  
                       ?_fifo_add 0070                         ?_fifo_tam 0070                        __stringtab 1800  
            __size_of_salvar_dado 0021                    ??_teclado_init 0020                    ??_teclado_scan 0020  
                 ?_salvar_receita 0027                     ?_serialIOload 0070                     ?_serialIOscan 0070  
               __end_of_getCiclos 1C4D              __end_of_initSerialIO 12BC                       posAtual@ind 0022  
                EEPROM_write@addr 0021                  EEPROM_write@data 0020                 __end_of_fifo_adrs 1B0B  
                       ?_posAtual 0070        __size_of_fifo_alinharPrint 004E                 ??_deletar_receita 0028  
                         ___awdiv 15A8                   __size_of___lmul 0048                           ___awmod 154D  
                      _ler_sensor 149A                   __size_of___wmul 0027           __size_of_init_atuadores 0005  
                         ___lwdiv 1372                         ?_statusT1 0020            deletar_receita@receita 0027  
       ??_manipula_atuadores_init 0023                         _ANSELbits 0188                           _dispLCD 12F7  
            __size_of_timer1_init 0011                           __ptext1 1B91                           __ptext2 1B3E  
                         __ptext3 1C8D                           __ptext4 1400                           __ptext5 1B7A  
                         __ptext6 0798                           __ptext7 1B85                           __ptext8 12BC  
                         __ptext9 1B1D                     teclado_scan@c 0026                     teclado_scan@l 0025  
               __end_of_intt1_1ms 1E7E                 ??_resetContCiclos 0020                           _atuador 007A  
         __size_of_fifo_add_ciclo 000B                         _T1CONbits 0010                      __size_of_irq 001D  
         __size_of_fifo_add_tempo 0025                  ___awmod@dividend 0022                 salvar_receita@aux 002B  
                   _receita_livre 0000            ??_salva_atuadores_init 0023                        ??_fifo_add 0033  
                      ??_fifo_tam 0020                           main@aux 01B5                           clrloop0 1247  
                         main@num 01DE                           main@ptr 01CC                entry__dispLCD_init 0064  
            end_of_initialization 004E                    ??_serialIOload 0020                    ??_serialIOscan 0024  
      __size_of_serialIObyteShift 0026                    dispLCD_num@col 002E                    dispLCD_num@div 0037  
                  dispLCD_num@lin 002D                    dispLCD_num@tam 0031                    dispLCD_num@num 002F  
                  _dispLCD_lincol 1F6A                     ??_EEPROM_read 0020                 __end_of_set_passo 07F3  
                  dispLCD_str@lin 002B                    dispLCD_str@str 0028                        dispLCD@col 0029  
                      dispLCD@lin 0028                        dispLCD@pos 002D                        dispLCD@str 002A  
         __end_of_fifo_disponivel 1B6F                 __end_of_printExec 171B                        ??_posAtual 0021  
            _fifo_indicePrint_dec 1B6F              _fifo_indicePrint_inc 1E7E                           psplit$0 15005C  
                         psplit$1 5C005D                           psplit$2 5D005E  
                         psplit$3 5E005F            __size_of_teclado_borda 0021  
                    __pstringtext 1000                fifo_alinharPrint@i 0032                        ??_statusT1 0024  
                   ??_dispLCD_clr 0023                     ??_dispLCD_num 0032                     ??_dispLCD_str 002A  
                   ??_alt_atuador 0020                       ?_dignum_tam 0029                         _PORTAbits 0005  
                _fifo_add_control 1D3E                       ?_fifo_print 0070                        fp__dispLCD 005E  
                   ??_dignum_conc 0027                         _TRISAbits 0085                         _TRISBbits 0086  
        __size_of_dispLCD_dataReg 0031                     ??_fifo_delete 0033              pnum$maintext_split_1 005C  
            pnum$maintext_split_2 005D              pnum$maintext_split_3 005E              pnum$maintext_split_4 005F  
                   ??_end_receita 0022                     ??_fifo_indice 0020                     ??_fifo_lerPos 0020  
                   _teclaAnterior 0050   __end_of_manipula_atuadores_init 1E51            __end_of_dispLCD_lincol 1F9B  
  manipula_atuadores_init@atuador 0024          __size_of_dispLCD_instReg 007F                        main@ciclos 01D9  
             dignum_apagar@ptrNum 0028                        main@estado 01E0             __end_of_addContCiclos 1B29  
        __size_of_getIndicePassos 0002             ?_fifo_indicePrint_dec 0070             ?_fifo_indicePrint_inc 0070  
             __end_of_EEPROM_read 1BC9                       ?_ler_sensor 0020                    __end_of___lmul 1400  
                  __end_of___wmul 1DD5                     __pidataCOMMON 0003                    set_passo@passo 0023  
            __end_of_teclado_init 1B46              __end_of_teclado_scan 144C               start_initialization 000F  
             __end_of_dispLCD_clr 1B30                     posAtual@passo 0023               __end_of_dispLCD_num 1800  
             __end_of_dispLCD_str 1372               __end_of_alt_atuador 1285                       __end_of_irq 1C11  
                   _teclado_borda 1C8D                     ??_buscar_dado 0029             __size_of_initSerialIO 0037  
                 fifo_add_tempo@t 0034                   ?_dispLCD_lincol 0023               __end_of_dignum_conc 1F09  
              initSerialIO@length 0021               __size_of_dignum_tam 0023               __end_of_fifo_delete 1DFC  
              initSerialIO@ptrOut 0020               __end_of_end_receita 1BDD               __end_of_fifo_indice 1B18  
             __end_of_fifo_lerPos 1B4F               __size_of_fifo_print 0114                  ?_fifo_disponivel 0070  
               dispLCD_lincol@col 0023                 dispLCD_lincol@aux 0027                 dispLCD_lincol@lin 0026  
                 main@meAtuadores 01D8                     ??_ler_atuador 0020                  ??_buscar_receita 0029  
                        ??___lmul 0028                          ??___wmul 0024                    _init_atuadores 1B18  
          __size_of_getContCiclos 0007                        init_fetch0 1BA2                       __pdataBANK0 0066  
                     __pdataBANK1 00A0                       __pdataBANK3 01E2              __end_of_serialIOload 1B22  
            __end_of_serialIOscan 12F7                    _fifo_add_ciclo 1B59                  ler_atuador@tecla 0022  
                    _initSerialIO 1285                    _fifo_add_tempo 1D63                       __pbssCOMMON 0076  
                       ___latbits 0002                     __pcstackBANK0 0020                     __pcstackBANK3 0190  
                ??_salvar_receita 0029                    ?_teclado_borda 0070                 __size_of__fptable 001E  
             __size_of_ler_sensor 0059                 __size_of_fifo_add 0024                 __size_of_fifo_tam 0002  
                 _deletar_receita 1DFC                 ??_dispLCD_dataReg 0020                       _EEPROM_read 1BB5  
             __end_of_buscar_dado 1D3E            ??_fifo_indicePrint_dec 0020            ??_fifo_indicePrint_inc 0020  
                ___lwdiv@dividend 0022            __end_of_init_atuadores 1B1D                   _resetContCiclos 1B11  
                       _getCiclos 1C2F                 ??_dispLCD_instReg 0020                         __pfunctab 0052  
                        ?___awdiv 0020                 __size_of_posAtual 0017                          ?___awmod 0020  
                        ?___lwdiv 0020                         _fifo_adrs 1B09                     serialIOscan@i 0029  
                   serialIOscan@j 0028            __end_of_fifo_add_ciclo 1B64                       _dispLCD_clr 1B29  
                     _dispLCD_num 171B                       _dispLCD_str 1333                 ??_getIndicePassos 0020  
          __end_of_fifo_add_tempo 1D88                          ?_dispLCD 0028                         __pstrings 1800  
                     _alt_atuador 124E               __end_of_ler_atuador 1EDA                 __size_of_statusT1 000B  
        __size_of_addIndicePassos 000D                         _ind_print 0066          serialIObyteShift@dataBit 0023  
          __size_of_dignum_apagar 001F                       _dignum_conc 1EDA          serialIObyteShift@dataOut 0022  
                       _intt1_1ms 1E51                     ??_salvar_dado 0029                  ___lwdiv@quotient 0026  
                   _getContCiclos 1B30                    __size_of_delay 001D                       _fifo_delete 1DD5  
                  __size_of_setT1 000C                       _end_receita 1BC9                       _fifo_indice 1B14  
                     _fifo_lerPos 1B46                 teclado_scan@tecla 0024                    _fifo_print$375 002C  
               interrupt_function 0004                    ___wmul@product 0024          __end_of_fifo_add_control 1D63  
                       clear_ram0 1246                          _PIE1bits 008C                          _PIR1bits 000C  
                 ?_init_atuadores 0070                          _SERIALIO 0005                        ?_getCiclos 0020  
                       _set_passo 0798             __size_of_teclado_init 0008                         main@F1460 01ED  
                       main@F1462 01EC                         main@F1486 00A0             __size_of_teclado_scan 004C  
                  dignum_conc@dig 002B                     ??_timer1_init 0020                        ?_fifo_adrs 0070  
                       _printExec 1690                  dispLCD_dataReg@d 0021                   ?_fifo_add_ciclo 0020  
                    ??_dignum_tam 002B                       _cont_ciclos 0076                   ?_fifo_add_tempo 0070  
                     __stringbase 1812                         main@i_906 01D1                         main@i_850 01CF  
                       main@i_909 01D3                         main@i_856 01CB                 ___wmul@multiplier 0020  
                       main@j_910 01D4                         main@j_907 01D2                         main@j_851 01D0  
             fifo_print@completar 002E                  deletar_receita@i 002C                      ??_fifo_print 0029  
                       main@botao 01DC                       _lenSerialIO 0051                   ??_teclado_borda 0027  
                       main@tecla 01E1           __end_of_deletar_receita 1E26                        ?_intt1_1ms 0070  
                  ?_getContCiclos 0020                 _resetIndicePassos 1B37                 ___lmul@multiplier 0020  
                     _buscar_dado 1D19     __size_of_salva_atuadores_init 005A                ?_resetIndicePassos 0070  
         __end_of_resetContCiclos 1B14                      _teclado_init 1B3E               __end_of_salvar_dado 1C8D  
                    _teclado_scan 1400                        _EECON1bits 018C                __end_of_dignum_tam 1CD1  
             ??_resetIndicePassos 0020                     _dignum_apagar 1C4D                     ler_sensor@ptr 0020  
              __end_of_fifo_print 058B          ?_manipula_atuadores_init 0070                        ?_set_passo 0020  
           __size_of_serialIOload 0005             __size_of_serialIOscan 003B                      getCiclos@aux 0024  
                dispLCD_instReg@i 0022                       _ler_atuador 1EAC                      ??_ler_sensor 0021  
                      ?_printExec 0039                      pnum$maintext 0015                  __size_of___awdiv 0069  
                __size_of___awmod 005B                  __size_of___lwdiv 0046                   fp__dispLCD_init 0064  
              buscar_receita@data 0028                buscar_receita@adrs 0027                  dispLCD_num@sinal 0036  
           fifo_alinharPrint@cont 0030                __end_of__stringtab 1812       manipula_atuadores_init@mask 0026  
                __size_of_dispLCD 003C               __end_of_timer1_init 1BA2                          __fptable 0052  
       __end_of_resetIndicePassos 1B3E                          _main$870 01B7                          _main$880 01C1  
                        _main$881 01C3                          _main$882 01C5                          _main$883 01C7  
                        _main$876 01B9                          _main$877 01BB                          _main$878 01BD  
                        _main$887 01C9                          _main$879 01BF                  ??_dispLCD_lincol 0024  
                 ___lwdiv@divisor 0020                   ___lwdiv@counter 0025                          __ptext10 1D88  
                        __ptext11 1FCD                          __ptext20 1B46                          __ptext12 1C6C  
                        __ptext21 171B                          __ptext13 14F3                          __ptext30 154D  
                        __ptext22 1E26                          __ptext14 1EAC                          __ptext31 1E7E  
                        __ptext23 149A                          __ptext15 1B37                          __ptext40 1B59  
                        __ptext32 1B6F                          __ptext24 1B18                          __ptext16 1B11  
                        __ptext41 1CD1                          __ptext33 1B14                          __ptext25 1285  
                        __ptext17 1690                          __ptext50 1F6A                          __ptext42 144C  
                        __ptext34 1B64                          __ptext26 1B30                          __ptext18 1BDD  
                        __ptext51 1611                          __ptext43 1CAE                          __ptext35 1DD5  
                        __ptext27 1C2F                          __ptext19 1B0D                          __ptext60 1D19  
                        __ptext52 1F39                          __ptext44 15A8                          __ptext36 124E  
                        __ptext28 1B0B                          __ptext61 1BC9                          __ptext53 1EDA  
                        __ptext45 1333                          __ptext37 1B09                          __ptext29 0477  
                        __ptext62 1BB5                          __ptext54 1DAE                          __ptext46 1F09  
                        __ptext38 1D63                          __ptext63 07F3                          __ptext55 1C4D  
                        __ptext47 0800                          __ptext39 1D3E                          __ptext64 1B22  
                        __ptext56 1372                          __ptext48 1B29                          __ptext65 13B8  
                        __ptext57 1DFC                          __ptext49 12F7                          __ptext66 1BF4  
                        __ptext58 1C11                          __ptext67 1E51                          __ptext59 1F9B  
                        _fifo_add 1CD1                 ??_addIndicePassos 0020                          _fifo_tam 1B0B  
                        _ind_fila 0067                __end_of_ler_sensor 14F3                     ?_EEPROM_write 0020  
                    _serialIOload 1B1D                      _serialIOscan 12BC                     __size_of_main 0A45  
              salvar_receita@data 0028                salvar_receita@adrs 0027                    ?_dignum_apagar 0070  
                        _posAtual 1BDD                      dispLCD_str@c 002C                       ??_getCiclos 0022  
                   _printExec$400 0040                       ??_fifo_adrs 0020                fifo_print@indPrint 002F  
                   fifo_add@passo 0034                          _statusT1 1B7A                     dignum_tam@tam 002C  
                   dignum_tam@num 0029                          main@lema 0190                      set_passo@ptr 0020  
  salva_atuadores_init@condi_init 0024                   ??_getContCiclos 0022                        _INTCONbits 000B  
                   ?_dispLCD_init 0070            __size_of_addContCiclos 0007                   _dispLCD_dataReg 1F39  
                     ??_intt1_1ms 0070                  ?_deletar_receita 0027                          init_ram0 1BA6  
                 buscar_dado@data 0028                   buscar_dado@adrs 002B                       _salvar_dado 1C6C  
                  fp__dispLCD_clr 0061                    fp__dispLCD_num 006A                    fp__dispLCD_str 0067  
               buscar_receita@aux 002B                   dispLCD_num@size 0035              fifo_alinharPrint@aux 0031  
      manipula_atuadores_init@aux 0025                   _dispLCD_instReg 1611                          intlevel1 0052  
                  ??_EEPROM_write 0021                  ?_resetContCiclos 0070                      ?_EEPROM_read 0070  
                 _getIndicePassos 1B0D                 dignum_conc@ptrNum 0026                         stringcode 180A  
                     ??_set_passo 0021                 fifo_print@comando 0031                       ??_printExec 003A  
        salva_atuadores_init@F103 004C                       _timer1_init 1B91                      _ptrSerialOut 0052  
                    ?_dispLCD_clr 0070                      ?_dispLCD_num 002D                      ?_dispLCD_str 0028  
        __size_of_fifo_disponivel 000B                      ?_alt_atuador 0070          salva_atuadores_init@dado 0029  
                  buscar_dado@col 0027                    buscar_dado@aux 002C              fifo_add_ciclo@ciclos 0020  
        salva_atuadores_init@mask 002A                    ??_dispLCD_init 0024        __size_of_resetIndicePassos 0007  
                        stringtab 1800                      ?_dignum_conc 0026                      end_receita@x 0020  
                fifo_print@atraso 0032                      ?_fifo_delete 0070                       _ptrSerialIn 0053  
                    fifo_lerPos@i 0020                      ?_end_receita 0020                      ?_fifo_indice 0070  
                    ?_fifo_lerPos 0070                   buscar_receita@i 002D                  ??_init_atuadores 0020  
                 ??_dignum_apagar 0028                 ?_fifo_add_control 0070                     _addContCiclos 1B22  
                ??_fifo_add_ciclo 0022                       fifo_print@i 0030  
