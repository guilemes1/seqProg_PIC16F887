

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Mon Nov 15 10:55:52 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     8                           	psect	strings,global,class=STRING,delta=2,noexec
     9                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	maintext,global,class=CODE,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2,group=1
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	intentry,global,class=CODE,delta=2
    98                           	psect	text74,local,class=CODE,merge=1,delta=2
    99                           	psect	functab,global,class=ENTRY,delta=2
   100                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   101                           	psect	maintext_split_1,global,class=CODE,split=1,delta=2
   102                           	psect	maintext_split_2,global,class=CODE,split=1,delta=2
   103                           	psect	maintext_split_3,global,class=CODE,split=1,delta=2
   104                           	psect	maintext_split_4,global,class=CODE,split=1,delta=2
   105                           	psect	maintext_split_5,global,class=CODE,split=1,delta=2
   106                           	dabs	1,0x7E,2
   107  0000                     
   108                           ; Version 2.20
   109                           ; Generated 12/02/2020 GMT
   110                           ; 
   111                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC16F887 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     	;# 
   143  0001                     	;# 
   144  0002                     	;# 
   145  0003                     	;# 
   146  0004                     	;# 
   147  0005                     	;# 
   148  0006                     	;# 
   149  0007                     	;# 
   150  0008                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  000E                     	;# 
   158  000F                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0013                     	;# 
   163  0014                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  0081                     	;# 
   178  0085                     	;# 
   179  0086                     	;# 
   180  0087                     	;# 
   181  0088                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  008F                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  0105                     	;# 
   206  0107                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0187                     	;# 
   216  0188                     	;# 
   217  0189                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  008F                     	;# 
   265  0090                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0094                     	;# 
   272  0095                     	;# 
   273  0096                     	;# 
   274  0097                     	;# 
   275  0098                     	;# 
   276  0099                     	;# 
   277  009A                     	;# 
   278  009B                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009E                     	;# 
   282  009F                     	;# 
   283  0105                     	;# 
   284  0107                     	;# 
   285  0108                     	;# 
   286  0109                     	;# 
   287  010C                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  010F                     	;# 
   292  0185                     	;# 
   293  0187                     	;# 
   294  0188                     	;# 
   295  0189                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0008                     	;# 
   307  0009                     	;# 
   308  000A                     	;# 
   309  000B                     	;# 
   310  000C                     	;# 
   311  000D                     	;# 
   312  000E                     	;# 
   313  000E                     	;# 
   314  000F                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0013                     	;# 
   319  0014                     	;# 
   320  0015                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001D                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  0081                     	;# 
   334  0085                     	;# 
   335  0086                     	;# 
   336  0087                     	;# 
   337  0088                     	;# 
   338  0089                     	;# 
   339  008C                     	;# 
   340  008D                     	;# 
   341  008E                     	;# 
   342  008F                     	;# 
   343  0090                     	;# 
   344  0091                     	;# 
   345  0092                     	;# 
   346  0093                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0094                     	;# 
   350  0095                     	;# 
   351  0096                     	;# 
   352  0097                     	;# 
   353  0098                     	;# 
   354  0099                     	;# 
   355  009A                     	;# 
   356  009B                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  009F                     	;# 
   361  0105                     	;# 
   362  0107                     	;# 
   363  0108                     	;# 
   364  0109                     	;# 
   365  010C                     	;# 
   366  010C                     	;# 
   367  010D                     	;# 
   368  010E                     	;# 
   369  010F                     	;# 
   370  0185                     	;# 
   371  0187                     	;# 
   372  0188                     	;# 
   373  0189                     	;# 
   374  018C                     	;# 
   375  018D                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  000E                     	;# 
   392  000F                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0013                     	;# 
   397  0014                     	;# 
   398  0015                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  001D                     	;# 
   409  001E                     	;# 
   410  001F                     	;# 
   411  0081                     	;# 
   412  0085                     	;# 
   413  0086                     	;# 
   414  0087                     	;# 
   415  0088                     	;# 
   416  0089                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  008F                     	;# 
   421  0090                     	;# 
   422  0091                     	;# 
   423  0092                     	;# 
   424  0093                     	;# 
   425  0093                     	;# 
   426  0093                     	;# 
   427  0094                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0098                     	;# 
   432  0099                     	;# 
   433  009A                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  009F                     	;# 
   439  0105                     	;# 
   440  0107                     	;# 
   441  0108                     	;# 
   442  0109                     	;# 
   443  010C                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  0185                     	;# 
   449  0187                     	;# 
   450  0188                     	;# 
   451  0189                     	;# 
   452  018C                     	;# 
   453  018D                     	;# 
   454  0000                     	;# 
   455  0001                     	;# 
   456  0002                     	;# 
   457  0003                     	;# 
   458  0004                     	;# 
   459  0005                     	;# 
   460  0006                     	;# 
   461  0007                     	;# 
   462  0008                     	;# 
   463  0009                     	;# 
   464  000A                     	;# 
   465  000B                     	;# 
   466  000C                     	;# 
   467  000D                     	;# 
   468  000E                     	;# 
   469  000E                     	;# 
   470  000F                     	;# 
   471  0010                     	;# 
   472  0011                     	;# 
   473  0012                     	;# 
   474  0013                     	;# 
   475  0014                     	;# 
   476  0015                     	;# 
   477  0015                     	;# 
   478  0016                     	;# 
   479  0017                     	;# 
   480  0018                     	;# 
   481  0019                     	;# 
   482  001A                     	;# 
   483  001B                     	;# 
   484  001B                     	;# 
   485  001C                     	;# 
   486  001D                     	;# 
   487  001E                     	;# 
   488  001F                     	;# 
   489  0081                     	;# 
   490  0085                     	;# 
   491  0086                     	;# 
   492  0087                     	;# 
   493  0088                     	;# 
   494  0089                     	;# 
   495  008C                     	;# 
   496  008D                     	;# 
   497  008E                     	;# 
   498  008F                     	;# 
   499  0090                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0093                     	;# 
   504  0093                     	;# 
   505  0094                     	;# 
   506  0095                     	;# 
   507  0096                     	;# 
   508  0097                     	;# 
   509  0098                     	;# 
   510  0099                     	;# 
   511  009A                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  009F                     	;# 
   517  0105                     	;# 
   518  0107                     	;# 
   519  0108                     	;# 
   520  0109                     	;# 
   521  010C                     	;# 
   522  010C                     	;# 
   523  010D                     	;# 
   524  010E                     	;# 
   525  010F                     	;# 
   526  0185                     	;# 
   527  0187                     	;# 
   528  0188                     	;# 
   529  0189                     	;# 
   530  018C                     	;# 
   531  018D                     	;# 
   532  0000                     	;# 
   533  0001                     	;# 
   534  0002                     	;# 
   535  0003                     	;# 
   536  0004                     	;# 
   537  0005                     	;# 
   538  0006                     	;# 
   539  0007                     	;# 
   540  0008                     	;# 
   541  0009                     	;# 
   542  000A                     	;# 
   543  000B                     	;# 
   544  000C                     	;# 
   545  000D                     	;# 
   546  000E                     	;# 
   547  000E                     	;# 
   548  000F                     	;# 
   549  0010                     	;# 
   550  0011                     	;# 
   551  0012                     	;# 
   552  0013                     	;# 
   553  0014                     	;# 
   554  0015                     	;# 
   555  0015                     	;# 
   556  0016                     	;# 
   557  0017                     	;# 
   558  0018                     	;# 
   559  0019                     	;# 
   560  001A                     	;# 
   561  001B                     	;# 
   562  001B                     	;# 
   563  001C                     	;# 
   564  001D                     	;# 
   565  001E                     	;# 
   566  001F                     	;# 
   567  0081                     	;# 
   568  0085                     	;# 
   569  0086                     	;# 
   570  0087                     	;# 
   571  0088                     	;# 
   572  0089                     	;# 
   573  008C                     	;# 
   574  008D                     	;# 
   575  008E                     	;# 
   576  008F                     	;# 
   577  0090                     	;# 
   578  0091                     	;# 
   579  0092                     	;# 
   580  0093                     	;# 
   581  0093                     	;# 
   582  0093                     	;# 
   583  0094                     	;# 
   584  0095                     	;# 
   585  0096                     	;# 
   586  0097                     	;# 
   587  0098                     	;# 
   588  0099                     	;# 
   589  009A                     	;# 
   590  009B                     	;# 
   591  009C                     	;# 
   592  009D                     	;# 
   593  009E                     	;# 
   594  009F                     	;# 
   595  0105                     	;# 
   596  0107                     	;# 
   597  0108                     	;# 
   598  0109                     	;# 
   599  010C                     	;# 
   600  010C                     	;# 
   601  010D                     	;# 
   602  010E                     	;# 
   603  010F                     	;# 
   604  0185                     	;# 
   605  0187                     	;# 
   606  0188                     	;# 
   607  0189                     	;# 
   608  018C                     	;# 
   609  018D                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  000E                     	;# 
   626  000F                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0013                     	;# 
   631  0014                     	;# 
   632  0015                     	;# 
   633  0015                     	;# 
   634  0016                     	;# 
   635  0017                     	;# 
   636  0018                     	;# 
   637  0019                     	;# 
   638  001A                     	;# 
   639  001B                     	;# 
   640  001B                     	;# 
   641  001C                     	;# 
   642  001D                     	;# 
   643  001E                     	;# 
   644  001F                     	;# 
   645  0081                     	;# 
   646  0085                     	;# 
   647  0086                     	;# 
   648  0087                     	;# 
   649  0088                     	;# 
   650  0089                     	;# 
   651  008C                     	;# 
   652  008D                     	;# 
   653  008E                     	;# 
   654  008F                     	;# 
   655  0090                     	;# 
   656  0091                     	;# 
   657  0092                     	;# 
   658  0093                     	;# 
   659  0093                     	;# 
   660  0093                     	;# 
   661  0094                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0097                     	;# 
   665  0098                     	;# 
   666  0099                     	;# 
   667  009A                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  009F                     	;# 
   673  0105                     	;# 
   674  0107                     	;# 
   675  0108                     	;# 
   676  0109                     	;# 
   677  010C                     	;# 
   678  010C                     	;# 
   679  010D                     	;# 
   680  010E                     	;# 
   681  010F                     	;# 
   682  0185                     	;# 
   683  0187                     	;# 
   684  0188                     	;# 
   685  0189                     	;# 
   686  018C                     	;# 
   687  018D                     	;# 
   688  0000                     	;# 
   689  0001                     	;# 
   690  0002                     	;# 
   691  0003                     	;# 
   692  0004                     	;# 
   693  0005                     	;# 
   694  0006                     	;# 
   695  0007                     	;# 
   696  0008                     	;# 
   697  0009                     	;# 
   698  000A                     	;# 
   699  000B                     	;# 
   700  000C                     	;# 
   701  000D                     	;# 
   702  000E                     	;# 
   703  000E                     	;# 
   704  000F                     	;# 
   705  0010                     	;# 
   706  0011                     	;# 
   707  0012                     	;# 
   708  0013                     	;# 
   709  0014                     	;# 
   710  0015                     	;# 
   711  0015                     	;# 
   712  0016                     	;# 
   713  0017                     	;# 
   714  0018                     	;# 
   715  0019                     	;# 
   716  001A                     	;# 
   717  001B                     	;# 
   718  001B                     	;# 
   719  001C                     	;# 
   720  001D                     	;# 
   721  001E                     	;# 
   722  001F                     	;# 
   723  0081                     	;# 
   724  0085                     	;# 
   725  0086                     	;# 
   726  0087                     	;# 
   727  0088                     	;# 
   728  0089                     	;# 
   729  008C                     	;# 
   730  008D                     	;# 
   731  008E                     	;# 
   732  008F                     	;# 
   733  0090                     	;# 
   734  0091                     	;# 
   735  0092                     	;# 
   736  0093                     	;# 
   737  0093                     	;# 
   738  0093                     	;# 
   739  0094                     	;# 
   740  0095                     	;# 
   741  0096                     	;# 
   742  0097                     	;# 
   743  0098                     	;# 
   744  0099                     	;# 
   745  009A                     	;# 
   746  009B                     	;# 
   747  009C                     	;# 
   748  009D                     	;# 
   749  009E                     	;# 
   750  009F                     	;# 
   751  0105                     	;# 
   752  0107                     	;# 
   753  0108                     	;# 
   754  0109                     	;# 
   755  010C                     	;# 
   756  010C                     	;# 
   757  010D                     	;# 
   758  010E                     	;# 
   759  010F                     	;# 
   760  0185                     	;# 
   761  0187                     	;# 
   762  0188                     	;# 
   763  0189                     	;# 
   764  018C                     	;# 
   765  018D                     	;# 
   766  0000                     	;# 
   767  0001                     	;# 
   768  0002                     	;# 
   769  0003                     	;# 
   770  0004                     	;# 
   771  0005                     	;# 
   772  0006                     	;# 
   773  0007                     	;# 
   774  0008                     	;# 
   775  0009                     	;# 
   776  000A                     	;# 
   777  000B                     	;# 
   778  000C                     	;# 
   779  000D                     	;# 
   780  000E                     	;# 
   781  000E                     	;# 
   782  000F                     	;# 
   783  0010                     	;# 
   784  0011                     	;# 
   785  0012                     	;# 
   786  0013                     	;# 
   787  0014                     	;# 
   788  0015                     	;# 
   789  0015                     	;# 
   790  0016                     	;# 
   791  0017                     	;# 
   792  0018                     	;# 
   793  0019                     	;# 
   794  001A                     	;# 
   795  001B                     	;# 
   796  001B                     	;# 
   797  001C                     	;# 
   798  001D                     	;# 
   799  001E                     	;# 
   800  001F                     	;# 
   801  0081                     	;# 
   802  0085                     	;# 
   803  0086                     	;# 
   804  0087                     	;# 
   805  0088                     	;# 
   806  0089                     	;# 
   807  008C                     	;# 
   808  008D                     	;# 
   809  008E                     	;# 
   810  008F                     	;# 
   811  0090                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0093                     	;# 
   815  0093                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0095                     	;# 
   819  0096                     	;# 
   820  0097                     	;# 
   821  0098                     	;# 
   822  0099                     	;# 
   823  009A                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  009F                     	;# 
   829  0105                     	;# 
   830  0107                     	;# 
   831  0108                     	;# 
   832  0109                     	;# 
   833  010C                     	;# 
   834  010C                     	;# 
   835  010D                     	;# 
   836  010E                     	;# 
   837  010F                     	;# 
   838  0185                     	;# 
   839  0187                     	;# 
   840  0188                     	;# 
   841  0189                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  0000                     	;# 
   845  0001                     	;# 
   846  0002                     	;# 
   847  0003                     	;# 
   848  0004                     	;# 
   849  0005                     	;# 
   850  0006                     	;# 
   851  0007                     	;# 
   852  0008                     	;# 
   853  0009                     	;# 
   854  000A                     	;# 
   855  000B                     	;# 
   856  000C                     	;# 
   857  000D                     	;# 
   858  000E                     	;# 
   859  000E                     	;# 
   860  000F                     	;# 
   861  0010                     	;# 
   862  0011                     	;# 
   863  0012                     	;# 
   864  0013                     	;# 
   865  0014                     	;# 
   866  0015                     	;# 
   867  0015                     	;# 
   868  0016                     	;# 
   869  0017                     	;# 
   870  0018                     	;# 
   871  0019                     	;# 
   872  001A                     	;# 
   873  001B                     	;# 
   874  001B                     	;# 
   875  001C                     	;# 
   876  001D                     	;# 
   877  001E                     	;# 
   878  001F                     	;# 
   879  0081                     	;# 
   880  0085                     	;# 
   881  0086                     	;# 
   882  0087                     	;# 
   883  0088                     	;# 
   884  0089                     	;# 
   885  008C                     	;# 
   886  008D                     	;# 
   887  008E                     	;# 
   888  008F                     	;# 
   889  0090                     	;# 
   890  0091                     	;# 
   891  0092                     	;# 
   892  0093                     	;# 
   893  0093                     	;# 
   894  0093                     	;# 
   895  0094                     	;# 
   896  0095                     	;# 
   897  0096                     	;# 
   898  0097                     	;# 
   899  0098                     	;# 
   900  0099                     	;# 
   901  009A                     	;# 
   902  009B                     	;# 
   903  009C                     	;# 
   904  009D                     	;# 
   905  009E                     	;# 
   906  009F                     	;# 
   907  0105                     	;# 
   908  0107                     	;# 
   909  0108                     	;# 
   910  0109                     	;# 
   911  010C                     	;# 
   912  010C                     	;# 
   913  010D                     	;# 
   914  010E                     	;# 
   915  010F                     	;# 
   916  0185                     	;# 
   917  0187                     	;# 
   918  0188                     	;# 
   919  0189                     	;# 
   920  018C                     	;# 
   921  018D                     	;# 
   922                           
   923 ;; Function _buscar_receita is unused but had its address taken
   924  0000                     
   925 ;; Function _deletar_receita is unused but had its address taken
   926  0000                     
   927 ;; Function _receita_livre is unused but had its address taken
   928  0000                     
   929 ;; Function _formatar_receitas is unused but had its address taken
   930  0000                     
   931                           	psect	idataCOMMON
   932  07FF                     __pidataCOMMON:
   933                           
   934                           ;initializer for _indice_passos
   935  07FF  3402               	retlw	2
   936                           
   937                           	psect	idataBANK0
   938  1822                     __pidataBANK0:
   939                           
   940                           ;initializer for _ind_print
   941  1822  3402               	retlw	2
   942                           
   943                           ;initializer for _ind_fila
   944  1823  3402               	retlw	2
   945                           
   946                           	psect	idataBANK1
   947  187E                     __pidataBANK1:
   948                           
   949                           ;initializer for _IHM
   950  187E  3407               	retlw	low (fp__dispLCD_init-fpbase)
   951  187F  340A               	retlw	low (fp__dispLCD_str-fpbase)
   952  1880  3401               	retlw	low (fp__dispLCD-fpbase)
   953  1881  340D               	retlw	low (fp__dispLCD_num-fpbase)
   954  1882  3404               	retlw	low (fp__dispLCD_clr-fpbase)
   955                           
   956                           ;initializer for _EEPROM
   957  1883  3410               	retlw	low (fp__salvar_receita-fpbase)
   958  1884  3400               	retlw	0
   959  1885  3400               	retlw	0
   960  1886  3400               	retlw	0
   961  1887  3400               	retlw	0
   962                           
   963                           	psect	idataBANK3
   964  1A36                     __pidataBANK3:
   965                           
   966                           ;initializer for main@F1509
   967  1A36  344D               	retlw	77
   968  1A37  3475               	retlw	117
   969  1A38  346E               	retlw	110
   970  1A39  3464               	retlw	100
   971  1A3A  346F               	retlw	111
   972  1A3B  3420               	retlw	32
   973  1A3C  3461               	retlw	97
   974  1A3D  346F               	retlw	111
   975  1A3E  3420               	retlw	32
   976  1A3F  3473               	retlw	115
   977  1A40  3465               	retlw	101
   978  1A41  3475               	retlw	117
   979  1A42  3420               	retlw	32
   980  1A43  3463               	retlw	99
   981  1A44  346F               	retlw	111
   982  1A45  346D               	retlw	109
   983  1A46  3461               	retlw	97
   984  1A47  346E               	retlw	110
   985  1A48  3464               	retlw	100
   986  1A49  346F               	retlw	111
   987                           
   988                           ;initializer for _teclas
   989  1A4A  3431               	retlw	49
   990  1A4B  3432               	retlw	50
   991  1A4C  3433               	retlw	51
   992  1A4D  3441               	retlw	65
   993  1A4E  3434               	retlw	52
   994  1A4F  3435               	retlw	53
   995  1A50  3436               	retlw	54
   996  1A51  3442               	retlw	66
   997  1A52  3437               	retlw	55
   998  1A53  3438               	retlw	56
   999  1A54  3439               	retlw	57
  1000  1A55  3443               	retlw	67
  1001  1A56  342A               	retlw	42
  1002  1A57  3430               	retlw	48
  1003  1A58  3423               	retlw	35
  1004  1A59  3444               	retlw	68
  1005  0013                     _SSPBUF	set	19
  1006  0014                     _SSPCONbits	set	20
  1007  000C                     _PIR1bits	set	12
  1008  0010                     _T1CONbits	set	16
  1009  000E                     _TMR1L	set	14
  1010  000F                     _TMR1H	set	15
  1011  0008                     _PORTD	set	8
  1012  0005                     _SERIALIO	set	5
  1013  0005                     _PORTAbits	set	5
  1014  000B                     _INTCONbits	set	11
  1015  0006                     _LCDbits	set	6
  1016  0091                     _SSPCON2bits	set	145
  1017  0094                     _SSPSTATbits	set	148
  1018  0093                     _SSPADD	set	147
  1019  0087                     _TRISCbits	set	135
  1020  008C                     _PIE1bits	set	140
  1021  0088                     _TRISD	set	136
  1022  0085                     _TRISAbits	set	133
  1023  0086                     _TRISBbits	set	134
  1024  010C                     _EEDAT	set	268
  1025  010D                     _EEADR	set	269
  1026  010F                     _EEADRH	set	271
  1027  0188                     _ANSELbits	set	392
  1028  018D                     _EECON2	set	397
  1029  018C                     _EECON1bits	set	396
  1030  0189                     _ANSELH	set	393
  1031                           
  1032                           	psect	strings
  1033  1800                     __pstrings:
  1034  1800                     stringtab:
  1035  1800                     __stringtab:
  1036                           
  1037                           ;	String table - string pointers are 2 bytes each
  1038  1800  1BFF               	btfsc	btemp+1,7
  1039  1801  280A               	ljmp	stringcode
  1040  1802  1383               	bcf	3,7
  1041  1803  187F               	btfsc	btemp+1,0
  1042  1804  1783               	bsf	3,7
  1043  1805  0800               	movf	0,w
  1044  1806  0A84               	incf	4,f
  1045  1807  1903               	skipnz
  1046  1808  0AFF               	incf	btemp+1,f
  1047  1809  0008               	return
  1048  180A                     stringcode:
  1049  180A  087F               	movf	btemp+1,w
  1050  180B  397F               	andlw	127
  1051  180C  008A               	movwf	10
  1052  180D  0804               	movf	4,w
  1053  180E  0A84               	incf	4,f
  1054  180F  1903               	skipnz
  1055  1810  0AFF               	incf	btemp+1,f
  1056  1811  0082               	movwf	2
  1057  1812                     __stringbase:
  1058  1812                     __end_of__stringtab:
  1059                           
  1060                           	psect	stringtext
  1061  0800                     __pstringtext:
  1062  0800                     STR_4:
  1063  0800  3431               	retlw	49	;'1'
  1064  0801  343A               	retlw	58	;':'
  1065  0802  3420               	retlw	32	;' '
  1066  0803  3449               	retlw	73	;'I'
  1067  0804  344E               	retlw	78	;'N'
  1068  0805  3453               	retlw	83	;'S'
  1069  0806  3445               	retlw	69	;'E'
  1070  0807  3452               	retlw	82	;'R'
  1071  0808  3449               	retlw	73	;'I'
  1072  0809  3452               	retlw	82	;'R'
  1073  080A  3420               	retlw	32	;' '
  1074  080B  3453               	retlw	83	;'S'
  1075  080C  3445               	retlw	69	;'E'
  1076  080D  3451               	retlw	81	;'Q'
  1077  080E  3455               	retlw	85	;'U'
  1078  080F  3445               	retlw	69	;'E'
  1079  0810  344E               	retlw	78	;'N'
  1080  0811  3443               	retlw	67	;'C'
  1081  0812  3449               	retlw	73	;'I'
  1082  0813  3441               	retlw	65	;'A'
  1083  0814  340A               	retlw	10
  1084  0815  3432               	retlw	50	;'2'
  1085  0816  343A               	retlw	58	;':'
  1086  0817  3420               	retlw	32	;' '
  1087  0818  3442               	retlw	66	;'B'
  1088  0819  3455               	retlw	85	;'U'
  1089  081A  3453               	retlw	83	;'S'
  1090  081B  3443               	retlw	67	;'C'
  1091  081C  3441               	retlw	65	;'A'
  1092  081D  3452               	retlw	82	;'R'
  1093  081E  3420               	retlw	32	;' '
  1094  081F  3453               	retlw	83	;'S'
  1095  0820  3445               	retlw	69	;'E'
  1096  0821  3451               	retlw	81	;'Q'
  1097  0822  3455               	retlw	85	;'U'
  1098  0823  3445               	retlw	69	;'E'
  1099  0824  344E               	retlw	78	;'N'
  1100  0825  3443               	retlw	67	;'C'
  1101  0826  3449               	retlw	73	;'I'
  1102  0827  3441               	retlw	65	;'A'
  1103  0828  340A               	retlw	10
  1104  0829  3433               	retlw	51	;'3'
  1105  082A  343A               	retlw	58	;':'
  1106  082B  3420               	retlw	32	;' '
  1107  082C  3452               	retlw	82	;'R'
  1108  082D  3445               	retlw	69	;'E'
  1109  082E  3450               	retlw	80	;'P'
  1110  082F  3445               	retlw	69	;'E'
  1111  0830  3454               	retlw	84	;'T'
  1112  0831  3449               	retlw	73	;'I'
  1113  0832  3452               	retlw	82	;'R'
  1114  0833  3420               	retlw	32	;' '
  1115  0834  3455               	retlw	85	;'U'
  1116  0835  344C               	retlw	76	;'L'
  1117  0836  3454               	retlw	84	;'T'
  1118  0837  342E               	retlw	46	;'.'
  1119  0838  3420               	retlw	32	;' '
  1120  0839  3453               	retlw	83	;'S'
  1121  083A  3445               	retlw	69	;'E'
  1122  083B  3451               	retlw	81	;'Q'
  1123  083C  3455               	retlw	85	;'U'
  1124  083D  340A               	retlw	10
  1125  083E  3434               	retlw	52	;'4'
  1126  083F  343A               	retlw	58	;':'
  1127  0840  3420               	retlw	32	;' '
  1128  0841  3443               	retlw	67	;'C'
  1129  0842  344F               	retlw	79	;'O'
  1130  0843  344E               	retlw	78	;'N'
  1131  0844  3446               	retlw	70	;'F'
  1132  0845  3449               	retlw	73	;'I'
  1133  0846  3447               	retlw	71	;'G'
  1134  0847  3455               	retlw	85	;'U'
  1135  0848  3452               	retlw	82	;'R'
  1136  0849  3441               	retlw	65	;'A'
  1137  084A  3443               	retlw	67	;'C'
  1138  084B  344F               	retlw	79	;'O'
  1139  084C  3445               	retlw	69	;'E'
  1140  084D  3453               	retlw	83	;'S'
  1141  084E  3420               	retlw	32	;' '
  1142  084F  3420               	retlw	32	;' '
  1143  0850  3420               	retlw	32	;' '
  1144  0851  3420               	retlw	32	;' '
  1145  0852  3400               	retlw	0
  1146  0853                     STR_16:
  1147  0853  3420               	retlw	32	;' '
  1148  0854  3445               	retlw	69	;'E'
  1149  0855  3453               	retlw	83	;'S'
  1150  0856  3443               	retlw	67	;'C'
  1151  0857  344F               	retlw	79	;'O'
  1152  0858  344C               	retlw	76	;'L'
  1153  0859  3448               	retlw	72	;'H'
  1154  085A  3441               	retlw	65	;'A'
  1155  085B  3420               	retlw	32	;' '
  1156  085C  3441               	retlw	65	;'A'
  1157  085D  3420               	retlw	32	;' '
  1158  085E  344D               	retlw	77	;'M'
  1159  085F  3445               	retlw	69	;'E'
  1160  0860  344D               	retlw	77	;'M'
  1161  0861  344F               	retlw	79	;'O'
  1162  0862  3452               	retlw	82	;'R'
  1163  0863  3449               	retlw	73	;'I'
  1164  0864  3441               	retlw	65	;'A'
  1165  0865  340A               	retlw	10
  1166  0866  3420               	retlw	32	;' '
  1167  0867  3451               	retlw	81	;'Q'
  1168  0868  3455               	retlw	85	;'U'
  1169  0869  3445               	retlw	69	;'E'
  1170  086A  3420               	retlw	32	;' '
  1171  086B  3444               	retlw	68	;'D'
  1172  086C  3445               	retlw	69	;'E'
  1173  086D  3453               	retlw	83	;'S'
  1174  086E  3445               	retlw	69	;'E'
  1175  086F  344A               	retlw	74	;'J'
  1176  0870  3441               	retlw	65	;'A'
  1177  0871  3420               	retlw	32	;' '
  1178  0872  3453               	retlw	83	;'S'
  1179  0873  3441               	retlw	65	;'A'
  1180  0874  344C               	retlw	76	;'L'
  1181  0875  3456               	retlw	86	;'V'
  1182  0876  3441               	retlw	65	;'A'
  1183  0877  3452               	retlw	82	;'R'
  1184  0878  340A               	retlw	10
  1185  0879  3420               	retlw	32	;' '
  1186  087A  3430               	retlw	48	;'0'
  1187  087B  3420               	retlw	32	;' '
  1188  087C  3420               	retlw	32	;' '
  1189  087D  3420               	retlw	32	;' '
  1190  087E  3431               	retlw	49	;'1'
  1191  087F  3420               	retlw	32	;' '
  1192  0880  3420               	retlw	32	;' '
  1193  0881  3420               	retlw	32	;' '
  1194  0882  3432               	retlw	50	;'2'
  1195  0883  3420               	retlw	32	;' '
  1196  0884  3420               	retlw	32	;' '
  1197  0885  3420               	retlw	32	;' '
  1198  0886  3433               	retlw	51	;'3'
  1199  0887  3420               	retlw	32	;' '
  1200  0888  3420               	retlw	32	;' '
  1201  0889  3420               	retlw	32	;' '
  1202  088A  3434               	retlw	52	;'4'
  1203  088B  340A               	retlw	10
  1204  088C  3420               	retlw	32	;' '
  1205  088D  3435               	retlw	53	;'5'
  1206  088E  3420               	retlw	32	;' '
  1207  088F  3420               	retlw	32	;' '
  1208  0890  3420               	retlw	32	;' '
  1209  0891  3436               	retlw	54	;'6'
  1210  0892  3420               	retlw	32	;' '
  1211  0893  3420               	retlw	32	;' '
  1212  0894  3420               	retlw	32	;' '
  1213  0895  3437               	retlw	55	;'7'
  1214  0896  3420               	retlw	32	;' '
  1215  0897  3420               	retlw	32	;' '
  1216  0898  3420               	retlw	32	;' '
  1217  0899  3438               	retlw	56	;'8'
  1218  089A  3420               	retlw	32	;' '
  1219  089B  3420               	retlw	32	;' '
  1220  089C  3420               	retlw	32	;' '
  1221  089D  3439               	retlw	57	;'9'
  1222  089E  3420               	retlw	32	;' '
  1223  089F  3420               	retlw	32	;' '
  1224  08A0  3400               	retlw	0
  1225  08A1                     STR_15:
  1226  08A1  3420               	retlw	32	;' '
  1227  08A2  3420               	retlw	32	;' '
  1228  08A3  3420               	retlw	32	;' '
  1229  08A4  3420               	retlw	32	;' '
  1230  08A5  3444               	retlw	68	;'D'
  1231  08A6  3445               	retlw	69	;'E'
  1232  08A7  3453               	retlw	83	;'S'
  1233  08A8  3445               	retlw	69	;'E'
  1234  08A9  344A               	retlw	74	;'J'
  1235  08AA  3441               	retlw	65	;'A'
  1236  08AB  3420               	retlw	32	;' '
  1237  08AC  3453               	retlw	83	;'S'
  1238  08AD  3441               	retlw	65	;'A'
  1239  08AE  344C               	retlw	76	;'L'
  1240  08AF  3456               	retlw	86	;'V'
  1241  08B0  3441               	retlw	65	;'A'
  1242  08B1  3452               	retlw	82	;'R'
  1243  08B2  3420               	retlw	32	;' '
  1244  08B3  3420               	retlw	32	;' '
  1245  08B4  3420               	retlw	32	;' '
  1246  08B5  340A               	retlw	10
  1247  08B6  3420               	retlw	32	;' '
  1248  08B7  3420               	retlw	32	;' '
  1249  08B8  3420               	retlw	32	;' '
  1250  08B9  3420               	retlw	32	;' '
  1251  08BA  3420               	retlw	32	;' '
  1252  08BB  3453               	retlw	83	;'S'
  1253  08BC  3445               	retlw	69	;'E'
  1254  08BD  3451               	retlw	81	;'Q'
  1255  08BE  3455               	retlw	85	;'U'
  1256  08BF  3445               	retlw	69	;'E'
  1257  08C0  344E               	retlw	78	;'N'
  1258  08C1  3443               	retlw	67	;'C'
  1259  08C2  3449               	retlw	73	;'I'
  1260  08C3  3441               	retlw	65	;'A'
  1261  08C4  3420               	retlw	32	;' '
  1262  08C5  343F               	retlw	63	;'?'
  1263  08C6  3420               	retlw	32	;' '
  1264  08C7  3420               	retlw	32	;' '
  1265  08C8  340A               	retlw	10
  1266  08C9  340A               	retlw	10
  1267  08CA  3423               	retlw	35	;'#'
  1268  08CB  3420               	retlw	32	;' '
  1269  08CC  342D               	retlw	45	;'-'
  1270  08CD  3420               	retlw	32	;' '
  1271  08CE  3453               	retlw	83	;'S'
  1272  08CF  3449               	retlw	73	;'I'
  1273  08D0  344D               	retlw	77	;'M'
  1274  08D1  3420               	retlw	32	;' '
  1275  08D2  3420               	retlw	32	;' '
  1276  08D3  3420               	retlw	32	;' '
  1277  08D4  3420               	retlw	32	;' '
  1278  08D5  3420               	retlw	32	;' '
  1279  08D6  3420               	retlw	32	;' '
  1280  08D7  342A               	retlw	42	;'*'
  1281  08D8  3420               	retlw	32	;' '
  1282  08D9  342D               	retlw	45	;'-'
  1283  08DA  3420               	retlw	32	;' '
  1284  08DB  344E               	retlw	78	;'N'
  1285  08DC  3441               	retlw	65	;'A'
  1286  08DD  344F               	retlw	79	;'O'
  1287  08DE  3400               	retlw	0
  1288  08DF                     STR_13:
  1289  08DF  3443               	retlw	67	;'C'
  1290  08E0  3469               	retlw	105	;'i'
  1291  08E1  3463               	retlw	99	;'c'
  1292  08E2  346C               	retlw	108	;'l'
  1293  08E3  346F               	retlw	111	;'o'
  1294  08E4  3473               	retlw	115	;'s'
  1295  08E5  343A               	retlw	58	;':'
  1296  08E6  3420               	retlw	32	;' '
  1297  08E7  3420               	retlw	32	;' '
  1298  08E8  3420               	retlw	32	;' '
  1299  08E9  3420               	retlw	32	;' '
  1300  08EA  3420               	retlw	32	;' '
  1301  08EB  3420               	retlw	32	;' '
  1302  08EC  3420               	retlw	32	;' '
  1303  08ED  3420               	retlw	32	;' '
  1304  08EE  3420               	retlw	32	;' '
  1305  08EF  3420               	retlw	32	;' '
  1306  08F0  3420               	retlw	32	;' '
  1307  08F1  3420               	retlw	32	;' '
  1308  08F2  3420               	retlw	32	;' '
  1309  08F3  3400               	retlw	0
  1310  08F4                     STR_11:
  1311  08F4  343C               	retlw	60	;'<'
  1312  08F5  3420               	retlw	32	;' '
  1313  08F6  3420               	retlw	32	;' '
  1314  08F7  342F               	retlw	47	;'/'
  1315  08F8  3420               	retlw	32	;' '
  1316  08F9  3420               	retlw	32	;' '
  1317  08FA  343E               	retlw	62	;'>'
  1318  08FB  3420               	retlw	32	;' '
  1319  08FC  3463               	retlw	99	;'c'
  1320  08FD  343A               	retlw	58	;':'
  1321  08FE  3420               	retlw	32	;' '
  1322  08FF  3420               	retlw	32	;' '
  1323  0900  3420               	retlw	32	;' '
  1324  0901  3420               	retlw	32	;' '
  1325  0902  3420               	retlw	32	;' '
  1326  0903  3420               	retlw	32	;' '
  1327  0904  3420               	retlw	32	;' '
  1328  0905  3420               	retlw	32	;' '
  1329  0906  3420               	retlw	32	;' '
  1330  0907  3420               	retlw	32	;' '
  1331  0908  3400               	retlw	0
  1332  0909                     STR_20:
  1333  0909  3420               	retlw	32	;' '
  1334  090A  3420               	retlw	32	;' '
  1335  090B  3420               	retlw	32	;' '
  1336  090C  3420               	retlw	32	;' '
  1337  090D  3420               	retlw	32	;' '
  1338  090E  3420               	retlw	32	;' '
  1339  090F  3420               	retlw	32	;' '
  1340  0910  3420               	retlw	32	;' '
  1341  0911  3453               	retlw	83	;'S'
  1342  0912  3441               	retlw	65	;'A'
  1343  0913  344C               	retlw	76	;'L'
  1344  0914  3456               	retlw	86	;'V'
  1345  0915  3441               	retlw	65	;'A'
  1346  0916  3420               	retlw	32	;' '
  1347  0917  3420               	retlw	32	;' '
  1348  0918  3420               	retlw	32	;' '
  1349  0919  3420               	retlw	32	;' '
  1350  091A  3420               	retlw	32	;' '
  1351  091B  3420               	retlw	32	;' '
  1352  091C  3420               	retlw	32	;' '
  1353  091D  3400               	retlw	0
  1354  091E                     STR_3:
  1355  091E  3420               	retlw	32	;' '
  1356  091F  3420               	retlw	32	;' '
  1357  0920  3420               	retlw	32	;' '
  1358  0921  3420               	retlw	32	;' '
  1359  0922  3420               	retlw	32	;' '
  1360  0923  3420               	retlw	32	;' '
  1361  0924  3453               	retlw	83	;'S'
  1362  0925  3445               	retlw	69	;'E'
  1363  0926  3447               	retlw	71	;'G'
  1364  0927  3447               	retlw	71	;'G'
  1365  0928  3454               	retlw	84	;'T'
  1366  0929  3454               	retlw	84	;'T'
  1367  092A  3449               	retlw	73	;'I'
  1368  092B  3420               	retlw	32	;' '
  1369  092C  3420               	retlw	32	;' '
  1370  092D  3420               	retlw	32	;' '
  1371  092E  3420               	retlw	32	;' '
  1372  092F  3420               	retlw	32	;' '
  1373  0930  3420               	retlw	32	;' '
  1374  0931  3420               	retlw	32	;' '
  1375  0932  3400               	retlw	0
  1376  0933                     STR_10:
  1377  0933  3420               	retlw	32	;' '
  1378  0934  3420               	retlw	32	;' '
  1379  0935  3420               	retlw	32	;' '
  1380  0936  3420               	retlw	32	;' '
  1381  0937  3420               	retlw	32	;' '
  1382  0938  3420               	retlw	32	;' '
  1383  0939  3420               	retlw	32	;' '
  1384  093A  345B               	retlw	91	;'['
  1385  093B  3420               	retlw	32	;' '
  1386  093C  3420               	retlw	32	;' '
  1387  093D  3420               	retlw	32	;' '
  1388  093E  3420               	retlw	32	;' '
  1389  093F  345D               	retlw	93	;']'
  1390  0940  3420               	retlw	32	;' '
  1391  0941  3420               	retlw	32	;' '
  1392  0942  3420               	retlw	32	;' '
  1393  0943  3420               	retlw	32	;' '
  1394  0944  3420               	retlw	32	;' '
  1395  0945  3420               	retlw	32	;' '
  1396  0946  3420               	retlw	32	;' '
  1397  0947  3400               	retlw	0
  1398  0948                     STR_19:
  1399  0948  3420               	retlw	32	;' '
  1400  0949  3420               	retlw	32	;' '
  1401  094A  3420               	retlw	32	;' '
  1402  094B  3420               	retlw	32	;' '
  1403  094C  3420               	retlw	32	;' '
  1404  094D  3420               	retlw	32	;' '
  1405  094E  3453               	retlw	83	;'S'
  1406  094F  3445               	retlw	69	;'E'
  1407  0950  3451               	retlw	81	;'Q'
  1408  0951  3455               	retlw	85	;'U'
  1409  0952  3445               	retlw	69	;'E'
  1410  0953  344E               	retlw	78	;'N'
  1411  0954  3443               	retlw	67	;'C'
  1412  0955  3449               	retlw	73	;'I'
  1413  0956  3441               	retlw	65	;'A'
  1414  0957  3420               	retlw	32	;' '
  1415  0958  3420               	retlw	32	;' '
  1416  0959  3420               	retlw	32	;' '
  1417  095A  3420               	retlw	32	;' '
  1418  095B  3420               	retlw	32	;' '
  1419  095C  3400               	retlw	0
  1420  095D                     STR_6:
  1421  095D  3420               	retlw	32	;' '
  1422  095E  3420               	retlw	32	;' '
  1423  095F  3420               	retlw	32	;' '
  1424  0960  3420               	retlw	32	;' '
  1425  0961  3420               	retlw	32	;' '
  1426  0962  3444               	retlw	68	;'D'
  1427  0963  344F               	retlw	79	;'O'
  1428  0964  3420               	retlw	32	;' '
  1429  0965  3453               	retlw	83	;'S'
  1430  0966  3449               	retlw	73	;'I'
  1431  0967  3453               	retlw	83	;'S'
  1432  0968  3454               	retlw	84	;'T'
  1433  0969  3445               	retlw	69	;'E'
  1434  096A  344D               	retlw	77	;'M'
  1435  096B  3441               	retlw	65	;'A'
  1436  096C  3420               	retlw	32	;' '
  1437  096D  3420               	retlw	32	;' '
  1438  096E  3420               	retlw	32	;' '
  1439  096F  3420               	retlw	32	;' '
  1440  0970  3420               	retlw	32	;' '
  1441  0971  3400               	retlw	0
  1442  0972                     STR_7:
  1443  0972  3420               	retlw	32	;' '
  1444  0973  3420               	retlw	32	;' '
  1445  0974  3420               	retlw	32	;' '
  1446  0975  3441               	retlw	65	;'A'
  1447  0976  3420               	retlw	32	;' '
  1448  0977  3420               	retlw	32	;' '
  1449  0978  3420               	retlw	32	;' '
  1450  0979  3442               	retlw	66	;'B'
  1451  097A  3420               	retlw	32	;' '
  1452  097B  3420               	retlw	32	;' '
  1453  097C  3420               	retlw	32	;' '
  1454  097D  3443               	retlw	67	;'C'
  1455  097E  3420               	retlw	32	;' '
  1456  097F  3420               	retlw	32	;' '
  1457  0980  3420               	retlw	32	;' '
  1458  0981  3444               	retlw	68	;'D'
  1459  0982  3420               	retlw	32	;' '
  1460  0983  3420               	retlw	32	;' '
  1461  0984  3420               	retlw	32	;' '
  1462  0985  3420               	retlw	32	;' '
  1463  0986  3400               	retlw	0
  1464  0987                     STR_5:
  1465  0987  3420               	retlw	32	;' '
  1466  0988  3420               	retlw	32	;' '
  1467  0989  3420               	retlw	32	;' '
  1468  098A  3441               	retlw	65	;'A'
  1469  098B  344A               	retlw	74	;'J'
  1470  098C  3455               	retlw	85	;'U'
  1471  098D  3453               	retlw	83	;'S'
  1472  098E  3454               	retlw	84	;'T'
  1473  098F  3445               	retlw	69	;'E'
  1474  0990  3420               	retlw	32	;' '
  1475  0991  344F               	retlw	79	;'O'
  1476  0992  3420               	retlw	32	;' '
  1477  0993  3449               	retlw	73	;'I'
  1478  0994  344E               	retlw	78	;'N'
  1479  0995  3449               	retlw	73	;'I'
  1480  0996  3443               	retlw	67	;'C'
  1481  0997  3449               	retlw	73	;'I'
  1482  0998  344F               	retlw	79	;'O'
  1483  0999  3420               	retlw	32	;' '
  1484  099A  3420               	retlw	32	;' '
  1485  099B  3400               	retlw	0
  1486  099C                     STR_8:
  1487  099C  3420               	retlw	32	;' '
  1488  099D  3420               	retlw	32	;' '
  1489  099E  3449               	retlw	73	;'I'
  1490  099F  344E               	retlw	78	;'N'
  1491  09A0  3453               	retlw	83	;'S'
  1492  09A1  3449               	retlw	73	;'I'
  1493  09A2  3452               	retlw	82	;'R'
  1494  09A3  3441               	retlw	65	;'A'
  1495  09A4  3420               	retlw	32	;' '
  1496  09A5  344F               	retlw	79	;'O'
  1497  09A6  3453               	retlw	83	;'S'
  1498  09A7  3420               	retlw	32	;' '
  1499  09A8  3450               	retlw	80	;'P'
  1500  09A9  3441               	retlw	65	;'A'
  1501  09AA  3453               	retlw	83	;'S'
  1502  09AB  3453               	retlw	83	;'S'
  1503  09AC  344F               	retlw	79	;'O'
  1504  09AD  3453               	retlw	83	;'S'
  1505  09AE  3420               	retlw	32	;' '
  1506  09AF  3420               	retlw	32	;' '
  1507  09B0  3400               	retlw	0
  1508  09B1                     STR_14:
  1509  09B1  3430               	retlw	48	;'0'
  1510  09B2  3420               	retlw	32	;' '
  1511  09B3  342D               	retlw	45	;'-'
  1512  09B4  3420               	retlw	32	;' '
  1513  09B5  3443               	retlw	67	;'C'
  1514  09B6  3469               	retlw	105	;'i'
  1515  09B7  3463               	retlw	99	;'c'
  1516  09B8  346C               	retlw	108	;'l'
  1517  09B9  346F               	retlw	111	;'o'
  1518  09BA  3420               	retlw	32	;' '
  1519  09BB  3463               	retlw	99	;'c'
  1520  09BC  346F               	retlw	111	;'o'
  1521  09BD  346E               	retlw	110	;'n'
  1522  09BE  3474               	retlw	116	;'t'
  1523  09BF  3469               	retlw	105	;'i'
  1524  09C0  346E               	retlw	110	;'n'
  1525  09C1  3475               	retlw	117	;'u'
  1526  09C2  346F               	retlw	111	;'o'
  1527  09C3  3420               	retlw	32	;' '
  1528  09C4  3420               	retlw	32	;' '
  1529  09C5  3400               	retlw	0
  1530  09C6                     STR_21:
  1531  09C6  3463               	retlw	99	;'c'
  1532  09C7  346F               	retlw	111	;'o'
  1533  09C8  346E               	retlw	110	;'n'
  1534  09C9  3466               	retlw	102	;'f'
  1535  09CA  3469               	retlw	105	;'i'
  1536  09CB  3467               	retlw	103	;'g'
  1537  09CC  3420               	retlw	32	;' '
  1538  09CD  3463               	retlw	99	;'c'
  1539  09CE  346F               	retlw	111	;'o'
  1540  09CF  346E               	retlw	110	;'n'
  1541  09D0  3474               	retlw	116	;'t'
  1542  09D1  3472               	retlw	114	;'r'
  1543  09D2  346C               	retlw	108	;'l'
  1544  09D3  343A               	retlw	58	;':'
  1545  09D4  3420               	retlw	32	;' '
  1546  09D5  3420               	retlw	32	;' '
  1547  09D6  3420               	retlw	32	;' '
  1548  09D7  3420               	retlw	32	;' '
  1549  09D8  3420               	retlw	32	;' '
  1550  09D9  3425               	retlw	37	;'%'
  1551  09DA  3400               	retlw	0
  1552  09DB                     STR_12:
  1553  09DB  3463               	retlw	99	;'c'
  1554  09DC  346F               	retlw	111	;'o'
  1555  09DD  346E               	retlw	110	;'n'
  1556  09DE  3466               	retlw	102	;'f'
  1557  09DF  3469               	retlw	105	;'i'
  1558  09E0  3467               	retlw	103	;'g'
  1559  09E1  3420               	retlw	32	;' '
  1560  09E2  3474               	retlw	116	;'t'
  1561  09E3  3465               	retlw	101	;'e'
  1562  09E4  346D               	retlw	109	;'m'
  1563  09E5  3470               	retlw	112	;'p'
  1564  09E6  346F               	retlw	111	;'o'
  1565  09E7  343A               	retlw	58	;':'
  1566  09E8  3420               	retlw	32	;' '
  1567  09E9  3420               	retlw	32	;' '
  1568  09EA  3420               	retlw	32	;' '
  1569  09EB  3420               	retlw	32	;' '
  1570  09EC  3420               	retlw	32	;' '
  1571  09ED  3420               	retlw	32	;' '
  1572  09EE  3473               	retlw	115	;'s'
  1573  09EF  3400               	retlw	0
  1574  09F0                     STR_9:
  1575  09F0  343C               	retlw	60	;'<'
  1576  09F1  3420               	retlw	32	;' '
  1577  09F2  3420               	retlw	32	;' '
  1578  09F3  342F               	retlw	47	;'/'
  1579  09F4  3420               	retlw	32	;' '
  1580  09F5  3420               	retlw	32	;' '
  1581  09F6  343E               	retlw	62	;'>'
  1582  09F7  3400               	retlw	0
  1583  09F8                     STR_1:
  1584  09F8  34FF               	retlw	-1
  1585  09F9  3400               	retlw	0
  1586  09F8                     
  1587                           	psect	cinit
  1588  000F                     start_initialization:	
  1589                           ; #config settings
  1590                           
  1591  000F                     __initialization:
  1592                           
  1593                           ; Initialize objects allocated to BANK3
  1594  000F  1783               	bsf	3,7	;select IRP bank2
  1595  0010  30B4               	movlw	low (__pdataBANK3+36)
  1596  0011  00FD               	movwf	btemp+-1
  1597  0012  301A               	movlw	high __pidataBANK3
  1598  0013  00FE               	movwf	btemp
  1599  0014  3036               	movlw	low __pidataBANK3
  1600  0015  00FF               	movwf	btemp+1
  1601  0016  3090               	movlw	low __pdataBANK3
  1602  0017  0084               	movwf	4
  1603  0018  160A  158A  20E1  120A  118A  	fcall	init_ram0
  1604                           
  1605                           ; Initialize objects allocated to BANK1
  1606  001D  1383               	bcf	3,7	;select IRP bank0
  1607  001E  30E8               	movlw	low (__pdataBANK1+10)
  1608  001F  00FD               	movwf	btemp+-1
  1609  0020  3018               	movlw	high __pidataBANK1
  1610  0021  00FE               	movwf	btemp
  1611  0022  307E               	movlw	low __pidataBANK1
  1612  0023  00FF               	movwf	btemp+1
  1613  0024  30DE               	movlw	low __pdataBANK1
  1614  0025  0084               	movwf	4
  1615  0026  160A  158A  20E1  120A  118A  	fcall	init_ram0
  1616                           
  1617                           ; Initialize objects allocated to BANK0
  1618  002B  160A  158A  2022  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1619  0030  00E6               	movwf	__pdataBANK0& (0+127)
  1620  0031  160A  158A  2023  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
  1621  0036  00E7               	movwf	(__pdataBANK0+1)& (0+127)
  1622                           
  1623                           ; Initialize objects allocated to COMMON
  1624  0037  120A  118A  27FF  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1625  003C  00FB               	movwf	__pdataCOMMON& (0+127)
  1626                           
  1627                           ; Clear objects allocated to BANK1
  1628  003D  1683               	bsf	3,5	;RP0=1, select bank1
  1629  003E  1303               	bcf	3,6	;RP1=0, select bank1
  1630  003F  01E8               	clrf	__pbssBANK1& (0+127)
  1631  0040  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  1632                           
  1633                           ; Clear objects allocated to BANK0
  1634  0041  3048               	movlw	low __pbssBANK0
  1635  0042  0084               	movwf	4
  1636  0043  3066               	movlw	low (__pbssBANK0+30)
  1637  0044  160A  158A  2059  120A  118A  	fcall	clear_ram0
  1638                           
  1639                           ; Clear objects allocated to COMMON
  1640  0049  01F6               	clrf	__pbssCOMMON& (0+127)
  1641  004A  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1642  004B  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1643  004C  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1644  004D  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  1645  004E                     end_of_initialization:	
  1646                           ;End of C runtime variable initialization code
  1647                           
  1648  004E                     __end_of__initialization:
  1649  004E  0183               	clrf	3
  1650  004F  160A  118A  2DBE   	ljmp	_main	;jump to C main() function
  1651                           
  1652                           	psect	bssCOMMON
  1653  0076                     __pbssCOMMON:
  1654  0076                     _cont_ciclos:
  1655  0076                     	ds	2
  1656  0078                     _ciclos:
  1657  0078                     	ds	2
  1658  007A                     _atuador:
  1659  007A                     	ds	1
  1660                           
  1661                           	psect	dataCOMMON
  1662  007B                     __pdataCOMMON:
  1663  007B                     _indice_passos:
  1664  007B                     	ds	1
  1665                           
  1666                           	psect	bssBANK0
  1667  0048                     __pbssBANK0:
  1668  0048                     _t1cont:
  1669  0048                     	ds	4
  1670  004C                     salva_atuadores_init@F108:
  1671  004C                     	ds	4
  1672  0050                     _teclaAnterior:
  1673  0050                     	ds	1
  1674  0051                     _lenSerialIO:
  1675  0051                     	ds	1
  1676  0052                     _ptrSerialOut:
  1677  0052                     	ds	1
  1678  0053                     _ptrSerialIn:
  1679  0053                     	ds	1
  1680  0054                     _fila:
  1681  0054                     	ds	18
  1682                           
  1683                           	psect	dataBANK0
  1684  0066                     __pdataBANK0:
  1685  0066                     _ind_print:
  1686  0066                     	ds	1
  1687  0067                     _ind_fila:
  1688  0067                     	ds	1
  1689                           
  1690                           	psect	bssBANK1
  1691  00E8                     __pbssBANK1:
  1692  00E8                     main@F1485:
  1693  00E8                     	ds	1
  1694  00E9                     main@F1483:
  1695  00E9                     	ds	1
  1696                           
  1697                           	psect	dataBANK1
  1698  00DE                     __pdataBANK1:
  1699  00DE                     _IHM:
  1700  00DE                     	ds	5
  1701  00E3                     _EEPROM:
  1702  00E3                     	ds	5
  1703                           
  1704                           	psect	dataBANK3
  1705  0190                     __pdataBANK3:
  1706  0190                     main@F1509:
  1707  0190                     	ds	20
  1708  01A4                     _teclas:
  1709  01A4                     	ds	16
  1710                           
  1711                           	psect	inittext
  1712  18DD                     init_fetch0:	
  1713                           ;	Called with low address in FSR and high address in W
  1714                           
  1715  18DD  087E               	movf	btemp,w
  1716  18DE  008A               	movwf	10
  1717  18DF  087F               	movf	btemp+1,w
  1718  18E0  0082               	movwf	2
  1719  18E1                     init_ram0:	
  1720                           ;Called with:
  1721                           ;	high address of idata address in btemp 
  1722                           ;	low address of idata address in btemp+1 
  1723                           ;	low address of data in FSR
  1724                           ;	high address + 1 of data in btemp-1
  1725                           
  1726  18E1  160A  158A  20DD  160A  158A  	fcall	init_fetch0
  1727  18E6  0080               	movwf	0
  1728  18E7  0A84               	incf	4,f
  1729  18E8  0804               	movf	4,w
  1730  18E9  067D               	xorwf	btemp+-1,w
  1731  18EA  1903               	btfsc	3,2
  1732  18EB  3400               	retlw	0
  1733  18EC  0AFF               	incf	btemp+1,f
  1734  18ED  1903               	btfsc	3,2
  1735  18EE  0AFE               	incf	btemp,f
  1736  18EF  28E1               	goto	init_ram0
  1737                           
  1738                           	psect	clrtext
  1739  1859                     clear_ram0:	
  1740                           ;	Called with FSR containing the base address, and
  1741                           ;	W with the last address+1
  1742                           
  1743  1859  0064               	clrwdt	;clear the watchdog before getting into this loop
  1744  185A                     clrloop0:
  1745  185A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1746  185B  0A84               	incf	4,f	;increment pointer
  1747  185C  0604               	xorwf	4,w	;XOR with final address
  1748  185D  1903               	btfsc	3,2	;have we reached the end yet?
  1749  185E  3400               	retlw	0	;all done for this memory range, return
  1750  185F  0604               	xorwf	4,w	;XOR again to restore value
  1751  1860  285A               	goto	clrloop0	;do the next byte
  1752                           
  1753                           	psect	cstackBANK1
  1754  00A0                     __pcstackBANK1:
  1755  00A0                     main@lema:
  1756                           
  1757                           ; 20 bytes @ 0x0
  1758  00A0                     	ds	20
  1759  00B4                     main@contPassos:
  1760                           
  1761                           ; 1 bytes @ 0x14
  1762  00B4                     	ds	1
  1763  00B5                     main@aux:
  1764                           
  1765                           ; 1 bytes @ 0x15
  1766  00B5                     	ds	1
  1767  00B6                     _main$893:
  1768                           
  1769                           ; 2 bytes @ 0x16
  1770  00B6                     	ds	2
  1771  00B8                     _main$894:
  1772                           
  1773                           ; 2 bytes @ 0x18
  1774  00B8                     	ds	2
  1775  00BA                     _main$895:
  1776                           
  1777                           ; 2 bytes @ 0x1A
  1778  00BA                     	ds	2
  1779  00BC                     _main$896:
  1780                           
  1781                           ; 2 bytes @ 0x1C
  1782  00BC                     	ds	2
  1783  00BE                     _main$897:
  1784                           
  1785                           ; 2 bytes @ 0x1E
  1786  00BE                     	ds	2
  1787  00C0                     _main$898:
  1788                           
  1789                           ; 2 bytes @ 0x20
  1790  00C0                     	ds	2
  1791  00C2                     _main$899:
  1792                           
  1793                           ; 2 bytes @ 0x22
  1794  00C2                     	ds	2
  1795  00C4                     _main$900:
  1796                           
  1797                           ; 2 bytes @ 0x24
  1798  00C4                     	ds	2
  1799  00C6                     _main$905:
  1800                           
  1801                           ; 2 bytes @ 0x26
  1802  00C6                     	ds	2
  1803  00C8                     main@init_cond:
  1804                           
  1805                           ; 1 bytes @ 0x28
  1806  00C8                     	ds	1
  1807  00C9                     main@i_882:
  1808                           
  1809                           ; 1 bytes @ 0x29
  1810  00C9                     	ds	1
  1811  00CA                     main@ptr:
  1812                           
  1813                           ; 1 bytes @ 0x2A
  1814  00CA                     	ds	1
  1815  00CB                     main@i:
  1816                           
  1817                           ; 1 bytes @ 0x2B
  1818  00CB                     	ds	1
  1819  00CC                     main@j:
  1820                           
  1821                           ; 1 bytes @ 0x2C
  1822  00CC                     	ds	1
  1823  00CD                     main@i_876:
  1824                           
  1825                           ; 1 bytes @ 0x2D
  1826  00CD                     	ds	1
  1827  00CE                     main@j_877:
  1828                           
  1829                           ; 1 bytes @ 0x2E
  1830  00CE                     	ds	1
  1831  00CF                     main@i_927:
  1832                           
  1833                           ; 1 bytes @ 0x2F
  1834  00CF                     	ds	1
  1835  00D0                     main@j_928:
  1836                           
  1837                           ; 1 bytes @ 0x30
  1838  00D0                     	ds	1
  1839  00D1                     main@i_930:
  1840                           
  1841                           ; 1 bytes @ 0x31
  1842  00D1                     	ds	1
  1843  00D2                     main@j_931:
  1844                           
  1845                           ; 1 bytes @ 0x32
  1846  00D2                     	ds	1
  1847  00D3                     main@vetorIn:
  1848                           
  1849                           ; 1 bytes @ 0x33
  1850  00D3                     	ds	1
  1851  00D4                     main@ciclos:
  1852                           
  1853                           ; 2 bytes @ 0x34
  1854  00D4                     	ds	2
  1855  00D6                     main@meAtuadores:
  1856                           
  1857                           ; 1 bytes @ 0x36
  1858  00D6                     	ds	1
  1859  00D7                     main@vetorOut:
  1860                           
  1861                           ; 1 bytes @ 0x37
  1862  00D7                     	ds	1
  1863  00D8                     main@botao:
  1864                           
  1865                           ; 1 bytes @ 0x38
  1866  00D8                     	ds	1
  1867  00D9                     main@num:
  1868                           
  1869                           ; 2 bytes @ 0x39
  1870  00D9                     	ds	2
  1871  00DB                     main@estado:
  1872                           
  1873                           ; 1 bytes @ 0x3B
  1874  00DB                     	ds	1
  1875  00DC                     main@auxPasso:
  1876                           
  1877                           ; 1 bytes @ 0x3C
  1878  00DC                     	ds	1
  1879  00DD                     main@tecla:
  1880                           
  1881                           ; 1 bytes @ 0x3D
  1882  00DD                     	ds	1
  1883                           
  1884                           	psect	cstackCOMMON
  1885  0070                     __pcstackCOMMON:
  1886  0070                     ?_decodifica:
  1887  0070                     ?_fifo_alinharPrint:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  0070                     ?_fifo_adrs:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0070                     ?_I2C_start:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0070                     ?_I2C_tx:	
  1897                           ; 1 bytes @ 0x0
  1898                           
  1899  0070                     ?_I2C_ack_receive:	
  1900                           ; 1 bytes @ 0x0
  1901                           
  1902  0070                     ?_I2C_stop:	
  1903                           ; 1 bytes @ 0x0
  1904                           
  1905  0070                     ?_dispLCD_instReg:	
  1906                           ; 1 bytes @ 0x0
  1907                           
  1908  0070                     ?_dispLCD_dataReg:	
  1909                           ; 1 bytes @ 0x0
  1910                           
  1911  0070                     ?_dispLCD_init:	
  1912                           ; 1 bytes @ 0x0
  1913                           
  1914  0070                     ?_dispLCD_clr:	
  1915                           ; 1 bytes @ 0x0
  1916                           
  1917  0070                     ?_addIndicePassos:	
  1918                           ; 1 bytes @ 0x0
  1919                           
  1920  0070                     ?_getIndicePassos:	
  1921                           ; 1 bytes @ 0x0
  1922                           
  1923  0070                     ?_resetIndicePassos:	
  1924                           ; 1 bytes @ 0x0
  1925                           
  1926  0070                     ?_resetContCiclos:	
  1927                           ; 1 bytes @ 0x0
  1928                           
  1929  0070                     ?_addContCiclos:	
  1930                           ; 1 bytes @ 0x0
  1931                           
  1932  0070                     ?_ler_atuador:	
  1933                           ; 1 bytes @ 0x0
  1934                           
  1935  0070                     ?_alt_atuador:	
  1936                           ; 1 bytes @ 0x0
  1937                           
  1938  0070                     ?_init_atuadores:	
  1939                           ; 1 bytes @ 0x0
  1940                           
  1941  0070                     ?_salva_atuadores_init:	
  1942                           ; 1 bytes @ 0x0
  1943                           
  1944  0070                     ?_fifo_lerPos:	
  1945                           ; 1 bytes @ 0x0
  1946                           
  1947  0070                     ?_fifo_delete:	
  1948                           ; 1 bytes @ 0x0
  1949                           
  1950  0070                     ?_fifo_add:	
  1951                           ; 1 bytes @ 0x0
  1952                           
  1953  0070                     ?_fifo_add_tempo:	
  1954                           ; 1 bytes @ 0x0
  1955                           
  1956  0070                     ?_fifo_add_control:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0070                     ?_fifo_indice:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0070                     ?_fifo_disponivel:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0070                     ?_fifo_tam:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0070                     ?_fifo_indicePrint_inc:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0070                     ?_fifo_indicePrint_dec:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0070                     ?_fifo_print:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0070                     ?_dignum_apagar:	
  1978                           ; 1 bytes @ 0x0
  1979                           
  1980  0070                     ?_posAtual:	
  1981                           ; 1 bytes @ 0x0
  1982                           
  1983  0070                     ?_serialIOload:	
  1984                           ; 1 bytes @ 0x0
  1985                           
  1986  0070                     ?_serialIObyteShift:	
  1987                           ; 1 bytes @ 0x0
  1988                           
  1989  0070                     ?_serialIOscan:	
  1990                           ; 1 bytes @ 0x0
  1991                           
  1992  0070                     ?_teclado_init:	
  1993                           ; 1 bytes @ 0x0
  1994                           
  1995  0070                     ?_teclado_scan:	
  1996                           ; 1 bytes @ 0x0
  1997                           
  1998  0070                     ?_teclado_borda:	
  1999                           ; 1 bytes @ 0x0
  2000                           
  2001  0070                     ?_intt1_1ms:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ??_intt1_1ms:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_timer1_init:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_irq:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_main:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_dac_init:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019                           
  2020                           ; 1 bytes @ 0x0
  2021  0070                     	ds	4
  2022  0074                     ??_irq:
  2023                           
  2024                           ; 1 bytes @ 0x4
  2025  0074                     	ds	2
  2026                           
  2027                           	psect	cstackBANK0
  2028  0020                     __pcstackBANK0:
  2029  0020                     ??_decodifica:
  2030  0020                     ?_codifica:	
  2031                           ; 1 bytes @ 0x0
  2032                           
  2033  0020                     ??_fifo_adrs:	
  2034                           ; 1 bytes @ 0x0
  2035                           
  2036  0020                     ??_I2C_start:	
  2037                           ; 1 bytes @ 0x0
  2038                           
  2039  0020                     ??_I2C_tx:	
  2040                           ; 1 bytes @ 0x0
  2041                           
  2042  0020                     ??_I2C_ack_receive:	
  2043                           ; 1 bytes @ 0x0
  2044                           
  2045  0020                     ??_I2C_stop:	
  2046                           ; 1 bytes @ 0x0
  2047                           
  2048  0020                     ?_set_passo:	
  2049                           ; 1 bytes @ 0x0
  2050                           
  2051  0020                     ?_ler_sensor:	
  2052                           ; 1 bytes @ 0x0
  2053                           
  2054  0020                     ?_delay:	
  2055                           ; 1 bytes @ 0x0
  2056                           
  2057  0020                     ??_dispLCD_instReg:	
  2058                           ; 1 bytes @ 0x0
  2059                           
  2060  0020                     ??_dispLCD_dataReg:	
  2061                           ; 1 bytes @ 0x0
  2062                           
  2063  0020                     ?_EEPROM_write:	
  2064                           ; 1 bytes @ 0x0
  2065                           
  2066  0020                     ??_addIndicePassos:	
  2067                           ; 1 bytes @ 0x0
  2068                           
  2069  0020                     ??_getIndicePassos:	
  2070                           ; 1 bytes @ 0x0
  2071                           
  2072  0020                     ??_resetIndicePassos:	
  2073                           ; 1 bytes @ 0x0
  2074                           
  2075  0020                     ??_resetContCiclos:	
  2076                           ; 1 bytes @ 0x0
  2077                           
  2078  0020                     ??_addContCiclos:	
  2079                           ; 1 bytes @ 0x0
  2080                           
  2081  0020                     ??_ler_atuador:	
  2082                           ; 1 bytes @ 0x0
  2083                           
  2084  0020                     ??_alt_atuador:	
  2085                           ; 1 bytes @ 0x0
  2086                           
  2087  0020                     ??_init_atuadores:	
  2088                           ; 1 bytes @ 0x0
  2089                           
  2090  0020                     ??_fifo_lerPos:	
  2091                           ; 1 bytes @ 0x0
  2092                           
  2093  0020                     ?_fifo_add_ciclo:	
  2094                           ; 1 bytes @ 0x0
  2095                           
  2096  0020                     ??_fifo_indice:	
  2097                           ; 1 bytes @ 0x0
  2098                           
  2099  0020                     ??_fifo_disponivel:	
  2100                           ; 1 bytes @ 0x0
  2101                           
  2102  0020                     ??_fifo_tam:	
  2103                           ; 1 bytes @ 0x0
  2104                           
  2105  0020                     ??_fifo_indicePrint_inc:	
  2106                           ; 1 bytes @ 0x0
  2107                           
  2108  0020                     ??_fifo_indicePrint_dec:	
  2109                           ; 1 bytes @ 0x0
  2110                           
  2111  0020                     ??_serialIOload:	
  2112                           ; 1 bytes @ 0x0
  2113                           
  2114  0020                     ??_serialIObyteShift:	
  2115                           ; 1 bytes @ 0x0
  2116                           
  2117  0020                     ?_initSerialIO:	
  2118                           ; 1 bytes @ 0x0
  2119                           
  2120  0020                     ??_teclado_init:	
  2121                           ; 1 bytes @ 0x0
  2122                           
  2123  0020                     ??_teclado_scan:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126  0020                     ??_timer1_init:	
  2127                           ; 1 bytes @ 0x0
  2128                           
  2129  0020                     ?_end_receita:	
  2130                           ; 1 bytes @ 0x0
  2131                           
  2132  0020                     ?_getCiclos:	
  2133                           ; 2 bytes @ 0x0
  2134                           
  2135  0020                     ?_getContCiclos:	
  2136                           ; 2 bytes @ 0x0
  2137                           
  2138  0020                     ?___wmul:	
  2139                           ; 2 bytes @ 0x0
  2140                           
  2141  0020                     ?___awdiv:	
  2142                           ; 2 bytes @ 0x0
  2143                           
  2144  0020                     ?___awmod:	
  2145                           ; 2 bytes @ 0x0
  2146                           
  2147  0020                     ?___lwdiv:	
  2148                           ; 2 bytes @ 0x0
  2149                           
  2150  0020                     ?_statusT1:	
  2151                           ; 2 bytes @ 0x0
  2152                           
  2153  0020                     ?___lmul:	
  2154                           ; 4 bytes @ 0x0
  2155                           
  2156  0020                     ?___lldiv:	
  2157                           ; 4 bytes @ 0x0
  2158                           
  2159  0020                     set_passo@ptr:	
  2160                           ; 4 bytes @ 0x0
  2161                           
  2162  0020                     ler_sensor@ptr:	
  2163                           ; 1 bytes @ 0x0
  2164                           
  2165  0020                     EEPROM_write@data:	
  2166                           ; 1 bytes @ 0x0
  2167                           
  2168  0020                     fifo_lerPos@i:	
  2169                           ; 1 bytes @ 0x0
  2170                           
  2171  0020                     initSerialIO@ptrOut:	
  2172                           ; 1 bytes @ 0x0
  2173                           
  2174  0020                     I2C_tx@b:	
  2175                           ; 1 bytes @ 0x0
  2176                           
  2177  0020                     delay@t:	
  2178                           ; 1 bytes @ 0x0
  2179                           
  2180  0020                     end_receita@x:	
  2181                           ; 2 bytes @ 0x0
  2182                           
  2183  0020                     codifica@dado:	
  2184                           ; 2 bytes @ 0x0
  2185                           
  2186  0020                     fifo_add_ciclo@ciclos:	
  2187                           ; 2 bytes @ 0x0
  2188                           
  2189  0020                     ___wmul@multiplier:	
  2190                           ; 2 bytes @ 0x0
  2191                           
  2192  0020                     ___awdiv@divisor:	
  2193                           ; 2 bytes @ 0x0
  2194                           
  2195  0020                     ___awmod@divisor:	
  2196                           ; 2 bytes @ 0x0
  2197                           
  2198  0020                     ___lwdiv@divisor:	
  2199                           ; 2 bytes @ 0x0
  2200                           
  2201  0020                     ___lmul@multiplier:	
  2202                           ; 2 bytes @ 0x0
  2203                           
  2204  0020                     ___lldiv@divisor:	
  2205                           ; 4 bytes @ 0x0
  2206                           
  2207                           
  2208                           ; 4 bytes @ 0x0
  2209  0020                     	ds	1
  2210  0021                     ??_set_passo:
  2211  0021                     ??_ler_sensor:	
  2212                           ; 1 bytes @ 0x1
  2213                           
  2214  0021                     ??_EEPROM_write:	
  2215                           ; 1 bytes @ 0x1
  2216                           
  2217  0021                     ??_posAtual:	
  2218                           ; 1 bytes @ 0x1
  2219                           
  2220  0021                     dispLCD_dataReg@d:	
  2221                           ; 1 bytes @ 0x1
  2222                           
  2223  0021                     EEPROM_write@addr:	
  2224                           ; 1 bytes @ 0x1
  2225                           
  2226  0021                     serialIObyteShift@dataIn:	
  2227                           ; 1 bytes @ 0x1
  2228                           
  2229  0021                     initSerialIO@length:	
  2230                           ; 1 bytes @ 0x1
  2231                           
  2232                           
  2233                           ; 1 bytes @ 0x1
  2234  0021                     	ds	1
  2235  0022                     ??_codifica:
  2236  0022                     ??_delay:	
  2237                           ; 1 bytes @ 0x2
  2238                           
  2239  0022                     ??_end_receita:	
  2240                           ; 1 bytes @ 0x2
  2241                           
  2242  0022                     ??_getCiclos:	
  2243                           ; 1 bytes @ 0x2
  2244                           
  2245  0022                     ??_getContCiclos:	
  2246                           ; 1 bytes @ 0x2
  2247                           
  2248  0022                     ??_fifo_add_ciclo:	
  2249                           ; 1 bytes @ 0x2
  2250                           
  2251  0022                     ??_initSerialIO:	
  2252                           ; 1 bytes @ 0x2
  2253                           
  2254  0022                     dispLCD_instReg@i:	
  2255                           ; 1 bytes @ 0x2
  2256                           
  2257  0022                     ler_atuador@tecla:	
  2258                           ; 1 bytes @ 0x2
  2259                           
  2260  0022                     alt_atuador@tecla:	
  2261                           ; 1 bytes @ 0x2
  2262                           
  2263  0022                     decodifica@d:	
  2264                           ; 1 bytes @ 0x2
  2265                           
  2266  0022                     posAtual@ind:	
  2267                           ; 1 bytes @ 0x2
  2268                           
  2269  0022                     serialIObyteShift@dataOut:	
  2270                           ; 1 bytes @ 0x2
  2271                           
  2272  0022                     ___wmul@multiplicand:	
  2273                           ; 1 bytes @ 0x2
  2274                           
  2275  0022                     ___awdiv@dividend:	
  2276                           ; 2 bytes @ 0x2
  2277                           
  2278  0022                     ___awmod@dividend:	
  2279                           ; 2 bytes @ 0x2
  2280                           
  2281  0022                     ___lwdiv@dividend:	
  2282                           ; 2 bytes @ 0x2
  2283                           
  2284                           
  2285                           ; 2 bytes @ 0x2
  2286  0022                     	ds	1
  2287  0023                     ?_dispLCD_lincol:
  2288  0023                     ??_dispLCD_clr:	
  2289                           ; 1 bytes @ 0x3
  2290                           
  2291  0023                     ??_salva_atuadores_init:	
  2292                           ; 1 bytes @ 0x3
  2293                           
  2294  0023                     set_passo@passo:	
  2295                           ; 1 bytes @ 0x3
  2296                           
  2297  0023                     ler_sensor@passo:	
  2298                           ; 1 bytes @ 0x3
  2299                           
  2300  0023                     dispLCD_lincol@col:	
  2301                           ; 1 bytes @ 0x3
  2302                           
  2303  0023                     posAtual@passo:	
  2304                           ; 1 bytes @ 0x3
  2305                           
  2306  0023                     serialIObyteShift@dataBit:	
  2307                           ; 1 bytes @ 0x3
  2308                           
  2309  0023                     initSerialIO@ptrIn:	
  2310                           ; 1 bytes @ 0x3
  2311                           
  2312                           
  2313                           ; 1 bytes @ 0x3
  2314  0023                     	ds	1
  2315  0024                     ??_dispLCD_lincol:
  2316  0024                     ??_dispLCD_init:	
  2317                           ; 1 bytes @ 0x4
  2318                           
  2319  0024                     ??_serialIOscan:	
  2320                           ; 1 bytes @ 0x4
  2321                           
  2322  0024                     ??_statusT1:	
  2323                           ; 1 bytes @ 0x4
  2324                           
  2325  0024                     ??_dac_init:	
  2326                           ; 1 bytes @ 0x4
  2327                           
  2328  0024                     ?_dac_write:	
  2329                           ; 1 bytes @ 0x4
  2330                           
  2331  0024                     ??___wmul:	
  2332                           ; 1 bytes @ 0x4
  2333                           
  2334  0024                     ??___awdiv:	
  2335                           ; 1 bytes @ 0x4
  2336                           
  2337  0024                     ??___awmod:	
  2338                           ; 1 bytes @ 0x4
  2339                           
  2340  0024                     ??___lwdiv:	
  2341                           ; 1 bytes @ 0x4
  2342                           
  2343  0024                     codifica@tipo:	
  2344                           ; 1 bytes @ 0x4
  2345                           
  2346  0024                     teclado_scan@tecla:	
  2347                           ; 1 bytes @ 0x4
  2348                           
  2349  0024                     getCiclos@aux:	
  2350                           ; 1 bytes @ 0x4
  2351                           
  2352  0024                     dac_write@code:	
  2353                           ; 2 bytes @ 0x4
  2354                           
  2355  0024                     ___wmul@product:	
  2356                           ; 2 bytes @ 0x4
  2357                           
  2358  0024                     salva_atuadores_init@condi_init:	
  2359                           ; 2 bytes @ 0x4
  2360                           
  2361  0024                     ___lmul@multiplicand:	
  2362                           ; 4 bytes @ 0x4
  2363                           
  2364  0024                     ___lldiv@dividend:	
  2365                           ; 4 bytes @ 0x4
  2366                           
  2367                           
  2368                           ; 4 bytes @ 0x4
  2369  0024                     	ds	1
  2370  0025                     teclado_scan@l:
  2371  0025                     ___awdiv@counter:	
  2372                           ; 1 bytes @ 0x5
  2373                           
  2374  0025                     ___awmod@counter:	
  2375                           ; 1 bytes @ 0x5
  2376                           
  2377  0025                     ___lwdiv@counter:	
  2378                           ; 1 bytes @ 0x5
  2379                           
  2380                           
  2381                           ; 1 bytes @ 0x5
  2382  0025                     	ds	1
  2383  0026                     ?_dignum_conc:
  2384  0026                     ?_setT1:	
  2385                           ; 1 bytes @ 0x6
  2386                           
  2387  0026                     ??_dac_write:	
  2388                           ; 1 bytes @ 0x6
  2389                           
  2390  0026                     dispLCD_lincol@lin:	
  2391                           ; 1 bytes @ 0x6
  2392                           
  2393  0026                     dignum_conc@ptrNum:	
  2394                           ; 1 bytes @ 0x6
  2395                           
  2396  0026                     teclado_scan@c:	
  2397                           ; 1 bytes @ 0x6
  2398                           
  2399  0026                     ___awdiv@sign:	
  2400                           ; 1 bytes @ 0x6
  2401                           
  2402  0026                     ___awmod@sign:	
  2403                           ; 1 bytes @ 0x6
  2404                           
  2405  0026                     ___lwdiv@quotient:	
  2406                           ; 1 bytes @ 0x6
  2407                           
  2408  0026                     setT1@c:	
  2409                           ; 2 bytes @ 0x6
  2410                           
  2411                           
  2412                           ; 4 bytes @ 0x6
  2413  0026                     	ds	1
  2414  0027                     ?_salvar_receita:
  2415  0027                     ?_salvar_dado:	
  2416                           ; 1 bytes @ 0x7
  2417                           
  2418  0027                     ??_dignum_conc:	
  2419                           ; 1 bytes @ 0x7
  2420                           
  2421  0027                     ??_teclado_borda:	
  2422                           ; 1 bytes @ 0x7
  2423                           
  2424  0027                     dispLCD_lincol@aux:	
  2425                           ; 1 bytes @ 0x7
  2426                           
  2427  0027                     salvar_receita@adrs:	
  2428                           ; 1 bytes @ 0x7
  2429                           
  2430  0027                     salvar_dado@col:	
  2431                           ; 1 bytes @ 0x7
  2432                           
  2433  0027                     ___awdiv@quotient:	
  2434                           ; 1 bytes @ 0x7
  2435                           
  2436                           
  2437                           ; 2 bytes @ 0x7
  2438  0027                     	ds	1
  2439  0028                     ?_dispLCD:
  2440  0028                     ?_dispLCD_str:	
  2441                           ; 1 bytes @ 0x8
  2442                           
  2443  0028                     ??_dignum_apagar:	
  2444                           ; 1 bytes @ 0x8
  2445                           
  2446  0028                     ??___lmul:	
  2447                           ; 1 bytes @ 0x8
  2448                           
  2449  0028                     ??___lldiv:	
  2450                           ; 1 bytes @ 0x8
  2451                           
  2452  0028                     dispLCD@lin:	
  2453                           ; 1 bytes @ 0x8
  2454                           
  2455  0028                     salvar_receita@data:	
  2456                           ; 1 bytes @ 0x8
  2457                           
  2458  0028                     salvar_dado@data:	
  2459                           ; 1 bytes @ 0x8
  2460                           
  2461  0028                     salva_atuadores_init@pt:	
  2462                           ; 1 bytes @ 0x8
  2463                           
  2464  0028                     dignum_apagar@ptrNum:	
  2465                           ; 1 bytes @ 0x8
  2466                           
  2467  0028                     serialIOscan@j:	
  2468                           ; 1 bytes @ 0x8
  2469                           
  2470  0028                     teclado_borda@aux:	
  2471                           ; 1 bytes @ 0x8
  2472                           
  2473  0028                     dispLCD_str@str:	
  2474                           ; 1 bytes @ 0x8
  2475                           
  2476                           
  2477                           ; 2 bytes @ 0x8
  2478  0028                     	ds	1
  2479  0029                     ??_salvar_receita:
  2480  0029                     ??_salvar_dado:	
  2481                           ; 1 bytes @ 0x9
  2482                           
  2483  0029                     ??_fifo_print:	
  2484                           ; 1 bytes @ 0x9
  2485                           
  2486  0029                     ?_dignum_tam:	
  2487                           ; 1 bytes @ 0x9
  2488                           
  2489  0029                     dispLCD@col:	
  2490                           ; 1 bytes @ 0x9
  2491                           
  2492  0029                     salva_atuadores_init@dado:	
  2493                           ; 1 bytes @ 0x9
  2494                           
  2495  0029                     serialIOscan@i:	
  2496                           ; 1 bytes @ 0x9
  2497                           
  2498  0029                     teclado_borda@tecla:	
  2499                           ; 1 bytes @ 0x9
  2500                           
  2501  0029                     dignum_tam@num:	
  2502                           ; 1 bytes @ 0x9
  2503                           
  2504  0029                     ___lmul@product:	
  2505                           ; 2 bytes @ 0x9
  2506                           
  2507  0029                     ___lldiv@quotient:	
  2508                           ; 4 bytes @ 0x9
  2509                           
  2510                           
  2511                           ; 4 bytes @ 0x9
  2512  0029                     	ds	1
  2513  002A                     ??_dispLCD_str:
  2514  002A                     ??_setT1:	
  2515                           ; 1 bytes @ 0xA
  2516                           
  2517  002A                     salva_atuadores_init@mask:	
  2518                           ; 1 bytes @ 0xA
  2519                           
  2520  002A                     dispLCD@str:	
  2521                           ; 1 bytes @ 0xA
  2522                           
  2523                           
  2524                           ; 2 bytes @ 0xA
  2525  002A                     	ds	1
  2526  002B                     ??_dignum_tam:
  2527  002B                     dispLCD_str@lin:	
  2528                           ; 1 bytes @ 0xB
  2529                           
  2530  002B                     salvar_dado@adrs:	
  2531                           ; 1 bytes @ 0xB
  2532                           
  2533  002B                     dignum_conc@dig:	
  2534                           ; 1 bytes @ 0xB
  2535                           
  2536  002B                     salvar_receita@aux:	
  2537                           ; 1 bytes @ 0xB
  2538                           
  2539                           
  2540                           ; 2 bytes @ 0xB
  2541  002B                     	ds	1
  2542  002C                     ??_dispLCD:
  2543  002C                     dispLCD_str@c:	
  2544                           ; 1 bytes @ 0xC
  2545                           
  2546  002C                     dignum_tam@tam:	
  2547                           ; 1 bytes @ 0xC
  2548                           
  2549  002C                     salvar_dado@aux:	
  2550                           ; 1 bytes @ 0xC
  2551                           
  2552  002C                     _fifo_print$392:	
  2553                           ; 2 bytes @ 0xC
  2554                           
  2555                           
  2556                           ; 2 bytes @ 0xC
  2557  002C                     	ds	1
  2558  002D                     ??_fifo_alinharPrint:
  2559  002D                     ?_dispLCD_num:	
  2560                           ; 1 bytes @ 0xD
  2561                           
  2562  002D                     ?___aldiv:	
  2563                           ; 1 bytes @ 0xD
  2564                           
  2565  002D                     dispLCD@pos:	
  2566                           ; 4 bytes @ 0xD
  2567                           
  2568  002D                     dispLCD_num@lin:	
  2569                           ; 1 bytes @ 0xD
  2570                           
  2571  002D                     salvar_receita@i:	
  2572                           ; 1 bytes @ 0xD
  2573                           
  2574  002D                     ___lldiv@counter:	
  2575                           ; 1 bytes @ 0xD
  2576                           
  2577  002D                     ___aldiv@divisor:	
  2578                           ; 1 bytes @ 0xD
  2579                           
  2580                           
  2581                           ; 4 bytes @ 0xD
  2582  002D                     	ds	1
  2583  002E                     ?_I2C_init:
  2584  002E                     dispLCD_num@col:	
  2585                           ; 1 bytes @ 0xE
  2586                           
  2587  002E                     fifo_print@completar:	
  2588                           ; 1 bytes @ 0xE
  2589                           
  2590  002E                     I2C_init@freq:	
  2591                           ; 1 bytes @ 0xE
  2592                           
  2593                           
  2594                           ; 4 bytes @ 0xE
  2595  002E                     	ds	1
  2596  002F                     fifo_print@indPrint:
  2597  002F                     dispLCD_num@num:	
  2598                           ; 1 bytes @ 0xF
  2599                           
  2600                           
  2601                           ; 2 bytes @ 0xF
  2602  002F                     	ds	1
  2603  0030                     fifo_print@i:
  2604  0030                     fifo_alinharPrint@cont:	
  2605                           ; 1 bytes @ 0x10
  2606                           
  2607                           
  2608                           ; 1 bytes @ 0x10
  2609  0030                     	ds	1
  2610  0031                     dispLCD_num@tam:
  2611  0031                     fifo_print@atraso:	
  2612                           ; 1 bytes @ 0x11
  2613                           
  2614  0031                     fifo_alinharPrint@i:	
  2615                           ; 1 bytes @ 0x11
  2616                           
  2617  0031                     ___aldiv@dividend:	
  2618                           ; 1 bytes @ 0x11
  2619                           
  2620                           
  2621                           ; 4 bytes @ 0x11
  2622  0031                     	ds	1
  2623  0032                     ??_I2C_init:
  2624  0032                     ??_dispLCD_num:	
  2625                           ; 1 bytes @ 0x12
  2626                           
  2627  0032                     fifo_print@comando:	
  2628                           ; 1 bytes @ 0x12
  2629                           
  2630  0032                     fifo_alinharPrint@aux:	
  2631                           ; 1 bytes @ 0x12
  2632                           
  2633                           
  2634                           ; 1 bytes @ 0x12
  2635  0032                     	ds	1
  2636  0033                     ??_fifo_delete:
  2637  0033                     ??_fifo_add:	
  2638                           ; 1 bytes @ 0x13
  2639                           
  2640  0033                     ??_fifo_add_tempo:	
  2641                           ; 1 bytes @ 0x13
  2642                           
  2643  0033                     ??_fifo_add_control:	
  2644                           ; 1 bytes @ 0x13
  2645                           
  2646                           
  2647                           ; 1 bytes @ 0x13
  2648  0033                     	ds	1
  2649  0034                     fifo_add@passo:
  2650  0034                     fifo_add_tempo@t:	
  2651                           ; 1 bytes @ 0x14
  2652                           
  2653  0034                     fifo_add_control@c:	
  2654                           ; 1 bytes @ 0x14
  2655                           
  2656                           
  2657                           ; 1 bytes @ 0x14
  2658  0034                     	ds	1
  2659  0035                     ??___aldiv:
  2660  0035                     dispLCD_num@size:	
  2661                           ; 1 bytes @ 0x15
  2662                           
  2663                           
  2664                           ; 1 bytes @ 0x15
  2665  0035                     	ds	1
  2666  0036                     dispLCD_num@sinal:
  2667  0036                     ___aldiv@counter:	
  2668                           ; 1 bytes @ 0x16
  2669                           
  2670                           
  2671                           ; 1 bytes @ 0x16
  2672  0036                     	ds	1
  2673  0037                     ___aldiv@sign:
  2674  0037                     dispLCD_num@div:	
  2675                           ; 1 bytes @ 0x17
  2676                           
  2677                           
  2678                           ; 2 bytes @ 0x17
  2679  0037                     	ds	1
  2680  0038                     ___aldiv@quotient:
  2681                           
  2682                           ; 4 bytes @ 0x18
  2683  0038                     	ds	1
  2684  0039                     ?_printExec:
  2685  0039                     printExec@ind:	
  2686                           ; 1 bytes @ 0x19
  2687                           
  2688                           
  2689                           ; 1 bytes @ 0x19
  2690  0039                     	ds	1
  2691  003A                     ??_printExec:
  2692                           
  2693                           ; 1 bytes @ 0x1A
  2694  003A                     	ds	2
  2695  003C                     ?_MCP4725:
  2696  003C                     MCP4725@Vout:	
  2697                           ; 1 bytes @ 0x1C
  2698                           
  2699                           
  2700                           ; 2 bytes @ 0x1C
  2701  003C                     	ds	2
  2702  003E                     ??_MCP4725:
  2703                           
  2704                           ; 1 bytes @ 0x1E
  2705  003E                     	ds	2
  2706  0040                     _printExec$417:
  2707                           
  2708                           ; 2 bytes @ 0x20
  2709  0040                     	ds	2
  2710  0042                     printExec@col:
  2711                           
  2712                           ; 1 bytes @ 0x22
  2713  0042                     	ds	1
  2714  0043                     printExec@passo:
  2715                           
  2716                           ; 1 bytes @ 0x23
  2717  0043                     	ds	1
  2718  0044                     ??_main:
  2719                           
  2720                           ; 1 bytes @ 0x24
  2721  0044                     	ds	4
  2722                           
  2723                           	psect	maintext
  2724  15BE                     __pmaintext:	
  2725 ;;
  2726 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2727 ;;
  2728 ;; *************** function _main *****************
  2729 ;; Defined at:
  2730 ;;		line 68 in file "main.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  j               1   50[BANK1 ] unsigned char 
  2735 ;;  j               1   48[BANK1 ] unsigned char 
  2736 ;;  j               1   46[BANK1 ] unsigned char 
  2737 ;;  j               1   44[BANK1 ] unsigned char 
  2738 ;;  i               1   49[BANK1 ] unsigned char 
  2739 ;;  i               1   47[BANK1 ] unsigned char 
  2740 ;;  i               1   45[BANK1 ] unsigned char 
  2741 ;;  i               1   43[BANK1 ] unsigned char 
  2742 ;;  lema           20    0[BANK1 ] unsigned char [20]
  2743 ;;  ptr             1   42[BANK1 ] PTR unsigned char 
  2744 ;;		 -> main@lema(20), 
  2745 ;;  i               1   41[BANK1 ] unsigned char 
  2746 ;;  vetor_aux      16    0        unsigned char [16]
  2747 ;;  num             2   57[BANK1 ] unsigned int 
  2748 ;;  ciclos          2   52[BANK1 ] unsigned int 
  2749 ;;  pt              2    0        PTR unsigned char 
  2750 ;;  tecla           1   61[BANK1 ] unsigned char 
  2751 ;;  auxPasso        1   60[BANK1 ] unsigned char 
  2752 ;;  estado          1   59[BANK1 ] unsigned char 
  2753 ;;  botao           1   56[BANK1 ] unsigned char 
  2754 ;;  vetorOut        1   55[BANK1 ] unsigned char [1]
  2755 ;;  meAtuadores     1   54[BANK1 ] unsigned char 
  2756 ;;  vetorIn         1   51[BANK1 ] unsigned char [1]
  2757 ;;  init_cond       1   40[BANK1 ] unsigned char 
  2758 ;;  aux             1   21[BANK1 ] unsigned char 
  2759 ;;  contPassos      1   20[BANK1 ] unsigned char 
  2760 ;;  atuador         1    0        unsigned char 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : B00/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2770 ;;      Params:         0       0       0       0       0
  2771 ;;      Locals:         0       0      62       0       0
  2772 ;;      Temps:          0       4       0       0       0
  2773 ;;      Totals:         0       4      62       0       0
  2774 ;;Total ram usage:       66 bytes
  2775 ;; Hardware stack levels required when called:    6
  2776 ;; This function calls:
  2777 ;;		_I2C_init
  2778 ;;		_MCP4725
  2779 ;;		___aldiv
  2780 ;;		___awmod
  2781 ;;		___lmul
  2782 ;;		___wmul
  2783 ;;		_addContCiclos
  2784 ;;		_addIndicePassos
  2785 ;;		_alt_atuador
  2786 ;;		_decodifica
  2787 ;;		_delay
  2788 ;;		_dignum_apagar
  2789 ;;		_dignum_conc
  2790 ;;		_dispLCD
  2791 ;;		_dispLCD_clr
  2792 ;;		_dispLCD_dataReg
  2793 ;;		_dispLCD_init
  2794 ;;		_dispLCD_lincol
  2795 ;;		_dispLCD_num
  2796 ;;		_dispLCD_str
  2797 ;;		_fifo_add
  2798 ;;		_fifo_add_ciclo
  2799 ;;		_fifo_add_control
  2800 ;;		_fifo_add_tempo
  2801 ;;		_fifo_adrs
  2802 ;;		_fifo_delete
  2803 ;;		_fifo_disponivel
  2804 ;;		_fifo_indice
  2805 ;;		_fifo_indicePrint_dec
  2806 ;;		_fifo_indicePrint_inc
  2807 ;;		_fifo_lerPos
  2808 ;;		_fifo_print
  2809 ;;		_fifo_tam
  2810 ;;		_getCiclos
  2811 ;;		_getContCiclos
  2812 ;;		_getIndicePassos
  2813 ;;		_initSerialIO
  2814 ;;		_init_atuadores
  2815 ;;		_ler_atuador
  2816 ;;		_ler_sensor
  2817 ;;		_printExec
  2818 ;;		_resetContCiclos
  2819 ;;		_resetIndicePassos
  2820 ;;		_salva_atuadores_init
  2821 ;;		_salvar_dado
  2822 ;;		_salvar_receita
  2823 ;;		_serialIOscan
  2824 ;;		_setT1
  2825 ;;		_set_passo
  2826 ;;		_statusT1
  2827 ;;		_teclado_borda
  2828 ;;		_teclado_init
  2829 ;;		_timer1_init
  2830 ;; This function is called by:
  2831 ;;		Startup code after reset
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           
  2836                           ;psect for function _main
  2837  15BE                     _main:
  2838  15BE                     l7745:	
  2839                           ;incstack = 0
  2840                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2841                           
  2842                           
  2843                           ;main.c: 70:     dispLCD_init();
  2844  15BE  160A  158A  23B5  160A  118A  	fcall	_dispLCD_init
  2845                           
  2846                           ;main.c: 71:     teclado_init();
  2847  15C3  160A  158A  2051  160A  118A  	fcall	_teclado_init
  2848                           
  2849                           ;main.c: 72:     timer1_init();
  2850  15C8  160A  158A  20CC  160A  118A  	fcall	_timer1_init
  2851                           
  2852                           ;main.c: 73:     I2C_init(20000000);
  2853  15CD  3001               	movlw	1
  2854  15CE  1283               	bcf	3,5	;RP0=0, select bank0
  2855  15CF  1303               	bcf	3,6	;RP1=0, select bank0
  2856  15D0  00B1               	movwf	I2C_init@freq+3
  2857  15D1  3031               	movlw	49
  2858  15D2  00B0               	movwf	I2C_init@freq+2
  2859  15D3  302D               	movlw	45
  2860  15D4  00AF               	movwf	I2C_init@freq+1
  2861  15D5  3000               	movlw	0
  2862  15D6  00AE               	movwf	I2C_init@freq
  2863  15D7  160A  158A  22A7  160A  118A  	fcall	_I2C_init
  2864                           
  2865                           ;main.c: 74:     MCP4725(0);
  2866  15DC  3000               	movlw	0
  2867  15DD  1283               	bcf	3,5	;RP0=0, select bank0
  2868  15DE  1303               	bcf	3,6	;RP1=0, select bank0
  2869  15DF  00BC               	movwf	MCP4725@Vout
  2870  15E0  00BD               	movwf	MCP4725@Vout+1
  2871  15E1  160A  158A  21B0  160A  118A  	fcall	_MCP4725
  2872  15E6                     l7747:
  2873  15E6                     l7749:
  2874                           
  2875                           ;main.c: 79:     char estado = 0;
  2876  15E6  1683               	bsf	3,5	;RP0=1, select bank1
  2877  15E7  1303               	bcf	3,6	;RP1=0, select bank1
  2878  15E8  01DB               	clrf	main@estado^(0+128)
  2879  15E9                     l7751:
  2880                           
  2881                           ;main.c: 80:     char atuador;;main.c: 81:     char vetor_aux[16];;main.c: 82:     char 
      +                          init_cond = 0;
  2882  15E9  01C8               	clrf	main@init_cond^(0+128)
  2883  15EA                     l7753:
  2884                           
  2885                           ;main.c: 83:     char *pt;;main.c: 85:     char contPassos = 0;
  2886  15EA  01B4               	clrf	main@contPassos^(0+128)
  2887  15EB                     l7755:
  2888                           
  2889                           ;main.c: 86:     char vetorIn[1] = { 0 };
  2890  15EB  01D3               	clrf	main@vetorIn^(0+128)
  2891  15EC                     l7757:
  2892                           
  2893                           ;main.c: 87:     char vetorOut[1] = { 0 };
  2894  15EC  01D7               	clrf	main@vetorOut^(0+128)
  2895                           
  2896                           ;main.c: 88:     initSerialIO( vetorIn, vetorOut, 1 );
  2897  15ED  30D7               	movlw	(low (main@vetorOut| 0))& (0+255)
  2898  15EE  1283               	bcf	3,5	;RP0=0, select bank0
  2899  15EF  1303               	bcf	3,6	;RP1=0, select bank0
  2900  15F0  00C4               	movwf	??_main
  2901  15F1  0844               	movf	??_main,w
  2902  15F2  00A0               	movwf	initSerialIO@ptrOut
  2903  15F3  01A1               	clrf	initSerialIO@length
  2904  15F4  0AA1               	incf	initSerialIO@length,f
  2905  15F5  30D3               	movlw	(low (main@vetorIn| 0))& (0+255)
  2906  15F6  160A  158A  2511  160A  118A  	fcall	_initSerialIO
  2907  15FB                     l7759:
  2908                           
  2909                           ;main.c: 89:     char meAtuadores = -1;
  2910  15FB  30FF               	movlw	255
  2911  15FC  1283               	bcf	3,5	;RP0=0, select bank0
  2912  15FD  1303               	bcf	3,6	;RP1=0, select bank0
  2913  15FE  00C4               	movwf	??_main
  2914  15FF  0844               	movf	??_main,w
  2915  1600  1683               	bsf	3,5	;RP0=1, select bank1
  2916  1601  1303               	bcf	3,6	;RP1=0, select bank1
  2917  1602  00D6               	movwf	main@meAtuadores^(0+128)
  2918  1603                     l7761:
  2919                           
  2920                           ;main.c: 90:     char auxPasso = 0;
  2921  1603  01DC               	clrf	main@auxPasso^(0+128)
  2922  1604                     l7763:
  2923                           
  2924                           ;main.c: 91:     char aux = 2;
  2925  1604  3002               	movlw	2
  2926  1605  1283               	bcf	3,5	;RP0=0, select bank0
  2927  1606  1303               	bcf	3,6	;RP1=0, select bank0
  2928  1607  00C4               	movwf	??_main
  2929  1608  0844               	movf	??_main,w
  2930  1609  1683               	bsf	3,5	;RP0=1, select bank1
  2931  160A  1303               	bcf	3,6	;RP1=0, select bank1
  2932  160B  00B5               	movwf	main@aux^(0+128)
  2933  160C                     l7765:
  2934                           
  2935                           ;main.c: 92:     unsigned int num = 0;
  2936  160C  01D9               	clrf	main@num^(0+128)
  2937  160D  01DA               	clrf	(main@num+1)^(0+128)
  2938  160E                     l7767:
  2939                           
  2940                           ;main.c: 93:     unsigned int ciclos = 0;
  2941  160E  01D4               	clrf	main@ciclos^(0+128)
  2942  160F  01D5               	clrf	(main@ciclos+1)^(0+128)
  2943  1610                     l7769:
  2944                           
  2945                           ;main.c: 94:     char botao = 0;
  2946  1610  01D8               	clrf	main@botao^(0+128)
  2947  1611  120A  118A  2CB3   	goto	l8249
  2948  1614                     l7771:
  2949                           
  2950                           ;main.c: 112:                             for(char i = 0; i <= 3; i++)
  2951  1614  1683               	bsf	3,5	;RP0=1, select bank1
  2952  1615  1303               	bcf	3,6	;RP1=0, select bank1
  2953  1616  01CB               	clrf	main@i^(0+128)
  2954  1617                     l7773:
  2955  1617  3004               	movlw	4
  2956  1618  024B               	subwf	main@i^(0+128),w
  2957  1619  1C03               	skipc
  2958  161A  2E1C               	goto	u6081
  2959  161B  2E1D               	goto	u6080
  2960  161C                     u6081:
  2961  161C  2E1E               	goto	l7777
  2962  161D                     u6080:
  2963  161D  2E5D               	goto	l7795
  2964  161E                     l7777:
  2965                           
  2966                           ;main.c: 113:                             {;main.c: 114:                                
      +                           for(char j = 0; j <= 19; j++)
  2967  161E  01CC               	clrf	main@j^(0+128)
  2968  161F                     l7779:
  2969  161F  3014               	movlw	20
  2970  1620  024C               	subwf	main@j^(0+128),w
  2971  1621  1C03               	skipc
  2972  1622  2E24               	goto	u6091
  2973  1623  2E25               	goto	u6090
  2974  1624                     u6091:
  2975  1624  2E26               	goto	l7783
  2976  1625                     u6090:
  2977  1625  2E54               	goto	l7791
  2978  1626                     l7783:
  2979                           
  2980                           ;main.c: 115:                                 {;main.c: 116:                            
      +                                   IHM.printpos(i, j, "\377");
  2981  1626  084B               	movf	main@i^(0+128),w
  2982  1627  1283               	bcf	3,5	;RP0=0, select bank0
  2983  1628  1303               	bcf	3,6	;RP1=0, select bank0
  2984  1629  00C4               	movwf	??_main
  2985  162A  0844               	movf	??_main,w
  2986  162B  00A8               	movwf	dispLCD@lin
  2987  162C  1683               	bsf	3,5	;RP0=1, select bank1
  2988  162D  1303               	bcf	3,6	;RP1=0, select bank1
  2989  162E  084C               	movf	main@j^(0+128),w
  2990  162F  1283               	bcf	3,5	;RP0=0, select bank0
  2991  1630  1303               	bcf	3,6	;RP1=0, select bank0
  2992  1631  00C5               	movwf	??_main+1
  2993  1632  0845               	movf	??_main+1,w
  2994  1633  00A9               	movwf	dispLCD@col
  2995  1634  30F8               	movlw	low (STR_1| (0+32768))
  2996  1635  00AA               	movwf	dispLCD@str
  2997  1636  3089               	movlw	high (STR_1| (0+32768))
  2998  1637  00AB               	movwf	dispLCD@str+1
  2999  1638  1683               	bsf	3,5	;RP0=1, select bank1
  3000  1639  1303               	bcf	3,6	;RP1=0, select bank1
  3001  163A  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
  3002  163B  120A  118A  2052  160A  118A  	fcall	fptable
  3003  1640                     l7785:
  3004                           
  3005                           ;main.c: 117:                                     delay(10);
  3006  1640  300A               	movlw	10
  3007  1641  1283               	bcf	3,5	;RP0=0, select bank0
  3008  1642  1303               	bcf	3,6	;RP1=0, select bank0
  3009  1643  00A0               	movwf	delay@t
  3010  1644  3000               	movlw	0
  3011  1645  00A1               	movwf	delay@t+1
  3012  1646  160A  158A  2138  160A  118A  	fcall	_delay
  3013  164B                     l7787:
  3014                           
  3015                           ;main.c: 118:                                 }
  3016  164B  3001               	movlw	1
  3017  164C  1283               	bcf	3,5	;RP0=0, select bank0
  3018  164D  1303               	bcf	3,6	;RP1=0, select bank0
  3019  164E  00C4               	movwf	??_main
  3020  164F  0844               	movf	??_main,w
  3021  1650  1683               	bsf	3,5	;RP0=1, select bank1
  3022  1651  1303               	bcf	3,6	;RP1=0, select bank1
  3023  1652  07CC               	addwf	main@j^(0+128),f
  3024  1653  2E1F               	goto	l7779
  3025  1654                     l7791:
  3026                           
  3027                           ;main.c: 119:                             }
  3028  1654  3001               	movlw	1
  3029  1655  1283               	bcf	3,5	;RP0=0, select bank0
  3030  1656  1303               	bcf	3,6	;RP1=0, select bank0
  3031  1657  00C4               	movwf	??_main
  3032  1658  0844               	movf	??_main,w
  3033  1659  1683               	bsf	3,5	;RP0=1, select bank1
  3034  165A  1303               	bcf	3,6	;RP1=0, select bank1
  3035  165B  07CB               	addwf	main@i^(0+128),f
  3036  165C  2E17               	goto	l7773
  3037  165D                     l7795:
  3038                           
  3039                           ;main.c: 121:                             for(char i = 0; i <= 3; i++)
  3040  165D  01CD               	clrf	main@i_876^(0+128)
  3041  165E                     l7797:
  3042  165E  3004               	movlw	4
  3043  165F  024D               	subwf	main@i_876^(0+128),w
  3044  1660  1C03               	skipc
  3045  1661  2E63               	goto	u6101
  3046  1662  2E64               	goto	u6100
  3047  1663                     u6101:
  3048  1663  2E65               	goto	l7801
  3049  1664                     u6100:
  3050  1664  2EA4               	goto	l680
  3051  1665                     l7801:
  3052                           
  3053                           ;main.c: 122:                             {;main.c: 123:                                
      +                           for(char j = 0; j <= 19; j++)
  3054  1665  01CE               	clrf	main@j_877^(0+128)
  3055  1666                     l7803:
  3056  1666  3014               	movlw	20
  3057  1667  024E               	subwf	main@j_877^(0+128),w
  3058  1668  1C03               	skipc
  3059  1669  2E6B               	goto	u6111
  3060  166A  2E6C               	goto	u6110
  3061  166B                     u6111:
  3062  166B  2E6D               	goto	l7807
  3063  166C                     u6110:
  3064  166C  2E9B               	goto	l7815
  3065  166D                     l7807:
  3066                           
  3067                           ;main.c: 124:                                 {;main.c: 125:                            
      +                                   IHM.printpos(i, j, " ");
  3068  166D  084D               	movf	main@i_876^(0+128),w
  3069  166E  1283               	bcf	3,5	;RP0=0, select bank0
  3070  166F  1303               	bcf	3,6	;RP1=0, select bank0
  3071  1670  00C4               	movwf	??_main
  3072  1671  0844               	movf	??_main,w
  3073  1672  00A8               	movwf	dispLCD@lin
  3074  1673  1683               	bsf	3,5	;RP0=1, select bank1
  3075  1674  1303               	bcf	3,6	;RP1=0, select bank1
  3076  1675  084E               	movf	main@j_877^(0+128),w
  3077  1676  1283               	bcf	3,5	;RP0=0, select bank0
  3078  1677  1303               	bcf	3,6	;RP1=0, select bank0
  3079  1678  00C5               	movwf	??_main+1
  3080  1679  0845               	movf	??_main+1,w
  3081  167A  00A9               	movwf	dispLCD@col
  3082  167B  30F2               	movlw	low ((STR_13+19)| (0+32768))
  3083  167C  00AA               	movwf	dispLCD@str
  3084  167D  3088               	movlw	high ((STR_13+19)| (0+32768))
  3085  167E  00AB               	movwf	dispLCD@str+1
  3086  167F  1683               	bsf	3,5	;RP0=1, select bank1
  3087  1680  1303               	bcf	3,6	;RP1=0, select bank1
  3088  1681  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
  3089  1682  120A  118A  2052  160A  118A  	fcall	fptable
  3090  1687                     l7809:
  3091                           
  3092                           ;main.c: 126:                                     delay(10);
  3093  1687  300A               	movlw	10
  3094  1688  1283               	bcf	3,5	;RP0=0, select bank0
  3095  1689  1303               	bcf	3,6	;RP1=0, select bank0
  3096  168A  00A0               	movwf	delay@t
  3097  168B  3000               	movlw	0
  3098  168C  00A1               	movwf	delay@t+1
  3099  168D  160A  158A  2138  160A  118A  	fcall	_delay
  3100  1692                     l7811:
  3101                           
  3102                           ;main.c: 127:                                 }
  3103  1692  3001               	movlw	1
  3104  1693  1283               	bcf	3,5	;RP0=0, select bank0
  3105  1694  1303               	bcf	3,6	;RP1=0, select bank0
  3106  1695  00C4               	movwf	??_main
  3107  1696  0844               	movf	??_main,w
  3108  1697  1683               	bsf	3,5	;RP0=1, select bank1
  3109  1698  1303               	bcf	3,6	;RP1=0, select bank1
  3110  1699  07CE               	addwf	main@j_877^(0+128),f
  3111  169A  2E66               	goto	l7803
  3112  169B                     l7815:
  3113                           
  3114                           ;main.c: 128:                             }
  3115  169B  3001               	movlw	1
  3116  169C  1283               	bcf	3,5	;RP0=0, select bank0
  3117  169D  1303               	bcf	3,6	;RP1=0, select bank0
  3118  169E  00C4               	movwf	??_main
  3119  169F  0844               	movf	??_main,w
  3120  16A0  1683               	bsf	3,5	;RP0=1, select bank1
  3121  16A1  1303               	bcf	3,6	;RP1=0, select bank1
  3122  16A2  07CD               	addwf	main@i_876^(0+128),f
  3123  16A3  2E5E               	goto	l7797
  3124  16A4                     l680:
  3125                           
  3126                           ;main.c: 129:                             estado = 1;
  3127  16A4  01DB               	clrf	main@estado^(0+128)
  3128  16A5  0ADB               	incf	main@estado^(0+128),f
  3129                           
  3130                           ;main.c: 130:                             break;
  3131  16A6  120A  118A  2D1C   	goto	l8251
  3132  16A9                     l7819:
  3133                           
  3134                           ;main.c: 133:                             IHM.printpos(1, 0, "      SEGGTTI       ");
  3135  16A9  01A8               	clrf	dispLCD@lin
  3136  16AA  0AA8               	incf	dispLCD@lin,f
  3137  16AB  01A9               	clrf	dispLCD@col
  3138  16AC  301E               	movlw	low (STR_3| (0+32768))
  3139  16AD  00AA               	movwf	dispLCD@str
  3140  16AE  3089               	movlw	high (STR_3| (0+32768))
  3141  16AF  00AB               	movwf	dispLCD@str+1
  3142  16B0  1683               	bsf	3,5	;RP0=1, select bank1
  3143  16B1  1303               	bcf	3,6	;RP1=0, select bank1
  3144  16B2  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
  3145  16B3  120A  118A  2052  160A  118A  	fcall	fptable
  3146  16B8                     l7821:
  3147                           
  3148                           ;main.c: 135:                             char lema[20] = "Mundo ao seu comando";
  3149  16B8  30A0               	movlw	main@lema& (0+255)
  3150  16B9  0084               	movwf	4
  3151  16BA  3090               	movlw	low main@F1509
  3152  16BB  1283               	bcf	3,5	;RP0=0, select bank0
  3153  16BC  1303               	bcf	3,6	;RP1=0, select bank0
  3154  16BD  00C4               	movwf	??_main
  3155  16BE  0804               	movf	4,w
  3156  16BF  00C5               	movwf	??_main+1
  3157  16C0  3014               	movlw	20
  3158  16C1  00C6               	movwf	??_main+2
  3159  16C2                     u6120:
  3160  16C2  0844               	movf	??_main,w
  3161  16C3  0084               	movwf	4
  3162  16C4  1783               	bsf	3,7	;select IRP bank3
  3163  16C5  0800               	movf	0,w
  3164  16C6  00C7               	movwf	??_main+3
  3165  16C7  0AC4               	incf	??_main,f
  3166  16C8  0845               	movf	??_main+1,w
  3167  16C9  0084               	movwf	4
  3168  16CA  1383               	bcf	3,7	;select IRP bank1
  3169  16CB  0847               	movf	??_main+3,w
  3170  16CC  0080               	movwf	0
  3171  16CD  0AC5               	incf	??_main+1,f
  3172  16CE  0BC6               	decfsz	??_main+2,f
  3173  16CF  2EC2               	goto	u6120
  3174  16D0                     l7823:
  3175                           
  3176                           ;main.c: 136:                             char i = 0;
  3177  16D0  1683               	bsf	3,5	;RP0=1, select bank1
  3178  16D1  1303               	bcf	3,6	;RP1=0, select bank1
  3179  16D2  01C9               	clrf	main@i_882^(0+128)
  3180  16D3                     l7825:
  3181                           
  3182                           ;main.c: 137:                             char *ptr;;main.c: 139:                       
      +                                for(ptr = lema; *ptr != 0; ptr++)
  3183  16D3  30A0               	movlw	(low (main@lema| 0))& (0+255)
  3184  16D4  1283               	bcf	3,5	;RP0=0, select bank0
  3185  16D5  1303               	bcf	3,6	;RP1=0, select bank0
  3186  16D6  00C4               	movwf	??_main
  3187  16D7  0844               	movf	??_main,w
  3188  16D8  1683               	bsf	3,5	;RP0=1, select bank1
  3189  16D9  1303               	bcf	3,6	;RP1=0, select bank1
  3190  16DA  00CA               	movwf	main@ptr^(0+128)
  3191  16DB  160A  118A  2CEB   	goto	l7835
  3192                           
  3193                           	psect	text1
  3194  18CC                     __ptext1:	
  3195 ;; *************** function _timer1_init *****************
  3196 ;; Defined at:
  3197 ;;		line 16 in file "timer1.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;		None
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;		None
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3211 ;;      Params:         0       0       0       0       0
  3212 ;;      Locals:         0       0       0       0       0
  3213 ;;      Temps:          0       0       0       0       0
  3214 ;;      Totals:         0       0       0       0       0
  3215 ;;Total ram usage:        0 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    2
  3218 ;; This function calls:
  3219 ;;		Nothing
  3220 ;; This function is called by:
  3221 ;;		_main
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           
  3226                           ;psect for function _timer1_init
  3227  18CC                     _timer1_init:
  3228  18CC                     l7575:	
  3229                           ;incstack = 0
  3230                           ; Regs used in _timer1_init: [wreg+status,2+status,0]
  3231                           
  3232                           
  3233                           ;timer1.c: 18:     T1CONbits.TMR1CS = 0;
  3234  18CC  1283               	bcf	3,5	;RP0=0, select bank0
  3235  18CD  1303               	bcf	3,6	;RP1=0, select bank0
  3236  18CE  1090               	bcf	16,1	;volatile
  3237  18CF                     l7577:
  3238                           
  3239                           ;timer1.c: 19:     T1CONbits.T1CKPS = 0b11;
  3240  18CF  3030               	movlw	48
  3241  18D0  0490               	iorwf	16,f	;volatile
  3242  18D1                     l7579:
  3243                           
  3244                           ;timer1.c: 20:     T1CONbits.nT1SYNC = 1;
  3245  18D1  1510               	bsf	16,2	;volatile
  3246  18D2                     l7581:
  3247                           
  3248                           ;timer1.c: 21:     TMR1H = ((65536-625)>>8) & 0x00FF;
  3249  18D2  30FD               	movlw	253
  3250  18D3  008F               	movwf	15	;volatile
  3251  18D4                     l7583:
  3252                           
  3253                           ;timer1.c: 22:     TMR1L = (65536-625) & 0x00FF;
  3254  18D4  308F               	movlw	143
  3255  18D5  008E               	movwf	14	;volatile
  3256  18D6                     l7585:
  3257                           
  3258                           ;timer1.c: 23:     T1CONbits.TMR1GE = 0;
  3259  18D6  1310               	bcf	16,6	;volatile
  3260  18D7                     l7587:
  3261                           
  3262                           ;timer1.c: 25:     PIE1bits.TMR1IE = 1;
  3263  18D7  1683               	bsf	3,5	;RP0=1, select bank1
  3264  18D8  1303               	bcf	3,6	;RP1=0, select bank1
  3265  18D9  140C               	bsf	12,0	;volatile
  3266  18DA                     l7589:
  3267                           
  3268                           ;timer1.c: 26:     INTCONbits.PEIE = 1;
  3269  18DA  170B               	bsf	11,6	;volatile
  3270  18DB                     l7591:
  3271                           
  3272                           ;timer1.c: 27:     INTCONbits.GIE = 1;
  3273  18DB  178B               	bsf	11,7	;volatile
  3274  18DC                     l533:
  3275  18DC  0008               	return
  3276  18DD                     __end_of_timer1_init:
  3277                           
  3278                           	psect	text2
  3279  1851                     __ptext2:	
  3280 ;; *************** function _teclado_init *****************
  3281 ;; Defined at:
  3282 ;;		line 29 in file "teclado.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;		None
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;		None
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  1    wreg      void 
  3289 ;; Registers used:
  3290 ;;		wreg, status,2
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3296 ;;      Params:         0       0       0       0       0
  3297 ;;      Locals:         0       0       0       0       0
  3298 ;;      Temps:          0       0       0       0       0
  3299 ;;      Totals:         0       0       0       0       0
  3300 ;;Total ram usage:        0 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    2
  3303 ;; This function calls:
  3304 ;;		Nothing
  3305 ;; This function is called by:
  3306 ;;		_main
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           
  3311                           ;psect for function _teclado_init
  3312  1851                     _teclado_init:
  3313  1851                     l7559:	
  3314                           ;incstack = 0
  3315                           ; Regs used in _teclado_init: [wreg+status,2]
  3316                           
  3317                           
  3318                           ;teclado.c: 31:     PORTD = 0x00;
  3319  1851  1283               	bcf	3,5	;RP0=0, select bank0
  3320  1852  1303               	bcf	3,6	;RP1=0, select bank0
  3321  1853  0188               	clrf	8	;volatile
  3322  1854                     l7561:
  3323                           
  3324                           ;teclado.c: 32:     TRISD = 0xF0;
  3325  1854  30F0               	movlw	240
  3326  1855  1683               	bsf	3,5	;RP0=1, select bank1
  3327  1856  1303               	bcf	3,6	;RP1=0, select bank1
  3328  1857  0088               	movwf	8	;volatile
  3329  1858                     l481:
  3330  1858  0008               	return
  3331  1859                     __end_of_teclado_init:
  3332                           
  3333                           	psect	text3
  3334  19F2                     __ptext3:	
  3335 ;; *************** function _teclado_borda *****************
  3336 ;; Defined at:
  3337 ;;		line 92 in file "teclado.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;		None
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  tecla           1    9[BANK0 ] unsigned char 
  3342 ;;  aux             1    8[BANK0 ] unsigned char 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      unsigned char 
  3345 ;; Registers used:
  3346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3352 ;;      Params:         0       0       0       0       0
  3353 ;;      Locals:         0       2       0       0       0
  3354 ;;      Temps:          0       1       0       0       0
  3355 ;;      Totals:         0       3       0       0       0
  3356 ;;Total ram usage:        3 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    3
  3359 ;; This function calls:
  3360 ;;		_teclado_scan
  3361 ;; This function is called by:
  3362 ;;		_main
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           
  3367                           ;psect for function _teclado_borda
  3368  19F2                     _teclado_borda:
  3369  19F2                     l7563:	
  3370                           ;incstack = 0
  3371                           ; Regs used in _teclado_borda: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3372                           
  3373                           
  3374                           ;teclado.c: 95:     char aux = 0;
  3375  19F2  1283               	bcf	3,5	;RP0=0, select bank0
  3376  19F3  1303               	bcf	3,6	;RP1=0, select bank0
  3377  19F4  01A8               	clrf	teclado_borda@aux
  3378  19F5                     l7565:
  3379                           
  3380                           ;teclado.c: 97:     tecla = teclado_scan();
  3381  19F5  160A  158A  270E  160A  158A  	fcall	_teclado_scan
  3382  19FA  1283               	bcf	3,5	;RP0=0, select bank0
  3383  19FB  1303               	bcf	3,6	;RP1=0, select bank0
  3384  19FC  00A7               	movwf	??_teclado_borda
  3385  19FD  0827               	movf	??_teclado_borda,w
  3386  19FE  00A9               	movwf	teclado_borda@tecla
  3387  19FF                     l7567:
  3388                           
  3389                           ;teclado.c: 99:     if(tecla && !teclaAnterior)
  3390  19FF  0829               	movf	teclado_borda@tecla,w
  3391  1A00  1903               	btfsc	3,2
  3392  1A01  2A03               	goto	u5851
  3393  1A02  2A04               	goto	u5850
  3394  1A03                     u5851:
  3395  1A03  2A0D               	goto	l496
  3396  1A04                     u5850:
  3397  1A04                     l7569:
  3398  1A04  0850               	movf	_teclaAnterior,w
  3399  1A05  1D03               	btfss	3,2
  3400  1A06  2A08               	goto	u5861
  3401  1A07  2A09               	goto	u5860
  3402  1A08                     u5861:
  3403  1A08  2A0D               	goto	l496
  3404  1A09                     u5860:
  3405  1A09                     l7571:
  3406                           
  3407                           ;teclado.c: 100:         aux = tecla;
  3408  1A09  0829               	movf	teclado_borda@tecla,w
  3409  1A0A  00A7               	movwf	??_teclado_borda
  3410  1A0B  0827               	movf	??_teclado_borda,w
  3411  1A0C  00A8               	movwf	teclado_borda@aux
  3412  1A0D                     l496:
  3413                           
  3414                           ;teclado.c: 102:     teclaAnterior = tecla;
  3415  1A0D  0829               	movf	teclado_borda@tecla,w
  3416  1A0E  00A7               	movwf	??_teclado_borda
  3417  1A0F  0827               	movf	??_teclado_borda,w
  3418  1A10  00D0               	movwf	_teclaAnterior
  3419                           
  3420                           ;teclado.c: 104:     return(aux);
  3421  1A11  0828               	movf	teclado_borda@aux,w
  3422  1A12                     l497:
  3423  1A12  0008               	return
  3424  1A13                     __end_of_teclado_borda:
  3425                           
  3426                           	psect	text4
  3427  1F0E                     __ptext4:	
  3428 ;; *************** function _teclado_scan *****************
  3429 ;; Defined at:
  3430 ;;		line 55 in file "teclado.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;		None
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  c               1    6[BANK0 ] unsigned char 
  3435 ;;  l               1    5[BANK0 ] unsigned char 
  3436 ;;  tecla           1    4[BANK0 ] unsigned char 
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      unsigned char 
  3439 ;; Registers used:
  3440 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3446 ;;      Params:         0       0       0       0       0
  3447 ;;      Locals:         0       3       0       0       0
  3448 ;;      Temps:          0       4       0       0       0
  3449 ;;      Totals:         0       7       0       0       0
  3450 ;;Total ram usage:        7 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:    2
  3453 ;; This function calls:
  3454 ;;		Nothing
  3455 ;; This function is called by:
  3456 ;;		_teclado_borda
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function _teclado_scan
  3462  1F0E                     _teclado_scan:
  3463  1F0E                     l4459:	
  3464                           ;incstack = 0
  3465                           ; Regs used in _teclado_scan: [wreg-fsr0h+status,2+status,0]
  3466                           
  3467                           
  3468                           ;teclado.c: 57:    char tecla = 0;
  3469  1F0E  1283               	bcf	3,5	;RP0=0, select bank0
  3470  1F0F  1303               	bcf	3,6	;RP1=0, select bank0
  3471  1F10  01A4               	clrf	teclado_scan@tecla
  3472                           
  3473                           ;teclado.c: 71:     unsigned char l,c;;teclado.c: 73:     for( l=0; l<4; l++ )
  3474  1F11  01A5               	clrf	teclado_scan@l
  3475  1F12                     l4461:
  3476  1F12  3004               	movlw	4
  3477  1F13  0225               	subwf	teclado_scan@l,w
  3478  1F14  1C03               	skipc
  3479  1F15  2F17               	goto	u2941
  3480  1F16  2F18               	goto	u2940
  3481  1F17                     u2941:
  3482  1F17  2F19               	goto	l4465
  3483  1F18                     u2940:
  3484  1F18  2F58               	goto	l4485
  3485  1F19                     l4465:
  3486                           
  3487                           ;teclado.c: 74:     {;teclado.c: 75:         PORTD = (0x01 << l);
  3488  1F19  3001               	movlw	1
  3489  1F1A  00A0               	movwf	??_teclado_scan
  3490  1F1B  0A25               	incf	teclado_scan@l,w
  3491  1F1C  2F1F               	goto	u2954
  3492  1F1D                     u2955:
  3493  1F1D  1003               	clrc
  3494  1F1E  0DA0               	rlf	??_teclado_scan,f
  3495  1F1F                     u2954:
  3496  1F1F  3EFF               	addlw	-1
  3497  1F20  1D03               	skipz
  3498  1F21  2F1D               	goto	u2955
  3499  1F22  0820               	movf	??_teclado_scan,w
  3500  1F23  0088               	movwf	8	;volatile
  3501  1F24                     l4467:
  3502                           
  3503                           ;teclado.c: 77:         for( c=0; c<4; c++ )
  3504  1F24  01A6               	clrf	teclado_scan@c
  3505  1F25                     l4473:
  3506                           
  3507                           ;teclado.c: 78:         {;teclado.c: 80:             if( PORTD & (0x10<<c) )
  3508  1F25  3010               	movlw	16
  3509  1F26  00A0               	movwf	??_teclado_scan
  3510  1F27  0A26               	incf	teclado_scan@c,w
  3511  1F28  2F2B               	goto	u2964
  3512  1F29                     u2965:
  3513  1F29  1003               	clrc
  3514  1F2A  0DA0               	rlf	??_teclado_scan,f
  3515  1F2B                     u2964:
  3516  1F2B  3EFF               	addlw	-1
  3517  1F2C  1D03               	skipz
  3518  1F2D  2F29               	goto	u2965
  3519  1F2E  0820               	movf	??_teclado_scan,w
  3520  1F2F  0508               	andwf	8,w	;volatile
  3521  1F30  1903               	btfsc	3,2
  3522  1F31  2F33               	goto	u2971
  3523  1F32  2F34               	goto	u2970
  3524  1F33                     u2971:
  3525  1F33  2F49               	goto	l4477
  3526  1F34                     u2970:
  3527  1F34                     l4475:
  3528                           
  3529                           ;teclado.c: 81:             {;teclado.c: 82:                 tecla = teclas[l][c];
  3530  1F34  0825               	movf	teclado_scan@l,w
  3531  1F35  00A0               	movwf	??_teclado_scan
  3532  1F36  3002               	movlw	2
  3533  1F37                     u2985:
  3534  1F37  1003               	clrc
  3535  1F38  0DA0               	rlf	??_teclado_scan,f
  3536  1F39  3EFF               	addlw	-1
  3537  1F3A  1D03               	skipz
  3538  1F3B  2F37               	goto	u2985
  3539  1F3C  30A4               	movlw	(low (_teclas| (0+256)))& (0+255)
  3540  1F3D  0720               	addwf	??_teclado_scan,w
  3541  1F3E  00A1               	movwf	??_teclado_scan+1
  3542  1F3F  0826               	movf	teclado_scan@c,w
  3543  1F40  0721               	addwf	??_teclado_scan+1,w
  3544  1F41  00A2               	movwf	??_teclado_scan+2
  3545  1F42  0822               	movf	??_teclado_scan+2,w
  3546  1F43  0084               	movwf	4
  3547  1F44  1783               	bsf	3,7	;select IRP bank3
  3548  1F45  0800               	movf	0,w
  3549  1F46  00A3               	movwf	??_teclado_scan+3
  3550  1F47  0823               	movf	??_teclado_scan+3,w
  3551  1F48  00A4               	movwf	teclado_scan@tecla
  3552  1F49                     l4477:
  3553                           
  3554                           ;teclado.c: 85:         }
  3555  1F49  3001               	movlw	1
  3556  1F4A  00A0               	movwf	??_teclado_scan
  3557  1F4B  0820               	movf	??_teclado_scan,w
  3558  1F4C  07A6               	addwf	teclado_scan@c,f
  3559  1F4D                     l4479:
  3560  1F4D  3004               	movlw	4
  3561  1F4E  0226               	subwf	teclado_scan@c,w
  3562  1F4F  1C03               	skipc
  3563  1F50  2F52               	goto	u2991
  3564  1F51  2F53               	goto	u2990
  3565  1F52                     u2991:
  3566  1F52  2F25               	goto	l4473
  3567  1F53                     u2990:
  3568  1F53                     l4481:
  3569                           
  3570                           ;teclado.c: 86:     }
  3571  1F53  3001               	movlw	1
  3572  1F54  00A0               	movwf	??_teclado_scan
  3573  1F55  0820               	movf	??_teclado_scan,w
  3574  1F56  07A5               	addwf	teclado_scan@l,f
  3575  1F57  2F12               	goto	l4461
  3576  1F58                     l4485:
  3577                           
  3578                           ;teclado.c: 87:     return( tecla );
  3579  1F58  0824               	movf	teclado_scan@tecla,w
  3580  1F59                     l491:
  3581  1F59  0008               	return
  3582  1F5A                     __end_of_teclado_scan:
  3583                           
  3584                           	psect	text5
  3585  18A9                     __ptext5:	
  3586 ;; *************** function _statusT1 *****************
  3587 ;; Defined at:
  3588 ;;		line 38 in file "timer1.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;		None
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  4    0[BANK0 ] unsigned long 
  3595 ;; Registers used:
  3596 ;;		wreg
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3602 ;;      Params:         0       4       0       0       0
  3603 ;;      Locals:         0       0       0       0       0
  3604 ;;      Temps:          0       0       0       0       0
  3605 ;;      Totals:         0       4       0       0       0
  3606 ;;Total ram usage:        4 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    2
  3609 ;; This function calls:
  3610 ;;		Nothing
  3611 ;; This function is called by:
  3612 ;;		_main
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function _statusT1
  3618  18A9                     _statusT1:
  3619  18A9                     l7597:	
  3620                           ;incstack = 0
  3621                           ; Regs used in _statusT1: [wreg]
  3622                           
  3623                           
  3624                           ;timer1.c: 40:     return( t1cont );
  3625  18A9  1283               	bcf	3,5	;RP0=0, select bank0
  3626  18AA  1303               	bcf	3,6	;RP1=0, select bank0
  3627  18AB  084B               	movf	_t1cont+3,w
  3628  18AC  00A3               	movwf	?_statusT1+3
  3629  18AD  084A               	movf	_t1cont+2,w
  3630  18AE  00A2               	movwf	?_statusT1+2
  3631  18AF  0849               	movf	_t1cont+1,w
  3632  18B0  00A1               	movwf	?_statusT1+1
  3633  18B1  0848               	movf	_t1cont,w
  3634  18B2  00A0               	movwf	?_statusT1
  3635  18B3                     l539:
  3636  18B3  0008               	return
  3637  18B4                     __end_of_statusT1:
  3638                           
  3639                           	psect	text6
  3640  10C2                     __ptext6:	
  3641 ;; *************** function _set_passo *****************
  3642 ;; Defined at:
  3643 ;;		line 53 in file "atuadores.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  passo           1    wreg     unsigned char 
  3646 ;;  ptr             1    0[BANK0 ] PTR unsigned char 
  3647 ;;		 -> main@vetorOut(1), 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  passo           1    3[BANK0 ] unsigned char 
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  1    wreg      void 
  3652 ;; Registers used:
  3653 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3659 ;;      Params:         0       1       0       0       0
  3660 ;;      Locals:         0       1       0       0       0
  3661 ;;      Temps:          0       2       0       0       0
  3662 ;;      Totals:         0       4       0       0       0
  3663 ;;Total ram usage:        4 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    2
  3666 ;; This function calls:
  3667 ;;		Nothing
  3668 ;; This function is called by:
  3669 ;;		_main
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           
  3674                           ;psect for function _set_passo
  3675  10C2                     _set_passo:
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in _set_passo: [wreg-fsr0h+status,2+status,0]
  3679                           ;set_passo@passo stored from wreg
  3680  10C2  1283               	bcf	3,5	;RP0=0, select bank0
  3681  10C3  1303               	bcf	3,6	;RP1=0, select bank0
  3682  10C4  00A3               	movwf	set_passo@passo
  3683  10C5                     l7027:
  3684                           
  3685                           ;atuadores.c: 53: void set_passo(char passo, char* ptr);atuadores.c: 54: {;atuadores.c: 
      +                          55:     switch (passo)
  3686  10C5  28FA               	goto	l7047
  3687  10C6                     l7029:
  3688  10C6  0820               	movf	set_passo@ptr,w
  3689  10C7  0084               	movwf	4
  3690  10C8  1383               	bcf	3,7	;select IRP bank0
  3691  10C9  1400               	bsf	0,0
  3692  10CA  291C               	goto	l13
  3693  10CB                     l7031:
  3694  10CB  30FE               	movlw	254
  3695  10CC  00A1               	movwf	??_set_passo
  3696  10CD  0820               	movf	set_passo@ptr,w
  3697  10CE  0084               	movwf	4
  3698  10CF  0821               	movf	??_set_passo,w
  3699  10D0  1383               	bcf	3,7	;select IRP bank0
  3700  10D1  0580               	andwf	0,f
  3701  10D2  291C               	goto	l13
  3702  10D3                     l7033:
  3703  10D3  0820               	movf	set_passo@ptr,w
  3704  10D4  0084               	movwf	4
  3705  10D5  1383               	bcf	3,7	;select IRP bank0
  3706  10D6  1480               	bsf	0,1
  3707  10D7  291C               	goto	l13
  3708  10D8                     l7035:
  3709  10D8  30FD               	movlw	253
  3710  10D9  00A1               	movwf	??_set_passo
  3711  10DA  0820               	movf	set_passo@ptr,w
  3712  10DB  0084               	movwf	4
  3713  10DC  0821               	movf	??_set_passo,w
  3714  10DD  1383               	bcf	3,7	;select IRP bank0
  3715  10DE  0580               	andwf	0,f
  3716  10DF  291C               	goto	l13
  3717  10E0                     l7037:
  3718  10E0  0820               	movf	set_passo@ptr,w
  3719  10E1  0084               	movwf	4
  3720  10E2  1383               	bcf	3,7	;select IRP bank0
  3721  10E3  1500               	bsf	0,2
  3722  10E4  291C               	goto	l13
  3723  10E5                     l7039:
  3724  10E5  30FB               	movlw	251
  3725  10E6  00A1               	movwf	??_set_passo
  3726  10E7  0820               	movf	set_passo@ptr,w
  3727  10E8  0084               	movwf	4
  3728  10E9  0821               	movf	??_set_passo,w
  3729  10EA  1383               	bcf	3,7	;select IRP bank0
  3730  10EB  0580               	andwf	0,f
  3731  10EC  291C               	goto	l13
  3732  10ED                     l7041:
  3733  10ED  0820               	movf	set_passo@ptr,w
  3734  10EE  0084               	movwf	4
  3735  10EF  1383               	bcf	3,7	;select IRP bank0
  3736  10F0  1580               	bsf	0,3
  3737  10F1  291C               	goto	l13
  3738  10F2                     l7043:
  3739  10F2  30F7               	movlw	247
  3740  10F3  00A1               	movwf	??_set_passo
  3741  10F4  0820               	movf	set_passo@ptr,w
  3742  10F5  0084               	movwf	4
  3743  10F6  0821               	movf	??_set_passo,w
  3744  10F7  1383               	bcf	3,7	;select IRP bank0
  3745  10F8  0580               	andwf	0,f
  3746  10F9  291C               	goto	l13
  3747  10FA                     l7047:
  3748  10FA  0823               	movf	set_passo@passo,w
  3749  10FB  00A1               	movwf	??_set_passo
  3750  10FC  01A2               	clrf	??_set_passo+1
  3751                           
  3752                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3753                           ; Switch size 1, requested type "simple"
  3754                           ; Number of cases is 1, Range of values is 0 to 0
  3755                           ; switch strategies available:
  3756                           ; Name         Instructions Cycles
  3757                           ; simple_byte            4     3 (average)
  3758                           ; direct_byte           11     8 (fixed)
  3759                           ; jumptable            260     6 (fixed)
  3760                           ;	Chosen strategy is simple_byte
  3761  10FD  0822               	movf	??_set_passo+1,w
  3762  10FE  3A00               	xorlw	0	; case 0
  3763  10FF  1903               	skipnz
  3764  1100  2902               	goto	l8933
  3765  1101  291C               	goto	l13
  3766  1102                     l8933:
  3767                           
  3768                           ; Switch size 1, requested type "simple"
  3769                           ; Number of cases is 8, Range of values is 65 to 100
  3770                           ; switch strategies available:
  3771                           ; Name         Instructions Cycles
  3772                           ; simple_byte           25    13 (average)
  3773                           ; direct_byte          119    11 (fixed)
  3774                           ; jumptable            263     9 (fixed)
  3775                           ;	Chosen strategy is simple_byte
  3776  1102  0821               	movf	??_set_passo,w
  3777  1103  3A41               	xorlw	65	; case 65
  3778  1104  1903               	skipnz
  3779  1105  28C6               	goto	l7029
  3780  1106  3A03               	xorlw	3	; case 66
  3781  1107  1903               	skipnz
  3782  1108  28D3               	goto	l7033
  3783  1109  3A01               	xorlw	1	; case 67
  3784  110A  1903               	skipnz
  3785  110B  28E0               	goto	l7037
  3786  110C  3A07               	xorlw	7	; case 68
  3787  110D  1903               	skipnz
  3788  110E  28ED               	goto	l7041
  3789  110F  3A25               	xorlw	37	; case 97
  3790  1110  1903               	skipnz
  3791  1111  28CB               	goto	l7031
  3792  1112  3A03               	xorlw	3	; case 98
  3793  1113  1903               	skipnz
  3794  1114  28D8               	goto	l7035
  3795  1115  3A01               	xorlw	1	; case 99
  3796  1116  1903               	skipnz
  3797  1117  28E5               	goto	l7039
  3798  1118  3A07               	xorlw	7	; case 100
  3799  1119  1903               	skipnz
  3800  111A  28F2               	goto	l7043
  3801  111B  291C               	goto	l13
  3802  111C                     l13:
  3803  111C  0008               	return
  3804  111D                     __end_of_set_passo:
  3805                           
  3806                           	psect	text7
  3807  18C0                     __ptext7:	
  3808 ;; *************** function _setT1 *****************
  3809 ;; Defined at:
  3810 ;;		line 31 in file "timer1.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  c               4    6[BANK0 ] unsigned long 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      void 
  3817 ;; Registers used:
  3818 ;;		wreg
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3824 ;;      Params:         0       4       0       0       0
  3825 ;;      Locals:         0       0       0       0       0
  3826 ;;      Temps:          0       0       0       0       0
  3827 ;;      Totals:         0       4       0       0       0
  3828 ;;Total ram usage:        4 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    2
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_main
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function _setT1
  3840  18C0                     _setT1:
  3841  18C0                     l7593:	
  3842                           ;incstack = 0
  3843                           ; Regs used in _setT1: [wreg]
  3844                           
  3845                           
  3846                           ;timer1.c: 31: void setT1( unsigned long int c );timer1.c: 32: {;timer1.c: 33:     t1con
      +                          t = c;
  3847  18C0  1283               	bcf	3,5	;RP0=0, select bank0
  3848  18C1  1303               	bcf	3,6	;RP1=0, select bank0
  3849  18C2  0829               	movf	setT1@c+3,w
  3850  18C3  00CB               	movwf	_t1cont+3
  3851  18C4  0828               	movf	setT1@c+2,w
  3852  18C5  00CA               	movwf	_t1cont+2
  3853  18C6  0827               	movf	setT1@c+1,w
  3854  18C7  00C9               	movwf	_t1cont+1
  3855  18C8  0826               	movf	setT1@c,w
  3856  18C9  00C8               	movwf	_t1cont
  3857  18CA                     l7595:
  3858                           
  3859                           ;timer1.c: 34:     T1CONbits.TMR1ON = 1;
  3860  18CA  1410               	bsf	16,0	;volatile
  3861  18CB                     l536:
  3862  18CB  0008               	return
  3863  18CC                     __end_of_setT1:
  3864                           
  3865                           	psect	text8
  3866  1D48                     __ptext8:	
  3867 ;; *************** function _serialIOscan *****************
  3868 ;; Defined at:
  3869 ;;		line 76 in file "serialIO.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;		None
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  i               1    9[BANK0 ] unsigned char 
  3874 ;;  j               1    8[BANK0 ] unsigned char 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3884 ;;      Params:         0       0       0       0       0
  3885 ;;      Locals:         0       2       0       0       0
  3886 ;;      Temps:          0       4       0       0       0
  3887 ;;      Totals:         0       6       0       0       0
  3888 ;;Total ram usage:        6 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    3
  3891 ;; This function calls:
  3892 ;;		_serialIObyteShift
  3893 ;;		_serialIOload
  3894 ;; This function is called by:
  3895 ;;		_main
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           
  3900                           ;psect for function _serialIOscan
  3901  1D48                     _serialIOscan:
  3902  1D48                     l7515:	
  3903                           ;incstack = 0
  3904                           ; Regs used in _serialIOscan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3905                           
  3906                           
  3907                           ;serialIO.c: 78:     unsigned char i,j;;serialIO.c: 79:     j = lenSerialIO - 1;
  3908  1D48  1283               	bcf	3,5	;RP0=0, select bank0
  3909  1D49  1303               	bcf	3,6	;RP1=0, select bank0
  3910  1D4A  0851               	movf	_lenSerialIO,w
  3911  1D4B  3EFF               	addlw	255
  3912  1D4C  00A4               	movwf	??_serialIOscan
  3913  1D4D  0824               	movf	??_serialIOscan,w
  3914  1D4E  00A8               	movwf	serialIOscan@j
  3915  1D4F                     l7517:
  3916                           
  3917                           ;serialIO.c: 80:     serialIOload();
  3918  1D4F  160A  158A  2030  160A  158A  	fcall	_serialIOload
  3919  1D54                     l7519:
  3920                           
  3921                           ;serialIO.c: 81:     for( i=0; i<lenSerialIO; i++ )
  3922  1D54  1283               	bcf	3,5	;RP0=0, select bank0
  3923  1D55  1303               	bcf	3,6	;RP1=0, select bank0
  3924  1D56  01A9               	clrf	serialIOscan@i
  3925  1D57  2D77               	goto	l7525
  3926  1D58                     l7521:
  3927                           
  3928                           ;serialIO.c: 82:     {;serialIO.c: 83:         ptrSerialIn[i] = serialIObyteShift( ptrSe
      +                          rialOut[j-i]);
  3929  1D58  0852               	movf	_ptrSerialOut,w
  3930  1D59  00A4               	movwf	??_serialIOscan
  3931  1D5A  0829               	movf	serialIOscan@i,w
  3932  1D5B  02A4               	subwf	??_serialIOscan,f
  3933  1D5C  0828               	movf	serialIOscan@j,w
  3934  1D5D  0724               	addwf	??_serialIOscan,w
  3935  1D5E  00A5               	movwf	??_serialIOscan+1
  3936  1D5F  0825               	movf	??_serialIOscan+1,w
  3937  1D60  0084               	movwf	4
  3938  1D61  1383               	bcf	3,7	;select IRP bank0
  3939  1D62  0800               	movf	0,w
  3940  1D63  160A  158A  225A  160A  158A  	fcall	_serialIObyteShift
  3941  1D68  1283               	bcf	3,5	;RP0=0, select bank0
  3942  1D69  1303               	bcf	3,6	;RP1=0, select bank0
  3943  1D6A  00A6               	movwf	??_serialIOscan+2
  3944  1D6B  0829               	movf	serialIOscan@i,w
  3945  1D6C  0753               	addwf	_ptrSerialIn,w
  3946  1D6D  00A7               	movwf	??_serialIOscan+3
  3947  1D6E  0827               	movf	??_serialIOscan+3,w
  3948  1D6F  0084               	movwf	4
  3949  1D70  0826               	movf	??_serialIOscan+2,w
  3950  1D71  1383               	bcf	3,7	;select IRP bank0
  3951  1D72  0080               	movwf	0
  3952  1D73                     l7523:
  3953                           
  3954                           ;serialIO.c: 84:     }
  3955  1D73  3001               	movlw	1
  3956  1D74  00A4               	movwf	??_serialIOscan
  3957  1D75  0824               	movf	??_serialIOscan,w
  3958  1D76  07A9               	addwf	serialIOscan@i,f
  3959  1D77                     l7525:
  3960  1D77  0851               	movf	_lenSerialIO,w
  3961  1D78  0229               	subwf	serialIOscan@i,w
  3962  1D79  1C03               	skipc
  3963  1D7A  2D7C               	goto	u5841
  3964  1D7B  2D7D               	goto	u5840
  3965  1D7C                     u5841:
  3966  1D7C  2D58               	goto	l7521
  3967  1D7D                     u5840:
  3968  1D7D                     l7527:
  3969                           
  3970                           ;serialIO.c: 85:     serialIOload();
  3971  1D7D  160A  158A  2030  160A  158A  	fcall	_serialIOload
  3972  1D82                     l471:
  3973  1D82  0008               	return
  3974  1D83                     __end_of_serialIOscan:
  3975                           
  3976                           	psect	text9
  3977  1830                     __ptext9:	
  3978 ;; *************** function _serialIOload *****************
  3979 ;; Defined at:
  3980 ;;		line 45 in file "serialIO.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		None
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3994 ;;      Params:         0       0       0       0       0
  3995 ;;      Locals:         0       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0
  3997 ;;      Totals:         0       0       0       0       0
  3998 ;;Total ram usage:        0 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    2
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_serialIOscan
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           
  4009                           ;psect for function _serialIOload
  4010  1830                     _serialIOload:
  4011  1830                     l6917:	
  4012                           ;incstack = 0
  4013                           ; Regs used in _serialIOload: []
  4014                           
  4015                           
  4016                           ;serialIO.c: 47:     SERIALIO.SHLD = 0;
  4017  1830  1283               	bcf	3,5	;RP0=0, select bank0
  4018  1831  1303               	bcf	3,6	;RP1=0, select bank0
  4019  1832  1185               	bcf	5,3	;volatile
  4020                           
  4021                           ;serialIO.c: 48:     SERIALIO.SHLD = 1;
  4022  1833  1585               	bsf	5,3	;volatile
  4023  1834                     l456:
  4024  1834  0008               	return
  4025  1835                     __end_of_serialIOload:
  4026                           
  4027                           	psect	text10
  4028  1A5A                     __ptext10:	
  4029 ;; *************** function _serialIObyteShift *****************
  4030 ;; Defined at:
  4031 ;;		line 50 in file "serialIO.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;  dataIn          1    wreg     unsigned char 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  dataIn          1    1[BANK0 ] unsigned char 
  4036 ;;  dataBit         1    3[BANK0 ] unsigned char 
  4037 ;;  dataOut         1    2[BANK0 ] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  1    wreg      unsigned char 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4047 ;;      Params:         0       0       0       0       0
  4048 ;;      Locals:         0       3       0       0       0
  4049 ;;      Temps:          0       1       0       0       0
  4050 ;;      Totals:         0       4       0       0       0
  4051 ;;Total ram usage:        4 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    2
  4054 ;; This function calls:
  4055 ;;		Nothing
  4056 ;; This function is called by:
  4057 ;;		_serialIOscan
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           
  4062                           ;psect for function _serialIObyteShift
  4063  1A5A                     _serialIObyteShift:
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in _serialIObyteShift: [wreg+status,2+status,0]
  4067                           ;serialIObyteShift@dataIn stored from wreg
  4068  1A5A  1283               	bcf	3,5	;RP0=0, select bank0
  4069  1A5B  1303               	bcf	3,6	;RP1=0, select bank0
  4070  1A5C  00A1               	movwf	serialIObyteShift@dataIn
  4071  1A5D                     l6919:
  4072                           
  4073                           ;serialIO.c: 50: unsigned char serialIObyteShift( unsigned char dataIn );serialIO.c: 51:
      +                           {;serialIO.c: 52:     unsigned char dataBit;;serialIO.c: 53:     unsigned char dataOut;
      +                          ;serialIO.c: 55:     dataBit = 0x80;
  4074  1A5D  3080               	movlw	128
  4075  1A5E  00A0               	movwf	??_serialIObyteShift
  4076  1A5F  0820               	movf	??_serialIObyteShift,w
  4077  1A60  00A3               	movwf	serialIObyteShift@dataBit
  4078  1A61                     l6921:
  4079                           
  4080                           ;serialIO.c: 56:     dataOut = 0;
  4081  1A61  01A2               	clrf	serialIObyteShift@dataOut
  4082                           
  4083                           ;serialIO.c: 58:     while( dataBit )
  4084  1A62  2A78               	goto	l6933
  4085  1A63                     l460:
  4086                           
  4087                           ;serialIO.c: 59:     {;serialIO.c: 60:         SERIALIO.CLK = 0;
  4088  1A63  1105               	bcf	5,2	;volatile
  4089  1A64                     l6923:
  4090                           
  4091                           ;serialIO.c: 61:         if( dataIn & dataBit )
  4092  1A64  0821               	movf	serialIObyteShift@dataIn,w
  4093  1A65  0523               	andwf	serialIObyteShift@dataBit,w
  4094  1A66  1903               	btfsc	3,2
  4095  1A67  2A69               	goto	u5131
  4096  1A68  2A6A               	goto	u5130
  4097  1A69                     u5131:
  4098  1A69  2A6C               	goto	l461
  4099  1A6A                     u5130:
  4100  1A6A                     l6925:
  4101                           
  4102                           ;serialIO.c: 62:             SERIALIO.OUT = 1;
  4103  1A6A  1405               	bsf	5,0	;volatile
  4104  1A6B  2A6D               	goto	l462
  4105  1A6C                     l461:	
  4106                           ;serialIO.c: 63:         else
  4107                           
  4108                           
  4109                           ;serialIO.c: 64:             SERIALIO.OUT = 0;
  4110  1A6C  1005               	bcf	5,0	;volatile
  4111  1A6D                     l462:
  4112                           
  4113                           ;serialIO.c: 66:         if( SERIALIO.IN )
  4114  1A6D  1C85               	btfss	5,1	;volatile
  4115  1A6E  2A70               	goto	u5141
  4116  1A6F  2A71               	goto	u5140
  4117  1A70                     u5141:
  4118  1A70  2A75               	goto	l6929
  4119  1A71                     u5140:
  4120  1A71                     l6927:
  4121                           
  4122                           ;serialIO.c: 67:             dataOut |= dataBit;
  4123  1A71  0823               	movf	serialIObyteShift@dataBit,w
  4124  1A72  00A0               	movwf	??_serialIObyteShift
  4125  1A73  0820               	movf	??_serialIObyteShift,w
  4126  1A74  04A2               	iorwf	serialIObyteShift@dataOut,f
  4127  1A75                     l6929:
  4128                           
  4129                           ;serialIO.c: 68:         SERIALIO.CLK = 1;
  4130  1A75  1505               	bsf	5,2	;volatile
  4131  1A76                     l6931:
  4132                           
  4133                           ;serialIO.c: 69:         dataBit >>= 1;
  4134  1A76  1003               	clrc
  4135  1A77  0CA3               	rrf	serialIObyteShift@dataBit,f
  4136  1A78                     l6933:
  4137                           
  4138                           ;serialIO.c: 58:     while( dataBit )
  4139  1A78  0823               	movf	serialIObyteShift@dataBit,w
  4140  1A79  1D03               	btfss	3,2
  4141  1A7A  2A7C               	goto	u5151
  4142  1A7B  2A7D               	goto	u5150
  4143  1A7C                     u5151:
  4144  1A7C  2A63               	goto	l460
  4145  1A7D                     u5150:
  4146  1A7D                     l464:
  4147                           
  4148                           ;serialIO.c: 71:     SERIALIO.CLK = 0;
  4149  1A7D  1105               	bcf	5,2	;volatile
  4150  1A7E                     l6935:
  4151                           
  4152                           ;serialIO.c: 72:     return( dataOut );
  4153  1A7E  0822               	movf	serialIObyteShift@dataOut,w
  4154  1A7F                     l465:
  4155  1A7F  0008               	return
  4156  1A80                     __end_of_serialIObyteShift:
  4157                           
  4158                           	psect	text11
  4159  1CA7                     __ptext11:	
  4160 ;; *************** function _salvar_receita *****************
  4161 ;; Defined at:
  4162 ;;		line 46 in file "eeprom.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;  adrs            1    7[BANK0 ] unsigned char 
  4165 ;;  data            1    8[BANK0 ] PTR unsigned char 
  4166 ;;		 -> fila(18), 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  i               1   13[BANK0 ] unsigned char 
  4169 ;;  aux             2   11[BANK0 ] int 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  1    wreg      void 
  4172 ;; Registers used:
  4173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4179 ;;      Params:         0       2       0       0       0
  4180 ;;      Locals:         0       3       0       0       0
  4181 ;;      Temps:          0       2       0       0       0
  4182 ;;      Totals:         0       7       0       0       0
  4183 ;;Total ram usage:        7 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    3
  4186 ;; This function calls:
  4187 ;;		_EEPROM_write
  4188 ;;		_end_receita
  4189 ;; This function is called by:
  4190 ;;		_main
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _salvar_receita
  4196  1CA7                     _salvar_receita:
  4197  1CA7                     l7175:	
  4198                           ;incstack = 0
  4199                           ; Regs used in _salvar_receita: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4200                           
  4201                           
  4202                           ;eeprom.c: 46: void salvar_receita (char adrs, unsigned char *data );eeprom.c: 47: {;eep
      +                          rom.c: 48:     int aux;;eeprom.c: 49:     aux = end_receita(adrs);
  4203  1CA7  1283               	bcf	3,5	;RP0=0, select bank0
  4204  1CA8  1303               	bcf	3,6	;RP1=0, select bank0
  4205  1CA9  0827               	movf	salvar_receita@adrs,w
  4206  1CAA  00A9               	movwf	??_salvar_receita
  4207  1CAB  01AA               	clrf	??_salvar_receita+1
  4208  1CAC  0829               	movf	??_salvar_receita,w
  4209  1CAD  00A0               	movwf	end_receita@x
  4210  1CAE  082A               	movf	??_salvar_receita+1,w
  4211  1CAF  00A1               	movwf	end_receita@x+1
  4212  1CB0  160A  158A  20F0  160A  158A  	fcall	_end_receita
  4213  1CB5  1283               	bcf	3,5	;RP0=0, select bank0
  4214  1CB6  1303               	bcf	3,6	;RP1=0, select bank0
  4215  1CB7  0821               	movf	?_end_receita+1,w
  4216  1CB8  00AC               	movwf	salvar_receita@aux+1
  4217  1CB9  0820               	movf	?_end_receita,w
  4218  1CBA  00AB               	movwf	salvar_receita@aux
  4219  1CBB                     l7177:
  4220                           
  4221                           ;eeprom.c: 50:     for( char i=0 ; i<16; i++)
  4222  1CBB  01AD               	clrf	salvar_receita@i
  4223  1CBC                     l7183:
  4224                           
  4225                           ;eeprom.c: 51:          EEPROM_write( (aux+i), *(data+i) );
  4226  1CBC  082D               	movf	salvar_receita@i,w
  4227  1CBD  0728               	addwf	salvar_receita@data,w
  4228  1CBE  00A9               	movwf	??_salvar_receita
  4229  1CBF  0829               	movf	??_salvar_receita,w
  4230  1CC0  0084               	movwf	4
  4231  1CC1  1383               	bcf	3,7	;select IRP bank0
  4232  1CC2  0800               	movf	0,w
  4233  1CC3  00AA               	movwf	??_salvar_receita+1
  4234  1CC4  082A               	movf	??_salvar_receita+1,w
  4235  1CC5  00A0               	movwf	EEPROM_write@data
  4236  1CC6  082B               	movf	salvar_receita@aux,w
  4237  1CC7  072D               	addwf	salvar_receita@i,w
  4238  1CC8  160A  158A  2173  160A  158A  	fcall	_EEPROM_write
  4239  1CCD                     l7185:
  4240  1CCD  3001               	movlw	1
  4241  1CCE  1283               	bcf	3,5	;RP0=0, select bank0
  4242  1CCF  1303               	bcf	3,6	;RP1=0, select bank0
  4243  1CD0  00A9               	movwf	??_salvar_receita
  4244  1CD1  0829               	movf	??_salvar_receita,w
  4245  1CD2  07AD               	addwf	salvar_receita@i,f
  4246  1CD3                     l7187:
  4247  1CD3  3010               	movlw	16
  4248  1CD4  022D               	subwf	salvar_receita@i,w
  4249  1CD5  1C03               	skipc
  4250  1CD6  2CD8               	goto	u5401
  4251  1CD7  2CD9               	goto	u5400
  4252  1CD8                     u5401:
  4253  1CD8  2CBC               	goto	l7183
  4254  1CD9                     u5400:
  4255  1CD9                     l146:
  4256  1CD9  0008               	return
  4257  1CDA                     __end_of_salvar_receita:
  4258                           
  4259                           	psect	text12
  4260  19D1                     __ptext12:	
  4261 ;; *************** function _salvar_dado *****************
  4262 ;; Defined at:
  4263 ;;		line 63 in file "eeprom.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  adrs            1    wreg     unsigned char 
  4266 ;;  col             1    7[BANK0 ] unsigned char 
  4267 ;;  data            1    8[BANK0 ] unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  adrs            1   11[BANK0 ] unsigned char 
  4270 ;;  aux             2   12[BANK0 ] int 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0, pclath, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4280 ;;      Params:         0       2       0       0       0
  4281 ;;      Locals:         0       3       0       0       0
  4282 ;;      Temps:          0       2       0       0       0
  4283 ;;      Totals:         0       7       0       0       0
  4284 ;;Total ram usage:        7 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    3
  4287 ;; This function calls:
  4288 ;;		_EEPROM_write
  4289 ;;		_end_receita
  4290 ;; This function is called by:
  4291 ;;		_main
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           
  4296                           ;psect for function _salvar_dado
  4297  19D1                     _salvar_dado:
  4298                           
  4299                           ;incstack = 0
  4300                           ; Regs used in _salvar_dado: [wreg+status,2+status,0+pclath+cstack]
  4301                           ;salvar_dado@adrs stored from wreg
  4302  19D1  1283               	bcf	3,5	;RP0=0, select bank0
  4303  19D2  1303               	bcf	3,6	;RP1=0, select bank0
  4304  19D3  00AB               	movwf	salvar_dado@adrs
  4305  19D4                     l7189:
  4306                           
  4307                           ;eeprom.c: 63: void salvar_dado (char adrs, char col, unsigned char data);eeprom.c: 64: 
      +                          {;eeprom.c: 65:     int aux;;eeprom.c: 66:     aux = end_receita(adrs);
  4308  19D4  082B               	movf	salvar_dado@adrs,w
  4309  19D5  00A9               	movwf	??_salvar_dado
  4310  19D6  01AA               	clrf	??_salvar_dado+1
  4311  19D7  0829               	movf	??_salvar_dado,w
  4312  19D8  00A0               	movwf	end_receita@x
  4313  19D9  082A               	movf	??_salvar_dado+1,w
  4314  19DA  00A1               	movwf	end_receita@x+1
  4315  19DB  160A  158A  20F0  160A  158A  	fcall	_end_receita
  4316  19E0  1283               	bcf	3,5	;RP0=0, select bank0
  4317  19E1  1303               	bcf	3,6	;RP1=0, select bank0
  4318  19E2  0821               	movf	?_end_receita+1,w
  4319  19E3  00AD               	movwf	salvar_dado@aux+1
  4320  19E4  0820               	movf	?_end_receita,w
  4321  19E5  00AC               	movwf	salvar_dado@aux
  4322  19E6                     l7191:
  4323                           
  4324                           ;eeprom.c: 67:     EEPROM_write((aux+col), data);
  4325  19E6  0828               	movf	salvar_dado@data,w
  4326  19E7  00A9               	movwf	??_salvar_dado
  4327  19E8  0829               	movf	??_salvar_dado,w
  4328  19E9  00A0               	movwf	EEPROM_write@data
  4329  19EA  082C               	movf	salvar_dado@aux,w
  4330  19EB  0727               	addwf	salvar_dado@col,w
  4331  19EC  160A  158A  2173  160A  158A  	fcall	_EEPROM_write
  4332  19F1                     l154:
  4333  19F1  0008               	return
  4334  19F2                     __end_of_salvar_dado:
  4335                           
  4336                           	psect	text13
  4337  18F0                     __ptext13:	
  4338 ;; *************** function _end_receita *****************
  4339 ;; Defined at:
  4340 ;;		line 41 in file "eeprom.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  x               2    0[BANK0 ] int 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  2    0[BANK0 ] int 
  4347 ;; Registers used:
  4348 ;;		wreg
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4354 ;;      Params:         0       2       0       0       0
  4355 ;;      Locals:         0       0       0       0       0
  4356 ;;      Temps:          0       2       0       0       0
  4357 ;;      Totals:         0       4       0       0       0
  4358 ;;Total ram usage:        4 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    2
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_salvar_receita
  4365 ;;		_salvar_dado
  4366 ;;		_buscar_receita
  4367 ;;		_buscar_dado
  4368 ;;		_deletar_receita
  4369 ;;		_receita_livre
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function _end_receita
  4375  18F0                     _end_receita:
  4376  18F0                     l6733:	
  4377                           ;incstack = 0
  4378                           ; Regs used in _end_receita: [wreg]
  4379                           
  4380                           
  4381                           ;eeprom.c: 41: int end_receita (int x);eeprom.c: 42: {;eeprom.c: 43:     return(x*16);
  4382  18F0  1283               	bcf	3,5	;RP0=0, select bank0
  4383  18F1  1303               	bcf	3,6	;RP1=0, select bank0
  4384  18F2  0821               	movf	end_receita@x+1,w
  4385  18F3  00A3               	movwf	??_end_receita+1
  4386  18F4  0820               	movf	end_receita@x,w
  4387  18F5  00A2               	movwf	??_end_receita
  4388  18F6  0EA2               	swapf	??_end_receita,f
  4389  18F7  0EA3               	swapf	??_end_receita+1,f
  4390  18F8  30F0               	movlw	240
  4391  18F9  05A3               	andwf	??_end_receita+1,f
  4392  18FA  0822               	movf	??_end_receita,w
  4393  18FB  390F               	andlw	15
  4394  18FC  04A3               	iorwf	??_end_receita+1,f
  4395  18FD  30F0               	movlw	240
  4396  18FE  05A2               	andwf	??_end_receita,f
  4397  18FF  0822               	movf	??_end_receita,w
  4398  1900  00A0               	movwf	?_end_receita
  4399  1901  0823               	movf	??_end_receita+1,w
  4400  1902  00A1               	movwf	?_end_receita+1
  4401  1903                     l141:
  4402  1903  0008               	return
  4403  1904                     __end_of_end_receita:
  4404                           
  4405                           	psect	text14
  4406  1973                     __ptext14:	
  4407 ;; *************** function _EEPROM_write *****************
  4408 ;; Defined at:
  4409 ;;		line 24 in file "eeprom.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  addr            1    wreg     unsigned char 
  4412 ;;  data            1    0[BANK0 ] unsigned char 
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  addr            1    1[BANK0 ] unsigned char 
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  1    wreg      void 
  4417 ;; Registers used:
  4418 ;;		wreg
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4424 ;;      Params:         0       1       0       0       0
  4425 ;;      Locals:         0       1       0       0       0
  4426 ;;      Temps:          0       0       0       0       0
  4427 ;;      Totals:         0       2       0       0       0
  4428 ;;Total ram usage:        2 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    2
  4431 ;; This function calls:
  4432 ;;		Nothing
  4433 ;; This function is called by:
  4434 ;;		_salvar_receita
  4435 ;;		_salvar_dado
  4436 ;;		_deletar_receita
  4437 ;;		_formatar_receitas
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           
  4442                           ;psect for function _EEPROM_write
  4443  1973                     _EEPROM_write:
  4444                           
  4445                           ;incstack = 0
  4446                           ; Regs used in _EEPROM_write: [wreg]
  4447                           ;EEPROM_write@addr stored from wreg
  4448  1973  1283               	bcf	3,5	;RP0=0, select bank0
  4449  1974  1303               	bcf	3,6	;RP1=0, select bank0
  4450  1975  00A1               	movwf	EEPROM_write@addr
  4451  1976                     l6723:
  4452                           
  4453                           ;eeprom.c: 24: void EEPROM_write( unsigned char addr, unsigned char data );eeprom.c: 25:
      +                           {;eeprom.c: 26:     INTCONbits.GIE = 0;
  4454  1976  138B               	bcf	11,7	;volatile
  4455  1977                     l6725:
  4456                           
  4457                           ;eeprom.c: 27:     EEADR = addr;
  4458  1977  0821               	movf	EEPROM_write@addr,w
  4459  1978  1283               	bcf	3,5	;RP0=0, select bank2
  4460  1979  1703               	bsf	3,6	;RP1=1, select bank2
  4461  197A  008D               	movwf	13	;volatile
  4462                           
  4463                           ;eeprom.c: 28:     EEDAT = data;
  4464  197B  1283               	bcf	3,5	;RP0=0, select bank0
  4465  197C  1303               	bcf	3,6	;RP1=0, select bank0
  4466  197D  0820               	movf	EEPROM_write@data,w
  4467  197E  1283               	bcf	3,5	;RP0=0, select bank2
  4468  197F  1703               	bsf	3,6	;RP1=1, select bank2
  4469  1980  008C               	movwf	12	;volatile
  4470  1981                     l6727:
  4471                           
  4472                           ;eeprom.c: 29:     EECON1bits.EEPGD = 0;
  4473  1981  1683               	bsf	3,5	;RP0=1, select bank3
  4474  1982  1703               	bsf	3,6	;RP1=1, select bank3
  4475  1983  138C               	bcf	12,7	;volsfr
  4476  1984                     l6729:
  4477                           
  4478                           ;eeprom.c: 30:     EECON1bits.WREN = 1;
  4479  1984  150C               	bsf	12,2	;volsfr
  4480                           
  4481                           ;eeprom.c: 31:     EECON2 = 0x55;
  4482  1985  3055               	movlw	85
  4483  1986  008D               	movwf	13	;volsfr
  4484                           
  4485                           ;eeprom.c: 32:     EECON2 = 0xAA;
  4486  1987  30AA               	movlw	170
  4487  1988  008D               	movwf	13	;volsfr
  4488  1989                     l6731:
  4489                           
  4490                           ;eeprom.c: 33:     EECON1bits.WR = 1;
  4491  1989  148C               	bsf	12,1	;volsfr
  4492  198A                     l135:	
  4493                           ;eeprom.c: 35:     while( EECON1bits.WR );
  4494                           
  4495  198A  188C               	btfsc	12,1	;volsfr
  4496  198B  298D               	goto	u4931
  4497  198C  298E               	goto	u4930
  4498  198D                     u4931:
  4499  198D  298A               	goto	l135
  4500  198E                     u4930:
  4501  198E                     l137:
  4502                           
  4503                           ;eeprom.c: 37:     EECON1bits.WREN = 0;
  4504  198E  110C               	bcf	12,2	;volsfr
  4505                           
  4506                           ;eeprom.c: 38:     INTCONbits.GIE = 1;
  4507  198F  178B               	bsf	11,7	;volatile
  4508  1990                     l138:
  4509  1990  0008               	return
  4510  1991                     __end_of_EEPROM_write:
  4511                           
  4512                           	psect	text15
  4513  100D                     __ptext15:	
  4514 ;; *************** function _salva_atuadores_init *****************
  4515 ;; Defined at:
  4516 ;;		line 117 in file "fifo.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;		None
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  condi_init      4    4[BANK0 ] unsigned char [4]
  4521 ;;  mask            1   10[BANK0 ] unsigned char 
  4522 ;;  dado            1    9[BANK0 ] unsigned char 
  4523 ;;  pt              1    8[BANK0 ] PTR unsigned char 
  4524 ;;		 -> salva_atuadores_init@condi_init(4), 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  1    wreg      unsigned char 
  4527 ;; Registers used:
  4528 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4534 ;;      Params:         0       0       0       0       0
  4535 ;;      Locals:         0       7       0       0       0
  4536 ;;      Temps:          0       1       0       0       0
  4537 ;;      Totals:         0       8       0       0       0
  4538 ;;Total ram usage:        8 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    3
  4541 ;; This function calls:
  4542 ;;		_ler_atuador
  4543 ;; This function is called by:
  4544 ;;		_main
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           
  4549                           ;psect for function _salva_atuadores_init
  4550  100D                     _salva_atuadores_init:
  4551  100D                     l7213:	
  4552                           ;incstack = 0
  4553                           ; Regs used in _salva_atuadores_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4554                           
  4555                           
  4556                           ;fifo.c: 119:     char condi_init[4] = {ler_atuador('A'), ler_atuador('B'), ler_atuador(
      +                          'C'), ler_atuador('D')};
  4557  100D  3000               	movlw	0
  4558  100E  1283               	bcf	3,5	;RP0=0, select bank0
  4559  100F  1303               	bcf	3,6	;RP1=0, select bank0
  4560  1010  00A7               	movwf	salva_atuadores_init@condi_init+3
  4561  1011  3000               	movlw	0
  4562  1012  00A6               	movwf	salva_atuadores_init@condi_init+2
  4563  1013  3000               	movlw	0
  4564  1014  00A5               	movwf	salva_atuadores_init@condi_init+1
  4565  1015  3000               	movlw	0
  4566  1016  00A4               	movwf	salva_atuadores_init@condi_init
  4567  1017                     l7215:
  4568  1017  3041               	movlw	65
  4569  1018  160A  158A  2358  160A  118A  	fcall	_ler_atuador
  4570  101D  1283               	bcf	3,5	;RP0=0, select bank0
  4571  101E  1303               	bcf	3,6	;RP1=0, select bank0
  4572  101F  00A3               	movwf	??_salva_atuadores_init
  4573  1020  0823               	movf	??_salva_atuadores_init,w
  4574  1021  00A4               	movwf	salva_atuadores_init@condi_init
  4575  1022                     l7217:
  4576  1022  3042               	movlw	66
  4577  1023  160A  158A  2358  160A  118A  	fcall	_ler_atuador
  4578  1028  1283               	bcf	3,5	;RP0=0, select bank0
  4579  1029  1303               	bcf	3,6	;RP1=0, select bank0
  4580  102A  00A3               	movwf	??_salva_atuadores_init
  4581  102B  0823               	movf	??_salva_atuadores_init,w
  4582  102C  00A5               	movwf	salva_atuadores_init@condi_init+1
  4583  102D                     l7219:
  4584  102D  3043               	movlw	67
  4585  102E  160A  158A  2358  160A  118A  	fcall	_ler_atuador
  4586  1033  1283               	bcf	3,5	;RP0=0, select bank0
  4587  1034  1303               	bcf	3,6	;RP1=0, select bank0
  4588  1035  00A3               	movwf	??_salva_atuadores_init
  4589  1036  0823               	movf	??_salva_atuadores_init,w
  4590  1037  00A6               	movwf	salva_atuadores_init@condi_init+2
  4591  1038                     l7221:
  4592  1038  3044               	movlw	68
  4593  1039  160A  158A  2358  160A  118A  	fcall	_ler_atuador
  4594  103E  1283               	bcf	3,5	;RP0=0, select bank0
  4595  103F  1303               	bcf	3,6	;RP1=0, select bank0
  4596  1040  00A3               	movwf	??_salva_atuadores_init
  4597  1041  0823               	movf	??_salva_atuadores_init,w
  4598  1042  00A7               	movwf	salva_atuadores_init@condi_init+3
  4599                           
  4600                           ;fifo.c: 121:     char *pt = condi_init;
  4601  1043  3024               	movlw	(low (salva_atuadores_init@condi_init| 0))& (0+255)
  4602  1044  00A3               	movwf	??_salva_atuadores_init
  4603  1045  0823               	movf	??_salva_atuadores_init,w
  4604  1046  00A8               	movwf	salva_atuadores_init@pt
  4605  1047                     l7223:
  4606                           
  4607                           ;fifo.c: 122:     char dado = 0;
  4608  1047  01A9               	clrf	salva_atuadores_init@dado
  4609  1048                     l7225:
  4610                           
  4611                           ;fifo.c: 123:     char mask = 0x08;
  4612  1048  3008               	movlw	8
  4613  1049  00A3               	movwf	??_salva_atuadores_init
  4614  104A  0823               	movf	??_salva_atuadores_init,w
  4615  104B  00AA               	movwf	salva_atuadores_init@mask
  4616                           
  4617                           ;fifo.c: 125:     while( mask )
  4618  104C  2860               	goto	l7233
  4619  104D                     l7227:
  4620                           
  4621                           ;fifo.c: 126:     {;fifo.c: 127:         if( *pt )
  4622  104D  0828               	movf	salva_atuadores_init@pt,w
  4623  104E  0084               	movwf	4
  4624  104F  1383               	bcf	3,7	;select IRP bank0
  4625  1050  0800               	movf	0,w
  4626  1051  1903               	btfsc	3,2
  4627  1052  2854               	goto	u5431
  4628  1053  2855               	goto	u5430
  4629  1054                     u5431:
  4630  1054  285A               	goto	l256
  4631  1055                     u5430:
  4632  1055                     l7229:
  4633                           
  4634                           ;fifo.c: 128:         {;fifo.c: 129:             dado = dado | mask;
  4635  1055  0829               	movf	salva_atuadores_init@dado,w
  4636  1056  042A               	iorwf	salva_atuadores_init@mask,w
  4637  1057  00A3               	movwf	??_salva_atuadores_init
  4638  1058  0823               	movf	??_salva_atuadores_init,w
  4639  1059  00A9               	movwf	salva_atuadores_init@dado
  4640  105A                     l256:	
  4641                           ;fifo.c: 130:         }
  4642                           
  4643                           
  4644                           ;fifo.c: 131:         pt++;
  4645  105A  3001               	movlw	1
  4646  105B  00A3               	movwf	??_salva_atuadores_init
  4647  105C  0823               	movf	??_salva_atuadores_init,w
  4648  105D  07A8               	addwf	salva_atuadores_init@pt,f
  4649  105E                     l7231:
  4650                           
  4651                           ;fifo.c: 132:         mask >>= 1;
  4652  105E  1003               	clrc
  4653  105F  0CAA               	rrf	salva_atuadores_init@mask,f
  4654  1060                     l7233:
  4655                           
  4656                           ;fifo.c: 125:     while( mask )
  4657  1060  082A               	movf	salva_atuadores_init@mask,w
  4658  1061  1D03               	btfss	3,2
  4659  1062  2864               	goto	u5441
  4660  1063  2865               	goto	u5440
  4661  1064                     u5441:
  4662  1064  284D               	goto	l7227
  4663  1065                     u5440:
  4664  1065                     l7235:
  4665                           
  4666                           ;fifo.c: 134:     return(dado);
  4667  1065  0829               	movf	salva_atuadores_init@dado,w
  4668  1066                     l258:
  4669  1066  0008               	return
  4670  1067                     __end_of_salva_atuadores_init:
  4671                           
  4672                           	psect	text16
  4673  1B58                     __ptext16:	
  4674 ;; *************** function _ler_atuador *****************
  4675 ;; Defined at:
  4676 ;;		line 80 in file "fifo.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  tecla           1    wreg     unsigned char 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  tecla           1    2[BANK0 ] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  1    wreg      unsigned char 
  4683 ;; Registers used:
  4684 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4690 ;;      Params:         0       0       0       0       0
  4691 ;;      Locals:         0       1       0       0       0
  4692 ;;      Temps:          0       2       0       0       0
  4693 ;;      Totals:         0       3       0       0       0
  4694 ;;Total ram usage:        3 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    2
  4697 ;; This function calls:
  4698 ;;		Nothing
  4699 ;; This function is called by:
  4700 ;;		_salva_atuadores_init
  4701 ;;		_main
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           
  4706                           ;psect for function _ler_atuador
  4707  1B58                     _ler_atuador:
  4708                           
  4709                           ;incstack = 0
  4710                           ; Regs used in _ler_atuador: [wreg-fsr0h+status,2+status,0]
  4711                           ;ler_atuador@tecla stored from wreg
  4712  1B58  1283               	bcf	3,5	;RP0=0, select bank0
  4713  1B59  1303               	bcf	3,6	;RP1=0, select bank0
  4714  1B5A  00A2               	movwf	ler_atuador@tecla
  4715  1B5B                     l6737:
  4716                           
  4717                           ;fifo.c: 80: char ler_atuador(char tecla);fifo.c: 81: {;fifo.c: 82:     switch(tecla)
  4718  1B5B  2B6F               	goto	l6771
  4719  1B5C                     l6739:
  4720  1B5C  087A               	movf	_atuador,w
  4721  1B5D  3901               	andlw	1
  4722  1B5E  2B85               	goto	l232
  4723  1B5F                     l6745:
  4724  1B5F  0C7A               	rrf	_atuador,w
  4725  1B60  3901               	andlw	1
  4726  1B61  2B85               	goto	l232
  4727  1B62                     l6751:
  4728  1B62  0C7A               	rrf	_atuador,w
  4729  1B63  00A0               	movwf	??_ler_atuador
  4730  1B64  0C20               	rrf	??_ler_atuador,w
  4731  1B65  3901               	andlw	1
  4732  1B66  2B85               	goto	l232
  4733  1B67                     l6757:
  4734  1B67  0C7A               	rrf	_atuador,w
  4735  1B68  00A0               	movwf	??_ler_atuador
  4736  1B69  0CA0               	rrf	??_ler_atuador,f
  4737  1B6A  0C20               	rrf	??_ler_atuador,w
  4738  1B6B  3901               	andlw	1
  4739  1B6C  2B85               	goto	l232
  4740  1B6D                     l6763:
  4741  1B6D  3000               	movlw	0
  4742  1B6E  2B85               	goto	l232
  4743  1B6F                     l6771:
  4744  1B6F  0822               	movf	ler_atuador@tecla,w
  4745  1B70  00A0               	movwf	??_ler_atuador
  4746  1B71  01A1               	clrf	??_ler_atuador+1
  4747                           
  4748                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4749                           ; Switch size 1, requested type "simple"
  4750                           ; Number of cases is 1, Range of values is 0 to 0
  4751                           ; switch strategies available:
  4752                           ; Name         Instructions Cycles
  4753                           ; simple_byte            4     3 (average)
  4754                           ; direct_byte           11     8 (fixed)
  4755                           ; jumptable            260     6 (fixed)
  4756                           ;	Chosen strategy is simple_byte
  4757  1B72  0821               	movf	??_ler_atuador+1,w
  4758  1B73  3A00               	xorlw	0	; case 0
  4759  1B74  1903               	skipnz
  4760  1B75  2B77               	goto	l8935
  4761  1B76  2B6D               	goto	l6763
  4762  1B77                     l8935:
  4763                           
  4764                           ; Switch size 1, requested type "simple"
  4765                           ; Number of cases is 4, Range of values is 65 to 68
  4766                           ; switch strategies available:
  4767                           ; Name         Instructions Cycles
  4768                           ; simple_byte           13     7 (average)
  4769                           ; direct_byte           23    11 (fixed)
  4770                           ; jumptable            263     9 (fixed)
  4771                           ;	Chosen strategy is simple_byte
  4772  1B77  0820               	movf	??_ler_atuador,w
  4773  1B78  3A41               	xorlw	65	; case 65
  4774  1B79  1903               	skipnz
  4775  1B7A  2B5C               	goto	l6739
  4776  1B7B  3A03               	xorlw	3	; case 66
  4777  1B7C  1903               	skipnz
  4778  1B7D  2B5F               	goto	l6745
  4779  1B7E  3A01               	xorlw	1	; case 67
  4780  1B7F  1903               	skipnz
  4781  1B80  2B62               	goto	l6751
  4782  1B81  3A07               	xorlw	7	; case 68
  4783  1B82  1903               	skipnz
  4784  1B83  2B67               	goto	l6757
  4785  1B84  2B6D               	goto	l6763
  4786  1B85                     l232:
  4787  1B85  0008               	return
  4788  1B86                     __end_of_ler_atuador:
  4789                           
  4790                           	psect	text17
  4791  09FA                     __ptext17:	
  4792 ;; *************** function _resetIndicePassos *****************
  4793 ;; Defined at:
  4794 ;;		line 36 in file "fifo.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;		None
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;		None
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  1    wreg      void 
  4801 ;; Registers used:
  4802 ;;		wreg
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : 0/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4808 ;;      Params:         0       0       0       0       0
  4809 ;;      Locals:         0       0       0       0       0
  4810 ;;      Temps:          0       1       0       0       0
  4811 ;;      Totals:         0       1       0       0       0
  4812 ;;Total ram usage:        1 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    2
  4815 ;; This function calls:
  4816 ;;		Nothing
  4817 ;; This function is called by:
  4818 ;;		_main
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           
  4823                           ;psect for function _resetIndicePassos
  4824  09FA                     _resetIndicePassos:
  4825  09FA                     l7197:	
  4826                           ;incstack = 0
  4827                           ; Regs used in _resetIndicePassos: [wreg]
  4828                           
  4829                           
  4830                           ;fifo.c: 38:     indice_passos = 2;
  4831  09FA  3002               	movlw	2
  4832  09FB  1283               	bcf	3,5	;RP0=0, select bank0
  4833  09FC  1303               	bcf	3,6	;RP1=0, select bank0
  4834  09FD  00A0               	movwf	??_resetIndicePassos
  4835  09FE  0820               	movf	??_resetIndicePassos,w
  4836  09FF  00FB               	movwf	_indice_passos
  4837  0A00                     l213:
  4838  0A00  0008               	return
  4839  0A01                     __end_of_resetIndicePassos:
  4840                           
  4841                           	psect	text18
  4842  1824                     __ptext18:	
  4843 ;; *************** function _resetContCiclos *****************
  4844 ;; Defined at:
  4845 ;;		line 54 in file "fifo.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;		None
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;		None
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		status,2
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4859 ;;      Params:         0       0       0       0       0
  4860 ;;      Locals:         0       0       0       0       0
  4861 ;;      Temps:          0       0       0       0       0
  4862 ;;      Totals:         0       0       0       0       0
  4863 ;;Total ram usage:        0 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    2
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_main
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           
  4874                           ;psect for function _resetContCiclos
  4875  1824                     _resetContCiclos:
  4876  1824                     l7207:	
  4877                           ;incstack = 0
  4878                           ; Regs used in _resetContCiclos: [status,2]
  4879                           
  4880                           
  4881                           ;fifo.c: 56:     cont_ciclos = 0;
  4882  1824  01F6               	clrf	_cont_ciclos
  4883  1825  01F7               	clrf	_cont_ciclos+1
  4884  1826                     l222:
  4885  1826  0008               	return
  4886  1827                     __end_of_resetContCiclos:
  4887                           
  4888                           	psect	text19
  4889  16DE                     __ptext19:	
  4890 ;; *************** function _printExec *****************
  4891 ;; Defined at:
  4892 ;;		line 520 in file "fifo.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  col             1    wreg     unsigned char 
  4895 ;;  ind             1   25[BANK0 ] unsigned char 
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  col             1   34[BANK0 ] unsigned char 
  4898 ;;  passo           1   35[BANK0 ] unsigned char 
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4908 ;;      Params:         0       1       0       0       0
  4909 ;;      Locals:         0       4       0       0       0
  4910 ;;      Temps:          0       6       0       0       0
  4911 ;;      Totals:         0      11       0       0       0
  4912 ;;Total ram usage:       11 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:    5
  4915 ;; This function calls:
  4916 ;;		_decodifica
  4917 ;;		_dignum_tam
  4918 ;;		_dispLCD_dataReg
  4919 ;;		_dispLCD_lincol
  4920 ;;		_dispLCD_num
  4921 ;;		_posAtual
  4922 ;; This function is called by:
  4923 ;;		_main
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           
  4928                           ;psect for function _printExec
  4929  16DE                     _printExec:
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in _printExec: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4933                           ;printExec@col stored from wreg
  4934  16DE  1283               	bcf	3,5	;RP0=0, select bank0
  4935  16DF  1303               	bcf	3,6	;RP1=0, select bank0
  4936  16E0  00C2               	movwf	printExec@col
  4937  16E1                     l7463:
  4938                           
  4939                           ;fifo.c: 520: void printExec (char col, char ind);fifo.c: 521: {;fifo.c: 522:     char p
      +                          asso = posAtual( ind );
  4940  16E1  0839               	movf	printExec@ind,w
  4941  16E2  160A  158A  2104  160A  118A  	fcall	_posAtual
  4942  16E7  1283               	bcf	3,5	;RP0=0, select bank0
  4943  16E8  1303               	bcf	3,6	;RP1=0, select bank0
  4944  16E9  00BA               	movwf	??_printExec
  4945  16EA  083A               	movf	??_printExec,w
  4946  16EB  00C3               	movwf	printExec@passo
  4947  16EC                     l7465:
  4948                           
  4949                           ;fifo.c: 524:     if(passo > 0 && passo <= 0x64)
  4950  16EC  0843               	movf	printExec@passo,w
  4951  16ED  1903               	btfsc	3,2
  4952  16EE  2EF0               	goto	u5741
  4953  16EF  2EF1               	goto	u5740
  4954  16F0                     u5741:
  4955  16F0  2F37               	goto	l7477
  4956  16F1                     u5740:
  4957  16F1                     l7467:
  4958  16F1  3065               	movlw	101
  4959  16F2  0243               	subwf	printExec@passo,w
  4960  16F3  1803               	skipnc
  4961  16F4  2EF6               	goto	u5751
  4962  16F5  2EF7               	goto	u5750
  4963  16F6                     u5751:
  4964  16F6  2F37               	goto	l7477
  4965  16F7                     u5750:
  4966  16F7                     l7469:
  4967                           
  4968                           ;fifo.c: 525:     {;fifo.c: 526:         if( dignum_tam( (int) passo ) == 3 )
  4969  16F7  0843               	movf	printExec@passo,w
  4970  16F8  00BA               	movwf	??_printExec
  4971  16F9  01BB               	clrf	??_printExec+1
  4972  16FA  083A               	movf	??_printExec,w
  4973  16FB  00A9               	movwf	dignum_tam@num
  4974  16FC  083B               	movf	??_printExec+1,w
  4975  16FD  00AA               	movwf	dignum_tam@num+1
  4976  16FE  160A  158A  2213  160A  118A  	fcall	_dignum_tam
  4977  1703  3A03               	xorlw	3
  4978  1704  1D03               	skipz
  4979  1705  2F07               	goto	u5761
  4980  1706  2F08               	goto	u5760
  4981  1707                     u5761:
  4982  1707  2F0C               	goto	l7473
  4983  1708                     u5760:
  4984  1708                     l7471:
  4985                           
  4986                           ;fifo.c: 527:             col-=1;
  4987  1708  3001               	movlw	1
  4988  1709  1283               	bcf	3,5	;RP0=0, select bank0
  4989  170A  1303               	bcf	3,6	;RP1=0, select bank0
  4990  170B  02C2               	subwf	printExec@col,f
  4991  170C                     l7473:
  4992                           
  4993                           ;fifo.c: 528:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  4994  170C  1283               	bcf	3,5	;RP0=0, select bank0
  4995  170D  1303               	bcf	3,6	;RP1=0, select bank0
  4996  170E  01AD               	clrf	dispLCD_num@lin
  4997  170F  0842               	movf	printExec@col,w
  4998  1710  00BA               	movwf	??_printExec
  4999  1711  083A               	movf	??_printExec,w
  5000  1712  00AE               	movwf	dispLCD_num@col
  5001  1713  0843               	movf	printExec@passo,w
  5002  1714  00BB               	movwf	??_printExec+1
  5003  1715  01BC               	clrf	??_printExec+2
  5004  1716  083B               	movf	??_printExec+1,w
  5005  1717  00AF               	movwf	dispLCD_num@num
  5006  1718  083C               	movf	??_printExec+2,w
  5007  1719  00B0               	movwf	dispLCD_num@num+1
  5008  171A  0843               	movf	printExec@passo,w
  5009  171B  00BD               	movwf	??_printExec+3
  5010  171C  01BE               	clrf	??_printExec+4
  5011  171D  083D               	movf	??_printExec+3,w
  5012  171E  00A9               	movwf	dignum_tam@num
  5013  171F  083E               	movf	??_printExec+4,w
  5014  1720  00AA               	movwf	dignum_tam@num+1
  5015  1721  160A  158A  2213  160A  118A  	fcall	_dignum_tam
  5016  1726  1283               	bcf	3,5	;RP0=0, select bank0
  5017  1727  1303               	bcf	3,6	;RP1=0, select bank0
  5018  1728  00BF               	movwf	??_printExec+5
  5019  1729  083F               	movf	??_printExec+5,w
  5020  172A  00B1               	movwf	dispLCD_num@tam
  5021  172B  120A  118A  271A  160A  118A  	fcall	_dispLCD_num
  5022  1730                     l7475:
  5023                           
  5024                           ;fifo.c: 529:         dispLCD_dataReg('%');
  5025  1730  3025               	movlw	37
  5026  1731  160A  158A  2445  160A  118A  	fcall	_dispLCD_dataReg
  5027                           
  5028                           ;fifo.c: 530:     }
  5029  1736  2FFF               	goto	l439
  5030  1737                     l7477:
  5031  1737  3065               	movlw	101
  5032  1738  0243               	subwf	printExec@passo,w
  5033  1739  1C03               	skipc
  5034  173A  2F3C               	goto	u5771
  5035  173B  2F3D               	goto	u5770
  5036  173C                     u5771:
  5037  173C  2F8B               	goto	l7491
  5038  173D                     u5770:
  5039  173D                     l7479:
  5040  173D  30DD               	movlw	221
  5041  173E  0243               	subwf	printExec@passo,w
  5042  173F  1803               	skipnc
  5043  1740  2F42               	goto	u5781
  5044  1741  2F43               	goto	u5780
  5045  1742                     u5781:
  5046  1742  2F8B               	goto	l7491
  5047  1743                     u5780:
  5048  1743                     l7481:
  5049                           
  5050                           ;fifo.c: 532:     {;fifo.c: 533:         decodifica(&passo);
  5051  1743  3043               	movlw	(low (printExec@passo| 0))& (0+255)
  5052  1744  160A  118A  21EE  160A  118A  	fcall	_decodifica
  5053  1749                     l7483:
  5054                           
  5055                           ;fifo.c: 534:         if( dignum_tam( (int) passo ) == 3 )
  5056  1749  1283               	bcf	3,5	;RP0=0, select bank0
  5057  174A  1303               	bcf	3,6	;RP1=0, select bank0
  5058  174B  0843               	movf	printExec@passo,w
  5059  174C  00BA               	movwf	??_printExec
  5060  174D  01BB               	clrf	??_printExec+1
  5061  174E  083A               	movf	??_printExec,w
  5062  174F  00A9               	movwf	dignum_tam@num
  5063  1750  083B               	movf	??_printExec+1,w
  5064  1751  00AA               	movwf	dignum_tam@num+1
  5065  1752  160A  158A  2213  160A  118A  	fcall	_dignum_tam
  5066  1757  3A03               	xorlw	3
  5067  1758  1D03               	skipz
  5068  1759  2F5B               	goto	u5791
  5069  175A  2F5C               	goto	u5790
  5070  175B                     u5791:
  5071  175B  2F60               	goto	l7487
  5072  175C                     u5790:
  5073  175C                     l7485:
  5074                           
  5075                           ;fifo.c: 535:             col-=1;
  5076  175C  3001               	movlw	1
  5077  175D  1283               	bcf	3,5	;RP0=0, select bank0
  5078  175E  1303               	bcf	3,6	;RP1=0, select bank0
  5079  175F  02C2               	subwf	printExec@col,f
  5080  1760                     l7487:
  5081                           
  5082                           ;fifo.c: 536:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  5083  1760  1283               	bcf	3,5	;RP0=0, select bank0
  5084  1761  1303               	bcf	3,6	;RP1=0, select bank0
  5085  1762  01AD               	clrf	dispLCD_num@lin
  5086  1763  0842               	movf	printExec@col,w
  5087  1764  00BA               	movwf	??_printExec
  5088  1765  083A               	movf	??_printExec,w
  5089  1766  00AE               	movwf	dispLCD_num@col
  5090  1767  0843               	movf	printExec@passo,w
  5091  1768  00BB               	movwf	??_printExec+1
  5092  1769  01BC               	clrf	??_printExec+2
  5093  176A  083B               	movf	??_printExec+1,w
  5094  176B  00AF               	movwf	dispLCD_num@num
  5095  176C  083C               	movf	??_printExec+2,w
  5096  176D  00B0               	movwf	dispLCD_num@num+1
  5097  176E  0843               	movf	printExec@passo,w
  5098  176F  00BD               	movwf	??_printExec+3
  5099  1770  01BE               	clrf	??_printExec+4
  5100  1771  083D               	movf	??_printExec+3,w
  5101  1772  00A9               	movwf	dignum_tam@num
  5102  1773  083E               	movf	??_printExec+4,w
  5103  1774  00AA               	movwf	dignum_tam@num+1
  5104  1775  160A  158A  2213  160A  118A  	fcall	_dignum_tam
  5105  177A  1283               	bcf	3,5	;RP0=0, select bank0
  5106  177B  1303               	bcf	3,6	;RP1=0, select bank0
  5107  177C  00BF               	movwf	??_printExec+5
  5108  177D  083F               	movf	??_printExec+5,w
  5109  177E  00B1               	movwf	dispLCD_num@tam
  5110  177F  120A  118A  271A  160A  118A  	fcall	_dispLCD_num
  5111  1784                     l7489:
  5112                           
  5113                           ;fifo.c: 537:         dispLCD_dataReg('s');
  5114  1784  3073               	movlw	115
  5115  1785  160A  158A  2445  160A  118A  	fcall	_dispLCD_dataReg
  5116                           
  5117                           ;fifo.c: 538:     }
  5118  178A  2FFF               	goto	l439
  5119  178B                     l7491:
  5120  178B  30DD               	movlw	221
  5121  178C  0243               	subwf	printExec@passo,w
  5122  178D  1C03               	skipc
  5123  178E  2F90               	goto	u5801
  5124  178F  2F91               	goto	u5800
  5125  1790                     u5801:
  5126  1790  2FC8               	goto	l7507
  5127  1791                     u5800:
  5128  1791                     l7493:
  5129  1791  30FE               	movlw	254
  5130  1792  0243               	subwf	printExec@passo,w
  5131  1793  1803               	skipnc
  5132  1794  2F96               	goto	u5811
  5133  1795  2F97               	goto	u5810
  5134  1796                     u5811:
  5135  1796  2FC8               	goto	l7507
  5136  1797                     u5810:
  5137  1797                     l7495:
  5138                           
  5139                           ;fifo.c: 540:     {;fifo.c: 541:         decodifica(&passo);
  5140  1797  3043               	movlw	(low (printExec@passo| 0))& (0+255)
  5141  1798  160A  118A  21EE  160A  118A  	fcall	_decodifica
  5142                           
  5143                           ;fifo.c: 542:         dispLCD_lincol(0, col);
  5144  179D  1283               	bcf	3,5	;RP0=0, select bank0
  5145  179E  1303               	bcf	3,6	;RP1=0, select bank0
  5146  179F  0842               	movf	printExec@col,w
  5147  17A0  00BA               	movwf	??_printExec
  5148  17A1  083A               	movf	??_printExec,w
  5149  17A2  00A3               	movwf	dispLCD_lincol@col
  5150  17A3  3000               	movlw	0
  5151  17A4  160A  158A  2476  160A  118A  	fcall	_dispLCD_lincol
  5152  17A9                     l7497:
  5153                           
  5154                           ;fifo.c: 543:         dispLCD_dataReg( passo & ~0x20 );
  5155  17A9  1283               	bcf	3,5	;RP0=0, select bank0
  5156  17AA  1303               	bcf	3,6	;RP1=0, select bank0
  5157  17AB  0843               	movf	printExec@passo,w
  5158  17AC  39DF               	andlw	223
  5159  17AD  160A  158A  2445  160A  118A  	fcall	_dispLCD_dataReg
  5160  17B2                     l7499:
  5161                           
  5162                           ;fifo.c: 544:         dispLCD_dataReg( passo & 0x20 ? '-': '+' );
  5163  17B2  1283               	bcf	3,5	;RP0=0, select bank0
  5164  17B3  1303               	bcf	3,6	;RP1=0, select bank0
  5165  17B4  1AC3               	btfsc	printExec@passo,5
  5166  17B5  2FB7               	goto	u5821
  5167  17B6  2FB8               	goto	u5820
  5168  17B7                     u5821:
  5169  17B7  2FBD               	goto	l7503
  5170  17B8                     u5820:
  5171  17B8                     l7501:
  5172  17B8  302B               	movlw	43
  5173  17B9  00C0               	movwf	_printExec$417
  5174  17BA  3000               	movlw	0
  5175  17BB  00C1               	movwf	_printExec$417+1
  5176  17BC  2FC1               	goto	l7505
  5177  17BD                     l7503:
  5178  17BD  302D               	movlw	45
  5179  17BE  00C0               	movwf	_printExec$417
  5180  17BF  3000               	movlw	0
  5181  17C0  00C1               	movwf	_printExec$417+1
  5182  17C1                     l7505:
  5183  17C1  0840               	movf	_printExec$417,w
  5184  17C2  160A  158A  2445  160A  118A  	fcall	_dispLCD_dataReg
  5185                           
  5186                           ;fifo.c: 545:     }
  5187  17C7  2FFF               	goto	l439
  5188  17C8                     l7507:
  5189  17C8  30FE               	movlw	254
  5190  17C9  0643               	xorwf	printExec@passo,w
  5191  17CA  1D03               	btfss	3,2
  5192  17CB  2FCD               	goto	u5831
  5193  17CC  2FCE               	goto	u5830
  5194  17CD                     u5831:
  5195  17CD  2FFF               	goto	l431
  5196  17CE                     u5830:
  5197  17CE                     l7509:
  5198                           
  5199                           ;fifo.c: 547:     {;fifo.c: 548:         decodifica(&passo);
  5200  17CE  3043               	movlw	(low (printExec@passo| 0))& (0+255)
  5201  17CF  160A  118A  21EE  160A  118A  	fcall	_decodifica
  5202  17D4                     l7511:
  5203                           
  5204                           ;fifo.c: 549:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  5205  17D4  1283               	bcf	3,5	;RP0=0, select bank0
  5206  17D5  1303               	bcf	3,6	;RP1=0, select bank0
  5207  17D6  01AD               	clrf	dispLCD_num@lin
  5208  17D7  0842               	movf	printExec@col,w
  5209  17D8  00BA               	movwf	??_printExec
  5210  17D9  083A               	movf	??_printExec,w
  5211  17DA  00AE               	movwf	dispLCD_num@col
  5212  17DB  0843               	movf	printExec@passo,w
  5213  17DC  00BB               	movwf	??_printExec+1
  5214  17DD  01BC               	clrf	??_printExec+2
  5215  17DE  083B               	movf	??_printExec+1,w
  5216  17DF  00AF               	movwf	dispLCD_num@num
  5217  17E0  083C               	movf	??_printExec+2,w
  5218  17E1  00B0               	movwf	dispLCD_num@num+1
  5219  17E2  0843               	movf	printExec@passo,w
  5220  17E3  00BD               	movwf	??_printExec+3
  5221  17E4  01BE               	clrf	??_printExec+4
  5222  17E5  083D               	movf	??_printExec+3,w
  5223  17E6  00A9               	movwf	dignum_tam@num
  5224  17E7  083E               	movf	??_printExec+4,w
  5225  17E8  00AA               	movwf	dignum_tam@num+1
  5226  17E9  160A  158A  2213  160A  118A  	fcall	_dignum_tam
  5227  17EE  1283               	bcf	3,5	;RP0=0, select bank0
  5228  17EF  1303               	bcf	3,6	;RP1=0, select bank0
  5229  17F0  00BF               	movwf	??_printExec+5
  5230  17F1  083F               	movf	??_printExec+5,w
  5231  17F2  00B1               	movwf	dispLCD_num@tam
  5232  17F3  120A  118A  271A  160A  118A  	fcall	_dispLCD_num
  5233  17F8                     l7513:
  5234                           
  5235                           ;fifo.c: 550:         dispLCD_dataReg('%');
  5236  17F8  3025               	movlw	37
  5237  17F9  160A  158A  2445  160A  118A  	fcall	_dispLCD_dataReg
  5238  17FE  2FFF               	goto	l439
  5239  17FF                     l431:
  5240  17FF                     l439:
  5241  17FF  0008               	return
  5242  1800                     __end_of_printExec:
  5243                           
  5244                           	psect	text20
  5245  1904                     __ptext20:	
  5246 ;; *************** function _posAtual *****************
  5247 ;; Defined at:
  5248 ;;		line 512 in file "fifo.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  ind             1    wreg     unsigned char 
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;  ind             1    2[BANK0 ] unsigned char 
  5253 ;;  passo           1    3[BANK0 ] unsigned char 
  5254 ;; Return value:  Size  Location     Type
  5255 ;;                  1    wreg      unsigned char 
  5256 ;; Registers used:
  5257 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5263 ;;      Params:         0       0       0       0       0
  5264 ;;      Locals:         0       2       0       0       0
  5265 ;;      Temps:          0       1       0       0       0
  5266 ;;      Totals:         0       3       0       0       0
  5267 ;;Total ram usage:        3 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    3
  5270 ;; This function calls:
  5271 ;;		_fifo_lerPos
  5272 ;;		_getIndicePassos
  5273 ;; This function is called by:
  5274 ;;		_printExec
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function _posAtual
  5280  1904                     _posAtual:
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _posAtual: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5284                           ;posAtual@ind stored from wreg
  5285  1904  1283               	bcf	3,5	;RP0=0, select bank0
  5286  1905  1303               	bcf	3,6	;RP1=0, select bank0
  5287  1906  00A2               	movwf	posAtual@ind
  5288  1907                     l6909:
  5289  1907                     l6911:
  5290                           
  5291                           ;fifo.c: 516:     passo = fifo_lerPos( getIndicePassos() + ind );
  5292  1907  160A  158A  2020  160A  158A  	fcall	_getIndicePassos
  5293  190C  1283               	bcf	3,5	;RP0=0, select bank0
  5294  190D  1303               	bcf	3,6	;RP1=0, select bank0
  5295  190E  0722               	addwf	posAtual@ind,w
  5296  190F  160A  158A  2061  160A  158A  	fcall	_fifo_lerPos
  5297  1914  1283               	bcf	3,5	;RP0=0, select bank0
  5298  1915  1303               	bcf	3,6	;RP1=0, select bank0
  5299  1916  00A1               	movwf	??_posAtual
  5300  1917  0821               	movf	??_posAtual,w
  5301  1918  00A3               	movwf	posAtual@passo
  5302  1919                     l6913:
  5303                           
  5304                           ;fifo.c: 517:     return(passo);
  5305  1919  0823               	movf	posAtual@passo,w
  5306  191A                     l423:
  5307  191A  0008               	return
  5308  191B                     __end_of_posAtual:
  5309                           
  5310                           	psect	text21
  5311  1820                     __ptext21:	
  5312 ;; *************** function _getIndicePassos *****************
  5313 ;; Defined at:
  5314 ;;		line 31 in file "fifo.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  1    wreg      unsigned char 
  5321 ;; Registers used:
  5322 ;;		wreg
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5328 ;;      Params:         0       0       0       0       0
  5329 ;;      Locals:         0       0       0       0       0
  5330 ;;      Temps:          0       0       0       0       0
  5331 ;;      Totals:         0       0       0       0       0
  5332 ;;Total ram usage:        0 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    2
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_posAtual
  5339 ;;		_main
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           
  5344                           ;psect for function _getIndicePassos
  5345  1820                     _getIndicePassos:
  5346  1820                     l6625:	
  5347                           ;incstack = 0
  5348                           ; Regs used in _getIndicePassos: [wreg]
  5349                           
  5350                           
  5351                           ;fifo.c: 33:     return(indice_passos);
  5352  1820  087B               	movf	_indice_passos,w
  5353  1821                     l210:
  5354  1821  0008               	return
  5355  1822                     __end_of_getIndicePassos:
  5356                           
  5357                           	psect	text22
  5358  1861                     __ptext22:	
  5359 ;; *************** function _fifo_lerPos *****************
  5360 ;; Defined at:
  5361 ;;		line 168 in file "fifo.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  i               1    wreg     unsigned char 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  i               1    0[BANK0 ] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1    wreg      unsigned char 
  5368 ;; Registers used:
  5369 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5375 ;;      Params:         0       0       0       0       0
  5376 ;;      Locals:         0       1       0       0       0
  5377 ;;      Temps:          0       0       0       0       0
  5378 ;;      Totals:         0       1       0       0       0
  5379 ;;Total ram usage:        1 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    2
  5382 ;; This function calls:
  5383 ;;		Nothing
  5384 ;; This function is called by:
  5385 ;;		_posAtual
  5386 ;;		_main
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _fifo_lerPos
  5392  1861                     _fifo_lerPos:
  5393                           
  5394                           ;incstack = 0
  5395                           ; Regs used in _fifo_lerPos: [wreg-fsr0h+status,2+status,0]
  5396                           ;fifo_lerPos@i stored from wreg
  5397  1861  1283               	bcf	3,5	;RP0=0, select bank0
  5398  1862  1303               	bcf	3,6	;RP1=0, select bank0
  5399  1863  00A0               	movwf	fifo_lerPos@i
  5400  1864                     l6629:
  5401                           
  5402                           ;fifo.c: 168: char fifo_lerPos(char i);fifo.c: 169: {;fifo.c: 170:     return ( fila[i] 
      +                          );
  5403  1864  0820               	movf	fifo_lerPos@i,w
  5404  1865  3E54               	addlw	(low (_fila| 0))& (0+255)
  5405  1866  0084               	movwf	4
  5406  1867  1383               	bcf	3,7	;select IRP bank0
  5407  1868  0800               	movf	0,w
  5408  1869                     l275:
  5409  1869  0008               	return
  5410  186A                     __end_of_fifo_lerPos:
  5411                           
  5412                           	psect	text23
  5413  071A                     __ptext23:	
  5414 ;; *************** function _dispLCD_num *****************
  5415 ;; Defined at:
  5416 ;;		line 200 in file "dispLCD4vias.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;  lin             1   13[BANK0 ] unsigned char 
  5419 ;;  col             1   14[BANK0 ] unsigned char 
  5420 ;;  num             2   15[BANK0 ] int 
  5421 ;;  tam             1   17[BANK0 ] unsigned char 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  div             2   23[BANK0 ] int 
  5424 ;;  sinal           1   22[BANK0 ] unsigned char 
  5425 ;;  size            1   21[BANK0 ] unsigned char 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      void 
  5428 ;; Registers used:
  5429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5435 ;;      Params:         0       5       0       0       0
  5436 ;;      Locals:         0       4       0       0       0
  5437 ;;      Temps:          0       3       0       0       0
  5438 ;;      Totals:         0      12       0       0       0
  5439 ;;Total ram usage:       12 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    4
  5442 ;; This function calls:
  5443 ;;		___awdiv
  5444 ;;		___awmod
  5445 ;;		_dispLCD_dataReg
  5446 ;;		_dispLCD_lincol
  5447 ;; This function is called by:
  5448 ;;		_printExec
  5449 ;;		_main
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _dispLCD_num
  5455  071A                     _dispLCD_num:
  5456  071A                     l6689:	
  5457                           ;incstack = 0
  5458                           ; Regs used in _dispLCD_num: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5459                           
  5460                           
  5461                           ;dispLCD4vias.c: 200: void dispLCD_num( unsigned char lin, unsigned char col,;dispLCD4vi
      +                          as.c: 201:                     int num, unsigned char tam );dispLCD4vias.c: 202: {;dispL
      +                          CD4vias.c: 203:     int div;;dispLCD4vias.c: 204:     unsigned char size;;dispLCD4vias.c
      +                          : 205:     char sinal;;dispLCD4vias.c: 207:     sinal = num < 0;
  5462  071A  1283               	bcf	3,5	;RP0=0, select bank0
  5463  071B  1303               	bcf	3,6	;RP1=0, select bank0
  5464  071C  1BB0               	btfsc	dispLCD_num@num+1,7
  5465  071D  2F1F               	goto	u4841
  5466  071E  2F21               	goto	u4840
  5467  071F                     u4841:
  5468  071F  3001               	movlw	1
  5469  0720  2F22               	goto	u4850
  5470  0721                     u4840:
  5471  0721  3000               	movlw	0
  5472  0722                     u4850:
  5473  0722  00B2               	movwf	??_dispLCD_num
  5474  0723  0832               	movf	??_dispLCD_num,w
  5475  0724  00B6               	movwf	dispLCD_num@sinal
  5476  0725                     l6691:
  5477                           
  5478                           ;dispLCD4vias.c: 208:     if( sinal )
  5479  0725  0836               	movf	dispLCD_num@sinal,w
  5480  0726  1903               	btfsc	3,2
  5481  0727  2F29               	goto	u4861
  5482  0728  2F2A               	goto	u4860
  5483  0729                     u4861:
  5484  0729  2F2F               	goto	l6695
  5485  072A                     u4860:
  5486  072A                     l6693:
  5487                           
  5488                           ;dispLCD4vias.c: 209:         num = (~num) + 1;
  5489  072A  09AF               	comf	dispLCD_num@num,f
  5490  072B  09B0               	comf	dispLCD_num@num+1,f
  5491  072C  0AAF               	incf	dispLCD_num@num,f
  5492  072D  1903               	skipnz
  5493  072E  0AB0               	incf	dispLCD_num@num+1,f
  5494  072F                     l6695:
  5495                           
  5496                           ;dispLCD4vias.c: 211:     dispLCD_lincol(lin, col);
  5497  072F  082E               	movf	dispLCD_num@col,w
  5498  0730  00B2               	movwf	??_dispLCD_num
  5499  0731  0832               	movf	??_dispLCD_num,w
  5500  0732  00A3               	movwf	dispLCD_lincol@col
  5501  0733  082D               	movf	dispLCD_num@lin,w
  5502  0734  160A  158A  2476  120A  118A  	fcall	_dispLCD_lincol
  5503  0739                     l6697:
  5504                           
  5505                           ;dispLCD4vias.c: 213:     div=10000;
  5506  0739  3010               	movlw	16
  5507  073A  1283               	bcf	3,5	;RP0=0, select bank0
  5508  073B  1303               	bcf	3,6	;RP1=0, select bank0
  5509  073C  00B7               	movwf	dispLCD_num@div
  5510  073D  3027               	movlw	39
  5511  073E  00B8               	movwf	dispLCD_num@div+1
  5512  073F                     l6699:
  5513                           
  5514                           ;dispLCD4vias.c: 214:     size = 5;
  5515  073F  3005               	movlw	5
  5516  0740  00B2               	movwf	??_dispLCD_num
  5517  0741  0832               	movf	??_dispLCD_num,w
  5518  0742  00B5               	movwf	dispLCD_num@size
  5519                           
  5520                           ;dispLCD4vias.c: 215:     while( div >= 1 )
  5521  0743  2F70               	goto	l6707
  5522  0744                     l6701:
  5523                           
  5524                           ;dispLCD4vias.c: 216:     {;dispLCD4vias.c: 217:         if( num/div == 0 )
  5525  0744  1283               	bcf	3,5	;RP0=0, select bank0
  5526  0745  1303               	bcf	3,6	;RP1=0, select bank0
  5527  0746  0838               	movf	dispLCD_num@div+1,w
  5528  0747  00A1               	movwf	___awdiv@divisor+1
  5529  0748  0837               	movf	dispLCD_num@div,w
  5530  0749  00A0               	movwf	___awdiv@divisor
  5531  074A  0830               	movf	dispLCD_num@num+1,w
  5532  074B  00A3               	movwf	___awdiv@dividend+1
  5533  074C  082F               	movf	dispLCD_num@num,w
  5534  074D  00A2               	movwf	___awdiv@dividend
  5535  074E  160A  118A  2185  120A  118A  	fcall	___awdiv
  5536  0753  1283               	bcf	3,5	;RP0=0, select bank0
  5537  0754  1303               	bcf	3,6	;RP1=0, select bank0
  5538  0755  0820               	movf	?___awdiv,w
  5539  0756  0421               	iorwf	?___awdiv+1,w
  5540  0757  1D03               	btfss	3,2
  5541  0758  2F5A               	goto	u4871
  5542  0759  2F5B               	goto	u4870
  5543  075A                     u4871:
  5544  075A  2F88               	goto	l6713
  5545  075B                     u4870:
  5546  075B                     l6703:
  5547                           
  5548                           ;dispLCD4vias.c: 218:             --size;
  5549  075B  3001               	movlw	1
  5550  075C  02B5               	subwf	dispLCD_num@size,f
  5551  075D                     l6705:
  5552                           
  5553                           ;dispLCD4vias.c: 221:         div/=10;
  5554  075D  300A               	movlw	10
  5555  075E  00A0               	movwf	___awdiv@divisor
  5556  075F  3000               	movlw	0
  5557  0760  00A1               	movwf	___awdiv@divisor+1
  5558  0761  0838               	movf	dispLCD_num@div+1,w
  5559  0762  00A3               	movwf	___awdiv@dividend+1
  5560  0763  0837               	movf	dispLCD_num@div,w
  5561  0764  00A2               	movwf	___awdiv@dividend
  5562  0765  160A  118A  2185  120A  118A  	fcall	___awdiv
  5563  076A  1283               	bcf	3,5	;RP0=0, select bank0
  5564  076B  1303               	bcf	3,6	;RP1=0, select bank0
  5565  076C  0821               	movf	?___awdiv+1,w
  5566  076D  00B8               	movwf	dispLCD_num@div+1
  5567  076E  0820               	movf	?___awdiv,w
  5568  076F  00B7               	movwf	dispLCD_num@div
  5569  0770                     l6707:
  5570                           
  5571                           ;dispLCD4vias.c: 215:     while( div >= 1 )
  5572  0770  0838               	movf	dispLCD_num@div+1,w
  5573  0771  3A80               	xorlw	128
  5574  0772  00FF               	movwf	btemp+1
  5575  0773  3080               	movlw	128
  5576  0774  027F               	subwf	btemp+1,w
  5577  0775  1D03               	skipz
  5578  0776  2F79               	goto	u4885
  5579  0777  3001               	movlw	1
  5580  0778  0237               	subwf	dispLCD_num@div,w
  5581  0779                     u4885:
  5582  0779  1803               	skipnc
  5583  077A  2F7C               	goto	u4881
  5584  077B  2F7D               	goto	u4880
  5585  077C                     u4881:
  5586  077C  2F44               	goto	l6701
  5587  077D                     u4880:
  5588  077D  2F88               	goto	l6713
  5589  077E                     l6709:
  5590                           
  5591                           ;dispLCD4vias.c: 225:     {;dispLCD4vias.c: 226:         dispLCD_dataReg(' ');
  5592  077E  3020               	movlw	32
  5593  077F  160A  158A  2445  120A  118A  	fcall	_dispLCD_dataReg
  5594  0784                     l6711:
  5595                           
  5596                           ;dispLCD4vias.c: 227:         --tam;
  5597  0784  3001               	movlw	1
  5598  0785  1283               	bcf	3,5	;RP0=0, select bank0
  5599  0786  1303               	bcf	3,6	;RP1=0, select bank0
  5600  0787  02B1               	subwf	dispLCD_num@tam,f
  5601  0788                     l6713:
  5602                           
  5603                           ;dispLCD4vias.c: 224:     while( tam > (size+sinal) && tam > 1 )
  5604  0788  1283               	bcf	3,5	;RP0=0, select bank0
  5605  0789  1303               	bcf	3,6	;RP1=0, select bank0
  5606  078A  0835               	movf	dispLCD_num@size,w
  5607  078B  0736               	addwf	dispLCD_num@sinal,w
  5608  078C  00B2               	movwf	??_dispLCD_num
  5609  078D  01B3               	clrf	??_dispLCD_num+1
  5610  078E  0DB3               	rlf	??_dispLCD_num+1,f
  5611  078F  0833               	movf	??_dispLCD_num+1,w
  5612  0790  3A80               	xorlw	128
  5613  0791  00B4               	movwf	??_dispLCD_num+2
  5614  0792  3080               	movlw	128
  5615  0793  0234               	subwf	??_dispLCD_num+2,w
  5616  0794  1D03               	skipz
  5617  0795  2F98               	goto	u4895
  5618  0796  0831               	movf	dispLCD_num@tam,w
  5619  0797  0232               	subwf	??_dispLCD_num,w
  5620  0798                     u4895:
  5621  0798  1803               	skipnc
  5622  0799  2F9B               	goto	u4891
  5623  079A  2F9C               	goto	u4890
  5624  079B                     u4891:
  5625  079B  2FA4               	goto	l6717
  5626  079C                     u4890:
  5627  079C                     l6715:
  5628  079C  3002               	movlw	2
  5629  079D  1283               	bcf	3,5	;RP0=0, select bank0
  5630  079E  1303               	bcf	3,6	;RP1=0, select bank0
  5631  079F  0231               	subwf	dispLCD_num@tam,w
  5632  07A0  1803               	skipnc
  5633  07A1  2FA3               	goto	u4901
  5634  07A2  2FA4               	goto	u4900
  5635  07A3                     u4901:
  5636  07A3  2F7E               	goto	l6709
  5637  07A4                     u4900:
  5638  07A4                     l6717:
  5639                           
  5640                           ;dispLCD4vias.c: 230:     if( sinal )
  5641  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  5642  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  5643  07A6  0836               	movf	dispLCD_num@sinal,w
  5644  07A7  1903               	btfsc	3,2
  5645  07A8  2FAA               	goto	u4911
  5646  07A9  2FAB               	goto	u4910
  5647  07AA                     u4911:
  5648  07AA  2FB1               	goto	l92
  5649  07AB                     u4910:
  5650  07AB                     l6719:
  5651                           
  5652                           ;dispLCD4vias.c: 231:         dispLCD_dataReg('-');
  5653  07AB  302D               	movlw	45
  5654  07AC  160A  158A  2445  120A  118A  	fcall	_dispLCD_dataReg
  5655  07B1                     l92:	
  5656                           ;dispLCD4vias.c: 233:     do
  5657                           
  5658                           
  5659                           ;dispLCD4vias.c: 234:     {;dispLCD4vias.c: 235:         dispLCD_dataReg( (num / div) + 
      +                          '0' );
  5660  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  5661  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  5662  07B3  0838               	movf	dispLCD_num@div+1,w
  5663  07B4  00A1               	movwf	___awdiv@divisor+1
  5664  07B5  0837               	movf	dispLCD_num@div,w
  5665  07B6  00A0               	movwf	___awdiv@divisor
  5666  07B7  0830               	movf	dispLCD_num@num+1,w
  5667  07B8  00A3               	movwf	___awdiv@dividend+1
  5668  07B9  082F               	movf	dispLCD_num@num,w
  5669  07BA  00A2               	movwf	___awdiv@dividend
  5670  07BB  160A  118A  2185  120A  118A  	fcall	___awdiv
  5671  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  5672  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  5673  07C2  0820               	movf	?___awdiv,w
  5674  07C3  3E30               	addlw	48
  5675  07C4  160A  158A  2445  120A  118A  	fcall	_dispLCD_dataReg
  5676                           
  5677                           ;dispLCD4vias.c: 236:         num = num % div;
  5678  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  5679  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  5680  07CB  0838               	movf	dispLCD_num@div+1,w
  5681  07CC  00A1               	movwf	___awmod@divisor+1
  5682  07CD  0837               	movf	dispLCD_num@div,w
  5683  07CE  00A0               	movwf	___awmod@divisor
  5684  07CF  0830               	movf	dispLCD_num@num+1,w
  5685  07D0  00A3               	movwf	___awmod@dividend+1
  5686  07D1  082F               	movf	dispLCD_num@num,w
  5687  07D2  00A2               	movwf	___awmod@dividend
  5688  07D3  160A  118A  2067  120A  118A  	fcall	___awmod
  5689  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  5690  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  5691  07DA  0821               	movf	?___awmod+1,w
  5692  07DB  00B0               	movwf	dispLCD_num@num+1
  5693  07DC  0820               	movf	?___awmod,w
  5694  07DD  00AF               	movwf	dispLCD_num@num
  5695                           
  5696                           ;dispLCD4vias.c: 237:         div/=10;
  5697  07DE  300A               	movlw	10
  5698  07DF  00A0               	movwf	___awdiv@divisor
  5699  07E0  3000               	movlw	0
  5700  07E1  00A1               	movwf	___awdiv@divisor+1
  5701  07E2  0838               	movf	dispLCD_num@div+1,w
  5702  07E3  00A3               	movwf	___awdiv@dividend+1
  5703  07E4  0837               	movf	dispLCD_num@div,w
  5704  07E5  00A2               	movwf	___awdiv@dividend
  5705  07E6  160A  118A  2185  120A  118A  	fcall	___awdiv
  5706  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  5707  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  5708  07ED  0821               	movf	?___awdiv+1,w
  5709  07EE  00B8               	movwf	dispLCD_num@div+1
  5710  07EF  0820               	movf	?___awdiv,w
  5711  07F0  00B7               	movwf	dispLCD_num@div
  5712  07F1                     l6721:
  5713                           
  5714                           ;dispLCD4vias.c: 238:     }
  5715  07F1  0838               	movf	dispLCD_num@div+1,w
  5716  07F2  3A80               	xorlw	128
  5717  07F3  00FF               	movwf	btemp+1
  5718  07F4  3080               	movlw	128
  5719  07F5  027F               	subwf	btemp+1,w
  5720  07F6  1D03               	skipz
  5721  07F7  2FFA               	goto	u4925
  5722  07F8  3001               	movlw	1
  5723  07F9  0237               	subwf	dispLCD_num@div,w
  5724  07FA                     u4925:
  5725  07FA  1803               	skipnc
  5726  07FB  2FFD               	goto	u4921
  5727  07FC  2FFE               	goto	u4920
  5728  07FD                     u4921:
  5729  07FD  2FB1               	goto	l92
  5730  07FE                     u4920:
  5731  07FE                     l94:
  5732  07FE  0008               	return
  5733  07FF                     __end_of_dispLCD_num:
  5734                           
  5735                           	psect	text24
  5736  1FA7                     __ptext24:	
  5737 ;; *************** function _ler_sensor *****************
  5738 ;; Defined at:
  5739 ;;		line 68 in file "atuadores.c"
  5740 ;; Parameters:    Size  Location     Type
  5741 ;;  passo           1    wreg     unsigned char 
  5742 ;;  ptr             1    0[BANK0 ] PTR unsigned char 
  5743 ;;		 -> main@vetorIn(1), 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  passo           1    3[BANK0 ] unsigned char 
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      unsigned char 
  5748 ;; Registers used:
  5749 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5755 ;;      Params:         0       1       0       0       0
  5756 ;;      Locals:         0       1       0       0       0
  5757 ;;      Temps:          0       2       0       0       0
  5758 ;;      Totals:         0       4       0       0       0
  5759 ;;Total ram usage:        4 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    2
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_main
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           
  5770                           ;psect for function _ler_sensor
  5771  1FA7                     _ler_sensor:
  5772                           
  5773                           ;incstack = 0
  5774                           ; Regs used in _ler_sensor: [wreg-fsr0h+status,2+status,0]
  5775                           ;ler_sensor@passo stored from wreg
  5776  1FA7  1283               	bcf	3,5	;RP0=0, select bank0
  5777  1FA8  1303               	bcf	3,6	;RP1=0, select bank0
  5778  1FA9  00A3               	movwf	ler_sensor@passo
  5779  1FAA                     l7055:
  5780                           
  5781                           ;atuadores.c: 68: char ler_sensor(char passo, char* ptr);atuadores.c: 69: {;atuadores.c:
      +                           70:     switch (passo)
  5782  1FAA  2FDD               	goto	l7113
  5783  1FAB                     l7057:
  5784  1FAB  0820               	movf	ler_sensor@ptr,w
  5785  1FAC  0084               	movwf	4
  5786  1FAD  1383               	bcf	3,7	;select IRP bank0
  5787  1FAE  0800               	movf	0,w
  5788  1FAF  3902               	andlw	2
  5789  1FB0  2FFF               	goto	l18
  5790  1FB1                     l7063:
  5791  1FB1  0820               	movf	ler_sensor@ptr,w
  5792  1FB2  0084               	movwf	4
  5793  1FB3  1383               	bcf	3,7	;select IRP bank0
  5794  1FB4  0800               	movf	0,w
  5795  1FB5  3901               	andlw	1
  5796  1FB6  2FFF               	goto	l18
  5797  1FB7                     l7069:
  5798  1FB7  0820               	movf	ler_sensor@ptr,w
  5799  1FB8  0084               	movwf	4
  5800  1FB9  1383               	bcf	3,7	;select IRP bank0
  5801  1FBA  0800               	movf	0,w
  5802  1FBB  3908               	andlw	8
  5803  1FBC  2FFF               	goto	l18
  5804  1FBD                     l7075:
  5805  1FBD  0820               	movf	ler_sensor@ptr,w
  5806  1FBE  0084               	movwf	4
  5807  1FBF  1383               	bcf	3,7	;select IRP bank0
  5808  1FC0  0800               	movf	0,w
  5809  1FC1  3904               	andlw	4
  5810  1FC2  2FFF               	goto	l18
  5811  1FC3                     l7081:
  5812  1FC3  0820               	movf	ler_sensor@ptr,w
  5813  1FC4  0084               	movwf	4
  5814  1FC5  1383               	bcf	3,7	;select IRP bank0
  5815  1FC6  0800               	movf	0,w
  5816  1FC7  3920               	andlw	32
  5817  1FC8  2FFF               	goto	l18
  5818  1FC9                     l7087:
  5819  1FC9  0820               	movf	ler_sensor@ptr,w
  5820  1FCA  0084               	movwf	4
  5821  1FCB  1383               	bcf	3,7	;select IRP bank0
  5822  1FCC  0800               	movf	0,w
  5823  1FCD  3910               	andlw	16
  5824  1FCE  2FFF               	goto	l18
  5825  1FCF                     l7093:
  5826  1FCF  0820               	movf	ler_sensor@ptr,w
  5827  1FD0  0084               	movwf	4
  5828  1FD1  1383               	bcf	3,7	;select IRP bank0
  5829  1FD2  0800               	movf	0,w
  5830  1FD3  3980               	andlw	128
  5831  1FD4  2FFF               	goto	l18
  5832  1FD5                     l7099:
  5833  1FD5  0820               	movf	ler_sensor@ptr,w
  5834  1FD6  0084               	movwf	4
  5835  1FD7  1383               	bcf	3,7	;select IRP bank0
  5836  1FD8  0800               	movf	0,w
  5837  1FD9  3940               	andlw	64
  5838  1FDA  2FFF               	goto	l18
  5839  1FDB                     l7105:
  5840  1FDB  3000               	movlw	0
  5841  1FDC  2FFF               	goto	l18
  5842  1FDD                     l7113:
  5843  1FDD  0823               	movf	ler_sensor@passo,w
  5844  1FDE  00A1               	movwf	??_ler_sensor
  5845  1FDF  01A2               	clrf	??_ler_sensor+1
  5846                           
  5847                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5848                           ; Switch size 1, requested type "simple"
  5849                           ; Number of cases is 1, Range of values is 0 to 0
  5850                           ; switch strategies available:
  5851                           ; Name         Instructions Cycles
  5852                           ; simple_byte            4     3 (average)
  5853                           ; direct_byte           11     8 (fixed)
  5854                           ; jumptable            260     6 (fixed)
  5855                           ;	Chosen strategy is simple_byte
  5856  1FE0  0822               	movf	??_ler_sensor+1,w
  5857  1FE1  3A00               	xorlw	0	; case 0
  5858  1FE2  1903               	skipnz
  5859  1FE3  2FE5               	goto	l8937
  5860  1FE4  2FDB               	goto	l7105
  5861  1FE5                     l8937:
  5862                           
  5863                           ; Switch size 1, requested type "simple"
  5864                           ; Number of cases is 8, Range of values is 65 to 100
  5865                           ; switch strategies available:
  5866                           ; Name         Instructions Cycles
  5867                           ; simple_byte           25    13 (average)
  5868                           ; direct_byte          119    11 (fixed)
  5869                           ; jumptable            263     9 (fixed)
  5870                           ;	Chosen strategy is simple_byte
  5871  1FE5  0821               	movf	??_ler_sensor,w
  5872  1FE6  3A41               	xorlw	65	; case 65
  5873  1FE7  1903               	skipnz
  5874  1FE8  2FAB               	goto	l7057
  5875  1FE9  3A03               	xorlw	3	; case 66
  5876  1FEA  1903               	skipnz
  5877  1FEB  2FB7               	goto	l7069
  5878  1FEC  3A01               	xorlw	1	; case 67
  5879  1FED  1903               	skipnz
  5880  1FEE  2FC3               	goto	l7081
  5881  1FEF  3A07               	xorlw	7	; case 68
  5882  1FF0  1903               	skipnz
  5883  1FF1  2FCF               	goto	l7093
  5884  1FF2  3A25               	xorlw	37	; case 97
  5885  1FF3  1903               	skipnz
  5886  1FF4  2FB1               	goto	l7063
  5887  1FF5  3A03               	xorlw	3	; case 98
  5888  1FF6  1903               	skipnz
  5889  1FF7  2FBD               	goto	l7075
  5890  1FF8  3A01               	xorlw	1	; case 99
  5891  1FF9  1903               	skipnz
  5892  1FFA  2FC9               	goto	l7087
  5893  1FFB  3A07               	xorlw	7	; case 100
  5894  1FFC  1903               	skipnz
  5895  1FFD  2FD5               	goto	l7099
  5896  1FFE  2FDB               	goto	l7105
  5897  1FFF                     l18:
  5898  1FFF  0008               	return
  5899  2000                     __end_of_ler_sensor:
  5900                           
  5901                           	psect	text25
  5902  182B                     __ptext25:	
  5903 ;; *************** function _init_atuadores *****************
  5904 ;; Defined at:
  5905 ;;		line 103 in file "fifo.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;		None
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;		None
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      void 
  5912 ;; Registers used:
  5913 ;;		None
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5919 ;;      Params:         0       0       0       0       0
  5920 ;;      Locals:         0       0       0       0       0
  5921 ;;      Temps:          0       0       0       0       0
  5922 ;;      Totals:         0       0       0       0       0
  5923 ;;Total ram usage:        0 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    2
  5926 ;; This function calls:
  5927 ;;		Nothing
  5928 ;; This function is called by:
  5929 ;;		_main
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           
  5934                           ;psect for function _init_atuadores
  5935  182B                     _init_atuadores:
  5936  182B                     l7211:	
  5937                           ;incstack = 0
  5938                           ; Regs used in _init_atuadores: []
  5939                           
  5940                           
  5941                           ;fifo.c: 105:     atuador.A = 0;
  5942  182B  107A               	bcf	_atuador,0
  5943                           
  5944                           ;fifo.c: 106:     atuador.B = 0;
  5945  182C  10FA               	bcf	_atuador,1
  5946                           
  5947                           ;fifo.c: 107:     atuador.C = 0;
  5948  182D  117A               	bcf	_atuador,2
  5949                           
  5950                           ;fifo.c: 108:     atuador.D = 0;
  5951  182E  11FA               	bcf	_atuador,3
  5952  182F                     l249:
  5953  182F  0008               	return
  5954  1830                     __end_of_init_atuadores:
  5955                           
  5956                           	psect	text26
  5957  1D11                     __ptext26:	
  5958 ;; *************** function _initSerialIO *****************
  5959 ;; Defined at:
  5960 ;;		line 89 in file "serialIO.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;  ptrIn           1    wreg     PTR unsigned char 
  5963 ;;		 -> main@vetorIn(1), 
  5964 ;;  ptrOut          1    0[BANK0 ] PTR unsigned char 
  5965 ;;		 -> main@vetorOut(1), 
  5966 ;;  length          1    1[BANK0 ] unsigned char 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  ptrIn           1    3[BANK0 ] PTR unsigned char 
  5969 ;;		 -> main@vetorIn(1), 
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  1    wreg      void 
  5972 ;; Registers used:
  5973 ;;		wreg
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5979 ;;      Params:         0       2       0       0       0
  5980 ;;      Locals:         0       1       0       0       0
  5981 ;;      Temps:          0       1       0       0       0
  5982 ;;      Totals:         0       4       0       0       0
  5983 ;;Total ram usage:        4 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; Hardware stack levels required when called:    2
  5986 ;; This function calls:
  5987 ;;		Nothing
  5988 ;; This function is called by:
  5989 ;;		_main
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function _initSerialIO
  5995  1D11                     _initSerialIO:
  5996                           
  5997                           ;incstack = 0
  5998                           ; Regs used in _initSerialIO: [wreg]
  5999                           ;initSerialIO@ptrIn stored from wreg
  6000  1D11  1283               	bcf	3,5	;RP0=0, select bank0
  6001  1D12  1303               	bcf	3,6	;RP1=0, select bank0
  6002  1D13  00A3               	movwf	initSerialIO@ptrIn
  6003  1D14                     l7529:
  6004                           
  6005                           ;serialIO.c: 89: void initSerialIO( char * ptrIn, char * ptrOut, unsigned char length );
      +                          serialIO.c: 90: {;serialIO.c: 91:     ptrSerialIn = ptrIn;
  6006  1D14  0823               	movf	initSerialIO@ptrIn,w
  6007  1D15  00A2               	movwf	??_initSerialIO
  6008  1D16  0822               	movf	??_initSerialIO,w
  6009  1D17  00D3               	movwf	_ptrSerialIn
  6010                           
  6011                           ;serialIO.c: 92:     ptrSerialOut = ptrOut;
  6012  1D18  0820               	movf	initSerialIO@ptrOut,w
  6013  1D19  00A2               	movwf	??_initSerialIO
  6014  1D1A  0822               	movf	??_initSerialIO,w
  6015  1D1B  00D2               	movwf	_ptrSerialOut
  6016                           
  6017                           ;serialIO.c: 93:     lenSerialIO = length;
  6018  1D1C  0821               	movf	initSerialIO@length,w
  6019  1D1D  00A2               	movwf	??_initSerialIO
  6020  1D1E  0822               	movf	??_initSerialIO,w
  6021  1D1F  00D1               	movwf	_lenSerialIO
  6022  1D20                     l7531:
  6023                           
  6024                           ;serialIO.c: 95:     PORTAbits.RA3 = 0;
  6025  1D20  1185               	bcf	5,3	;volatile
  6026  1D21                     l7533:
  6027                           
  6028                           ;serialIO.c: 96:     ANSELbits.ANS3 = 0;
  6029  1D21  1683               	bsf	3,5	;RP0=1, select bank3
  6030  1D22  1703               	bsf	3,6	;RP1=1, select bank3
  6031  1D23  1188               	bcf	8,3	;volatile
  6032  1D24                     l7535:
  6033                           
  6034                           ;serialIO.c: 97:     TRISAbits.TRISA3 = 0;
  6035  1D24  1683               	bsf	3,5	;RP0=1, select bank1
  6036  1D25  1303               	bcf	3,6	;RP1=0, select bank1
  6037  1D26  1185               	bcf	5,3	;volatile
  6038  1D27                     l7537:
  6039                           
  6040                           ;serialIO.c: 100:     PORTAbits.RA2 = 0;
  6041  1D27  1283               	bcf	3,5	;RP0=0, select bank0
  6042  1D28  1303               	bcf	3,6	;RP1=0, select bank0
  6043  1D29  1105               	bcf	5,2	;volatile
  6044  1D2A                     l7539:
  6045                           
  6046                           ;serialIO.c: 101:     ANSELbits.ANS2 = 0;
  6047  1D2A  1683               	bsf	3,5	;RP0=1, select bank3
  6048  1D2B  1703               	bsf	3,6	;RP1=1, select bank3
  6049  1D2C  1108               	bcf	8,2	;volatile
  6050  1D2D                     l7541:
  6051                           
  6052                           ;serialIO.c: 102:     TRISAbits.TRISA2 = 0;
  6053  1D2D  1683               	bsf	3,5	;RP0=1, select bank1
  6054  1D2E  1303               	bcf	3,6	;RP1=0, select bank1
  6055  1D2F  1105               	bcf	5,2	;volatile
  6056  1D30                     l7543:
  6057                           
  6058                           ;serialIO.c: 105:     PORTAbits.RA0 = 0;
  6059  1D30  1283               	bcf	3,5	;RP0=0, select bank0
  6060  1D31  1303               	bcf	3,6	;RP1=0, select bank0
  6061  1D32  1005               	bcf	5,0	;volatile
  6062  1D33                     l7545:
  6063                           
  6064                           ;serialIO.c: 106:     ANSELbits.ANS0 = 0;
  6065  1D33  1683               	bsf	3,5	;RP0=1, select bank3
  6066  1D34  1703               	bsf	3,6	;RP1=1, select bank3
  6067  1D35  1008               	bcf	8,0	;volatile
  6068  1D36                     l7547:
  6069                           
  6070                           ;serialIO.c: 107:     TRISAbits.TRISA0 = 0;
  6071  1D36  1683               	bsf	3,5	;RP0=1, select bank1
  6072  1D37  1303               	bcf	3,6	;RP1=0, select bank1
  6073  1D38  1005               	bcf	5,0	;volatile
  6074                           
  6075                           ;serialIO.c: 110:     PORTAbits.RA1;
  6076  1D39  1283               	bcf	3,5	;RP0=0, select bank0
  6077  1D3A  1303               	bcf	3,6	;RP1=0, select bank0
  6078  1D3B  0805               	movf	5,w	;volatile
  6079  1D3C                     l7549:
  6080                           
  6081                           ;serialIO.c: 111:     ANSELbits.ANS1 = 0;
  6082  1D3C  1683               	bsf	3,5	;RP0=1, select bank3
  6083  1D3D  1703               	bsf	3,6	;RP1=1, select bank3
  6084  1D3E  1088               	bcf	8,1	;volatile
  6085  1D3F                     l7551:
  6086                           
  6087                           ;serialIO.c: 112:     TRISAbits.TRISA1 = 1;
  6088  1D3F  1683               	bsf	3,5	;RP0=1, select bank1
  6089  1D40  1303               	bcf	3,6	;RP1=0, select bank1
  6090  1D41  1485               	bsf	5,1	;volatile
  6091  1D42                     l7553:
  6092                           
  6093                           ;serialIO.c: 115:     SERIALIO.CLK = 0;
  6094  1D42  1283               	bcf	3,5	;RP0=0, select bank0
  6095  1D43  1303               	bcf	3,6	;RP1=0, select bank0
  6096  1D44  1105               	bcf	5,2	;volatile
  6097  1D45                     l7555:
  6098                           
  6099                           ;serialIO.c: 116:     SERIALIO.OUT = 0;
  6100  1D45  1005               	bcf	5,0	;volatile
  6101  1D46                     l7557:
  6102                           
  6103                           ;serialIO.c: 117:     SERIALIO.SHLD = 1;
  6104  1D46  1585               	bsf	5,3	;volatile
  6105  1D47                     l474:
  6106  1D47  0008               	return
  6107  1D48                     __end_of_initSerialIO:
  6108                           
  6109                           	psect	text27
  6110  184A                     __ptext27:	
  6111 ;; *************** function _getContCiclos *****************
  6112 ;; Defined at:
  6113 ;;		line 49 in file "fifo.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;		None
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;		None
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  2    0[BANK0 ] unsigned int 
  6120 ;; Registers used:
  6121 ;;		wreg
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6127 ;;      Params:         0       2       0       0       0
  6128 ;;      Locals:         0       0       0       0       0
  6129 ;;      Temps:          0       0       0       0       0
  6130 ;;      Totals:         0       2       0       0       0
  6131 ;;Total ram usage:        2 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    2
  6134 ;; This function calls:
  6135 ;;		Nothing
  6136 ;; This function is called by:
  6137 ;;		_main
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _getContCiclos
  6143  184A                     _getContCiclos:
  6144  184A                     l7203:	
  6145                           ;incstack = 0
  6146                           ; Regs used in _getContCiclos: [wreg]
  6147                           
  6148                           
  6149                           ;fifo.c: 51:     return(cont_ciclos);
  6150  184A  0877               	movf	_cont_ciclos+1,w
  6151  184B  1283               	bcf	3,5	;RP0=0, select bank0
  6152  184C  1303               	bcf	3,6	;RP1=0, select bank0
  6153  184D  00A1               	movwf	?_getContCiclos+1
  6154  184E  0876               	movf	_cont_ciclos,w
  6155  184F  00A0               	movwf	?_getContCiclos
  6156  1850                     l219:
  6157  1850  0008               	return
  6158  1851                     __end_of_getContCiclos:
  6159                           
  6160                           	psect	text28
  6161  1955                     __ptext28:	
  6162 ;; *************** function _getCiclos *****************
  6163 ;; Defined at:
  6164 ;;		line 41 in file "fifo.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  aux             2    4[BANK0 ] int 
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  2    0[BANK0 ] unsigned int 
  6171 ;; Registers used:
  6172 ;;		wreg
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6178 ;;      Params:         0       2       0       0       0
  6179 ;;      Locals:         0       2       0       0       0
  6180 ;;      Temps:          0       2       0       0       0
  6181 ;;      Totals:         0       6       0       0       0
  6182 ;;Total ram usage:        6 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    2
  6185 ;; This function calls:
  6186 ;;		Nothing
  6187 ;; This function is called by:
  6188 ;;		_main
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           
  6193                           ;psect for function _getCiclos
  6194  1955                     _getCiclos:
  6195  1955                     l7199:	
  6196                           ;incstack = 0
  6197                           ; Regs used in _getCiclos: [wreg]
  6198                           
  6199                           
  6200                           ;fifo.c: 43:     int aux = fila[1];
  6201  1955  1283               	bcf	3,5	;RP0=0, select bank0
  6202  1956  1303               	bcf	3,6	;RP1=0, select bank0
  6203  1957  0855               	movf	_fila+1,w
  6204  1958  00A2               	movwf	??_getCiclos
  6205  1959  01A3               	clrf	??_getCiclos+1
  6206  195A  0822               	movf	??_getCiclos,w
  6207  195B  00A4               	movwf	getCiclos@aux
  6208  195C  0823               	movf	??_getCiclos+1,w
  6209  195D  00A5               	movwf	getCiclos@aux+1
  6210                           
  6211                           ;fifo.c: 44:     aux <<= 8;
  6212  195E  3008               	movlw	8
  6213  195F                     u5425:
  6214  195F  1003               	clrc
  6215  1960  0DA4               	rlf	getCiclos@aux,f
  6216  1961  0DA5               	rlf	getCiclos@aux+1,f
  6217  1962  3EFF               	addlw	-1
  6218  1963  1D03               	skipz
  6219  1964  295F               	goto	u5425
  6220                           
  6221                           ;fifo.c: 45:     aux +=fila[0];
  6222  1965  0854               	movf	_fila,w
  6223  1966  00A2               	movwf	??_getCiclos
  6224  1967  01A3               	clrf	??_getCiclos+1
  6225  1968  0822               	movf	??_getCiclos,w
  6226  1969  07A4               	addwf	getCiclos@aux,f
  6227  196A  1803               	skipnc
  6228  196B  0AA5               	incf	getCiclos@aux+1,f
  6229  196C  0823               	movf	??_getCiclos+1,w
  6230  196D  07A5               	addwf	getCiclos@aux+1,f
  6231                           
  6232                           ;fifo.c: 46:     return(aux);
  6233  196E  0825               	movf	getCiclos@aux+1,w
  6234  196F  00A1               	movwf	?_getCiclos+1
  6235  1970  0824               	movf	getCiclos@aux,w
  6236  1971  00A0               	movwf	?_getCiclos
  6237  1972                     l216:
  6238  1972  0008               	return
  6239  1973                     __end_of_getCiclos:
  6240                           
  6241                           	psect	text29
  6242  181E                     __ptext29:	
  6243 ;; *************** function _fifo_tam *****************
  6244 ;; Defined at:
  6245 ;;		line 317 in file "fifo.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  1    wreg      unsigned char 
  6252 ;; Registers used:
  6253 ;;		wreg
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6259 ;;      Params:         0       0       0       0       0
  6260 ;;      Locals:         0       0       0       0       0
  6261 ;;      Temps:          0       0       0       0       0
  6262 ;;      Totals:         0       0       0       0       0
  6263 ;;Total ram usage:        0 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    2
  6266 ;; This function calls:
  6267 ;;		Nothing
  6268 ;; This function is called by:
  6269 ;;		_main
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           
  6274                           ;psect for function _fifo_tam
  6275  181E                     _fifo_tam:
  6276  181E                     l7309:	
  6277                           ;incstack = 0
  6278                           ; Regs used in _fifo_tam: [wreg]
  6279                           
  6280                           
  6281                           ;fifo.c: 319:     return( 18 );
  6282  181E  3012               	movlw	18
  6283  181F                     l350:
  6284  181F  0008               	return
  6285  1820                     __end_of_fifo_tam:
  6286                           
  6287                           	psect	text30
  6288  0E0F                     __ptext30:	
  6289 ;; *************** function _fifo_print *****************
  6290 ;; Defined at:
  6291 ;;		line 342 in file "fifo.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;		None
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  comando         1   18[BANK0 ] unsigned char 
  6296 ;;  atraso          1   17[BANK0 ] unsigned char 
  6297 ;;  i               1   16[BANK0 ] unsigned char 
  6298 ;;  indPrint        1   15[BANK0 ] unsigned char 
  6299 ;;  completar       1   14[BANK0 ] unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      void 
  6302 ;; Registers used:
  6303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6309 ;;      Params:         0       0       0       0       0
  6310 ;;      Locals:         0       7       0       0       0
  6311 ;;      Temps:          0       3       0       0       0
  6312 ;;      Totals:         0      10       0       0       0
  6313 ;;Total ram usage:       10 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    4
  6316 ;; This function calls:
  6317 ;;		___awdiv
  6318 ;;		___awmod
  6319 ;;		_decodifica
  6320 ;;		_dispLCD_dataReg
  6321 ;;		_dispLCD_lincol
  6322 ;; This function is called by:
  6323 ;;		_main
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           
  6328                           ;psect for function _fifo_print
  6329  0E0F                     _fifo_print:
  6330  0E0F                     l7327:	
  6331                           ;incstack = 0
  6332                           ; Regs used in _fifo_print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6333                           
  6334                           
  6335                           ;fifo.c: 344:     char completar = 0;
  6336  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  6337  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  6338  0E11  01AE               	clrf	fifo_print@completar
  6339                           
  6340                           ;fifo.c: 346:     char atraso = 0;
  6341  0E12  01B1               	clrf	fifo_print@atraso
  6342                           
  6343                           ;fifo.c: 347:     char i = 0;
  6344  0E13  01B0               	clrf	fifo_print@i
  6345  0E14                     l7329:
  6346                           
  6347                           ;fifo.c: 348:     char indPrint = ind_print;
  6348  0E14  0866               	movf	_ind_print,w
  6349  0E15  00A9               	movwf	??_fifo_print
  6350  0E16  0829               	movf	??_fifo_print,w
  6351  0E17  00AF               	movwf	fifo_print@indPrint
  6352  0E18                     l7331:
  6353                           
  6354                           ;fifo.c: 350:     dispLCD_lincol(0, 0);
  6355  0E18  01A3               	clrf	dispLCD_lincol@col
  6356  0E19  3000               	movlw	0
  6357  0E1A  160A  158A  2476  120A  158A  	fcall	_dispLCD_lincol
  6358  0E1F                     l7333:
  6359                           
  6360                           ;fifo.c: 352:     {;fifo.c: 353:         if( completar )
  6361  0E1F  1283               	bcf	3,5	;RP0=0, select bank0
  6362  0E20  1303               	bcf	3,6	;RP1=0, select bank0
  6363  0E21  082E               	movf	fifo_print@completar,w
  6364  0E22  1903               	btfsc	3,2
  6365  0E23  2E25               	goto	u5581
  6366  0E24  2E26               	goto	u5580
  6367  0E25                     u5581:
  6368  0E25  2E33               	goto	l7339
  6369  0E26                     u5580:
  6370  0E26                     l7335:
  6371                           
  6372                           ;fifo.c: 354:         {;fifo.c: 355:             dispLCD_dataReg(' ');
  6373  0E26  3020               	movlw	32
  6374  0E27  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6375  0E2C                     l7337:
  6376                           
  6377                           ;fifo.c: 356:             ++i;
  6378  0E2C  3001               	movlw	1
  6379  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  6380  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  6381  0E2F  00A9               	movwf	??_fifo_print
  6382  0E30  0829               	movf	??_fifo_print,w
  6383  0E31  07B0               	addwf	fifo_print@i,f
  6384                           
  6385                           ;fifo.c: 357:         }
  6386  0E32  2FF9               	goto	l7451
  6387  0E33                     l7339:
  6388                           
  6389                           ;fifo.c: 359:         {;fifo.c: 360:             comando = fila[indPrint++];
  6390  0E33  082F               	movf	fifo_print@indPrint,w
  6391  0E34  3E54               	addlw	(low (_fila| 0))& (0+255)
  6392  0E35  0084               	movwf	4
  6393  0E36  1383               	bcf	3,7	;select IRP bank0
  6394  0E37  0800               	movf	0,w
  6395  0E38  00A9               	movwf	??_fifo_print
  6396  0E39  0829               	movf	??_fifo_print,w
  6397  0E3A  00B2               	movwf	fifo_print@comando
  6398  0E3B                     l7341:
  6399  0E3B  3001               	movlw	1
  6400  0E3C  00A9               	movwf	??_fifo_print
  6401  0E3D  0829               	movf	??_fifo_print,w
  6402  0E3E  07AF               	addwf	fifo_print@indPrint,f
  6403  0E3F                     l7343:
  6404                           
  6405                           ;fifo.c: 362:             if( comando == 0 )
  6406  0E3F  0832               	movf	fifo_print@comando,w
  6407  0E40  1D03               	btfss	3,2
  6408  0E41  2E43               	goto	u5591
  6409  0E42  2E44               	goto	u5590
  6410  0E43                     u5591:
  6411  0E43  2E47               	goto	l7347
  6412  0E44                     u5590:
  6413  0E44                     l7345:
  6414                           
  6415                           ;fifo.c: 363:                 completar = 1;
  6416  0E44  01AE               	clrf	fifo_print@completar
  6417  0E45  0AAE               	incf	fifo_print@completar,f
  6418  0E46  2FF9               	goto	l7451
  6419  0E47                     l7347:
  6420  0E47  3065               	movlw	101
  6421  0E48  0232               	subwf	fifo_print@comando,w
  6422  0E49  1803               	skipnc
  6423  0E4A  2E4C               	goto	u5601
  6424  0E4B  2E4D               	goto	u5600
  6425  0E4C                     u5601:
  6426  0E4C  2EDA               	goto	l7377
  6427  0E4D                     u5600:
  6428  0E4D                     l7349:
  6429                           
  6430                           ;fifo.c: 365:             {;fifo.c: 366:                 atraso = comando;
  6431  0E4D  0832               	movf	fifo_print@comando,w
  6432  0E4E  00A9               	movwf	??_fifo_print
  6433  0E4F  0829               	movf	??_fifo_print,w
  6434  0E50  00B1               	movwf	fifo_print@atraso
  6435                           
  6436                           ;fifo.c: 367:                 if( atraso >= 100 )
  6437  0E51  3064               	movlw	100
  6438  0E52  0231               	subwf	fifo_print@atraso,w
  6439  0E53  1C03               	skipc
  6440  0E54  2E56               	goto	u5611
  6441  0E55  2E57               	goto	u5610
  6442  0E56                     u5611:
  6443  0E56  2E8B               	goto	l7363
  6444  0E57                     u5610:
  6445  0E57                     l7351:
  6446                           
  6447                           ;fifo.c: 368:                 {;fifo.c: 369:                     dispLCD_dataReg('1');
  6448  0E57  3031               	movlw	49
  6449  0E58  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6450  0E5D                     l7353:
  6451                           
  6452                           ;fifo.c: 370:                     ++i;
  6453  0E5D  3001               	movlw	1
  6454  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  6455  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  6456  0E60  00A9               	movwf	??_fifo_print
  6457  0E61  0829               	movf	??_fifo_print,w
  6458  0E62  07B0               	addwf	fifo_print@i,f
  6459  0E63                     l7355:
  6460                           
  6461                           ;fifo.c: 371:                     atraso %= 100;
  6462  0E63  3064               	movlw	100
  6463  0E64  00A0               	movwf	___awmod@divisor
  6464  0E65  3000               	movlw	0
  6465  0E66  00A1               	movwf	___awmod@divisor+1
  6466  0E67  0831               	movf	fifo_print@atraso,w
  6467  0E68  00A9               	movwf	??_fifo_print
  6468  0E69  01AA               	clrf	??_fifo_print+1
  6469  0E6A  0829               	movf	??_fifo_print,w
  6470  0E6B  00A2               	movwf	___awmod@dividend
  6471  0E6C  082A               	movf	??_fifo_print+1,w
  6472  0E6D  00A3               	movwf	___awmod@dividend+1
  6473  0E6E  160A  118A  2067  120A  158A  	fcall	___awmod
  6474  0E73  1283               	bcf	3,5	;RP0=0, select bank0
  6475  0E74  1303               	bcf	3,6	;RP1=0, select bank0
  6476  0E75  0820               	movf	?___awmod,w
  6477  0E76  00AB               	movwf	??_fifo_print+2
  6478  0E77  082B               	movf	??_fifo_print+2,w
  6479  0E78  00B1               	movwf	fifo_print@atraso
  6480  0E79                     l7357:
  6481                           
  6482                           ;fifo.c: 372:                     if(atraso < 10)
  6483  0E79  300A               	movlw	10
  6484  0E7A  0231               	subwf	fifo_print@atraso,w
  6485  0E7B  1803               	skipnc
  6486  0E7C  2E7E               	goto	u5621
  6487  0E7D  2E7F               	goto	u5620
  6488  0E7E                     u5621:
  6489  0E7E  2E8B               	goto	l7363
  6490  0E7F                     u5620:
  6491  0E7F                     l7359:
  6492                           
  6493                           ;fifo.c: 373:                     {;fifo.c: 374:                         dispLCD_dataReg
      +                          ('0');
  6494  0E7F  3030               	movlw	48
  6495  0E80  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6496  0E85                     l7361:
  6497                           
  6498                           ;fifo.c: 375:                         ++i;
  6499  0E85  3001               	movlw	1
  6500  0E86  1283               	bcf	3,5	;RP0=0, select bank0
  6501  0E87  1303               	bcf	3,6	;RP1=0, select bank0
  6502  0E88  00A9               	movwf	??_fifo_print
  6503  0E89  0829               	movf	??_fifo_print,w
  6504  0E8A  07B0               	addwf	fifo_print@i,f
  6505  0E8B                     l7363:
  6506                           
  6507                           ;fifo.c: 378:                 if( atraso >= 10 )
  6508  0E8B  300A               	movlw	10
  6509  0E8C  0231               	subwf	fifo_print@atraso,w
  6510  0E8D  1C03               	skipc
  6511  0E8E  2E90               	goto	u5631
  6512  0E8F  2E91               	goto	u5630
  6513  0E90                     u5631:
  6514  0E90  2EC6               	goto	l7371
  6515  0E91                     u5630:
  6516  0E91                     l7365:
  6517                           
  6518                           ;fifo.c: 379:                 {;fifo.c: 380:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  6519  0E91  300A               	movlw	10
  6520  0E92  00A0               	movwf	___awdiv@divisor
  6521  0E93  3000               	movlw	0
  6522  0E94  00A1               	movwf	___awdiv@divisor+1
  6523  0E95  0831               	movf	fifo_print@atraso,w
  6524  0E96  00A9               	movwf	??_fifo_print
  6525  0E97  01AA               	clrf	??_fifo_print+1
  6526  0E98  0829               	movf	??_fifo_print,w
  6527  0E99  00A2               	movwf	___awdiv@dividend
  6528  0E9A  082A               	movf	??_fifo_print+1,w
  6529  0E9B  00A3               	movwf	___awdiv@dividend+1
  6530  0E9C  160A  118A  2185  120A  158A  	fcall	___awdiv
  6531  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  6532  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  6533  0EA3  0820               	movf	?___awdiv,w
  6534  0EA4  3E30               	addlw	48
  6535  0EA5  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6536  0EAA                     l7367:
  6537                           
  6538                           ;fifo.c: 381:                     ++i;
  6539  0EAA  3001               	movlw	1
  6540  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  6541  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  6542  0EAD  00A9               	movwf	??_fifo_print
  6543  0EAE  0829               	movf	??_fifo_print,w
  6544  0EAF  07B0               	addwf	fifo_print@i,f
  6545  0EB0                     l7369:
  6546                           
  6547                           ;fifo.c: 382:                     atraso %= 10;
  6548  0EB0  300A               	movlw	10
  6549  0EB1  00A0               	movwf	___awmod@divisor
  6550  0EB2  3000               	movlw	0
  6551  0EB3  00A1               	movwf	___awmod@divisor+1
  6552  0EB4  0831               	movf	fifo_print@atraso,w
  6553  0EB5  00A9               	movwf	??_fifo_print
  6554  0EB6  01AA               	clrf	??_fifo_print+1
  6555  0EB7  0829               	movf	??_fifo_print,w
  6556  0EB8  00A2               	movwf	___awmod@dividend
  6557  0EB9  082A               	movf	??_fifo_print+1,w
  6558  0EBA  00A3               	movwf	___awmod@dividend+1
  6559  0EBB  160A  118A  2067  120A  158A  	fcall	___awmod
  6560  0EC0  1283               	bcf	3,5	;RP0=0, select bank0
  6561  0EC1  1303               	bcf	3,6	;RP1=0, select bank0
  6562  0EC2  0820               	movf	?___awmod,w
  6563  0EC3  00AB               	movwf	??_fifo_print+2
  6564  0EC4  082B               	movf	??_fifo_print+2,w
  6565  0EC5  00B1               	movwf	fifo_print@atraso
  6566  0EC6                     l7371:
  6567                           
  6568                           ;fifo.c: 385:                 dispLCD_dataReg(atraso + '0');
  6569  0EC6  0831               	movf	fifo_print@atraso,w
  6570  0EC7  3E30               	addlw	48
  6571  0EC8  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6572  0ECD                     l7373:
  6573                           
  6574                           ;fifo.c: 386:                 ++i;
  6575  0ECD  3001               	movlw	1
  6576  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  6577  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  6578  0ED0  00A9               	movwf	??_fifo_print
  6579  0ED1  0829               	movf	??_fifo_print,w
  6580  0ED2  07B0               	addwf	fifo_print@i,f
  6581                           
  6582                           ;fifo.c: 388:                 dispLCD_dataReg('%');
  6583  0ED3  3025               	movlw	37
  6584  0ED4  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6585  0ED9  2E2C               	goto	l7337
  6586  0EDA                     l7377:
  6587  0EDA  3065               	movlw	101
  6588  0EDB  0232               	subwf	fifo_print@comando,w
  6589  0EDC  1C03               	skipc
  6590  0EDD  2EDF               	goto	u5641
  6591  0EDE  2EE0               	goto	u5640
  6592  0EDF                     u5641:
  6593  0EDF  2F7B               	goto	l7413
  6594  0EE0                     u5640:
  6595  0EE0                     l7379:
  6596  0EE0  30DD               	movlw	221
  6597  0EE1  0232               	subwf	fifo_print@comando,w
  6598  0EE2  1803               	skipnc
  6599  0EE3  2EE5               	goto	u5651
  6600  0EE4  2EE6               	goto	u5650
  6601  0EE5                     u5651:
  6602  0EE5  2F7B               	goto	l7413
  6603  0EE6                     u5650:
  6604  0EE6                     l7381:
  6605                           
  6606                           ;fifo.c: 393:             {;fifo.c: 394:                 decodifica(&comando);
  6607  0EE6  3032               	movlw	(low (fifo_print@comando| 0))& (0+255)
  6608  0EE7  160A  118A  21EE  120A  158A  	fcall	_decodifica
  6609  0EEC                     l7383:
  6610                           
  6611                           ;fifo.c: 395:                 atraso = comando;
  6612  0EEC  1283               	bcf	3,5	;RP0=0, select bank0
  6613  0EED  1303               	bcf	3,6	;RP1=0, select bank0
  6614  0EEE  0832               	movf	fifo_print@comando,w
  6615  0EEF  00A9               	movwf	??_fifo_print
  6616  0EF0  0829               	movf	??_fifo_print,w
  6617  0EF1  00B1               	movwf	fifo_print@atraso
  6618  0EF2                     l7385:
  6619                           
  6620                           ;fifo.c: 397:                 if( atraso >= 100 )
  6621  0EF2  3064               	movlw	100
  6622  0EF3  0231               	subwf	fifo_print@atraso,w
  6623  0EF4  1C03               	skipc
  6624  0EF5  2EF7               	goto	u5661
  6625  0EF6  2EF8               	goto	u5660
  6626  0EF7                     u5661:
  6627  0EF7  2F2C               	goto	l7399
  6628  0EF8                     u5660:
  6629  0EF8                     l7387:
  6630                           
  6631                           ;fifo.c: 398:                 {;fifo.c: 399:                     dispLCD_dataReg('1');
  6632  0EF8  3031               	movlw	49
  6633  0EF9  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6634  0EFE                     l7389:
  6635                           
  6636                           ;fifo.c: 400:                     ++i;
  6637  0EFE  3001               	movlw	1
  6638  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  6639  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  6640  0F01  00A9               	movwf	??_fifo_print
  6641  0F02  0829               	movf	??_fifo_print,w
  6642  0F03  07B0               	addwf	fifo_print@i,f
  6643  0F04                     l7391:
  6644                           
  6645                           ;fifo.c: 401:                     atraso %= 100;
  6646  0F04  3064               	movlw	100
  6647  0F05  00A0               	movwf	___awmod@divisor
  6648  0F06  3000               	movlw	0
  6649  0F07  00A1               	movwf	___awmod@divisor+1
  6650  0F08  0831               	movf	fifo_print@atraso,w
  6651  0F09  00A9               	movwf	??_fifo_print
  6652  0F0A  01AA               	clrf	??_fifo_print+1
  6653  0F0B  0829               	movf	??_fifo_print,w
  6654  0F0C  00A2               	movwf	___awmod@dividend
  6655  0F0D  082A               	movf	??_fifo_print+1,w
  6656  0F0E  00A3               	movwf	___awmod@dividend+1
  6657  0F0F  160A  118A  2067  120A  158A  	fcall	___awmod
  6658  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  6659  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  6660  0F16  0820               	movf	?___awmod,w
  6661  0F17  00AB               	movwf	??_fifo_print+2
  6662  0F18  082B               	movf	??_fifo_print+2,w
  6663  0F19  00B1               	movwf	fifo_print@atraso
  6664  0F1A                     l7393:
  6665                           
  6666                           ;fifo.c: 402:                     if(atraso < 10)
  6667  0F1A  300A               	movlw	10
  6668  0F1B  0231               	subwf	fifo_print@atraso,w
  6669  0F1C  1803               	skipnc
  6670  0F1D  2F1F               	goto	u5671
  6671  0F1E  2F20               	goto	u5670
  6672  0F1F                     u5671:
  6673  0F1F  2F2C               	goto	l7399
  6674  0F20                     u5670:
  6675  0F20                     l7395:
  6676                           
  6677                           ;fifo.c: 403:                     {;fifo.c: 404:                         dispLCD_dataReg
      +                          ('0');
  6678  0F20  3030               	movlw	48
  6679  0F21  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6680  0F26                     l7397:
  6681                           
  6682                           ;fifo.c: 405:                         ++i;
  6683  0F26  3001               	movlw	1
  6684  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  6685  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  6686  0F29  00A9               	movwf	??_fifo_print
  6687  0F2A  0829               	movf	??_fifo_print,w
  6688  0F2B  07B0               	addwf	fifo_print@i,f
  6689  0F2C                     l7399:
  6690                           
  6691                           ;fifo.c: 408:                 if( atraso >= 10 )
  6692  0F2C  300A               	movlw	10
  6693  0F2D  0231               	subwf	fifo_print@atraso,w
  6694  0F2E  1C03               	skipc
  6695  0F2F  2F31               	goto	u5681
  6696  0F30  2F32               	goto	u5680
  6697  0F31                     u5681:
  6698  0F31  2F67               	goto	l7407
  6699  0F32                     u5680:
  6700  0F32                     l7401:
  6701                           
  6702                           ;fifo.c: 409:                 {;fifo.c: 410:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  6703  0F32  300A               	movlw	10
  6704  0F33  00A0               	movwf	___awdiv@divisor
  6705  0F34  3000               	movlw	0
  6706  0F35  00A1               	movwf	___awdiv@divisor+1
  6707  0F36  0831               	movf	fifo_print@atraso,w
  6708  0F37  00A9               	movwf	??_fifo_print
  6709  0F38  01AA               	clrf	??_fifo_print+1
  6710  0F39  0829               	movf	??_fifo_print,w
  6711  0F3A  00A2               	movwf	___awdiv@dividend
  6712  0F3B  082A               	movf	??_fifo_print+1,w
  6713  0F3C  00A3               	movwf	___awdiv@dividend+1
  6714  0F3D  160A  118A  2185  120A  158A  	fcall	___awdiv
  6715  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  6716  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  6717  0F44  0820               	movf	?___awdiv,w
  6718  0F45  3E30               	addlw	48
  6719  0F46  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6720  0F4B                     l7403:
  6721                           
  6722                           ;fifo.c: 411:                     ++i;
  6723  0F4B  3001               	movlw	1
  6724  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  6725  0F4D  1303               	bcf	3,6	;RP1=0, select bank0
  6726  0F4E  00A9               	movwf	??_fifo_print
  6727  0F4F  0829               	movf	??_fifo_print,w
  6728  0F50  07B0               	addwf	fifo_print@i,f
  6729  0F51                     l7405:
  6730                           
  6731                           ;fifo.c: 412:                     atraso %= 10;
  6732  0F51  300A               	movlw	10
  6733  0F52  00A0               	movwf	___awmod@divisor
  6734  0F53  3000               	movlw	0
  6735  0F54  00A1               	movwf	___awmod@divisor+1
  6736  0F55  0831               	movf	fifo_print@atraso,w
  6737  0F56  00A9               	movwf	??_fifo_print
  6738  0F57  01AA               	clrf	??_fifo_print+1
  6739  0F58  0829               	movf	??_fifo_print,w
  6740  0F59  00A2               	movwf	___awmod@dividend
  6741  0F5A  082A               	movf	??_fifo_print+1,w
  6742  0F5B  00A3               	movwf	___awmod@dividend+1
  6743  0F5C  160A  118A  2067  120A  158A  	fcall	___awmod
  6744  0F61  1283               	bcf	3,5	;RP0=0, select bank0
  6745  0F62  1303               	bcf	3,6	;RP1=0, select bank0
  6746  0F63  0820               	movf	?___awmod,w
  6747  0F64  00AB               	movwf	??_fifo_print+2
  6748  0F65  082B               	movf	??_fifo_print+2,w
  6749  0F66  00B1               	movwf	fifo_print@atraso
  6750  0F67                     l7407:
  6751                           
  6752                           ;fifo.c: 415:                 dispLCD_dataReg(atraso + '0');
  6753  0F67  0831               	movf	fifo_print@atraso,w
  6754  0F68  3E30               	addlw	48
  6755  0F69  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6756  0F6E                     l7409:
  6757                           
  6758                           ;fifo.c: 416:                 ++i;
  6759  0F6E  3001               	movlw	1
  6760  0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  6761  0F70  1303               	bcf	3,6	;RP1=0, select bank0
  6762  0F71  00A9               	movwf	??_fifo_print
  6763  0F72  0829               	movf	??_fifo_print,w
  6764  0F73  07B0               	addwf	fifo_print@i,f
  6765                           
  6766                           ;fifo.c: 418:                 dispLCD_dataReg('s');
  6767  0F74  3073               	movlw	115
  6768  0F75  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6769  0F7A  2E2C               	goto	l7337
  6770  0F7B                     l7413:
  6771  0F7B  30DD               	movlw	221
  6772  0F7C  0232               	subwf	fifo_print@comando,w
  6773  0F7D  1C03               	skipc
  6774  0F7E  2F80               	goto	u5691
  6775  0F7F  2F81               	goto	u5690
  6776  0F80                     u5691:
  6777  0F80  2FD3               	goto	l7437
  6778  0F81                     u5690:
  6779  0F81                     l7415:
  6780  0F81  30FE               	movlw	254
  6781  0F82  0232               	subwf	fifo_print@comando,w
  6782  0F83  1803               	skipnc
  6783  0F84  2F86               	goto	u5701
  6784  0F85  2F87               	goto	u5700
  6785  0F86                     u5701:
  6786  0F86  2FD3               	goto	l7437
  6787  0F87                     u5700:
  6788  0F87                     l7417:
  6789                           
  6790                           ;fifo.c: 422:             {;fifo.c: 423:                 decodifica(&comando);
  6791  0F87  3032               	movlw	(low (fifo_print@comando| 0))& (0+255)
  6792  0F88  160A  118A  21EE  120A  158A  	fcall	_decodifica
  6793                           
  6794                           ;fifo.c: 424:                 switch( comando )
  6795  0F8D  2FAF               	goto	l7435
  6796  0F8E                     l384:	
  6797                           ;fifo.c: 429:                     case 'D':
  6798                           
  6799  0F8E                     l7419:
  6800                           
  6801                           ;fifo.c: 434:                                 dispLCD_dataReg( comando & ~0x20 );
  6802  0F8E  0832               	movf	fifo_print@comando,w
  6803  0F8F  39DF               	andlw	223
  6804  0F90  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6805  0F95                     l7421:
  6806                           
  6807                           ;fifo.c: 435:                                 ++i;
  6808  0F95  3001               	movlw	1
  6809  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  6810  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  6811  0F98  00A9               	movwf	??_fifo_print
  6812  0F99  0829               	movf	??_fifo_print,w
  6813  0F9A  07B0               	addwf	fifo_print@i,f
  6814  0F9B                     l7423:
  6815                           
  6816                           ;fifo.c: 436:                                 dispLCD_dataReg( comando & 0x20 ? '-': '+'
      +                           );
  6817  0F9B  1AB2               	btfsc	fifo_print@comando,5
  6818  0F9C  2F9E               	goto	u5711
  6819  0F9D  2F9F               	goto	u5710
  6820  0F9E                     u5711:
  6821  0F9E  2FA4               	goto	l7427
  6822  0F9F                     u5710:
  6823  0F9F                     l7425:
  6824  0F9F  302B               	movlw	43
  6825  0FA0  00AC               	movwf	_fifo_print$392
  6826  0FA1  3000               	movlw	0
  6827  0FA2  00AD               	movwf	_fifo_print$392+1
  6828  0FA3  2FA8               	goto	l7429
  6829  0FA4                     l7427:
  6830  0FA4  302D               	movlw	45
  6831  0FA5  00AC               	movwf	_fifo_print$392
  6832  0FA6  3000               	movlw	0
  6833  0FA7  00AD               	movwf	_fifo_print$392+1
  6834  0FA8                     l7429:
  6835  0FA8  082C               	movf	_fifo_print$392,w
  6836  0FA9  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6837  0FAE  2E2C               	goto	l7337
  6838  0FAF                     l7435:
  6839  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  6840  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  6841  0FB1  0832               	movf	fifo_print@comando,w
  6842  0FB2  00A9               	movwf	??_fifo_print
  6843  0FB3  01AA               	clrf	??_fifo_print+1
  6844                           
  6845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6846                           ; Switch size 1, requested type "simple"
  6847                           ; Number of cases is 1, Range of values is 0 to 0
  6848                           ; switch strategies available:
  6849                           ; Name         Instructions Cycles
  6850                           ; simple_byte            4     3 (average)
  6851                           ; direct_byte           11     8 (fixed)
  6852                           ; jumptable            260     6 (fixed)
  6853                           ;	Chosen strategy is simple_byte
  6854  0FB4  082A               	movf	??_fifo_print+1,w
  6855  0FB5  3A00               	xorlw	0	; case 0
  6856  0FB6  1903               	skipnz
  6857  0FB7  2FB9               	goto	l8939
  6858  0FB8  2FF9               	goto	l373
  6859  0FB9                     l8939:
  6860                           
  6861                           ; Switch size 1, requested type "simple"
  6862                           ; Number of cases is 8, Range of values is 65 to 100
  6863                           ; switch strategies available:
  6864                           ; Name         Instructions Cycles
  6865                           ; simple_byte           25    13 (average)
  6866                           ; direct_byte          119    11 (fixed)
  6867                           ; jumptable            263     9 (fixed)
  6868                           ;	Chosen strategy is simple_byte
  6869  0FB9  0829               	movf	??_fifo_print,w
  6870  0FBA  3A41               	xorlw	65	; case 65
  6871  0FBB  1903               	skipnz
  6872  0FBC  2F8E               	goto	l384
  6873  0FBD  3A03               	xorlw	3	; case 66
  6874  0FBE  1903               	skipnz
  6875  0FBF  2F8E               	goto	l7419
  6876  0FC0  3A01               	xorlw	1	; case 67
  6877  0FC1  1903               	skipnz
  6878  0FC2  2F8E               	goto	l7419
  6879  0FC3  3A07               	xorlw	7	; case 68
  6880  0FC4  1903               	skipnz
  6881  0FC5  2F8E               	goto	l7419
  6882  0FC6  3A25               	xorlw	37	; case 97
  6883  0FC7  1903               	skipnz
  6884  0FC8  2F8E               	goto	l7419
  6885  0FC9  3A03               	xorlw	3	; case 98
  6886  0FCA  1903               	skipnz
  6887  0FCB  2F8E               	goto	l7419
  6888  0FCC  3A01               	xorlw	1	; case 99
  6889  0FCD  1903               	skipnz
  6890  0FCE  2F8E               	goto	l7419
  6891  0FCF  3A07               	xorlw	7	; case 100
  6892  0FD0  1903               	skipnz
  6893  0FD1  2F8E               	goto	l7419
  6894  0FD2  2FF9               	goto	l373
  6895  0FD3                     l7437:
  6896                           
  6897                           ;fifo.c: 442:             {;fifo.c: 443:                 if(comando == 0xFE)
  6898  0FD3  30FE               	movlw	254
  6899  0FD4  0632               	xorwf	fifo_print@comando,w
  6900  0FD5  1D03               	btfss	3,2
  6901  0FD6  2FD8               	goto	u5721
  6902  0FD7  2FD9               	goto	u5720
  6903  0FD8                     u5721:
  6904  0FD8  2FF9               	goto	l373
  6905  0FD9                     u5720:
  6906  0FD9                     l7439:
  6907                           
  6908                           ;fifo.c: 444:                 {;fifo.c: 445:                     decodifica(&comando);
  6909  0FD9  3032               	movlw	(low (fifo_print@comando| 0))& (0+255)
  6910  0FDA  160A  118A  21EE  120A  158A  	fcall	_decodifica
  6911  0FDF                     l7441:
  6912                           
  6913                           ;fifo.c: 446:                     atraso = comando;
  6914  0FDF  1283               	bcf	3,5	;RP0=0, select bank0
  6915  0FE0  1303               	bcf	3,6	;RP1=0, select bank0
  6916  0FE1  0832               	movf	fifo_print@comando,w
  6917  0FE2  00A9               	movwf	??_fifo_print
  6918  0FE3  0829               	movf	??_fifo_print,w
  6919  0FE4  00B1               	movwf	fifo_print@atraso
  6920  0FE5                     l7443:
  6921                           
  6922                           ;fifo.c: 448:                     dispLCD_dataReg(atraso + '0');
  6923  0FE5  0831               	movf	fifo_print@atraso,w
  6924  0FE6  3E30               	addlw	48
  6925  0FE7  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6926  0FEC                     l7445:
  6927                           
  6928                           ;fifo.c: 449:                     ++i;
  6929  0FEC  3001               	movlw	1
  6930  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  6931  0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  6932  0FEF  00A9               	movwf	??_fifo_print
  6933  0FF0  0829               	movf	??_fifo_print,w
  6934  0FF1  07B0               	addwf	fifo_print@i,f
  6935  0FF2                     l7447:
  6936                           
  6937                           ;fifo.c: 451:                     dispLCD_dataReg('%');
  6938  0FF2  3025               	movlw	37
  6939  0FF3  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
  6940  0FF8  2E2C               	goto	l7337
  6941  0FF9                     l373:
  6942  0FF9                     l7451:
  6943                           
  6944                           ;fifo.c: 456:     }
  6945  0FF9  3015               	movlw	21
  6946  0FFA  0230               	subwf	fifo_print@i,w
  6947  0FFB  1C03               	skipc
  6948  0FFC  2FFE               	goto	u5731
  6949  0FFD  2FFF               	goto	u5730
  6950  0FFE                     u5731:
  6951  0FFE  2E1F               	goto	l7333
  6952  0FFF                     u5730:
  6953  0FFF                     l397:
  6954  0FFF  0008               	return
  6955  1000                     __end_of_fifo_print:
  6956                           
  6957                           	psect	text31
  6958  1067                     __ptext31:	
  6959 ;; *************** function ___awmod *****************
  6960 ;; Defined at:
  6961 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\awmod.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  divisor         2    0[BANK0 ] int 
  6964 ;;  dividend        2    2[BANK0 ] int 
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;  sign            1    6[BANK0 ] unsigned char 
  6967 ;;  counter         1    5[BANK0 ] unsigned char 
  6968 ;; Return value:  Size  Location     Type
  6969 ;;                  2    0[BANK0 ] int 
  6970 ;; Registers used:
  6971 ;;		wreg, status,2, status,0
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6977 ;;      Params:         0       4       0       0       0
  6978 ;;      Locals:         0       2       0       0       0
  6979 ;;      Temps:          0       1       0       0       0
  6980 ;;      Totals:         0       7       0       0       0
  6981 ;;Total ram usage:        7 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    2
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_dispLCD_num
  6988 ;;		_fifo_print
  6989 ;;		_main
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function ___awmod
  6995  1067                     ___awmod:
  6996  1067                     l6651:	
  6997                           ;incstack = 0
  6998                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6999                           
  7000  1067  1283               	bcf	3,5	;RP0=0, select bank0
  7001  1068  1303               	bcf	3,6	;RP1=0, select bank0
  7002  1069  01A6               	clrf	___awmod@sign
  7003  106A                     l6653:
  7004  106A  1FA3               	btfss	___awmod@dividend+1,7
  7005  106B  286D               	goto	u4751
  7006  106C  286E               	goto	u4750
  7007  106D                     u4751:
  7008  106D  2875               	goto	l6659
  7009  106E                     u4750:
  7010  106E                     l6655:
  7011  106E  09A2               	comf	___awmod@dividend,f
  7012  106F  09A3               	comf	___awmod@dividend+1,f
  7013  1070  0AA2               	incf	___awmod@dividend,f
  7014  1071  1903               	skipnz
  7015  1072  0AA3               	incf	___awmod@dividend+1,f
  7016  1073                     l6657:
  7017  1073  01A6               	clrf	___awmod@sign
  7018  1074  0AA6               	incf	___awmod@sign,f
  7019  1075                     l6659:
  7020  1075  1FA1               	btfss	___awmod@divisor+1,7
  7021  1076  2878               	goto	u4761
  7022  1077  2879               	goto	u4760
  7023  1078                     u4761:
  7024  1078  287E               	goto	l6663
  7025  1079                     u4760:
  7026  1079                     l6661:
  7027  1079  09A0               	comf	___awmod@divisor,f
  7028  107A  09A1               	comf	___awmod@divisor+1,f
  7029  107B  0AA0               	incf	___awmod@divisor,f
  7030  107C  1903               	skipnz
  7031  107D  0AA1               	incf	___awmod@divisor+1,f
  7032  107E                     l6663:
  7033  107E  0820               	movf	___awmod@divisor,w
  7034  107F  0421               	iorwf	___awmod@divisor+1,w
  7035  1080  1903               	btfsc	3,2
  7036  1081  2883               	goto	u4771
  7037  1082  2884               	goto	u4770
  7038  1083                     u4771:
  7039  1083  28B3               	goto	l6681
  7040  1084                     u4770:
  7041  1084                     l6665:
  7042  1084  01A5               	clrf	___awmod@counter
  7043  1085  0AA5               	incf	___awmod@counter,f
  7044  1086  2892               	goto	l6671
  7045  1087                     l6667:
  7046  1087  3001               	movlw	1
  7047  1088                     u4785:
  7048  1088  1003               	clrc
  7049  1089  0DA0               	rlf	___awmod@divisor,f
  7050  108A  0DA1               	rlf	___awmod@divisor+1,f
  7051  108B  3EFF               	addlw	-1
  7052  108C  1D03               	skipz
  7053  108D  2888               	goto	u4785
  7054  108E                     l6669:
  7055  108E  3001               	movlw	1
  7056  108F  00A4               	movwf	??___awmod
  7057  1090  0824               	movf	??___awmod,w
  7058  1091  07A5               	addwf	___awmod@counter,f
  7059  1092                     l6671:
  7060  1092  1FA1               	btfss	___awmod@divisor+1,7
  7061  1093  2895               	goto	u4791
  7062  1094  2896               	goto	u4790
  7063  1095                     u4791:
  7064  1095  2887               	goto	l6667
  7065  1096                     u4790:
  7066  1096                     l6673:
  7067  1096  0821               	movf	___awmod@divisor+1,w
  7068  1097  0223               	subwf	___awmod@dividend+1,w
  7069  1098  1D03               	skipz
  7070  1099  289C               	goto	u4805
  7071  109A  0820               	movf	___awmod@divisor,w
  7072  109B  0222               	subwf	___awmod@dividend,w
  7073  109C                     u4805:
  7074  109C  1C03               	skipc
  7075  109D  289F               	goto	u4801
  7076  109E  28A0               	goto	u4800
  7077  109F                     u4801:
  7078  109F  28A6               	goto	l6677
  7079  10A0                     u4800:
  7080  10A0                     l6675:
  7081  10A0  0820               	movf	___awmod@divisor,w
  7082  10A1  02A2               	subwf	___awmod@dividend,f
  7083  10A2  0821               	movf	___awmod@divisor+1,w
  7084  10A3  1C03               	skipc
  7085  10A4  03A3               	decf	___awmod@dividend+1,f
  7086  10A5  02A3               	subwf	___awmod@dividend+1,f
  7087  10A6                     l6677:
  7088  10A6  3001               	movlw	1
  7089  10A7                     u4815:
  7090  10A7  1003               	clrc
  7091  10A8  0CA1               	rrf	___awmod@divisor+1,f
  7092  10A9  0CA0               	rrf	___awmod@divisor,f
  7093  10AA  3EFF               	addlw	-1
  7094  10AB  1D03               	skipz
  7095  10AC  28A7               	goto	u4815
  7096  10AD                     l6679:
  7097  10AD  3001               	movlw	1
  7098  10AE  02A5               	subwf	___awmod@counter,f
  7099  10AF  1D03               	btfss	3,2
  7100  10B0  28B2               	goto	u4821
  7101  10B1  28B3               	goto	u4820
  7102  10B2                     u4821:
  7103  10B2  2896               	goto	l6673
  7104  10B3                     u4820:
  7105  10B3                     l6681:
  7106  10B3  0826               	movf	___awmod@sign,w
  7107  10B4  1903               	btfsc	3,2
  7108  10B5  28B7               	goto	u4831
  7109  10B6  28B8               	goto	u4830
  7110  10B7                     u4831:
  7111  10B7  28BD               	goto	l6685
  7112  10B8                     u4830:
  7113  10B8                     l6683:
  7114  10B8  09A2               	comf	___awmod@dividend,f
  7115  10B9  09A3               	comf	___awmod@dividend+1,f
  7116  10BA  0AA2               	incf	___awmod@dividend,f
  7117  10BB  1903               	skipnz
  7118  10BC  0AA3               	incf	___awmod@dividend+1,f
  7119  10BD                     l6685:
  7120  10BD  0823               	movf	___awmod@dividend+1,w
  7121  10BE  00A1               	movwf	?___awmod+1
  7122  10BF  0822               	movf	___awmod@dividend,w
  7123  10C0  00A0               	movwf	?___awmod
  7124  10C1                     l1207:
  7125  10C1  0008               	return
  7126  10C2                     __end_of___awmod:
  7127                           
  7128                           	psect	text32
  7129  1B2A                     __ptext32:	
  7130 ;; *************** function _fifo_indicePrint_inc *****************
  7131 ;; Defined at:
  7132 ;;		line 322 in file "fifo.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;		None
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;		None
  7137 ;; Return value:  Size  Location     Type
  7138 ;;                  1    wreg      void 
  7139 ;; Registers used:
  7140 ;;		wreg, status,2, status,0
  7141 ;; Tracked objects:
  7142 ;;		On entry : 0/0
  7143 ;;		On exit  : 0/0
  7144 ;;		Unchanged: 0/0
  7145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7146 ;;      Params:         0       0       0       0       0
  7147 ;;      Locals:         0       0       0       0       0
  7148 ;;      Temps:          0       2       0       0       0
  7149 ;;      Totals:         0       2       0       0       0
  7150 ;;Total ram usage:        2 bytes
  7151 ;; Hardware stack levels used:    1
  7152 ;; Hardware stack levels required when called:    2
  7153 ;; This function calls:
  7154 ;;		Nothing
  7155 ;; This function is called by:
  7156 ;;		_main
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           
  7161                           ;psect for function _fifo_indicePrint_inc
  7162  1B2A                     _fifo_indicePrint_inc:
  7163  1B2A                     l7313:	
  7164                           ;incstack = 0
  7165                           ; Regs used in _fifo_indicePrint_inc: [wreg+status,2+status,0]
  7166                           
  7167                           
  7168                           ;fifo.c: 324:     if( ind_print < 18 -1 )
  7169  1B2A  3011               	movlw	17
  7170  1B2B  1283               	bcf	3,5	;RP0=0, select bank0
  7171  1B2C  1303               	bcf	3,6	;RP1=0, select bank0
  7172  1B2D  0266               	subwf	_ind_print,w
  7173  1B2E  1803               	skipnc
  7174  1B2F  2B31               	goto	u5551
  7175  1B30  2B32               	goto	u5550
  7176  1B31                     u5551:
  7177  1B31  2B53               	goto	l7321
  7178  1B32                     u5550:
  7179  1B32                     l7315:
  7180                           
  7181                           ;fifo.c: 325:     {;fifo.c: 326:         if( ind_print < ind_fila-1 )
  7182  1B32  0867               	movf	_ind_fila,w
  7183  1B33  3EFF               	addlw	255
  7184  1B34  00A0               	movwf	??_fifo_indicePrint_inc
  7185  1B35  30FF               	movlw	255
  7186  1B36  1803               	skipnc
  7187  1B37  3000               	movlw	0
  7188  1B38  00A1               	movwf	??_fifo_indicePrint_inc+1
  7189  1B39  0821               	movf	??_fifo_indicePrint_inc+1,w
  7190  1B3A  3A80               	xorlw	128
  7191  1B3B  3C80               	sublw	128
  7192  1B3C  1D03               	skipz
  7193  1B3D  2B40               	goto	u5565
  7194  1B3E  0820               	movf	??_fifo_indicePrint_inc,w
  7195  1B3F  0266               	subwf	_ind_print,w
  7196  1B40                     u5565:
  7197  1B40  1803               	skipnc
  7198  1B41  2B43               	goto	u5561
  7199  1B42  2B44               	goto	u5560
  7200  1B43                     u5561:
  7201  1B43  2B4B               	goto	l7319
  7202  1B44                     u5560:
  7203  1B44                     l7317:
  7204                           
  7205                           ;fifo.c: 327:             ind_print++;
  7206  1B44  3001               	movlw	1
  7207  1B45  1283               	bcf	3,5	;RP0=0, select bank0
  7208  1B46  1303               	bcf	3,6	;RP1=0, select bank0
  7209  1B47  00A0               	movwf	??_fifo_indicePrint_inc
  7210  1B48  0820               	movf	??_fifo_indicePrint_inc,w
  7211  1B49  07E6               	addwf	_ind_print,f
  7212  1B4A  2B57               	goto	l357
  7213  1B4B                     l7319:
  7214                           
  7215                           ;fifo.c: 329:             ind_print = ind_fila-1;
  7216  1B4B  1283               	bcf	3,5	;RP0=0, select bank0
  7217  1B4C  1303               	bcf	3,6	;RP1=0, select bank0
  7218  1B4D  0867               	movf	_ind_fila,w
  7219  1B4E  3EFF               	addlw	255
  7220  1B4F  00A0               	movwf	??_fifo_indicePrint_inc
  7221  1B50  0820               	movf	??_fifo_indicePrint_inc,w
  7222  1B51  00E6               	movwf	_ind_print
  7223  1B52  2B57               	goto	l357
  7224  1B53                     l7321:
  7225                           
  7226                           ;fifo.c: 332:         ind_print = 18 -1;
  7227  1B53  3011               	movlw	17
  7228  1B54  00A0               	movwf	??_fifo_indicePrint_inc
  7229  1B55  0820               	movf	??_fifo_indicePrint_inc,w
  7230  1B56  00E6               	movwf	_ind_print
  7231  1B57                     l357:
  7232  1B57  0008               	return
  7233  1B58                     __end_of_fifo_indicePrint_inc:
  7234                           
  7235                           	psect	text33
  7236  189E                     __ptext33:	
  7237 ;; *************** function _fifo_indicePrint_dec *****************
  7238 ;; Defined at:
  7239 ;;		line 334 in file "fifo.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;		None
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg, status,2, status,0
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7253 ;;      Params:         0       0       0       0       0
  7254 ;;      Locals:         0       0       0       0       0
  7255 ;;      Temps:          0       0       0       0       0
  7256 ;;      Totals:         0       0       0       0       0
  7257 ;;Total ram usage:        0 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    2
  7260 ;; This function calls:
  7261 ;;		Nothing
  7262 ;; This function is called by:
  7263 ;;		_main
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           
  7268                           ;psect for function _fifo_indicePrint_dec
  7269  189E                     _fifo_indicePrint_dec:
  7270  189E                     l7323:	
  7271                           ;incstack = 0
  7272                           ; Regs used in _fifo_indicePrint_dec: [wreg+status,2+status,0]
  7273                           
  7274                           
  7275                           ;fifo.c: 336:     if( ind_print > 2 )
  7276  189E  3003               	movlw	3
  7277  189F  1283               	bcf	3,5	;RP0=0, select bank0
  7278  18A0  1303               	bcf	3,6	;RP1=0, select bank0
  7279  18A1  0266               	subwf	_ind_print,w
  7280  18A2  1C03               	skipc
  7281  18A3  28A5               	goto	u5571
  7282  18A4  28A6               	goto	u5570
  7283  18A5                     u5571:
  7284  18A5  28A8               	goto	l361
  7285  18A6                     u5570:
  7286  18A6                     l7325:
  7287                           
  7288                           ;fifo.c: 337:         ind_print--;
  7289  18A6  3001               	movlw	1
  7290  18A7  02E6               	subwf	_ind_print,f
  7291  18A8                     l361:
  7292  18A8  0008               	return
  7293  18A9                     __end_of_fifo_indicePrint_dec:
  7294                           
  7295                           	psect	text34
  7296  1827                     __ptext34:	
  7297 ;; *************** function _fifo_indice *****************
  7298 ;; Defined at:
  7299 ;;		line 307 in file "fifo.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;		None
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;		None
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  1    wreg      unsigned char 
  7306 ;; Registers used:
  7307 ;;		wreg
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7313 ;;      Params:         0       0       0       0       0
  7314 ;;      Locals:         0       0       0       0       0
  7315 ;;      Temps:          0       0       0       0       0
  7316 ;;      Totals:         0       0       0       0       0
  7317 ;;Total ram usage:        0 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    2
  7320 ;; This function calls:
  7321 ;;		Nothing
  7322 ;; This function is called by:
  7323 ;;		_main
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           
  7328                           ;psect for function _fifo_indice
  7329  1827                     _fifo_indice:
  7330  1827                     l7301:	
  7331                           ;incstack = 0
  7332                           ; Regs used in _fifo_indice: [wreg]
  7333                           
  7334                           
  7335                           ;fifo.c: 309:     return ( ind_fila );
  7336  1827  1283               	bcf	3,5	;RP0=0, select bank0
  7337  1828  1303               	bcf	3,6	;RP1=0, select bank0
  7338  1829  0867               	movf	_ind_fila,w
  7339  182A                     l344:
  7340  182A  0008               	return
  7341  182B                     __end_of_fifo_indice:
  7342                           
  7343                           	psect	text35
  7344  1893                     __ptext35:	
  7345 ;; *************** function _fifo_disponivel *****************
  7346 ;; Defined at:
  7347 ;;		line 312 in file "fifo.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;		None
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;		None
  7352 ;; Return value:  Size  Location     Type
  7353 ;;                  1    wreg      unsigned char 
  7354 ;; Registers used:
  7355 ;;		wreg
  7356 ;; Tracked objects:
  7357 ;;		On entry : 0/0
  7358 ;;		On exit  : 0/0
  7359 ;;		Unchanged: 0/0
  7360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7361 ;;      Params:         0       0       0       0       0
  7362 ;;      Locals:         0       0       0       0       0
  7363 ;;      Temps:          0       0       0       0       0
  7364 ;;      Totals:         0       0       0       0       0
  7365 ;;Total ram usage:        0 bytes
  7366 ;; Hardware stack levels used:    1
  7367 ;; Hardware stack levels required when called:    2
  7368 ;; This function calls:
  7369 ;;		Nothing
  7370 ;; This function is called by:
  7371 ;;		_main
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           
  7376                           ;psect for function _fifo_disponivel
  7377  1893                     _fifo_disponivel:
  7378  1893                     l7305:	
  7379                           ;incstack = 0
  7380                           ; Regs used in _fifo_disponivel: [wreg]
  7381                           
  7382                           
  7383                           ;fifo.c: 314:     return( ind_fila < 18 );
  7384  1893  3012               	movlw	18
  7385  1894  1283               	bcf	3,5	;RP0=0, select bank0
  7386  1895  1303               	bcf	3,6	;RP1=0, select bank0
  7387  1896  0267               	subwf	_ind_fila,w
  7388  1897  1C03               	skipc
  7389  1898  289A               	goto	u5531
  7390  1899  289C               	goto	u5530
  7391  189A                     u5531:
  7392  189A  3001               	movlw	1
  7393  189B  289D               	goto	u5540
  7394  189C                     u5530:
  7395  189C  3000               	movlw	0
  7396  189D                     u5540:
  7397  189D                     l347:
  7398  189D  0008               	return
  7399  189E                     __end_of_fifo_disponivel:
  7400                           
  7401                           	psect	text36
  7402  1F5A                     __ptext36:	
  7403 ;; *************** function _fifo_delete *****************
  7404 ;; Defined at:
  7405 ;;		line 183 in file "fifo.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;		None
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  1    wreg      void 
  7412 ;; Registers used:
  7413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7419 ;;      Params:         0       0       0       0       0
  7420 ;;      Locals:         0       0       0       0       0
  7421 ;;      Temps:          0       2       0       0       0
  7422 ;;      Totals:         0       2       0       0       0
  7423 ;;Total ram usage:        2 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:    5
  7426 ;; This function calls:
  7427 ;;		_alt_atuador
  7428 ;;		_codifica
  7429 ;;		_decodifica
  7430 ;;		_fifo_alinharPrint
  7431 ;; This function is called by:
  7432 ;;		_main
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           
  7437                           ;psect for function _fifo_delete
  7438  1F5A                     _fifo_delete:
  7439  1F5A                     l7243:	
  7440                           ;incstack = 0
  7441                           ; Regs used in _fifo_delete: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7442                           
  7443                           
  7444                           ;fifo.c: 185:     if(ind_fila)
  7445  1F5A  1283               	bcf	3,5	;RP0=0, select bank0
  7446  1F5B  1303               	bcf	3,6	;RP1=0, select bank0
  7447  1F5C  0867               	movf	_ind_fila,w
  7448  1F5D  1903               	btfsc	3,2
  7449  1F5E  2F60               	goto	u5451
  7450  1F5F  2F61               	goto	u5450
  7451  1F60                     u5451:
  7452  1F60  2FA1               	goto	l7255
  7453  1F61                     u5450:
  7454  1F61                     l7245:
  7455                           
  7456                           ;fifo.c: 186:     {;fifo.c: 187:         if(ind_fila > 2)
  7457  1F61  3003               	movlw	3
  7458  1F62  0267               	subwf	_ind_fila,w
  7459  1F63  1C03               	skipc
  7460  1F64  2F66               	goto	u5461
  7461  1F65  2F67               	goto	u5460
  7462  1F66                     u5461:
  7463  1F66  2F69               	goto	l7249
  7464  1F67                     u5460:
  7465  1F67                     l7247:
  7466                           
  7467                           ;fifo.c: 188:             ind_fila--;
  7468  1F67  3001               	movlw	1
  7469  1F68  02E7               	subwf	_ind_fila,f
  7470  1F69                     l7249:
  7471                           
  7472                           ;fifo.c: 189:         if(fila[ind_fila] > 0xDC)
  7473  1F69  0867               	movf	_ind_fila,w
  7474  1F6A  3E54               	addlw	(low (_fila| 0))& (0+255)
  7475  1F6B  0084               	movwf	4
  7476  1F6C  30DD               	movlw	221
  7477  1F6D  1383               	bcf	3,7	;select IRP bank0
  7478  1F6E  0200               	subwf	0,w
  7479  1F6F  1C03               	skipc
  7480  1F70  2F72               	goto	u5471
  7481  1F71  2F73               	goto	u5470
  7482  1F72                     u5471:
  7483  1F72  2F9A               	goto	l7253
  7484  1F73                     u5470:
  7485  1F73                     l7251:
  7486                           
  7487                           ;fifo.c: 190:         {;fifo.c: 191:             decodifica(&fila[ind_fila]);
  7488  1F73  0867               	movf	_ind_fila,w
  7489  1F74  3E54               	addlw	(low (_fila| 0))& (0+255)
  7490  1F75  160A  118A  21EE  160A  158A  	fcall	_decodifica
  7491                           
  7492                           ;fifo.c: 192:             alt_atuador(fila[ind_fila] & ~0x20);
  7493  1F7A  1283               	bcf	3,5	;RP0=0, select bank0
  7494  1F7B  1303               	bcf	3,6	;RP1=0, select bank0
  7495  1F7C  0867               	movf	_ind_fila,w
  7496  1F7D  3E54               	addlw	(low (_fila| 0))& (0+255)
  7497  1F7E  0084               	movwf	4
  7498  1F7F  1383               	bcf	3,7	;select IRP bank0
  7499  1F80  0800               	movf	0,w
  7500  1F81  39DF               	andlw	223
  7501  1F82  160A  158A  24DA  160A  158A  	fcall	_alt_atuador
  7502                           
  7503                           ;fifo.c: 193:             codifica('a',fila[ind_fila]);
  7504  1F87  1283               	bcf	3,5	;RP0=0, select bank0
  7505  1F88  1303               	bcf	3,6	;RP1=0, select bank0
  7506  1F89  0867               	movf	_ind_fila,w
  7507  1F8A  3E54               	addlw	(low (_fila| 0))& (0+255)
  7508  1F8B  0084               	movwf	4
  7509  1F8C  1383               	bcf	3,7	;select IRP bank0
  7510  1F8D  0800               	movf	0,w
  7511  1F8E  00B3               	movwf	??_fifo_delete
  7512  1F8F  01B4               	clrf	??_fifo_delete+1
  7513  1F90  0833               	movf	??_fifo_delete,w
  7514  1F91  00A0               	movwf	codifica@dado
  7515  1F92  0834               	movf	??_fifo_delete+1,w
  7516  1F93  00A1               	movwf	codifica@dado+1
  7517  1F94  3061               	movlw	97
  7518  1F95  160A  118A  240C  160A  158A  	fcall	_codifica
  7519  1F9A                     l7253:
  7520                           
  7521                           ;fifo.c: 195:         fila[ind_fila] = 0;
  7522  1F9A  1283               	bcf	3,5	;RP0=0, select bank0
  7523  1F9B  1303               	bcf	3,6	;RP1=0, select bank0
  7524  1F9C  0867               	movf	_ind_fila,w
  7525  1F9D  3E54               	addlw	(low (_fila| 0))& (0+255)
  7526  1F9E  0084               	movwf	4
  7527  1F9F  1383               	bcf	3,7	;select IRP bank0
  7528  1FA0  0180               	clrf	0
  7529  1FA1                     l7255:
  7530                           
  7531                           ;fifo.c: 197:     fifo_alinharPrint();
  7532  1FA1  160A  118A  22EB  160A  158A  	fcall	_fifo_alinharPrint
  7533  1FA6                     l287:
  7534  1FA6  0008               	return
  7535  1FA7                     __end_of_fifo_delete:
  7536                           
  7537                           	psect	text37
  7538  11EE                     __ptext37:	
  7539 ;; *************** function _decodifica *****************
  7540 ;; Defined at:
  7541 ;;		line 227 in file "fifo.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  d               1    wreg     PTR unsigned char 
  7544 ;;		 -> main@auxPasso(1), printExec@passo(1), fifo_print@comando(1), fila(18), 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  d               1    2[BANK0 ] PTR unsigned char 
  7547 ;;		 -> main@auxPasso(1), printExec@passo(1), fifo_print@comando(1), fila(18), 
  7548 ;; Return value:  Size  Location     Type
  7549 ;;                  1    wreg      void 
  7550 ;; Registers used:
  7551 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7557 ;;      Params:         0       0       0       0       0
  7558 ;;      Locals:         0       1       0       0       0
  7559 ;;      Temps:          0       2       0       0       0
  7560 ;;      Totals:         0       3       0       0       0
  7561 ;;Total ram usage:        3 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:    2
  7564 ;; This function calls:
  7565 ;;		Nothing
  7566 ;; This function is called by:
  7567 ;;		_fifo_delete
  7568 ;;		_fifo_print
  7569 ;;		_printExec
  7570 ;;		_main
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           
  7575                           ;psect for function _decodifica
  7576  11EE                     _decodifica:
  7577                           
  7578                           ;incstack = 0
  7579                           ; Regs used in _decodifica: [wreg-fsr0h+status,2+status,0]
  7580                           ;decodifica@d stored from wreg
  7581  11EE  1283               	bcf	3,5	;RP0=0, select bank0
  7582  11EF  1303               	bcf	3,6	;RP1=0, select bank0
  7583  11F0  00A2               	movwf	decodifica@d
  7584  11F1                     l6791:
  7585                           
  7586                           ;fifo.c: 227: void decodifica( unsigned char *d );fifo.c: 228: {;fifo.c: 229:     if( *d
      +                           <= 100 )
  7587  11F1  0822               	movf	decodifica@d,w
  7588  11F2  0084               	movwf	4
  7589  11F3  3065               	movlw	101
  7590  11F4  1383               	bcf	3,7	;select IRP bank0
  7591  11F5  0200               	subwf	0,w
  7592  11F6  1803               	skipnc
  7593  11F7  29F9               	goto	u5021
  7594  11F8  29FA               	goto	u5020
  7595  11F9                     u5021:
  7596  11F9  29FB               	goto	l6795
  7597  11FA                     u5020:
  7598  11FA  2A6B               	goto	l324
  7599  11FB                     l6795:
  7600  11FB  0822               	movf	decodifica@d,w
  7601  11FC  0084               	movwf	4
  7602  11FD  30DD               	movlw	221
  7603  11FE  0200               	subwf	0,w
  7604  11FF  1803               	skipnc
  7605  1200  2A02               	goto	u5031
  7606  1201  2A03               	goto	u5030
  7607  1202                     u5031:
  7608  1202  2A44               	goto	l6819
  7609  1203                     u5030:
  7610  1203                     l6797:
  7611                           
  7612                           ;fifo.c: 234:     {;fifo.c: 235:         *d -= 0x64;
  7613  1203  0822               	movf	decodifica@d,w
  7614  1204  0084               	movwf	4
  7615  1205  3064               	movlw	100
  7616  1206  0280               	subwf	0,f
  7617                           
  7618                           ;fifo.c: 236:     } else
  7619  1207  2A6B               	goto	l324
  7620  1208                     l6799:
  7621  1208  3041               	movlw	65
  7622  1209  00A0               	movwf	??_decodifica
  7623  120A  0822               	movf	decodifica@d,w
  7624  120B  0084               	movwf	4
  7625  120C  0820               	movf	??_decodifica,w
  7626  120D  0080               	movwf	0
  7627  120E  2A6B               	goto	l324
  7628  120F                     l6801:
  7629  120F  3061               	movlw	97
  7630  1210  00A0               	movwf	??_decodifica
  7631  1211  0822               	movf	decodifica@d,w
  7632  1212  0084               	movwf	4
  7633  1213  0820               	movf	??_decodifica,w
  7634  1214  0080               	movwf	0
  7635  1215  2A6B               	goto	l324
  7636  1216                     l6803:
  7637  1216  3042               	movlw	66
  7638  1217  00A0               	movwf	??_decodifica
  7639  1218  0822               	movf	decodifica@d,w
  7640  1219  0084               	movwf	4
  7641  121A  0820               	movf	??_decodifica,w
  7642  121B  0080               	movwf	0
  7643  121C  2A6B               	goto	l324
  7644  121D                     l6805:
  7645  121D  3062               	movlw	98
  7646  121E  00A0               	movwf	??_decodifica
  7647  121F  0822               	movf	decodifica@d,w
  7648  1220  0084               	movwf	4
  7649  1221  0820               	movf	??_decodifica,w
  7650  1222  0080               	movwf	0
  7651  1223  2A6B               	goto	l324
  7652  1224                     l6807:
  7653  1224  3043               	movlw	67
  7654  1225  00A0               	movwf	??_decodifica
  7655  1226  0822               	movf	decodifica@d,w
  7656  1227  0084               	movwf	4
  7657  1228  0820               	movf	??_decodifica,w
  7658  1229  0080               	movwf	0
  7659  122A  2A6B               	goto	l324
  7660  122B                     l6809:
  7661  122B  3063               	movlw	99
  7662  122C  00A0               	movwf	??_decodifica
  7663  122D  0822               	movf	decodifica@d,w
  7664  122E  0084               	movwf	4
  7665  122F  0820               	movf	??_decodifica,w
  7666  1230  0080               	movwf	0
  7667  1231  2A6B               	goto	l324
  7668  1232                     l6811:
  7669  1232  3044               	movlw	68
  7670  1233  00A0               	movwf	??_decodifica
  7671  1234  0822               	movf	decodifica@d,w
  7672  1235  0084               	movwf	4
  7673  1236  0820               	movf	??_decodifica,w
  7674  1237  0080               	movwf	0
  7675  1238  2A6B               	goto	l324
  7676  1239                     l6813:
  7677  1239  3064               	movlw	100
  7678  123A  00A0               	movwf	??_decodifica
  7679  123B  0822               	movf	decodifica@d,w
  7680  123C  0084               	movwf	4
  7681  123D  0820               	movf	??_decodifica,w
  7682  123E  0080               	movwf	0
  7683  123F  2A6B               	goto	l324
  7684  1240                     l6815:
  7685  1240  0822               	movf	decodifica@d,w
  7686  1241  0084               	movwf	4
  7687  1242  0180               	clrf	0
  7688  1243  2A6B               	goto	l324
  7689  1244                     l6819:
  7690  1244  0822               	movf	decodifica@d,w
  7691  1245  0084               	movwf	4
  7692  1246  0800               	movf	0,w
  7693  1247  00A0               	movwf	??_decodifica
  7694  1248  01A1               	clrf	??_decodifica+1
  7695                           
  7696                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7697                           ; Switch size 1, requested type "simple"
  7698                           ; Number of cases is 1, Range of values is 0 to 0
  7699                           ; switch strategies available:
  7700                           ; Name         Instructions Cycles
  7701                           ; simple_byte            4     3 (average)
  7702                           ; direct_byte           11     8 (fixed)
  7703                           ; jumptable            260     6 (fixed)
  7704                           ;	Chosen strategy is simple_byte
  7705  1249  0821               	movf	??_decodifica+1,w
  7706  124A  3A00               	xorlw	0	; case 0
  7707  124B  1903               	skipnz
  7708  124C  2A4E               	goto	l8941
  7709  124D  2A6B               	goto	l324
  7710  124E                     l8941:
  7711                           
  7712                           ; Switch size 1, requested type "simple"
  7713                           ; Number of cases is 9, Range of values is 221 to 254
  7714                           ; switch strategies available:
  7715                           ; Name         Instructions Cycles
  7716                           ; simple_byte           28    15 (average)
  7717                           ; direct_byte          113    11 (fixed)
  7718                           ; jumptable            263     9 (fixed)
  7719                           ;	Chosen strategy is simple_byte
  7720  124E  0820               	movf	??_decodifica,w
  7721  124F  3ADD               	xorlw	221	; case 221
  7722  1250  1903               	skipnz
  7723  1251  2A08               	goto	l6799
  7724  1252  3A03               	xorlw	3	; case 222
  7725  1253  1903               	skipnz
  7726  1254  2A0F               	goto	l6801
  7727  1255  3A01               	xorlw	1	; case 223
  7728  1256  1903               	skipnz
  7729  1257  2A16               	goto	l6803
  7730  1258  3A3F               	xorlw	63	; case 224
  7731  1259  1903               	skipnz
  7732  125A  2A1D               	goto	l6805
  7733  125B  3A01               	xorlw	1	; case 225
  7734  125C  1903               	skipnz
  7735  125D  2A24               	goto	l6807
  7736  125E  3A03               	xorlw	3	; case 226
  7737  125F  1903               	skipnz
  7738  1260  2A2B               	goto	l6809
  7739  1261  3A01               	xorlw	1	; case 227
  7740  1262  1903               	skipnz
  7741  1263  2A32               	goto	l6811
  7742  1264  3A07               	xorlw	7	; case 228
  7743  1265  1903               	skipnz
  7744  1266  2A39               	goto	l6813
  7745  1267  3A1A               	xorlw	26	; case 254
  7746  1268  1903               	skipnz
  7747  1269  2A40               	goto	l6815
  7748  126A  2A6B               	goto	l324
  7749  126B                     l324:
  7750  126B  0008               	return
  7751  126C                     __end_of_decodifica:
  7752                           
  7753                           	psect	text38
  7754  1CDA                     __ptext38:	
  7755 ;; *************** function _alt_atuador *****************
  7756 ;; Defined at:
  7757 ;;		line 92 in file "fifo.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  tecla           1    wreg     unsigned char 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  tecla           1    2[BANK0 ] unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  1    wreg      void 
  7764 ;; Registers used:
  7765 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7771 ;;      Params:         0       0       0       0       0
  7772 ;;      Locals:         0       1       0       0       0
  7773 ;;      Temps:          0       2       0       0       0
  7774 ;;      Totals:         0       3       0       0       0
  7775 ;;Total ram usage:        3 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    2
  7778 ;; This function calls:
  7779 ;;		Nothing
  7780 ;; This function is called by:
  7781 ;;		_fifo_delete
  7782 ;;		_main
  7783 ;;		_manipula_atuadores_init
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           
  7788                           ;psect for function _alt_atuador
  7789  1CDA                     _alt_atuador:
  7790                           
  7791                           ;incstack = 0
  7792                           ; Regs used in _alt_atuador: [wreg-fsr0h+status,2+status,0]
  7793                           ;alt_atuador@tecla stored from wreg
  7794  1CDA  1283               	bcf	3,5	;RP0=0, select bank0
  7795  1CDB  1303               	bcf	3,6	;RP1=0, select bank0
  7796  1CDC  00A2               	movwf	alt_atuador@tecla
  7797  1CDD                     l6779:
  7798                           
  7799                           ;fifo.c: 92: void alt_atuador( char tecla );fifo.c: 93: {;fifo.c: 94:     switch(tecla)
  7800  1CDD  2CFA               	goto	l6783
  7801  1CDE                     l241:	
  7802                           ;fifo.c: 95:     {;fifo.c: 96:         case 'A': atuador.A = atuador.A ^ 1; break;
  7803                           
  7804  1CDE  1C7A               	btfss	_atuador,0
  7805  1CDF  2CE1               	goto	u4941
  7806  1CE0  2CE3               	goto	u4940
  7807  1CE1                     u4941:
  7808  1CE1  147A               	bsf	_atuador,0
  7809  1CE2  2CE4               	goto	u4954
  7810  1CE3                     u4940:
  7811  1CE3  107A               	bcf	_atuador,0
  7812  1CE4                     u4954:
  7813  1CE4  2D10               	goto	l246
  7814  1CE5                     l243:	
  7815                           ;fifo.c: 97:         case 'B': atuador.B = atuador.B ^ 1; break;
  7816                           
  7817  1CE5  1CFA               	btfss	_atuador,1
  7818  1CE6  2CE8               	goto	u4961
  7819  1CE7  2CEA               	goto	u4960
  7820  1CE8                     u4961:
  7821  1CE8  14FA               	bsf	_atuador,1
  7822  1CE9  2CEB               	goto	u4974
  7823  1CEA                     u4960:
  7824  1CEA  10FA               	bcf	_atuador,1
  7825  1CEB                     u4974:
  7826  1CEB  2D10               	goto	l246
  7827  1CEC                     l244:	
  7828                           ;fifo.c: 98:         case 'C': atuador.C = atuador.C ^ 1; break;
  7829                           
  7830  1CEC  1D7A               	btfss	_atuador,2
  7831  1CED  2CEF               	goto	u4981
  7832  1CEE  2CF1               	goto	u4980
  7833  1CEF                     u4981:
  7834  1CEF  157A               	bsf	_atuador,2
  7835  1CF0  2CF2               	goto	u4994
  7836  1CF1                     u4980:
  7837  1CF1  117A               	bcf	_atuador,2
  7838  1CF2                     u4994:
  7839  1CF2  2D10               	goto	l246
  7840  1CF3                     l245:	
  7841                           ;fifo.c: 99:         case 'D': atuador.D = atuador.D ^ 1; break;
  7842                           
  7843  1CF3  1DFA               	btfss	_atuador,3
  7844  1CF4  2CF6               	goto	u5001
  7845  1CF5  2CF8               	goto	u5000
  7846  1CF6                     u5001:
  7847  1CF6  15FA               	bsf	_atuador,3
  7848  1CF7  2CF9               	goto	u5014
  7849  1CF8                     u5000:
  7850  1CF8  11FA               	bcf	_atuador,3
  7851  1CF9                     u5014:
  7852  1CF9  2D10               	goto	l246
  7853  1CFA                     l6783:
  7854  1CFA  0822               	movf	alt_atuador@tecla,w
  7855  1CFB  00A0               	movwf	??_alt_atuador
  7856  1CFC  01A1               	clrf	??_alt_atuador+1
  7857                           
  7858                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7859                           ; Switch size 1, requested type "simple"
  7860                           ; Number of cases is 1, Range of values is 0 to 0
  7861                           ; switch strategies available:
  7862                           ; Name         Instructions Cycles
  7863                           ; simple_byte            4     3 (average)
  7864                           ; direct_byte           11     8 (fixed)
  7865                           ; jumptable            260     6 (fixed)
  7866                           ;	Chosen strategy is simple_byte
  7867  1CFD  0821               	movf	??_alt_atuador+1,w
  7868  1CFE  3A00               	xorlw	0	; case 0
  7869  1CFF  1903               	skipnz
  7870  1D00  2D02               	goto	l8943
  7871  1D01  2D10               	goto	l246
  7872  1D02                     l8943:
  7873                           
  7874                           ; Switch size 1, requested type "simple"
  7875                           ; Number of cases is 4, Range of values is 65 to 68
  7876                           ; switch strategies available:
  7877                           ; Name         Instructions Cycles
  7878                           ; simple_byte           13     7 (average)
  7879                           ; direct_byte           23    11 (fixed)
  7880                           ; jumptable            263     9 (fixed)
  7881                           ;	Chosen strategy is simple_byte
  7882  1D02  0820               	movf	??_alt_atuador,w
  7883  1D03  3A41               	xorlw	65	; case 65
  7884  1D04  1903               	skipnz
  7885  1D05  2CDE               	goto	l241
  7886  1D06  3A03               	xorlw	3	; case 66
  7887  1D07  1903               	skipnz
  7888  1D08  2CE5               	goto	l243
  7889  1D09  3A01               	xorlw	1	; case 67
  7890  1D0A  1903               	skipnz
  7891  1D0B  2CEC               	goto	l244
  7892  1D0C  3A07               	xorlw	7	; case 68
  7893  1D0D  1903               	skipnz
  7894  1D0E  2CF3               	goto	l245
  7895  1D0F  2D10               	goto	l246
  7896  1D10                     l246:
  7897  1D10  0008               	return
  7898  1D11                     __end_of_alt_atuador:
  7899                           
  7900                           	psect	text39
  7901  181C                     __ptext39:	
  7902 ;; *************** function _fifo_adrs *****************
  7903 ;; Defined at:
  7904 ;;		line 178 in file "fifo.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;		None
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;		None
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  1    wreg      PTR unsigned char 
  7911 ;; Registers used:
  7912 ;;		wreg
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7918 ;;      Params:         0       0       0       0       0
  7919 ;;      Locals:         0       0       0       0       0
  7920 ;;      Temps:          0       0       0       0       0
  7921 ;;      Totals:         0       0       0       0       0
  7922 ;;Total ram usage:        0 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    2
  7925 ;; This function calls:
  7926 ;;		Nothing
  7927 ;; This function is called by:
  7928 ;;		_main
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _fifo_adrs
  7934  181C                     _fifo_adrs:
  7935  181C                     l7239:	
  7936                           ;incstack = 0
  7937                           ; Regs used in _fifo_adrs: [wreg]
  7938                           
  7939                           
  7940                           ;fifo.c: 180:     return fila;
  7941  181C  3054               	movlw	(low (_fila| 0))& (0+255)
  7942  181D                     l281:
  7943  181D  0008               	return
  7944  181E                     __end_of_fifo_adrs:
  7945                           
  7946                           	psect	text40
  7947  1C15                     __ptext40:	
  7948 ;; *************** function _fifo_add_tempo *****************
  7949 ;; Defined at:
  7950 ;;		line 269 in file "fifo.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;  t               1    wreg     const unsigned char 
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;  t               1   20[BANK0 ] const unsigned char 
  7955 ;; Return value:  Size  Location     Type
  7956 ;;                  1    wreg      void 
  7957 ;; Registers used:
  7958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7959 ;; Tracked objects:
  7960 ;;		On entry : 0/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7964 ;;      Params:         0       0       0       0       0
  7965 ;;      Locals:         0       1       0       0       0
  7966 ;;      Temps:          0       1       0       0       0
  7967 ;;      Totals:         0       2       0       0       0
  7968 ;;Total ram usage:        2 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:    5
  7971 ;; This function calls:
  7972 ;;		_codifica
  7973 ;;		_fifo_alinharPrint
  7974 ;; This function is called by:
  7975 ;;		_main
  7976 ;; This function uses a non-reentrant model
  7977 ;;
  7978                           
  7979                           
  7980                           ;psect for function _fifo_add_tempo
  7981  1C15                     _fifo_add_tempo:
  7982                           
  7983                           ;incstack = 0
  7984                           ; Regs used in _fifo_add_tempo: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7985                           ;fifo_add_tempo@t stored from wreg
  7986  1C15  1283               	bcf	3,5	;RP0=0, select bank0
  7987  1C16  1303               	bcf	3,6	;RP1=0, select bank0
  7988  1C17  00B4               	movwf	fifo_add_tempo@t
  7989  1C18                     l7271:
  7990                           
  7991                           ;fifo.c: 269: void fifo_add_tempo(const char t);fifo.c: 270: {;fifo.c: 271:     if(ind_f
      +                          ila < 18)
  7992  1C18  3012               	movlw	18
  7993  1C19  0267               	subwf	_ind_fila,w
  7994  1C1A  1803               	skipnc
  7995  1C1B  2C1D               	goto	u5501
  7996  1C1C  2C1E               	goto	u5500
  7997  1C1D                     u5501:
  7998  1C1D  2C3F               	goto	l7283
  7999  1C1E                     u5500:
  8000  1C1E                     l7273:
  8001                           
  8002                           ;fifo.c: 272:     {;fifo.c: 273:         if(t)
  8003  1C1E  0834               	movf	fifo_add_tempo@t,w
  8004  1C1F  1903               	btfsc	3,2
  8005  1C20  2C22               	goto	u5511
  8006  1C21  2C23               	goto	u5510
  8007  1C22                     u5511:
  8008  1C22  2C3F               	goto	l7283
  8009  1C23                     u5510:
  8010  1C23                     l7275:
  8011                           
  8012                           ;fifo.c: 274:         {;fifo.c: 275:             codifica('t', &t);
  8013  1C23  3034               	movlw	(low (fifo_add_tempo@t| 0))& (0+255)
  8014  1C24  00A0               	movwf	codifica@dado
  8015  1C25  3000               	movlw	0
  8016  1C26  00A1               	movwf	codifica@dado+1
  8017  1C27  3074               	movlw	116
  8018  1C28  160A  118A  240C  160A  158A  	fcall	_codifica
  8019  1C2D                     l7277:
  8020                           
  8021                           ;fifo.c: 276:             fila[ind_fila] = t;
  8022  1C2D  1283               	bcf	3,5	;RP0=0, select bank0
  8023  1C2E  1303               	bcf	3,6	;RP1=0, select bank0
  8024  1C2F  0834               	movf	fifo_add_tempo@t,w
  8025  1C30  00B3               	movwf	??_fifo_add_tempo
  8026  1C31  0867               	movf	_ind_fila,w
  8027  1C32  3E54               	addlw	(low (_fila| 0))& (0+255)
  8028  1C33  0084               	movwf	4
  8029  1C34  0833               	movf	??_fifo_add_tempo,w
  8030  1C35  1383               	bcf	3,7	;select IRP bank0
  8031  1C36  0080               	movwf	0
  8032  1C37                     l7279:
  8033                           
  8034                           ;fifo.c: 277:             ind_fila++;
  8035  1C37  3001               	movlw	1
  8036  1C38  00B3               	movwf	??_fifo_add_tempo
  8037  1C39  0833               	movf	??_fifo_add_tempo,w
  8038  1C3A  07E7               	addwf	_ind_fila,f
  8039  1C3B                     l7281:
  8040                           
  8041                           ;fifo.c: 278:             fila[ind_fila] = 0;
  8042  1C3B  0867               	movf	_ind_fila,w
  8043  1C3C  3E54               	addlw	(low (_fila| 0))& (0+255)
  8044  1C3D  0084               	movwf	4
  8045  1C3E  0180               	clrf	0
  8046  1C3F                     l7283:
  8047                           
  8048                           ;fifo.c: 281:     fifo_alinharPrint();
  8049  1C3F  160A  118A  22EB  160A  158A  	fcall	_fifo_alinharPrint
  8050  1C44                     l334:
  8051  1C44  0008               	return
  8052  1C45                     __end_of_fifo_add_tempo:
  8053                           
  8054                           	psect	text41
  8055  1AD2                     __ptext41:	
  8056 ;; *************** function _fifo_add_control *****************
  8057 ;; Defined at:
  8058 ;;		line 284 in file "fifo.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  c               1    wreg     const unsigned char 
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;  c               1   20[BANK0 ] const unsigned char 
  8063 ;; Return value:  Size  Location     Type
  8064 ;;                  1    wreg      void 
  8065 ;; Registers used:
  8066 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8072 ;;      Params:         0       0       0       0       0
  8073 ;;      Locals:         0       1       0       0       0
  8074 ;;      Temps:          0       1       0       0       0
  8075 ;;      Totals:         0       2       0       0       0
  8076 ;;Total ram usage:        2 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; Hardware stack levels required when called:    5
  8079 ;; This function calls:
  8080 ;;		_codifica
  8081 ;;		_fifo_alinharPrint
  8082 ;; This function is called by:
  8083 ;;		_main
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           
  8088                           ;psect for function _fifo_add_control
  8089  1AD2                     _fifo_add_control:
  8090                           
  8091                           ;incstack = 0
  8092                           ; Regs used in _fifo_add_control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8093                           ;fifo_add_control@c stored from wreg
  8094  1AD2  1283               	bcf	3,5	;RP0=0, select bank0
  8095  1AD3  1303               	bcf	3,6	;RP1=0, select bank0
  8096  1AD4  00B4               	movwf	fifo_add_control@c
  8097  1AD5                     l7285:
  8098                           
  8099                           ;fifo.c: 284: void fifo_add_control(const char c);fifo.c: 285: {;fifo.c: 286:     if(ind
      +                          _fila < 18)
  8100  1AD5  3012               	movlw	18
  8101  1AD6  0267               	subwf	_ind_fila,w
  8102  1AD7  1803               	skipnc
  8103  1AD8  2ADA               	goto	u5521
  8104  1AD9  2ADB               	goto	u5520
  8105  1ADA                     u5521:
  8106  1ADA  2AF7               	goto	l7295
  8107  1ADB                     u5520:
  8108  1ADB                     l7287:
  8109                           
  8110                           ;fifo.c: 287:     {;fifo.c: 290:             codifica('p', &c);
  8111  1ADB  3034               	movlw	(low (fifo_add_control@c| 0))& (0+255)
  8112  1ADC  00A0               	movwf	codifica@dado
  8113  1ADD  3000               	movlw	0
  8114  1ADE  00A1               	movwf	codifica@dado+1
  8115  1ADF  3070               	movlw	112
  8116  1AE0  160A  118A  240C  160A  158A  	fcall	_codifica
  8117  1AE5                     l7289:
  8118                           
  8119                           ;fifo.c: 291:             fila[ind_fila] = c;
  8120  1AE5  1283               	bcf	3,5	;RP0=0, select bank0
  8121  1AE6  1303               	bcf	3,6	;RP1=0, select bank0
  8122  1AE7  0834               	movf	fifo_add_control@c,w
  8123  1AE8  00B3               	movwf	??_fifo_add_control
  8124  1AE9  0867               	movf	_ind_fila,w
  8125  1AEA  3E54               	addlw	(low (_fila| 0))& (0+255)
  8126  1AEB  0084               	movwf	4
  8127  1AEC  0833               	movf	??_fifo_add_control,w
  8128  1AED  1383               	bcf	3,7	;select IRP bank0
  8129  1AEE  0080               	movwf	0
  8130  1AEF                     l7291:
  8131                           
  8132                           ;fifo.c: 292:             ind_fila++;
  8133  1AEF  3001               	movlw	1
  8134  1AF0  00B3               	movwf	??_fifo_add_control
  8135  1AF1  0833               	movf	??_fifo_add_control,w
  8136  1AF2  07E7               	addwf	_ind_fila,f
  8137  1AF3                     l7293:
  8138                           
  8139                           ;fifo.c: 293:             fila[ind_fila] = 0;
  8140  1AF3  0867               	movf	_ind_fila,w
  8141  1AF4  3E54               	addlw	(low (_fila| 0))& (0+255)
  8142  1AF5  0084               	movwf	4
  8143  1AF6  0180               	clrf	0
  8144  1AF7                     l7295:
  8145                           
  8146                           ;fifo.c: 296:     fifo_alinharPrint();
  8147  1AF7  160A  118A  22EB  160A  158A  	fcall	_fifo_alinharPrint
  8148  1AFC                     l338:
  8149  1AFC  0008               	return
  8150  1AFD                     __end_of_fifo_add_control:
  8151                           
  8152                           	psect	text42
  8153  1888                     __ptext42:	
  8154 ;; *************** function _fifo_add_ciclo *****************
  8155 ;; Defined at:
  8156 ;;		line 299 in file "fifo.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  ciclos          2    0[BANK0 ] unsigned int 
  8159 ;; Auto vars:     Size  Location     Type
  8160 ;;		None
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  1    wreg      void 
  8163 ;; Registers used:
  8164 ;;		wreg, status,2
  8165 ;; Tracked objects:
  8166 ;;		On entry : 0/0
  8167 ;;		On exit  : 0/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8170 ;;      Params:         0       2       0       0       0
  8171 ;;      Locals:         0       0       0       0       0
  8172 ;;      Temps:          0       1       0       0       0
  8173 ;;      Totals:         0       3       0       0       0
  8174 ;;Total ram usage:        3 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:    2
  8177 ;; This function calls:
  8178 ;;		Nothing
  8179 ;; This function is called by:
  8180 ;;		_main
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           
  8185                           ;psect for function _fifo_add_ciclo
  8186  1888                     _fifo_add_ciclo:
  8187  1888                     l7297:	
  8188                           ;incstack = 0
  8189                           ; Regs used in _fifo_add_ciclo: [wreg+status,2]
  8190                           
  8191                           
  8192                           ;fifo.c: 299: void fifo_add_ciclo(unsigned int ciclos);fifo.c: 300: {;fifo.c: 301:     f
      +                          ila[0] = ciclos & 0x00ff;
  8193  1888  1283               	bcf	3,5	;RP0=0, select bank0
  8194  1889  1303               	bcf	3,6	;RP1=0, select bank0
  8195  188A  0820               	movf	fifo_add_ciclo@ciclos,w
  8196  188B  00A2               	movwf	??_fifo_add_ciclo
  8197  188C  0822               	movf	??_fifo_add_ciclo,w
  8198  188D  00D4               	movwf	_fila
  8199  188E                     l7299:
  8200                           
  8201                           ;fifo.c: 302:     fila[1] = ciclos >> 8;
  8202  188E  0821               	movf	fifo_add_ciclo@ciclos+1,w
  8203  188F  00A2               	movwf	??_fifo_add_ciclo
  8204  1890  0822               	movf	??_fifo_add_ciclo,w
  8205  1891  00D5               	movwf	_fila+1
  8206  1892                     l341:
  8207  1892  0008               	return
  8208  1893                     __end_of_fifo_add_ciclo:
  8209                           
  8210                           	psect	text43
  8211  1BE5                     __ptext43:	
  8212 ;; *************** function _fifo_add *****************
  8213 ;; Defined at:
  8214 ;;		line 254 in file "fifo.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;  passo           1    wreg     const unsigned char 
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;  passo           1   20[BANK0 ] const unsigned char 
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      void 
  8221 ;; Registers used:
  8222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8228 ;;      Params:         0       0       0       0       0
  8229 ;;      Locals:         0       1       0       0       0
  8230 ;;      Temps:          0       1       0       0       0
  8231 ;;      Totals:         0       2       0       0       0
  8232 ;;Total ram usage:        2 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    5
  8235 ;; This function calls:
  8236 ;;		_codifica
  8237 ;;		_fifo_alinharPrint
  8238 ;; This function is called by:
  8239 ;;		_main
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           
  8244                           ;psect for function _fifo_add
  8245  1BE5                     _fifo_add:
  8246                           
  8247                           ;incstack = 0
  8248                           ; Regs used in _fifo_add: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8249                           ;fifo_add@passo stored from wreg
  8250  1BE5  1283               	bcf	3,5	;RP0=0, select bank0
  8251  1BE6  1303               	bcf	3,6	;RP1=0, select bank0
  8252  1BE7  00B4               	movwf	fifo_add@passo
  8253  1BE8                     l7257:
  8254                           
  8255                           ;fifo.c: 254: void fifo_add(const char passo);fifo.c: 255: {;fifo.c: 256:     if(ind_fil
      +                          a < 18)
  8256  1BE8  3012               	movlw	18
  8257  1BE9  0267               	subwf	_ind_fila,w
  8258  1BEA  1803               	skipnc
  8259  1BEB  2BED               	goto	u5481
  8260  1BEC  2BEE               	goto	u5480
  8261  1BED                     u5481:
  8262  1BED  2C0F               	goto	l7269
  8263  1BEE                     u5480:
  8264  1BEE                     l7259:
  8265                           
  8266                           ;fifo.c: 257:     {;fifo.c: 258:         if(passo)
  8267  1BEE  0834               	movf	fifo_add@passo,w
  8268  1BEF  1903               	btfsc	3,2
  8269  1BF0  2BF2               	goto	u5491
  8270  1BF1  2BF3               	goto	u5490
  8271  1BF2                     u5491:
  8272  1BF2  2C0F               	goto	l7269
  8273  1BF3                     u5490:
  8274  1BF3                     l7261:
  8275                           
  8276                           ;fifo.c: 259:         {;fifo.c: 260:             codifica('a', &passo);
  8277  1BF3  3034               	movlw	(low (fifo_add@passo| 0))& (0+255)
  8278  1BF4  00A0               	movwf	codifica@dado
  8279  1BF5  3000               	movlw	0
  8280  1BF6  00A1               	movwf	codifica@dado+1
  8281  1BF7  3061               	movlw	97
  8282  1BF8  160A  118A  240C  160A  158A  	fcall	_codifica
  8283  1BFD                     l7263:
  8284                           
  8285                           ;fifo.c: 261:             fila[ind_fila] = passo;
  8286  1BFD  1283               	bcf	3,5	;RP0=0, select bank0
  8287  1BFE  1303               	bcf	3,6	;RP1=0, select bank0
  8288  1BFF  0834               	movf	fifo_add@passo,w
  8289  1C00  00B3               	movwf	??_fifo_add
  8290  1C01  0867               	movf	_ind_fila,w
  8291  1C02  3E54               	addlw	(low (_fila| 0))& (0+255)
  8292  1C03  0084               	movwf	4
  8293  1C04  0833               	movf	??_fifo_add,w
  8294  1C05  1383               	bcf	3,7	;select IRP bank0
  8295  1C06  0080               	movwf	0
  8296  1C07                     l7265:
  8297                           
  8298                           ;fifo.c: 262:             ind_fila++;
  8299  1C07  3001               	movlw	1
  8300  1C08  00B3               	movwf	??_fifo_add
  8301  1C09  0833               	movf	??_fifo_add,w
  8302  1C0A  07E7               	addwf	_ind_fila,f
  8303  1C0B                     l7267:
  8304                           
  8305                           ;fifo.c: 263:             fila[ind_fila] = 0;
  8306  1C0B  0867               	movf	_ind_fila,w
  8307  1C0C  3E54               	addlw	(low (_fila| 0))& (0+255)
  8308  1C0D  0084               	movwf	4
  8309  1C0E  0180               	clrf	0
  8310  1C0F                     l7269:
  8311                           
  8312                           ;fifo.c: 266:      fifo_alinharPrint();
  8313  1C0F  160A  118A  22EB  160A  158A  	fcall	_fifo_alinharPrint
  8314  1C14                     l329:
  8315  1C14  0008               	return
  8316  1C15                     __end_of_fifo_add:
  8317                           
  8318                           	psect	text44
  8319  12EB                     __ptext44:	
  8320 ;; *************** function _fifo_alinharPrint *****************
  8321 ;; Defined at:
  8322 ;;		line 482 in file "fifo.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;		None
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;  aux             1   18[BANK0 ] unsigned char 
  8327 ;;  i               1   17[BANK0 ] unsigned char 
  8328 ;;  cont            1   16[BANK0 ] unsigned char 
  8329 ;; Return value:  Size  Location     Type
  8330 ;;                  1    wreg      void 
  8331 ;; Registers used:
  8332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8338 ;;      Params:         0       0       0       0       0
  8339 ;;      Locals:         0       3       0       0       0
  8340 ;;      Temps:          0       3       0       0       0
  8341 ;;      Totals:         0       6       0       0       0
  8342 ;;Total ram usage:        6 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    4
  8345 ;; This function calls:
  8346 ;;		_dignum_tam
  8347 ;; This function is called by:
  8348 ;;		_fifo_delete
  8349 ;;		_fifo_add
  8350 ;;		_fifo_add_tempo
  8351 ;;		_fifo_add_control
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _fifo_alinharPrint
  8357  12EB                     _fifo_alinharPrint:
  8358  12EB                     l6869:	
  8359                           ;incstack = 0
  8360                           ; Regs used in _fifo_alinharPrint: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8361                           
  8362                           
  8363                           ;fifo.c: 484:     unsigned char i;;fifo.c: 485:     unsigned char aux;;fifo.c: 486:     
      +                          unsigned char cont = 0;
  8364  12EB  1283               	bcf	3,5	;RP0=0, select bank0
  8365  12EC  1303               	bcf	3,6	;RP1=0, select bank0
  8366  12ED  01B0               	clrf	fifo_alinharPrint@cont
  8367  12EE                     l6871:
  8368                           
  8369                           ;fifo.c: 488:     for( i=ind_fila-1; i>=2; i-- )
  8370  12EE  0867               	movf	_ind_fila,w
  8371  12EF  3EFF               	addlw	255
  8372  12F0  00AD               	movwf	??_fifo_alinharPrint
  8373  12F1  082D               	movf	??_fifo_alinharPrint,w
  8374  12F2  00B1               	movwf	fifo_alinharPrint@i
  8375  12F3                     l6873:
  8376  12F3  3002               	movlw	2
  8377  12F4  0231               	subwf	fifo_alinharPrint@i,w
  8378  12F5  1803               	skipnc
  8379  12F6  2AF8               	goto	u5051
  8380  12F7  2AF9               	goto	u5050
  8381  12F8                     u5051:
  8382  12F8  2AFA               	goto	l6877
  8383  12F9                     u5050:
  8384  12F9  2B6E               	goto	l420
  8385  12FA                     l6877:
  8386                           
  8387                           ;fifo.c: 489:     {;fifo.c: 490:         aux = fila[i];
  8388  12FA  0831               	movf	fifo_alinharPrint@i,w
  8389  12FB  3E54               	addlw	(low (_fila| 0))& (0+255)
  8390  12FC  0084               	movwf	4
  8391  12FD  1383               	bcf	3,7	;select IRP bank0
  8392  12FE  0800               	movf	0,w
  8393  12FF  00AD               	movwf	??_fifo_alinharPrint
  8394  1300  082D               	movf	??_fifo_alinharPrint,w
  8395  1301  00B2               	movwf	fifo_alinharPrint@aux
  8396  1302                     l6879:
  8397                           
  8398                           ;fifo.c: 491:         if( aux <= 0x64 )
  8399  1302  3065               	movlw	101
  8400  1303  0232               	subwf	fifo_alinharPrint@aux,w
  8401  1304  1803               	skipnc
  8402  1305  2B07               	goto	u5061
  8403  1306  2B08               	goto	u5060
  8404  1307                     u5061:
  8405  1307  2B1A               	goto	l6883
  8406  1308                     u5060:
  8407  1308                     l6881:
  8408                           
  8409                           ;fifo.c: 492:             cont += dignum_tam( aux )+1;
  8410  1308  0832               	movf	fifo_alinharPrint@aux,w
  8411  1309  00AD               	movwf	??_fifo_alinharPrint
  8412  130A  01AE               	clrf	??_fifo_alinharPrint+1
  8413  130B  082D               	movf	??_fifo_alinharPrint,w
  8414  130C  00A9               	movwf	dignum_tam@num
  8415  130D  082E               	movf	??_fifo_alinharPrint+1,w
  8416  130E  00AA               	movwf	dignum_tam@num+1
  8417  130F  160A  158A  2213  160A  118A  	fcall	_dignum_tam
  8418  1314  3E01               	addlw	1
  8419  1315  1283               	bcf	3,5	;RP0=0, select bank0
  8420  1316  1303               	bcf	3,6	;RP1=0, select bank0
  8421  1317  00AF               	movwf	??_fifo_alinharPrint+2
  8422  1318  082F               	movf	??_fifo_alinharPrint+2,w
  8423  1319  07B0               	addwf	fifo_alinharPrint@cont,f
  8424  131A                     l6883:
  8425                           
  8426                           ;fifo.c: 494:         if( aux > 0x64 && aux <= 0xDC )
  8427  131A  3065               	movlw	101
  8428  131B  0232               	subwf	fifo_alinharPrint@aux,w
  8429  131C  1C03               	skipc
  8430  131D  2B1F               	goto	u5071
  8431  131E  2B20               	goto	u5070
  8432  131F                     u5071:
  8433  131F  2B38               	goto	l6889
  8434  1320                     u5070:
  8435  1320                     l6885:
  8436  1320  30DD               	movlw	221
  8437  1321  0232               	subwf	fifo_alinharPrint@aux,w
  8438  1322  1803               	skipnc
  8439  1323  2B25               	goto	u5081
  8440  1324  2B26               	goto	u5080
  8441  1325                     u5081:
  8442  1325  2B38               	goto	l6889
  8443  1326                     u5080:
  8444  1326                     l6887:
  8445                           
  8446                           ;fifo.c: 495:             cont += dignum_tam( aux - 0x64 )+1;
  8447  1326  0832               	movf	fifo_alinharPrint@aux,w
  8448  1327  3E9C               	addlw	156
  8449  1328  00A9               	movwf	dignum_tam@num
  8450  1329  30FF               	movlw	255
  8451  132A  1803               	skipnc
  8452  132B  3000               	movlw	0
  8453  132C  00AA               	movwf	dignum_tam@num+1
  8454  132D  160A  158A  2213  160A  118A  	fcall	_dignum_tam
  8455  1332  3E01               	addlw	1
  8456  1333  1283               	bcf	3,5	;RP0=0, select bank0
  8457  1334  1303               	bcf	3,6	;RP1=0, select bank0
  8458  1335  00AD               	movwf	??_fifo_alinharPrint
  8459  1336  082D               	movf	??_fifo_alinharPrint,w
  8460  1337  07B0               	addwf	fifo_alinharPrint@cont,f
  8461  1338                     l6889:
  8462                           
  8463                           ;fifo.c: 497:         if( aux > 0xDC && aux < 0xFE )
  8464  1338  30DD               	movlw	221
  8465  1339  0232               	subwf	fifo_alinharPrint@aux,w
  8466  133A  1C03               	skipc
  8467  133B  2B3D               	goto	u5091
  8468  133C  2B3E               	goto	u5090
  8469  133D                     u5091:
  8470  133D  2B48               	goto	l416
  8471  133E                     u5090:
  8472  133E                     l6891:
  8473  133E  30FE               	movlw	254
  8474  133F  0232               	subwf	fifo_alinharPrint@aux,w
  8475  1340  1803               	skipnc
  8476  1341  2B43               	goto	u5101
  8477  1342  2B44               	goto	u5100
  8478  1343                     u5101:
  8479  1343  2B48               	goto	l416
  8480  1344                     u5100:
  8481  1344                     l6893:
  8482                           
  8483                           ;fifo.c: 498:             cont += 2;
  8484  1344  3002               	movlw	2
  8485  1345  00AD               	movwf	??_fifo_alinharPrint
  8486  1346  082D               	movf	??_fifo_alinharPrint,w
  8487  1347  07B0               	addwf	fifo_alinharPrint@cont,f
  8488  1348                     l416:
  8489                           
  8490                           ;fifo.c: 500:         if( aux == 0xFE )
  8491  1348  30FE               	movlw	254
  8492  1349  0632               	xorwf	fifo_alinharPrint@aux,w
  8493  134A  1D03               	btfss	3,2
  8494  134B  2B4D               	goto	u5111
  8495  134C  2B4E               	goto	u5110
  8496  134D                     u5111:
  8497  134D  2B60               	goto	l6897
  8498  134E                     u5110:
  8499  134E                     l6895:
  8500                           
  8501                           ;fifo.c: 501:             cont += dignum_tam( aux )+1;
  8502  134E  0832               	movf	fifo_alinharPrint@aux,w
  8503  134F  00AD               	movwf	??_fifo_alinharPrint
  8504  1350  01AE               	clrf	??_fifo_alinharPrint+1
  8505  1351  082D               	movf	??_fifo_alinharPrint,w
  8506  1352  00A9               	movwf	dignum_tam@num
  8507  1353  082E               	movf	??_fifo_alinharPrint+1,w
  8508  1354  00AA               	movwf	dignum_tam@num+1
  8509  1355  160A  158A  2213  160A  118A  	fcall	_dignum_tam
  8510  135A  3E01               	addlw	1
  8511  135B  1283               	bcf	3,5	;RP0=0, select bank0
  8512  135C  1303               	bcf	3,6	;RP1=0, select bank0
  8513  135D  00AF               	movwf	??_fifo_alinharPrint+2
  8514  135E  082F               	movf	??_fifo_alinharPrint+2,w
  8515  135F  07B0               	addwf	fifo_alinharPrint@cont,f
  8516  1360                     l6897:
  8517                           
  8518                           ;fifo.c: 503:         if( cont > 20 )
  8519  1360  3015               	movlw	21
  8520  1361  0230               	subwf	fifo_alinharPrint@cont,w
  8521  1362  1C03               	skipc
  8522  1363  2B65               	goto	u5121
  8523  1364  2B66               	goto	u5120
  8524  1365                     u5121:
  8525  1365  2B67               	goto	l6903
  8526  1366                     u5120:
  8527  1366  2B6E               	goto	l420
  8528  1367                     l6903:
  8529                           
  8530                           ;fifo.c: 508:             ind_print = i;
  8531  1367  0831               	movf	fifo_alinharPrint@i,w
  8532  1368  00AD               	movwf	??_fifo_alinharPrint
  8533  1369  082D               	movf	??_fifo_alinharPrint,w
  8534  136A  00E6               	movwf	_ind_print
  8535  136B                     l6905:
  8536                           
  8537                           ;fifo.c: 509:     }
  8538  136B  3001               	movlw	1
  8539  136C  02B1               	subwf	fifo_alinharPrint@i,f
  8540  136D  2AF3               	goto	l6873
  8541  136E                     l420:
  8542  136E  0008               	return
  8543  136F                     __end_of_fifo_alinharPrint:
  8544                           
  8545                           	psect	text45
  8546  1A13                     __ptext45:	
  8547 ;; *************** function _dignum_tam *****************
  8548 ;; Defined at:
  8549 ;;		line 470 in file "fifo.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;  num             2    9[BANK0 ] int 
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;  tam             1   12[BANK0 ] unsigned char 
  8554 ;; Return value:  Size  Location     Type
  8555 ;;                  1    wreg      unsigned char 
  8556 ;; Registers used:
  8557 ;;		wreg, status,2, status,0, pclath, cstack
  8558 ;; Tracked objects:
  8559 ;;		On entry : 0/0
  8560 ;;		On exit  : 0/0
  8561 ;;		Unchanged: 0/0
  8562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8563 ;;      Params:         0       2       0       0       0
  8564 ;;      Locals:         0       1       0       0       0
  8565 ;;      Temps:          0       1       0       0       0
  8566 ;;      Totals:         0       4       0       0       0
  8567 ;;Total ram usage:        4 bytes
  8568 ;; Hardware stack levels used:    1
  8569 ;; Hardware stack levels required when called:    3
  8570 ;; This function calls:
  8571 ;;		___awdiv
  8572 ;; This function is called by:
  8573 ;;		_fifo_alinharPrint
  8574 ;;		_printExec
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           
  8579                           ;psect for function _dignum_tam
  8580  1A13                     _dignum_tam:
  8581  1A13                     l6633:	
  8582                           ;incstack = 0
  8583                           ; Regs used in _dignum_tam: [wreg+status,2+status,0+pclath+cstack]
  8584                           
  8585                           
  8586                           ;fifo.c: 470: unsigned char dignum_tam(int num);fifo.c: 471: {;fifo.c: 472:     unsigned
      +                           char tam = 0;
  8587  1A13  1283               	bcf	3,5	;RP0=0, select bank0
  8588  1A14  1303               	bcf	3,6	;RP1=0, select bank0
  8589  1A15  01AC               	clrf	dignum_tam@tam
  8590                           
  8591                           ;fifo.c: 474:     while(num != 0)
  8592  1A16  2A2E               	goto	l6639
  8593  1A17                     l6635:
  8594                           
  8595                           ;fifo.c: 475:     {;fifo.c: 476:         num /= 10;
  8596  1A17  300A               	movlw	10
  8597  1A18  00A0               	movwf	___awdiv@divisor
  8598  1A19  3000               	movlw	0
  8599  1A1A  00A1               	movwf	___awdiv@divisor+1
  8600  1A1B  082A               	movf	dignum_tam@num+1,w
  8601  1A1C  00A3               	movwf	___awdiv@dividend+1
  8602  1A1D  0829               	movf	dignum_tam@num,w
  8603  1A1E  00A2               	movwf	___awdiv@dividend
  8604  1A1F  160A  118A  2185  160A  158A  	fcall	___awdiv
  8605  1A24  1283               	bcf	3,5	;RP0=0, select bank0
  8606  1A25  1303               	bcf	3,6	;RP1=0, select bank0
  8607  1A26  0821               	movf	?___awdiv+1,w
  8608  1A27  00AA               	movwf	dignum_tam@num+1
  8609  1A28  0820               	movf	?___awdiv,w
  8610  1A29  00A9               	movwf	dignum_tam@num
  8611  1A2A                     l6637:
  8612                           
  8613                           ;fifo.c: 477:         tam++;
  8614  1A2A  3001               	movlw	1
  8615  1A2B  00AB               	movwf	??_dignum_tam
  8616  1A2C  082B               	movf	??_dignum_tam,w
  8617  1A2D  07AC               	addwf	dignum_tam@tam,f
  8618  1A2E                     l6639:
  8619                           
  8620                           ;fifo.c: 474:     while(num != 0)
  8621  1A2E  0829               	movf	dignum_tam@num,w
  8622  1A2F  042A               	iorwf	dignum_tam@num+1,w
  8623  1A30  1D03               	btfss	3,2
  8624  1A31  2A33               	goto	u4711
  8625  1A32  2A34               	goto	u4710
  8626  1A33                     u4711:
  8627  1A33  2A17               	goto	l6635
  8628  1A34                     u4710:
  8629  1A34                     l6641:
  8630                           
  8631                           ;fifo.c: 479:     return ( tam );
  8632  1A34  082C               	movf	dignum_tam@tam,w
  8633  1A35                     l409:
  8634  1A35  0008               	return
  8635  1A36                     __end_of_dignum_tam:
  8636                           
  8637                           	psect	text46
  8638  1185                     __ptext46:	
  8639 ;; *************** function ___awdiv *****************
  8640 ;; Defined at:
  8641 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\awdiv.c"
  8642 ;; Parameters:    Size  Location     Type
  8643 ;;  divisor         2    0[BANK0 ] int 
  8644 ;;  dividend        2    2[BANK0 ] int 
  8645 ;; Auto vars:     Size  Location     Type
  8646 ;;  quotient        2    7[BANK0 ] int 
  8647 ;;  sign            1    6[BANK0 ] unsigned char 
  8648 ;;  counter         1    5[BANK0 ] unsigned char 
  8649 ;; Return value:  Size  Location     Type
  8650 ;;                  2    0[BANK0 ] int 
  8651 ;; Registers used:
  8652 ;;		wreg, status,2, status,0
  8653 ;; Tracked objects:
  8654 ;;		On entry : 0/0
  8655 ;;		On exit  : 0/0
  8656 ;;		Unchanged: 0/0
  8657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8658 ;;      Params:         0       4       0       0       0
  8659 ;;      Locals:         0       4       0       0       0
  8660 ;;      Temps:          0       1       0       0       0
  8661 ;;      Totals:         0       9       0       0       0
  8662 ;;Total ram usage:        9 bytes
  8663 ;; Hardware stack levels used:    1
  8664 ;; Hardware stack levels required when called:    2
  8665 ;; This function calls:
  8666 ;;		Nothing
  8667 ;; This function is called by:
  8668 ;;		_dispLCD_num
  8669 ;;		_fifo_print
  8670 ;;		_dignum_tam
  8671 ;; This function uses a non-reentrant model
  8672 ;;
  8673                           
  8674                           
  8675                           ;psect for function ___awdiv
  8676  1185                     ___awdiv:
  8677  1185                     l6539:	
  8678                           ;incstack = 0
  8679                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8680                           
  8681  1185  1283               	bcf	3,5	;RP0=0, select bank0
  8682  1186  1303               	bcf	3,6	;RP1=0, select bank0
  8683  1187  01A6               	clrf	___awdiv@sign
  8684  1188                     l6541:
  8685  1188  1FA1               	btfss	___awdiv@divisor+1,7
  8686  1189  298B               	goto	u4591
  8687  118A  298C               	goto	u4590
  8688  118B                     u4591:
  8689  118B  2993               	goto	l6547
  8690  118C                     u4590:
  8691  118C                     l6543:
  8692  118C  09A0               	comf	___awdiv@divisor,f
  8693  118D  09A1               	comf	___awdiv@divisor+1,f
  8694  118E  0AA0               	incf	___awdiv@divisor,f
  8695  118F  1903               	skipnz
  8696  1190  0AA1               	incf	___awdiv@divisor+1,f
  8697  1191                     l6545:
  8698  1191  01A6               	clrf	___awdiv@sign
  8699  1192  0AA6               	incf	___awdiv@sign,f
  8700  1193                     l6547:
  8701  1193  1FA3               	btfss	___awdiv@dividend+1,7
  8702  1194  2996               	goto	u4601
  8703  1195  2997               	goto	u4600
  8704  1196                     u4601:
  8705  1196  29A0               	goto	l6553
  8706  1197                     u4600:
  8707  1197                     l6549:
  8708  1197  09A2               	comf	___awdiv@dividend,f
  8709  1198  09A3               	comf	___awdiv@dividend+1,f
  8710  1199  0AA2               	incf	___awdiv@dividend,f
  8711  119A  1903               	skipnz
  8712  119B  0AA3               	incf	___awdiv@dividend+1,f
  8713  119C                     l6551:
  8714  119C  3001               	movlw	1
  8715  119D  00A4               	movwf	??___awdiv
  8716  119E  0824               	movf	??___awdiv,w
  8717  119F  06A6               	xorwf	___awdiv@sign,f
  8718  11A0                     l6553:
  8719  11A0  01A7               	clrf	___awdiv@quotient
  8720  11A1  01A8               	clrf	___awdiv@quotient+1
  8721  11A2                     l6555:
  8722  11A2  0820               	movf	___awdiv@divisor,w
  8723  11A3  0421               	iorwf	___awdiv@divisor+1,w
  8724  11A4  1903               	btfsc	3,2
  8725  11A5  29A7               	goto	u4611
  8726  11A6  29A8               	goto	u4610
  8727  11A7                     u4611:
  8728  11A7  29DF               	goto	l6575
  8729  11A8                     u4610:
  8730  11A8                     l6557:
  8731  11A8  01A5               	clrf	___awdiv@counter
  8732  11A9  0AA5               	incf	___awdiv@counter,f
  8733  11AA  29B6               	goto	l6563
  8734  11AB                     l6559:
  8735  11AB  3001               	movlw	1
  8736  11AC                     u4625:
  8737  11AC  1003               	clrc
  8738  11AD  0DA0               	rlf	___awdiv@divisor,f
  8739  11AE  0DA1               	rlf	___awdiv@divisor+1,f
  8740  11AF  3EFF               	addlw	-1
  8741  11B0  1D03               	skipz
  8742  11B1  29AC               	goto	u4625
  8743  11B2                     l6561:
  8744  11B2  3001               	movlw	1
  8745  11B3  00A4               	movwf	??___awdiv
  8746  11B4  0824               	movf	??___awdiv,w
  8747  11B5  07A5               	addwf	___awdiv@counter,f
  8748  11B6                     l6563:
  8749  11B6  1FA1               	btfss	___awdiv@divisor+1,7
  8750  11B7  29B9               	goto	u4631
  8751  11B8  29BA               	goto	u4630
  8752  11B9                     u4631:
  8753  11B9  29AB               	goto	l6559
  8754  11BA                     u4630:
  8755  11BA                     l6565:
  8756  11BA  3001               	movlw	1
  8757  11BB                     u4645:
  8758  11BB  1003               	clrc
  8759  11BC  0DA7               	rlf	___awdiv@quotient,f
  8760  11BD  0DA8               	rlf	___awdiv@quotient+1,f
  8761  11BE  3EFF               	addlw	-1
  8762  11BF  1D03               	skipz
  8763  11C0  29BB               	goto	u4645
  8764  11C1  0821               	movf	___awdiv@divisor+1,w
  8765  11C2  0223               	subwf	___awdiv@dividend+1,w
  8766  11C3  1D03               	skipz
  8767  11C4  29C7               	goto	u4655
  8768  11C5  0820               	movf	___awdiv@divisor,w
  8769  11C6  0222               	subwf	___awdiv@dividend,w
  8770  11C7                     u4655:
  8771  11C7  1C03               	skipc
  8772  11C8  29CA               	goto	u4651
  8773  11C9  29CB               	goto	u4650
  8774  11CA                     u4651:
  8775  11CA  29D2               	goto	l6571
  8776  11CB                     u4650:
  8777  11CB                     l6567:
  8778  11CB  0820               	movf	___awdiv@divisor,w
  8779  11CC  02A2               	subwf	___awdiv@dividend,f
  8780  11CD  0821               	movf	___awdiv@divisor+1,w
  8781  11CE  1C03               	skipc
  8782  11CF  03A3               	decf	___awdiv@dividend+1,f
  8783  11D0  02A3               	subwf	___awdiv@dividend+1,f
  8784  11D1                     l6569:
  8785  11D1  1427               	bsf	___awdiv@quotient,0
  8786  11D2                     l6571:
  8787  11D2  3001               	movlw	1
  8788  11D3                     u4665:
  8789  11D3  1003               	clrc
  8790  11D4  0CA1               	rrf	___awdiv@divisor+1,f
  8791  11D5  0CA0               	rrf	___awdiv@divisor,f
  8792  11D6  3EFF               	addlw	-1
  8793  11D7  1D03               	skipz
  8794  11D8  29D3               	goto	u4665
  8795  11D9                     l6573:
  8796  11D9  3001               	movlw	1
  8797  11DA  02A5               	subwf	___awdiv@counter,f
  8798  11DB  1D03               	btfss	3,2
  8799  11DC  29DE               	goto	u4671
  8800  11DD  29DF               	goto	u4670
  8801  11DE                     u4671:
  8802  11DE  29BA               	goto	l6565
  8803  11DF                     u4670:
  8804  11DF                     l6575:
  8805  11DF  0826               	movf	___awdiv@sign,w
  8806  11E0  1903               	btfsc	3,2
  8807  11E1  29E3               	goto	u4681
  8808  11E2  29E4               	goto	u4680
  8809  11E3                     u4681:
  8810  11E3  29E9               	goto	l6579
  8811  11E4                     u4680:
  8812  11E4                     l6577:
  8813  11E4  09A7               	comf	___awdiv@quotient,f
  8814  11E5  09A8               	comf	___awdiv@quotient+1,f
  8815  11E6  0AA7               	incf	___awdiv@quotient,f
  8816  11E7  1903               	skipnz
  8817  11E8  0AA8               	incf	___awdiv@quotient+1,f
  8818  11E9                     l6579:
  8819  11E9  0828               	movf	___awdiv@quotient+1,w
  8820  11EA  00A1               	movwf	?___awdiv+1
  8821  11EB  0827               	movf	___awdiv@quotient,w
  8822  11EC  00A0               	movwf	?___awdiv
  8823  11ED                     l1194:
  8824  11ED  0008               	return
  8825  11EE                     __end_of___awdiv:
  8826                           
  8827                           	psect	text47
  8828  140C                     __ptext47:	
  8829 ;; *************** function _codifica *****************
  8830 ;; Defined at:
  8831 ;;		line 200 in file "fifo.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;  tipo            1    wreg     unsigned char 
  8834 ;;  dado            2    0[BANK0 ] PTR unsigned char 
  8835 ;;		 -> fifo_add_control@c(1), fifo_add_tempo@t(1), fifo_add@passo(1), RAM(512), 
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;  tipo            1    4[BANK0 ] unsigned char 
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  1    wreg      void 
  8840 ;; Registers used:
  8841 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8847 ;;      Params:         0       2       0       0       0
  8848 ;;      Locals:         0       1       0       0       0
  8849 ;;      Temps:          0       2       0       0       0
  8850 ;;      Totals:         0       5       0       0       0
  8851 ;;Total ram usage:        5 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    2
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_fifo_delete
  8858 ;;		_fifo_add
  8859 ;;		_fifo_add_tempo
  8860 ;;		_fifo_add_control
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           
  8865                           ;psect for function _codifica
  8866  140C                     _codifica:
  8867                           
  8868                           ;incstack = 0
  8869                           ; Regs used in _codifica: [wreg-fsr0h+status,2+status,0]
  8870                           ;codifica@tipo stored from wreg
  8871  140C  1283               	bcf	3,5	;RP0=0, select bank0
  8872  140D  1303               	bcf	3,6	;RP1=0, select bank0
  8873  140E  00A4               	movwf	codifica@tipo
  8874  140F                     l6825:
  8875                           
  8876                           ;fifo.c: 200: void codifica( unsigned char tipo, unsigned char *dado );fifo.c: 201: {;fi
      +                          fo.c: 202:     switch( tipo )
  8877  140F  2CA5               	goto	l6855
  8878  1410                     l6827:
  8879  1410  0820               	movf	codifica@dado,w
  8880  1411  0084               	movwf	4
  8881  1412  1783               	bsf	3,7
  8882  1413  1C21               	btfss	codifica@dado+1,0
  8883  1414  1383               	bcf	3,7
  8884  1415  0800               	movf	0,w
  8885  1416  1D03               	btfss	3,2
  8886  1417  2C19               	goto	u5041
  8887  1418  2C1A               	goto	u5040
  8888  1419                     u5041:
  8889  1419  2CB8               	goto	l306
  8890  141A                     u5040:
  8891  141A                     l6829:
  8892                           
  8893                           ;fifo.c: 205:                        *dado = 254;
  8894  141A  30FE               	movlw	254
  8895  141B  00A2               	movwf	??_codifica
  8896  141C  0820               	movf	codifica@dado,w
  8897  141D  0084               	movwf	4
  8898  141E  1783               	bsf	3,7
  8899  141F  1C21               	btfss	codifica@dado+1,0
  8900  1420  1383               	bcf	3,7
  8901  1421  0822               	movf	??_codifica,w
  8902  1422  0080               	movwf	0
  8903  1423  2CB8               	goto	l306
  8904  1424                     l6831:
  8905  1424  3064               	movlw	100
  8906  1425  00A2               	movwf	??_codifica
  8907  1426  0820               	movf	codifica@dado,w
  8908  1427  0084               	movwf	4
  8909  1428  1783               	bsf	3,7
  8910  1429  1C21               	btfss	codifica@dado+1,0
  8911  142A  1383               	bcf	3,7
  8912  142B  0822               	movf	??_codifica,w
  8913  142C  0780               	addwf	0,f
  8914  142D  2CB8               	goto	l306
  8915  142E                     l6833:
  8916  142E  30DD               	movlw	221
  8917  142F  00A2               	movwf	??_codifica
  8918  1430  0820               	movf	codifica@dado,w
  8919  1431  0084               	movwf	4
  8920  1432  1783               	bsf	3,7
  8921  1433  1C21               	btfss	codifica@dado+1,0
  8922  1434  1383               	bcf	3,7
  8923  1435  0822               	movf	??_codifica,w
  8924  1436  0080               	movwf	0
  8925  1437  2CB8               	goto	l306
  8926  1438                     l6835:
  8927  1438  30DE               	movlw	222
  8928  1439  00A2               	movwf	??_codifica
  8929  143A  0820               	movf	codifica@dado,w
  8930  143B  0084               	movwf	4
  8931  143C  1783               	bsf	3,7
  8932  143D  1C21               	btfss	codifica@dado+1,0
  8933  143E  1383               	bcf	3,7
  8934  143F  0822               	movf	??_codifica,w
  8935  1440  0080               	movwf	0
  8936  1441  2CB8               	goto	l306
  8937  1442                     l6837:
  8938  1442  30DF               	movlw	223
  8939  1443  00A2               	movwf	??_codifica
  8940  1444  0820               	movf	codifica@dado,w
  8941  1445  0084               	movwf	4
  8942  1446  1783               	bsf	3,7
  8943  1447  1C21               	btfss	codifica@dado+1,0
  8944  1448  1383               	bcf	3,7
  8945  1449  0822               	movf	??_codifica,w
  8946  144A  0080               	movwf	0
  8947  144B  2CB8               	goto	l306
  8948  144C                     l6839:
  8949  144C  30E0               	movlw	224
  8950  144D  00A2               	movwf	??_codifica
  8951  144E  0820               	movf	codifica@dado,w
  8952  144F  0084               	movwf	4
  8953  1450  1783               	bsf	3,7
  8954  1451  1C21               	btfss	codifica@dado+1,0
  8955  1452  1383               	bcf	3,7
  8956  1453  0822               	movf	??_codifica,w
  8957  1454  0080               	movwf	0
  8958  1455  2CB8               	goto	l306
  8959  1456                     l6841:
  8960  1456  30E1               	movlw	225
  8961  1457  00A2               	movwf	??_codifica
  8962  1458  0820               	movf	codifica@dado,w
  8963  1459  0084               	movwf	4
  8964  145A  1783               	bsf	3,7
  8965  145B  1C21               	btfss	codifica@dado+1,0
  8966  145C  1383               	bcf	3,7
  8967  145D  0822               	movf	??_codifica,w
  8968  145E  0080               	movwf	0
  8969  145F  2CB8               	goto	l306
  8970  1460                     l6843:
  8971  1460  30E2               	movlw	226
  8972  1461  00A2               	movwf	??_codifica
  8973  1462  0820               	movf	codifica@dado,w
  8974  1463  0084               	movwf	4
  8975  1464  1783               	bsf	3,7
  8976  1465  1C21               	btfss	codifica@dado+1,0
  8977  1466  1383               	bcf	3,7
  8978  1467  0822               	movf	??_codifica,w
  8979  1468  0080               	movwf	0
  8980  1469  2CB8               	goto	l306
  8981  146A                     l6845:
  8982  146A  30E3               	movlw	227
  8983  146B  00A2               	movwf	??_codifica
  8984  146C  0820               	movf	codifica@dado,w
  8985  146D  0084               	movwf	4
  8986  146E  1783               	bsf	3,7
  8987  146F  1C21               	btfss	codifica@dado+1,0
  8988  1470  1383               	bcf	3,7
  8989  1471  0822               	movf	??_codifica,w
  8990  1472  0080               	movwf	0
  8991  1473  2CB8               	goto	l306
  8992  1474                     l6847:
  8993  1474  30E4               	movlw	228
  8994  1475  00A2               	movwf	??_codifica
  8995  1476  0820               	movf	codifica@dado,w
  8996  1477  0084               	movwf	4
  8997  1478  1783               	bsf	3,7
  8998  1479  1C21               	btfss	codifica@dado+1,0
  8999  147A  1383               	bcf	3,7
  9000  147B  0822               	movf	??_codifica,w
  9001  147C  0080               	movwf	0
  9002  147D  2CB8               	goto	l306
  9003  147E                     l6851:
  9004  147E  0820               	movf	codifica@dado,w
  9005  147F  0084               	movwf	4
  9006  1480  1783               	bsf	3,7
  9007  1481  1C21               	btfss	codifica@dado+1,0
  9008  1482  1383               	bcf	3,7
  9009  1483  0800               	movf	0,w
  9010  1484  00A2               	movwf	??_codifica
  9011  1485  01A3               	clrf	??_codifica+1
  9012                           
  9013                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9014                           ; Switch size 1, requested type "simple"
  9015                           ; Number of cases is 1, Range of values is 0 to 0
  9016                           ; switch strategies available:
  9017                           ; Name         Instructions Cycles
  9018                           ; simple_byte            4     3 (average)
  9019                           ; direct_byte           11     8 (fixed)
  9020                           ; jumptable            260     6 (fixed)
  9021                           ;	Chosen strategy is simple_byte
  9022  1486  0823               	movf	??_codifica+1,w
  9023  1487  3A00               	xorlw	0	; case 0
  9024  1488  1903               	skipnz
  9025  1489  2C8B               	goto	l8945
  9026  148A  2CB8               	goto	l306
  9027  148B                     l8945:
  9028                           
  9029                           ; Switch size 1, requested type "simple"
  9030                           ; Number of cases is 8, Range of values is 65 to 100
  9031                           ; switch strategies available:
  9032                           ; Name         Instructions Cycles
  9033                           ; simple_byte           25    13 (average)
  9034                           ; direct_byte          119    11 (fixed)
  9035                           ; jumptable            263     9 (fixed)
  9036                           ;	Chosen strategy is simple_byte
  9037  148B  0822               	movf	??_codifica,w
  9038  148C  3A41               	xorlw	65	; case 65
  9039  148D  1903               	skipnz
  9040  148E  2C2E               	goto	l6833
  9041  148F  3A03               	xorlw	3	; case 66
  9042  1490  1903               	skipnz
  9043  1491  2C42               	goto	l6837
  9044  1492  3A01               	xorlw	1	; case 67
  9045  1493  1903               	skipnz
  9046  1494  2C56               	goto	l6841
  9047  1495  3A07               	xorlw	7	; case 68
  9048  1496  1903               	skipnz
  9049  1497  2C6A               	goto	l6845
  9050  1498  3A25               	xorlw	37	; case 97
  9051  1499  1903               	skipnz
  9052  149A  2C38               	goto	l6835
  9053  149B  3A03               	xorlw	3	; case 98
  9054  149C  1903               	skipnz
  9055  149D  2C4C               	goto	l6839
  9056  149E  3A01               	xorlw	1	; case 99
  9057  149F  1903               	skipnz
  9058  14A0  2C60               	goto	l6843
  9059  14A1  3A07               	xorlw	7	; case 100
  9060  14A2  1903               	skipnz
  9061  14A3  2C74               	goto	l6847
  9062  14A4  2CB8               	goto	l306
  9063  14A5                     l6855:
  9064  14A5  0824               	movf	codifica@tipo,w
  9065  14A6  00A2               	movwf	??_codifica
  9066  14A7  01A3               	clrf	??_codifica+1
  9067                           
  9068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9069                           ; Switch size 1, requested type "simple"
  9070                           ; Number of cases is 1, Range of values is 0 to 0
  9071                           ; switch strategies available:
  9072                           ; Name         Instructions Cycles
  9073                           ; simple_byte            4     3 (average)
  9074                           ; direct_byte           11     8 (fixed)
  9075                           ; jumptable            260     6 (fixed)
  9076                           ;	Chosen strategy is simple_byte
  9077  14A8  0823               	movf	??_codifica+1,w
  9078  14A9  3A00               	xorlw	0	; case 0
  9079  14AA  1903               	skipnz
  9080  14AB  2CAD               	goto	l8947
  9081  14AC  2CB8               	goto	l306
  9082  14AD                     l8947:
  9083                           
  9084                           ; Switch size 1, requested type "simple"
  9085                           ; Number of cases is 3, Range of values is 97 to 116
  9086                           ; switch strategies available:
  9087                           ; Name         Instructions Cycles
  9088                           ; simple_byte           10     6 (average)
  9089                           ; direct_byte           71    11 (fixed)
  9090                           ; jumptable            263     9 (fixed)
  9091                           ;	Chosen strategy is simple_byte
  9092  14AD  0822               	movf	??_codifica,w
  9093  14AE  3A61               	xorlw	97	; case 97
  9094  14AF  1903               	skipnz
  9095  14B0  2C7E               	goto	l6851
  9096  14B1  3A11               	xorlw	17	; case 112
  9097  14B2  1903               	skipnz
  9098  14B3  2C10               	goto	l6827
  9099  14B4  3A04               	xorlw	4	; case 116
  9100  14B5  1903               	skipnz
  9101  14B6  2C24               	goto	l6831
  9102  14B7  2CB8               	goto	l306
  9103  14B8                     l306:
  9104  14B8  0008               	return
  9105  14B9                     __end_of_codifica:
  9106                           
  9107                           	psect	text48
  9108  1DFC                     __ptext48:	
  9109 ;; *************** function _dispLCD_str *****************
  9110 ;; Defined at:
  9111 ;;		line 249 in file "dispLCD4vias.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;  str             2    8[BANK0 ] PTR const unsigned char 
  9114 ;;		 -> STR_16(78), STR_15(62), STR_4(83), 
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;  c               1   12[BANK0 ] unsigned char 
  9117 ;;  lin             1   11[BANK0 ] unsigned char 
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  1    wreg      void 
  9120 ;; Registers used:
  9121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9127 ;;      Params:         0       2       0       0       0
  9128 ;;      Locals:         0       2       0       0       0
  9129 ;;      Temps:          0       1       0       0       0
  9130 ;;      Totals:         0       5       0       0       0
  9131 ;;Total ram usage:        5 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    4
  9134 ;; This function calls:
  9135 ;;		_dispLCD_dataReg
  9136 ;;		_dispLCD_lincol
  9137 ;; This function is called by:
  9138 ;;		_main
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           
  9143                           ;psect for function _dispLCD_str
  9144  1DFC                     _dispLCD_str:
  9145  1DFC                     l7161:	
  9146                           ;incstack = 0
  9147                           ; Regs used in _dispLCD_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9148                           
  9149                           
  9150                           ;dispLCD4vias.c: 249: void dispLCD_str( const char * str );dispLCD4vias.c: 250: {;dispLC
      +                          D4vias.c: 251:     char lin = 0;
  9151  1DFC  1283               	bcf	3,5	;RP0=0, select bank0
  9152  1DFD  1303               	bcf	3,6	;RP1=0, select bank0
  9153  1DFE  01AB               	clrf	dispLCD_str@lin
  9154  1DFF                     l7163:
  9155                           
  9156                           ;dispLCD4vias.c: 252:     char c;;dispLCD4vias.c: 253:     dispLCD_lincol(0,0);
  9157  1DFF  01A3               	clrf	dispLCD_lincol@col
  9158  1E00  3000               	movlw	0
  9159  1E01  160A  158A  2476  160A  158A  	fcall	_dispLCD_lincol
  9160                           
  9161                           ;dispLCD4vias.c: 255:     while( c = *str )
  9162  1E06  2E27               	goto	l7173
  9163  1E07                     l7165:
  9164                           
  9165                           ;dispLCD4vias.c: 256:     {;dispLCD4vias.c: 257:         if( c != '\n' )
  9166  1E07  300A               	movlw	10
  9167  1E08  062C               	xorwf	dispLCD_str@c,w
  9168  1E09  1903               	btfsc	3,2
  9169  1E0A  2E0C               	goto	u5381
  9170  1E0B  2E0D               	goto	u5380
  9171  1E0C                     u5381:
  9172  1E0C  2E14               	goto	l7169
  9173  1E0D                     u5380:
  9174  1E0D                     l7167:
  9175                           
  9176                           ;dispLCD4vias.c: 258:             dispLCD_dataReg( c );
  9177  1E0D  082C               	movf	dispLCD_str@c,w
  9178  1E0E  160A  158A  2445  160A  158A  	fcall	_dispLCD_dataReg
  9179  1E13  2E1F               	goto	l7171
  9180  1E14                     l7169:
  9181                           
  9182                           ;dispLCD4vias.c: 260:             dispLCD_lincol(++lin,0);
  9183  1E14  01A3               	clrf	dispLCD_lincol@col
  9184  1E15  3001               	movlw	1
  9185  1E16  00AA               	movwf	??_dispLCD_str
  9186  1E17  082A               	movf	??_dispLCD_str,w
  9187  1E18  07AB               	addwf	dispLCD_str@lin,f
  9188  1E19  082B               	movf	dispLCD_str@lin,w
  9189  1E1A  160A  158A  2476  160A  158A  	fcall	_dispLCD_lincol
  9190  1E1F                     l7171:
  9191                           
  9192                           ;dispLCD4vias.c: 261:         ++str;
  9193  1E1F  3001               	movlw	1
  9194  1E20  1283               	bcf	3,5	;RP0=0, select bank0
  9195  1E21  1303               	bcf	3,6	;RP1=0, select bank0
  9196  1E22  07A8               	addwf	dispLCD_str@str,f
  9197  1E23  1803               	skipnc
  9198  1E24  0AA9               	incf	dispLCD_str@str+1,f
  9199  1E25  3000               	movlw	0
  9200  1E26  07A9               	addwf	dispLCD_str@str+1,f
  9201  1E27                     l7173:
  9202                           
  9203                           ;dispLCD4vias.c: 255:     while( c = *str )
  9204  1E27  1283               	bcf	3,5	;RP0=0, select bank0
  9205  1E28  1303               	bcf	3,6	;RP1=0, select bank0
  9206  1E29  0829               	movf	dispLCD_str@str+1,w
  9207  1E2A  00FF               	movwf	btemp+1
  9208  1E2B  0828               	movf	dispLCD_str@str,w
  9209  1E2C  0084               	movwf	4
  9210  1E2D  160A  158A  2000  160A  158A  	fcall	stringtab
  9211  1E32  00AA               	movwf	??_dispLCD_str
  9212  1E33  082A               	movf	??_dispLCD_str,w
  9213  1E34  00AC               	movwf	dispLCD_str@c
  9214  1E35  082C               	movf	dispLCD_str@c,w
  9215  1E36  1D03               	btfss	3,2
  9216  1E37  2E39               	goto	u5391
  9217  1E38  2E3A               	goto	u5390
  9218  1E39                     u5391:
  9219  1E39  2E07               	goto	l7165
  9220  1E3A                     u5390:
  9221  1E3A                     l105:
  9222  1E3A  0008               	return
  9223  1E3B                     __end_of_dispLCD_str:
  9224                           
  9225                           	psect	text49
  9226  1BB5                     __ptext49:	
  9227 ;; *************** function _dispLCD_init *****************
  9228 ;; Defined at:
  9229 ;;		line 165 in file "dispLCD4vias.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;		None
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;		None
  9234 ;; Return value:  Size  Location     Type
  9235 ;;                  1    wreg      void 
  9236 ;; Registers used:
  9237 ;;		wreg, status,2, status,0, pclath, cstack
  9238 ;; Tracked objects:
  9239 ;;		On entry : 0/0
  9240 ;;		On exit  : 0/0
  9241 ;;		Unchanged: 0/0
  9242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9243 ;;      Params:         0       0       0       0       0
  9244 ;;      Locals:         0       0       0       0       0
  9245 ;;      Temps:          0       0       0       0       0
  9246 ;;      Totals:         0       0       0       0       0
  9247 ;;Total ram usage:        0 bytes
  9248 ;; Hardware stack levels used:    1
  9249 ;; Hardware stack levels required when called:    3
  9250 ;; This function calls:
  9251 ;;		_delay
  9252 ;;		_dispLCD_instReg
  9253 ;; This function is called by:
  9254 ;;		_main
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           
  9259                           ;psect for function _dispLCD_init
  9260  1BB5                     _dispLCD_init:
  9261  1BB5                     l7121:	
  9262                           ;incstack = 0
  9263                           ; Regs used in _dispLCD_init: [wreg+status,2+status,0+pclath+cstack]
  9264                           
  9265                           
  9266                           ;dispLCD4vias.c: 167:     ANSELH = 0x00;
  9267  1BB5  1683               	bsf	3,5	;RP0=1, select bank3
  9268  1BB6  1703               	bsf	3,6	;RP1=1, select bank3
  9269  1BB7  0189               	clrf	9	;volatile
  9270  1BB8                     l7123:
  9271                           
  9272                           ;dispLCD4vias.c: 169:     TRISBbits.TRISB4 = 0;
  9273  1BB8  1683               	bsf	3,5	;RP0=1, select bank1
  9274  1BB9  1303               	bcf	3,6	;RP1=0, select bank1
  9275  1BBA  1206               	bcf	6,4	;volatile
  9276  1BBB                     l7125:
  9277                           
  9278                           ;dispLCD4vias.c: 170:     TRISBbits.TRISB5 = 0;
  9279  1BBB  1286               	bcf	6,5	;volatile
  9280  1BBC                     l7127:
  9281                           
  9282                           ;dispLCD4vias.c: 172:     TRISBbits.TRISB0 = 0;
  9283  1BBC  1006               	bcf	6,0	;volatile
  9284  1BBD                     l7129:
  9285                           
  9286                           ;dispLCD4vias.c: 173:     TRISBbits.TRISB1 = 0;
  9287  1BBD  1086               	bcf	6,1	;volatile
  9288  1BBE                     l7131:
  9289                           
  9290                           ;dispLCD4vias.c: 174:     TRISBbits.TRISB2 = 0;
  9291  1BBE  1106               	bcf	6,2	;volatile
  9292  1BBF                     l7133:
  9293                           
  9294                           ;dispLCD4vias.c: 175:     TRISBbits.TRISB3 = 0;
  9295  1BBF  1186               	bcf	6,3	;volatile
  9296  1BC0                     l7135:
  9297                           
  9298                           ;dispLCD4vias.c: 177:     LCDbits.EN = 1;
  9299  1BC0  1283               	bcf	3,5	;RP0=0, select bank0
  9300  1BC1  1303               	bcf	3,6	;RP1=0, select bank0
  9301  1BC2  1686               	bsf	6,5	;volatile
  9302  1BC3                     l7137:
  9303                           
  9304                           ;dispLCD4vias.c: 178:     delay(5);
  9305  1BC3  3005               	movlw	5
  9306  1BC4  00A0               	movwf	delay@t
  9307  1BC5  3000               	movlw	0
  9308  1BC6  00A1               	movwf	delay@t+1
  9309  1BC7  160A  158A  2138  160A  158A  	fcall	_delay
  9310  1BCC                     l7139:
  9311                           
  9312                           ;dispLCD4vias.c: 179:     dispLCD_instReg( 0x20|0x00|0x08);
  9313  1BCC  3028               	movlw	40
  9314  1BCD  160A  118A  226C  160A  158A  	fcall	_dispLCD_instReg
  9315  1BD2                     l7141:
  9316                           
  9317                           ;dispLCD4vias.c: 180:     dispLCD_instReg( 0x08|0x04|0x00|0x00 );
  9318  1BD2  300C               	movlw	12
  9319  1BD3  160A  118A  226C  160A  158A  	fcall	_dispLCD_instReg
  9320  1BD8                     l7143:
  9321                           
  9322                           ;dispLCD4vias.c: 181:     dispLCD_instReg( 0x01 );
  9323  1BD8  3001               	movlw	1
  9324  1BD9  160A  118A  226C  160A  158A  	fcall	_dispLCD_instReg
  9325  1BDE                     l7145:
  9326                           
  9327                           ;dispLCD4vias.c: 182:     dispLCD_instReg( 0x02 );
  9328  1BDE  3002               	movlw	2
  9329  1BDF  160A  118A  226C  160A  158A  	fcall	_dispLCD_instReg
  9330  1BE4                     l71:
  9331  1BE4  0008               	return
  9332  1BE5                     __end_of_dispLCD_init:
  9333                           
  9334                           	psect	text50
  9335  1843                     __ptext50:	
  9336 ;; *************** function _dispLCD_clr *****************
  9337 ;; Defined at:
  9338 ;;		line 243 in file "dispLCD4vias.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;		None
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;		None
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  1    wreg      void 
  9345 ;; Registers used:
  9346 ;;		wreg, status,2, status,0, pclath, cstack
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9352 ;;      Params:         0       0       0       0       0
  9353 ;;      Locals:         0       0       0       0       0
  9354 ;;      Temps:          0       0       0       0       0
  9355 ;;      Totals:         0       0       0       0       0
  9356 ;;Total ram usage:        0 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    3
  9359 ;; This function calls:
  9360 ;;		_dispLCD_instReg
  9361 ;; This function is called by:
  9362 ;;		_main
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _dispLCD_clr
  9368  1843                     _dispLCD_clr:
  9369  1843                     l7159:	
  9370                           ;incstack = 0
  9371                           ; Regs used in _dispLCD_clr: [wreg+status,2+status,0+pclath+cstack]
  9372                           
  9373                           
  9374                           ;dispLCD4vias.c: 245:     dispLCD_instReg(0x01);
  9375  1843  3001               	movlw	1
  9376  1844  160A  118A  226C  160A  158A  	fcall	_dispLCD_instReg
  9377  1849                     l97:
  9378  1849  0008               	return
  9379  184A                     __end_of_dispLCD_clr:
  9380                           
  9381                           	psect	text51
  9382  1D83                     __ptext51:	
  9383 ;; *************** function _dispLCD *****************
  9384 ;; Defined at:
  9385 ;;		line 186 in file "dispLCD4vias.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;  lin             1    8[BANK0 ] unsigned char 
  9388 ;;  col             1    9[BANK0 ] unsigned char 
  9389 ;;  str             2   10[BANK0 ] PTR const unsigned char 
  9390 ;;		 -> STR_21(21), STR_20(21), STR_19(21), STR_18(2), 
  9391 ;;		 -> STR_17(2), STR_14(21), STR_13(21), STR_12(21), 
  9392 ;;		 -> STR_11(21), STR_10(21), STR_9(8), STR_8(21), 
  9393 ;;		 -> STR_7(21), STR_6(21), STR_5(21), STR_3(21), 
  9394 ;;		 -> STR_2(2), STR_1(2), 
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  pos             1   13[BANK0 ] unsigned char 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  1    wreg      void 
  9399 ;; Registers used:
  9400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9406 ;;      Params:         0       4       0       0       0
  9407 ;;      Locals:         0       1       0       0       0
  9408 ;;      Temps:          0       1       0       0       0
  9409 ;;      Totals:         0       6       0       0       0
  9410 ;;Total ram usage:        6 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    4
  9413 ;; This function calls:
  9414 ;;		_dispLCD_dataReg
  9415 ;;		_dispLCD_lincol
  9416 ;; This function is called by:
  9417 ;;		_main
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           
  9422                           ;psect for function _dispLCD
  9423  1D83                     _dispLCD:
  9424  1D83                     l7147:	
  9425                           ;incstack = 0
  9426                           ; Regs used in _dispLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9427                           
  9428                           
  9429                           ;dispLCD4vias.c: 186: void dispLCD( unsigned char lin, unsigned char col, const char * s
      +                          tr );dispLCD4vias.c: 187: {;dispLCD4vias.c: 188:     char pos = col;
  9430  1D83  1283               	bcf	3,5	;RP0=0, select bank0
  9431  1D84  1303               	bcf	3,6	;RP1=0, select bank0
  9432  1D85  0829               	movf	dispLCD@col,w
  9433  1D86  00AC               	movwf	??_dispLCD
  9434  1D87  082C               	movf	??_dispLCD,w
  9435  1D88  00AD               	movwf	dispLCD@pos
  9436  1D89                     l7149:
  9437                           
  9438                           ;dispLCD4vias.c: 189:     dispLCD_lincol( lin, col );
  9439  1D89  0829               	movf	dispLCD@col,w
  9440  1D8A  00AC               	movwf	??_dispLCD
  9441  1D8B  082C               	movf	??_dispLCD,w
  9442  1D8C  00A3               	movwf	dispLCD_lincol@col
  9443  1D8D  0828               	movf	dispLCD@lin,w
  9444  1D8E  160A  158A  2476  160A  158A  	fcall	_dispLCD_lincol
  9445                           
  9446                           ;dispLCD4vias.c: 191:     while( *str )
  9447  1D93  2DAE               	goto	l7157
  9448  1D94                     l7151:
  9449                           
  9450                           ;dispLCD4vias.c: 192:     {;dispLCD4vias.c: 193:         dispLCD_dataReg( *str );
  9451  1D94  082B               	movf	dispLCD@str+1,w
  9452  1D95  00FF               	movwf	btemp+1
  9453  1D96  082A               	movf	dispLCD@str,w
  9454  1D97  0084               	movwf	4
  9455  1D98  160A  158A  2000  160A  158A  	fcall	stringtab
  9456  1D9D  160A  158A  2445  160A  158A  	fcall	_dispLCD_dataReg
  9457  1DA2                     l7153:
  9458                           
  9459                           ;dispLCD4vias.c: 194:         ++str;
  9460  1DA2  3001               	movlw	1
  9461  1DA3  1283               	bcf	3,5	;RP0=0, select bank0
  9462  1DA4  1303               	bcf	3,6	;RP1=0, select bank0
  9463  1DA5  07AA               	addwf	dispLCD@str,f
  9464  1DA6  1803               	skipnc
  9465  1DA7  0AAB               	incf	dispLCD@str+1,f
  9466  1DA8  3000               	movlw	0
  9467  1DA9  07AB               	addwf	dispLCD@str+1,f
  9468  1DAA                     l7155:
  9469                           
  9470                           ;dispLCD4vias.c: 195:         ++pos;
  9471  1DAA  3001               	movlw	1
  9472  1DAB  00AC               	movwf	??_dispLCD
  9473  1DAC  082C               	movf	??_dispLCD,w
  9474  1DAD  07AD               	addwf	dispLCD@pos,f
  9475  1DAE                     l7157:
  9476                           
  9477                           ;dispLCD4vias.c: 191:     while( *str )
  9478  1DAE  1283               	bcf	3,5	;RP0=0, select bank0
  9479  1DAF  1303               	bcf	3,6	;RP1=0, select bank0
  9480  1DB0  082B               	movf	dispLCD@str+1,w
  9481  1DB1  00FF               	movwf	btemp+1
  9482  1DB2  082A               	movf	dispLCD@str,w
  9483  1DB3  0084               	movwf	4
  9484  1DB4  160A  158A  2000  160A  158A  	fcall	stringtab
  9485  1DB9  3A00               	xorlw	0
  9486  1DBA  1D03               	skipz
  9487  1DBB  2DBD               	goto	u5371
  9488  1DBC  2DBE               	goto	u5370
  9489  1DBD                     u5371:
  9490  1DBD  2D94               	goto	l7151
  9491  1DBE                     u5370:
  9492  1DBE                     l77:
  9493  1DBE  0008               	return
  9494  1DBF                     __end_of_dispLCD:
  9495                           
  9496                           	psect	text52
  9497  1C76                     __ptext52:	
  9498 ;; *************** function _dispLCD_lincol *****************
  9499 ;; Defined at:
  9500 ;;		line 150 in file "dispLCD4vias.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;  lin             1    wreg     unsigned char 
  9503 ;;  col             1    3[BANK0 ] unsigned char 
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;  lin             1    6[BANK0 ] unsigned char 
  9506 ;;  aux             1    7[BANK0 ] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;                  1    wreg      void 
  9509 ;; Registers used:
  9510 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9516 ;;      Params:         0       1       0       0       0
  9517 ;;      Locals:         0       2       0       0       0
  9518 ;;      Temps:          0       2       0       0       0
  9519 ;;      Totals:         0       5       0       0       0
  9520 ;;Total ram usage:        5 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    3
  9523 ;; This function calls:
  9524 ;;		_dispLCD_instReg
  9525 ;; This function is called by:
  9526 ;;		_dispLCD
  9527 ;;		_dispLCD_num
  9528 ;;		_dispLCD_str
  9529 ;;		_fifo_print
  9530 ;;		_printExec
  9531 ;;		_main
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           
  9536                           ;psect for function _dispLCD_lincol
  9537  1C76                     _dispLCD_lincol:
  9538                           
  9539                           ;incstack = 0
  9540                           ; Regs used in _dispLCD_lincol: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9541                           ;dispLCD_lincol@lin stored from wreg
  9542  1C76  1283               	bcf	3,5	;RP0=0, select bank0
  9543  1C77  1303               	bcf	3,6	;RP1=0, select bank0
  9544  1C78  00A6               	movwf	dispLCD_lincol@lin
  9545  1C79                     l6607:
  9546                           
  9547                           ;dispLCD4vias.c: 150: void dispLCD_lincol( unsigned char lin, unsigned char col);dispLCD
      +                          4vias.c: 151: {;dispLCD4vias.c: 152:     char aux = 0x00;
  9548  1C79  01A7               	clrf	dispLCD_lincol@aux
  9549                           
  9550                           ;dispLCD4vias.c: 154:     switch(lin)
  9551  1C7A  2C8A               	goto	l6617
  9552  1C7B                     l6609:
  9553  1C7B  3040               	movlw	64
  9554  1C7C  00A4               	movwf	??_dispLCD_lincol
  9555  1C7D  0824               	movf	??_dispLCD_lincol,w
  9556  1C7E  00A7               	movwf	dispLCD_lincol@aux
  9557  1C7F  2C9D               	goto	l6619
  9558  1C80                     l6611:
  9559  1C80  3014               	movlw	20
  9560  1C81  00A4               	movwf	??_dispLCD_lincol
  9561  1C82  0824               	movf	??_dispLCD_lincol,w
  9562  1C83  00A7               	movwf	dispLCD_lincol@aux
  9563  1C84  2C9D               	goto	l6619
  9564  1C85                     l6613:
  9565  1C85  3054               	movlw	84
  9566  1C86  00A4               	movwf	??_dispLCD_lincol
  9567  1C87  0824               	movf	??_dispLCD_lincol,w
  9568  1C88  00A7               	movwf	dispLCD_lincol@aux
  9569  1C89  2C9D               	goto	l6619
  9570  1C8A                     l6617:
  9571  1C8A  0826               	movf	dispLCD_lincol@lin,w
  9572  1C8B  00A4               	movwf	??_dispLCD_lincol
  9573  1C8C  01A5               	clrf	??_dispLCD_lincol+1
  9574                           
  9575                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9576                           ; Switch size 1, requested type "simple"
  9577                           ; Number of cases is 1, Range of values is 0 to 0
  9578                           ; switch strategies available:
  9579                           ; Name         Instructions Cycles
  9580                           ; simple_byte            4     3 (average)
  9581                           ; direct_byte           11     8 (fixed)
  9582                           ; jumptable            260     6 (fixed)
  9583                           ;	Chosen strategy is simple_byte
  9584  1C8D  0825               	movf	??_dispLCD_lincol+1,w
  9585  1C8E  3A00               	xorlw	0	; case 0
  9586  1C8F  1903               	skipnz
  9587  1C90  2C92               	goto	l8949
  9588  1C91  2C9D               	goto	l6619
  9589  1C92                     l8949:
  9590                           
  9591                           ; Switch size 1, requested type "simple"
  9592                           ; Number of cases is 3, Range of values is 1 to 3
  9593                           ; switch strategies available:
  9594                           ; Name         Instructions Cycles
  9595                           ; simple_byte           10     6 (average)
  9596                           ; direct_byte           20    11 (fixed)
  9597                           ; jumptable            263     9 (fixed)
  9598                           ;	Chosen strategy is simple_byte
  9599  1C92  0824               	movf	??_dispLCD_lincol,w
  9600  1C93  3A01               	xorlw	1	; case 1
  9601  1C94  1903               	skipnz
  9602  1C95  2C7B               	goto	l6609
  9603  1C96  3A03               	xorlw	3	; case 2
  9604  1C97  1903               	skipnz
  9605  1C98  2C80               	goto	l6611
  9606  1C99  3A01               	xorlw	1	; case 3
  9607  1C9A  1903               	skipnz
  9608  1C9B  2C85               	goto	l6613
  9609  1C9C  2C9D               	goto	l6619
  9610  1C9D                     l6619:
  9611                           
  9612                           ;dispLCD4vias.c: 161:     dispLCD_instReg( (0x80+(aux + (col + 0x00) & 0x7F)) );
  9613  1C9D  0823               	movf	dispLCD_lincol@col,w
  9614  1C9E  0727               	addwf	dispLCD_lincol@aux,w
  9615  1C9F  397F               	andlw	127
  9616  1CA0  3E80               	addlw	128
  9617  1CA1  160A  118A  226C  160A  158A  	fcall	_dispLCD_instReg
  9618  1CA6                     l68:
  9619  1CA6  0008               	return
  9620  1CA7                     __end_of_dispLCD_lincol:
  9621                           
  9622                           	psect	text53
  9623  126C                     __ptext53:	
  9624 ;; *************** function _dispLCD_instReg *****************
  9625 ;; Defined at:
  9626 ;;		line 101 in file "dispLCD4vias.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;  i               1    wreg     unsigned char 
  9629 ;; Auto vars:     Size  Location     Type
  9630 ;;  i               1    2[BANK0 ] unsigned char 
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  1    wreg      void 
  9633 ;; Registers used:
  9634 ;;		wreg, status,2, status,0
  9635 ;; Tracked objects:
  9636 ;;		On entry : 0/0
  9637 ;;		On exit  : 0/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9640 ;;      Params:         0       0       0       0       0
  9641 ;;      Locals:         0       1       0       0       0
  9642 ;;      Temps:          0       2       0       0       0
  9643 ;;      Totals:         0       3       0       0       0
  9644 ;;Total ram usage:        3 bytes
  9645 ;; Hardware stack levels used:    1
  9646 ;; Hardware stack levels required when called:    2
  9647 ;; This function calls:
  9648 ;;		Nothing
  9649 ;; This function is called by:
  9650 ;;		_dispLCD_lincol
  9651 ;;		_dispLCD_init
  9652 ;;		_dispLCD_clr
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           
  9657                           ;psect for function _dispLCD_instReg
  9658  126C                     _dispLCD_instReg:
  9659                           
  9660                           ;incstack = 0
  9661                           ; Regs used in _dispLCD_instReg: [wreg+status,2+status,0]
  9662                           ;dispLCD_instReg@i stored from wreg
  9663  126C  1283               	bcf	3,5	;RP0=0, select bank0
  9664  126D  1303               	bcf	3,6	;RP1=0, select bank0
  9665  126E  00A2               	movwf	dispLCD_instReg@i
  9666  126F                     l6497:
  9667                           
  9668                           ;dispLCD4vias.c: 101: void dispLCD_instReg( unsigned char i );dispLCD4vias.c: 102: {;dis
      +                          pLCD4vias.c: 103:     LCDbits.RS = 0;
  9669  126F  1206               	bcf	6,4	;volatile
  9670  1270                     l6499:
  9671                           
  9672                           ;dispLCD4vias.c: 104:     LCDbits.BUS = (i>>4);
  9673  1270  0822               	movf	dispLCD_instReg@i,w
  9674  1271  00A0               	movwf	??_dispLCD_instReg
  9675  1272  3004               	movlw	4
  9676  1273                     u4525:
  9677  1273  1003               	clrc
  9678  1274  0CA0               	rrf	??_dispLCD_instReg,f
  9679  1275  3EFF               	addlw	-1
  9680  1276  1D03               	skipz
  9681  1277  2A73               	goto	u4525
  9682  1278  0806               	movf	6,w	;volatile
  9683  1279  0620               	xorwf	??_dispLCD_instReg,w
  9684  127A  39F0               	andlw	-16
  9685  127B  0620               	xorwf	??_dispLCD_instReg,w
  9686  127C  0086               	movwf	6	;volatile
  9687  127D                     l6501:
  9688                           
  9689                           ;dispLCD4vias.c: 106:     LCDbits.EN = 0;
  9690  127D  1286               	bcf	6,5	;volatile
  9691                           
  9692                           ;dispLCD4vias.c: 107:     if( i == 0x01 || i == 0x02 )
  9693  127E  0322               	decf	dispLCD_instReg@i,w
  9694  127F  1903               	btfsc	3,2
  9695  1280  2A82               	goto	u4531
  9696  1281  2A83               	goto	u4530
  9697  1282                     u4531:
  9698  1282  2A89               	goto	l6505
  9699  1283                     u4530:
  9700  1283                     l6503:
  9701  1283  3002               	movlw	2
  9702  1284  0622               	xorwf	dispLCD_instReg@i,w
  9703  1285  1D03               	btfss	3,2
  9704  1286  2A88               	goto	u4541
  9705  1287  2A89               	goto	u4540
  9706  1288                     u4541:
  9707  1288  2A94               	goto	l6507
  9708  1289                     u4540:
  9709  1289                     l6505:
  9710                           
  9711                           ;dispLCD4vias.c: 108:         _delay((unsigned long)((2)*(20000000/4000.0)));
  9712  1289  300D               	movlw	13
  9713  128A  1283               	bcf	3,5	;RP0=0, select bank0
  9714  128B  1303               	bcf	3,6	;RP1=0, select bank0
  9715  128C  00A1               	movwf	??_dispLCD_instReg+1
  9716  128D  30FB               	movlw	251
  9717  128E  00A0               	movwf	??_dispLCD_instReg
  9718  128F                     u6637:
  9719  128F  0BA0               	decfsz	??_dispLCD_instReg,f
  9720  1290  2A8F               	goto	u6637
  9721  1291  0BA1               	decfsz	??_dispLCD_instReg+1,f
  9722  1292  2A8F               	goto	u6637
  9723  1293  2A9B               	goto	l6509
  9724  1294                     l6507:
  9725                           
  9726                           ;dispLCD4vias.c: 110:         _delay((unsigned long)((40)*(20000000/4000000.0)));
  9727  1294  3041               	movlw	65
  9728  1295  1283               	bcf	3,5	;RP0=0, select bank0
  9729  1296  1303               	bcf	3,6	;RP1=0, select bank0
  9730  1297  00A0               	movwf	??_dispLCD_instReg
  9731  1298                     u6647:
  9732  1298  0BA0               	decfsz	??_dispLCD_instReg,f
  9733  1299  2A98               	goto	u6647
  9734  129A  2A9B               	nop2
  9735  129B                     l6509:
  9736                           
  9737                           ;dispLCD4vias.c: 111:     LCDbits.EN = 1;
  9738  129B  1283               	bcf	3,5	;RP0=0, select bank0
  9739  129C  1303               	bcf	3,6	;RP1=0, select bank0
  9740  129D  1686               	bsf	6,5	;volatile
  9741  129E                     l6511:
  9742                           
  9743                           ;dispLCD4vias.c: 114:     if( (i & 0xF0) == (0x20 | 0x00) )
  9744  129E  30F0               	movlw	240
  9745  129F  0522               	andwf	dispLCD_instReg@i,w
  9746  12A0  00A0               	movwf	??_dispLCD_instReg
  9747  12A1  3020               	movlw	32
  9748  12A2  0620               	xorwf	??_dispLCD_instReg,w
  9749  12A3  1D03               	btfss	3,2
  9750  12A4  2AA6               	goto	u4551
  9751  12A5  2AA7               	goto	u4550
  9752  12A6                     u4551:
  9753  12A6  2AC0               	goto	l6523
  9754  12A7                     u4550:
  9755  12A7                     l6513:
  9756                           
  9757                           ;dispLCD4vias.c: 115:     {;dispLCD4vias.c: 116:         LCDbits.RS = 0;
  9758  12A7  1206               	bcf	6,4	;volatile
  9759  12A8                     l6515:
  9760                           
  9761                           ;dispLCD4vias.c: 117:         LCDbits.BUS = i>>4;
  9762  12A8  0822               	movf	dispLCD_instReg@i,w
  9763  12A9  00A0               	movwf	??_dispLCD_instReg
  9764  12AA  3004               	movlw	4
  9765  12AB                     u4565:
  9766  12AB  1003               	clrc
  9767  12AC  0CA0               	rrf	??_dispLCD_instReg,f
  9768  12AD  3EFF               	addlw	-1
  9769  12AE  1D03               	skipz
  9770  12AF  2AAB               	goto	u4565
  9771  12B0  0806               	movf	6,w	;volatile
  9772  12B1  0620               	xorwf	??_dispLCD_instReg,w
  9773  12B2  39F0               	andlw	-16
  9774  12B3  0620               	xorwf	??_dispLCD_instReg,w
  9775  12B4  0086               	movwf	6	;volatile
  9776  12B5                     l6517:
  9777                           
  9778                           ;dispLCD4vias.c: 118:         LCDbits.EN = 0;
  9779  12B5  1286               	bcf	6,5	;volatile
  9780  12B6                     l6519:
  9781                           
  9782                           ;dispLCD4vias.c: 119:         _delay((unsigned long)((40)*(20000000/4000000.0)));
  9783  12B6  3041               	movlw	65
  9784  12B7  1283               	bcf	3,5	;RP0=0, select bank0
  9785  12B8  1303               	bcf	3,6	;RP1=0, select bank0
  9786  12B9  00A0               	movwf	??_dispLCD_instReg
  9787  12BA                     u6657:
  9788  12BA  0BA0               	decfsz	??_dispLCD_instReg,f
  9789  12BB  2ABA               	goto	u6657
  9790  12BC  2ABD               	nop2
  9791  12BD                     l6521:
  9792                           
  9793                           ;dispLCD4vias.c: 120:         LCDbits.EN = 1;
  9794  12BD  1283               	bcf	3,5	;RP0=0, select bank0
  9795  12BE  1303               	bcf	3,6	;RP1=0, select bank0
  9796  12BF  1686               	bsf	6,5	;volatile
  9797  12C0                     l6523:
  9798                           
  9799                           ;dispLCD4vias.c: 123:     LCDbits.RS = 0;
  9800  12C0  1206               	bcf	6,4	;volatile
  9801  12C1                     l6525:
  9802                           
  9803                           ;dispLCD4vias.c: 124:     LCDbits.BUS = i & 0x0F;
  9804  12C1  300F               	movlw	15
  9805  12C2  0522               	andwf	dispLCD_instReg@i,w
  9806  12C3  00A0               	movwf	??_dispLCD_instReg
  9807  12C4  0806               	movf	6,w	;volatile
  9808  12C5  0620               	xorwf	??_dispLCD_instReg,w
  9809  12C6  39F0               	andlw	-16
  9810  12C7  0620               	xorwf	??_dispLCD_instReg,w
  9811  12C8  0086               	movwf	6	;volatile
  9812  12C9                     l6527:
  9813                           
  9814                           ;dispLCD4vias.c: 125:     LCDbits.EN = 0;
  9815  12C9  1286               	bcf	6,5	;volatile
  9816  12CA                     l6529:
  9817                           
  9818                           ;dispLCD4vias.c: 126:     if( i == 0x01 || i == 0x02 )
  9819  12CA  0322               	decf	dispLCD_instReg@i,w
  9820  12CB  1903               	btfsc	3,2
  9821  12CC  2ACE               	goto	u4571
  9822  12CD  2ACF               	goto	u4570
  9823  12CE                     u4571:
  9824  12CE  2AD5               	goto	l6533
  9825  12CF                     u4570:
  9826  12CF                     l6531:
  9827  12CF  3002               	movlw	2
  9828  12D0  0622               	xorwf	dispLCD_instReg@i,w
  9829  12D1  1D03               	btfss	3,2
  9830  12D2  2AD4               	goto	u4581
  9831  12D3  2AD5               	goto	u4580
  9832  12D4                     u4581:
  9833  12D4  2AE0               	goto	l6535
  9834  12D5                     u4580:
  9835  12D5                     l6533:
  9836                           
  9837                           ;dispLCD4vias.c: 127:         _delay((unsigned long)((2)*(20000000/4000.0)));
  9838  12D5  300D               	movlw	13
  9839  12D6  1283               	bcf	3,5	;RP0=0, select bank0
  9840  12D7  1303               	bcf	3,6	;RP1=0, select bank0
  9841  12D8  00A1               	movwf	??_dispLCD_instReg+1
  9842  12D9  30FB               	movlw	251
  9843  12DA  00A0               	movwf	??_dispLCD_instReg
  9844  12DB                     u6667:
  9845  12DB  0BA0               	decfsz	??_dispLCD_instReg,f
  9846  12DC  2ADB               	goto	u6667
  9847  12DD  0BA1               	decfsz	??_dispLCD_instReg+1,f
  9848  12DE  2ADB               	goto	u6667
  9849  12DF  2AE7               	goto	l6537
  9850  12E0                     l6535:
  9851                           
  9852                           ;dispLCD4vias.c: 129:         _delay((unsigned long)((40)*(20000000/4000000.0)));
  9853  12E0  3041               	movlw	65
  9854  12E1  1283               	bcf	3,5	;RP0=0, select bank0
  9855  12E2  1303               	bcf	3,6	;RP1=0, select bank0
  9856  12E3  00A0               	movwf	??_dispLCD_instReg
  9857  12E4                     u6677:
  9858  12E4  0BA0               	decfsz	??_dispLCD_instReg,f
  9859  12E5  2AE4               	goto	u6677
  9860  12E6  2AE7               	nop2
  9861  12E7                     l6537:
  9862                           
  9863                           ;dispLCD4vias.c: 130:     LCDbits.EN = 1;
  9864  12E7  1283               	bcf	3,5	;RP0=0, select bank0
  9865  12E8  1303               	bcf	3,6	;RP1=0, select bank0
  9866  12E9  1686               	bsf	6,5	;volatile
  9867  12EA                     l57:
  9868  12EA  0008               	return
  9869  12EB                     __end_of_dispLCD_instReg:
  9870                           
  9871                           	psect	text54
  9872  1C45                     __ptext54:	
  9873 ;; *************** function _dispLCD_dataReg *****************
  9874 ;; Defined at:
  9875 ;;		line 134 in file "dispLCD4vias.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;  d               1    wreg     unsigned char 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;  d               1    1[BANK0 ] unsigned char 
  9880 ;; Return value:  Size  Location     Type
  9881 ;;                  1    wreg      void 
  9882 ;; Registers used:
  9883 ;;		wreg, status,2, status,0
  9884 ;; Tracked objects:
  9885 ;;		On entry : 0/0
  9886 ;;		On exit  : 0/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9889 ;;      Params:         0       0       0       0       0
  9890 ;;      Locals:         0       1       0       0       0
  9891 ;;      Temps:          0       1       0       0       0
  9892 ;;      Totals:         0       2       0       0       0
  9893 ;;Total ram usage:        2 bytes
  9894 ;; Hardware stack levels used:    1
  9895 ;; Hardware stack levels required when called:    2
  9896 ;; This function calls:
  9897 ;;		Nothing
  9898 ;; This function is called by:
  9899 ;;		_dispLCD
  9900 ;;		_dispLCD_num
  9901 ;;		_dispLCD_str
  9902 ;;		_fifo_print
  9903 ;;		_printExec
  9904 ;;		_main
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           
  9909                           ;psect for function _dispLCD_dataReg
  9910  1C45                     _dispLCD_dataReg:
  9911                           
  9912                           ;incstack = 0
  9913                           ; Regs used in _dispLCD_dataReg: [wreg+status,2+status,0]
  9914                           ;dispLCD_dataReg@d stored from wreg
  9915  1C45  1283               	bcf	3,5	;RP0=0, select bank0
  9916  1C46  1303               	bcf	3,6	;RP1=0, select bank0
  9917  1C47  00A1               	movwf	dispLCD_dataReg@d
  9918  1C48                     l6589:
  9919                           
  9920                           ;dispLCD4vias.c: 134: void dispLCD_dataReg( unsigned char d );dispLCD4vias.c: 135: {;dis
      +                          pLCD4vias.c: 136:     LCDbits.RS = 1;
  9921  1C48  1606               	bsf	6,4	;volatile
  9922  1C49                     l6591:
  9923                           
  9924                           ;dispLCD4vias.c: 137:     LCDbits.BUS = d >> 4;
  9925  1C49  0821               	movf	dispLCD_dataReg@d,w
  9926  1C4A  00A0               	movwf	??_dispLCD_dataReg
  9927  1C4B  3004               	movlw	4
  9928  1C4C                     u4705:
  9929  1C4C  1003               	clrc
  9930  1C4D  0CA0               	rrf	??_dispLCD_dataReg,f
  9931  1C4E  3EFF               	addlw	-1
  9932  1C4F  1D03               	skipz
  9933  1C50  2C4C               	goto	u4705
  9934  1C51  0806               	movf	6,w	;volatile
  9935  1C52  0620               	xorwf	??_dispLCD_dataReg,w
  9936  1C53  39F0               	andlw	-16
  9937  1C54  0620               	xorwf	??_dispLCD_dataReg,w
  9938  1C55  0086               	movwf	6	;volatile
  9939  1C56                     l6593:
  9940                           
  9941                           ;dispLCD4vias.c: 138:     LCDbits.EN = 0;
  9942  1C56  1286               	bcf	6,5	;volatile
  9943  1C57                     l6595:
  9944                           
  9945                           ;dispLCD4vias.c: 139:     _delay((unsigned long)((40)*(20000000/4000000.0)));
  9946  1C57  3041               	movlw	65
  9947  1C58  1283               	bcf	3,5	;RP0=0, select bank0
  9948  1C59  1303               	bcf	3,6	;RP1=0, select bank0
  9949  1C5A  00A0               	movwf	??_dispLCD_dataReg
  9950  1C5B                     u6687:
  9951  1C5B  0BA0               	decfsz	??_dispLCD_dataReg,f
  9952  1C5C  2C5B               	goto	u6687
  9953  1C5D  2C5E               	nop2
  9954  1C5E                     l6597:
  9955                           
  9956                           ;dispLCD4vias.c: 140:     LCDbits.EN = 1;
  9957  1C5E  1283               	bcf	3,5	;RP0=0, select bank0
  9958  1C5F  1303               	bcf	3,6	;RP1=0, select bank0
  9959  1C60  1686               	bsf	6,5	;volatile
  9960  1C61                     l6599:
  9961                           
  9962                           ;dispLCD4vias.c: 142:     LCDbits.RS = 1;
  9963  1C61  1606               	bsf	6,4	;volatile
  9964  1C62                     l6601:
  9965                           
  9966                           ;dispLCD4vias.c: 143:     LCDbits.BUS = d & 0x0F;
  9967  1C62  300F               	movlw	15
  9968  1C63  0521               	andwf	dispLCD_dataReg@d,w
  9969  1C64  00A0               	movwf	??_dispLCD_dataReg
  9970  1C65  0806               	movf	6,w	;volatile
  9971  1C66  0620               	xorwf	??_dispLCD_dataReg,w
  9972  1C67  39F0               	andlw	-16
  9973  1C68  0620               	xorwf	??_dispLCD_dataReg,w
  9974  1C69  0086               	movwf	6	;volatile
  9975  1C6A                     l6603:
  9976                           
  9977                           ;dispLCD4vias.c: 144:     LCDbits.EN = 0;
  9978  1C6A  1286               	bcf	6,5	;volatile
  9979                           
  9980                           ;dispLCD4vias.c: 145:     _delay((unsigned long)((40)*(20000000/4000000.0)));
  9981  1C6B  3041               	movlw	65
  9982  1C6C  1283               	bcf	3,5	;RP0=0, select bank0
  9983  1C6D  1303               	bcf	3,6	;RP1=0, select bank0
  9984  1C6E  00A0               	movwf	??_dispLCD_dataReg
  9985  1C6F                     u6697:
  9986  1C6F  0BA0               	decfsz	??_dispLCD_dataReg,f
  9987  1C70  2C6F               	goto	u6697
  9988  1C71  2C72               	nop2
  9989  1C72                     l6605:
  9990                           
  9991                           ;dispLCD4vias.c: 146:     LCDbits.EN = 1;
  9992  1C72  1283               	bcf	3,5	;RP0=0, select bank0
  9993  1C73  1303               	bcf	3,6	;RP1=0, select bank0
  9994  1C74  1686               	bsf	6,5	;volatile
  9995  1C75                     l60:
  9996  1C75  0008               	return
  9997  1C76                     __end_of_dispLCD_dataReg:
  9998                           
  9999                           	psect	text55
 10000  1B86                     __ptext55:	
 10001 ;; *************** function _dignum_conc *****************
 10002 ;; Defined at:
 10003 ;;		line 460 in file "fifo.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;  dig             1    wreg     unsigned char 
 10006 ;;  ptrNum          1    6[BANK0 ] PTR unsigned int 
 10007 ;;		 -> main@ciclos(2), main@num(2), 
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;  dig             1   11[BANK0 ] unsigned char 
 10010 ;; Return value:  Size  Location     Type
 10011 ;;                  1    wreg      void 
 10012 ;; Registers used:
 10013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10014 ;; Tracked objects:
 10015 ;;		On entry : 0/0
 10016 ;;		On exit  : 0/0
 10017 ;;		Unchanged: 0/0
 10018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10019 ;;      Params:         0       1       0       0       0
 10020 ;;      Locals:         0       1       0       0       0
 10021 ;;      Temps:          0       4       0       0       0
 10022 ;;      Totals:         0       6       0       0       0
 10023 ;;Total ram usage:        6 bytes
 10024 ;; Hardware stack levels used:    1
 10025 ;; Hardware stack levels required when called:    3
 10026 ;; This function calls:
 10027 ;;		___wmul
 10028 ;; This function is called by:
 10029 ;;		_main
 10030 ;; This function uses a non-reentrant model
 10031 ;;
 10032                           
 10033                           
 10034                           ;psect for function _dignum_conc
 10035  1B86                     _dignum_conc:
 10036                           
 10037                           ;incstack = 0
 10038                           ; Regs used in _dignum_conc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10039                           ;dignum_conc@dig stored from wreg
 10040  1B86  1283               	bcf	3,5	;RP0=0, select bank0
 10041  1B87  1303               	bcf	3,6	;RP1=0, select bank0
 10042  1B88  00AB               	movwf	dignum_conc@dig
 10043  1B89                     l7459:
 10044                           
 10045                           ;fifo.c: 460: void dignum_conc(char dig, unsigned int * ptrNum );fifo.c: 461: {;fifo.c: 
      +                          462:     *ptrNum = (*ptrNum * 10) + (dig - '0');
 10046  1B89  0826               	movf	dignum_conc@ptrNum,w
 10047  1B8A  0084               	movwf	4
 10048  1B8B  1383               	bcf	3,7	;select IRP bank0
 10049  1B8C  0800               	movf	0,w
 10050  1B8D  00A0               	movwf	___wmul@multiplier
 10051  1B8E  0A84               	incf	4,f
 10052  1B8F  0800               	movf	0,w
 10053  1B90  00A1               	movwf	___wmul@multiplier+1
 10054  1B91  300A               	movlw	10
 10055  1B92  00A2               	movwf	___wmul@multiplicand
 10056  1B93  3000               	movlw	0
 10057  1B94  00A3               	movwf	___wmul@multiplicand+1
 10058  1B95  160A  158A  2280  160A  158A  	fcall	___wmul
 10059  1B9A  1283               	bcf	3,5	;RP0=0, select bank0
 10060  1B9B  1303               	bcf	3,6	;RP1=0, select bank0
 10061  1B9C  082B               	movf	dignum_conc@dig,w
 10062  1B9D  0720               	addwf	?___wmul,w
 10063  1B9E  00A7               	movwf	??_dignum_conc
 10064  1B9F  3000               	movlw	0
 10065  1BA0  1803               	skipnc
 10066  1BA1  3001               	movlw	1
 10067  1BA2  0721               	addwf	?___wmul+1,w
 10068  1BA3  00A8               	movwf	??_dignum_conc+1
 10069  1BA4  0827               	movf	??_dignum_conc,w
 10070  1BA5  3ED0               	addlw	208
 10071  1BA6  00A9               	movwf	??_dignum_conc+2
 10072  1BA7  0828               	movf	??_dignum_conc+1,w
 10073  1BA8  1803               	skipnc
 10074  1BA9  3E01               	addlw	1
 10075  1BAA  3EFF               	addlw	255
 10076  1BAB  00AA               	movwf	??_dignum_conc+3
 10077  1BAC  0826               	movf	dignum_conc@ptrNum,w
 10078  1BAD  0084               	movwf	4
 10079  1BAE  0829               	movf	??_dignum_conc+2,w
 10080  1BAF  1383               	bcf	3,7	;select IRP bank0
 10081  1BB0  0080               	movwf	0
 10082  1BB1  0A84               	incf	4,f
 10083  1BB2  082A               	movf	??_dignum_conc+3,w
 10084  1BB3  0080               	movwf	0
 10085  1BB4                     l400:
 10086  1BB4  0008               	return
 10087  1BB5                     __end_of_dignum_conc:
 10088                           
 10089                           	psect	text56
 10090  1A80                     __ptext56:	
 10091 ;; *************** function ___wmul *****************
 10092 ;; Defined at:
 10093 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 10094 ;; Parameters:    Size  Location     Type
 10095 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10096 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;  product         2    4[BANK0 ] unsigned int 
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  2    0[BANK0 ] unsigned int 
 10101 ;; Registers used:
 10102 ;;		wreg, status,2, status,0
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10108 ;;      Params:         0       4       0       0       0
 10109 ;;      Locals:         0       2       0       0       0
 10110 ;;      Temps:          0       0       0       0       0
 10111 ;;      Totals:         0       6       0       0       0
 10112 ;;Total ram usage:        6 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; Hardware stack levels required when called:    2
 10115 ;; This function calls:
 10116 ;;		Nothing
 10117 ;; This function is called by:
 10118 ;;		_dignum_conc
 10119 ;;		_main
 10120 ;; This function uses a non-reentrant model
 10121 ;;
 10122                           
 10123                           
 10124                           ;psect for function ___wmul
 10125  1A80                     ___wmul:
 10126  1A80                     l6963:	
 10127                           ;incstack = 0
 10128                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10129                           
 10130  1A80  1283               	bcf	3,5	;RP0=0, select bank0
 10131  1A81  1303               	bcf	3,6	;RP1=0, select bank0
 10132  1A82  01A4               	clrf	___wmul@product
 10133  1A83  01A5               	clrf	___wmul@product+1
 10134  1A84                     l6965:
 10135  1A84  1C20               	btfss	___wmul@multiplier,0
 10136  1A85  2A87               	goto	u5191
 10137  1A86  2A88               	goto	u5190
 10138  1A87                     u5191:
 10139  1A87  2A8E               	goto	l1041
 10140  1A88                     u5190:
 10141  1A88                     l6967:
 10142  1A88  0822               	movf	___wmul@multiplicand,w
 10143  1A89  07A4               	addwf	___wmul@product,f
 10144  1A8A  1803               	skipnc
 10145  1A8B  0AA5               	incf	___wmul@product+1,f
 10146  1A8C  0823               	movf	___wmul@multiplicand+1,w
 10147  1A8D  07A5               	addwf	___wmul@product+1,f
 10148  1A8E                     l1041:
 10149  1A8E  3001               	movlw	1
 10150  1A8F                     u5205:
 10151  1A8F  1003               	clrc
 10152  1A90  0DA2               	rlf	___wmul@multiplicand,f
 10153  1A91  0DA3               	rlf	___wmul@multiplicand+1,f
 10154  1A92  3EFF               	addlw	-1
 10155  1A93  1D03               	skipz
 10156  1A94  2A8F               	goto	u5205
 10157  1A95                     l6969:
 10158  1A95  3001               	movlw	1
 10159  1A96                     u5215:
 10160  1A96  1003               	clrc
 10161  1A97  0CA1               	rrf	___wmul@multiplier+1,f
 10162  1A98  0CA0               	rrf	___wmul@multiplier,f
 10163  1A99  3EFF               	addlw	-1
 10164  1A9A  1D03               	skipz
 10165  1A9B  2A96               	goto	u5215
 10166  1A9C                     l6971:
 10167  1A9C  0820               	movf	___wmul@multiplier,w
 10168  1A9D  0421               	iorwf	___wmul@multiplier+1,w
 10169  1A9E  1D03               	btfss	3,2
 10170  1A9F  2AA1               	goto	u5221
 10171  1AA0  2AA2               	goto	u5220
 10172  1AA1                     u5221:
 10173  1AA1  2A84               	goto	l6965
 10174  1AA2                     u5220:
 10175  1AA2                     l6973:
 10176  1AA2  0825               	movf	___wmul@product+1,w
 10177  1AA3  00A1               	movwf	?___wmul+1
 10178  1AA4  0824               	movf	___wmul@product,w
 10179  1AA5  00A0               	movwf	?___wmul
 10180  1AA6                     l1043:
 10181  1AA6  0008               	return
 10182  1AA7                     __end_of___wmul:
 10183                           
 10184                           	psect	text57
 10185  1991                     __ptext57:	
 10186 ;; *************** function _dignum_apagar *****************
 10187 ;; Defined at:
 10188 ;;		line 465 in file "fifo.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  ptrNum          1    wreg     PTR unsigned int 
 10191 ;;		 -> main@ciclos(2), main@num(2), 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  ptrNum          1    8[BANK0 ] PTR unsigned int 
 10194 ;;		 -> main@ciclos(2), main@num(2), 
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  1    wreg      void 
 10197 ;; Registers used:
 10198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10204 ;;      Params:         0       0       0       0       0
 10205 ;;      Locals:         0       1       0       0       0
 10206 ;;      Temps:          0       0       0       0       0
 10207 ;;      Totals:         0       1       0       0       0
 10208 ;;Total ram usage:        1 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    3
 10211 ;; This function calls:
 10212 ;;		___lwdiv
 10213 ;; This function is called by:
 10214 ;;		_main
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           
 10219                           ;psect for function _dignum_apagar
 10220  1991                     _dignum_apagar:
 10221                           
 10222                           ;incstack = 0
 10223                           ; Regs used in _dignum_apagar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10224                           ;dignum_apagar@ptrNum stored from wreg
 10225  1991  1283               	bcf	3,5	;RP0=0, select bank0
 10226  1992  1303               	bcf	3,6	;RP1=0, select bank0
 10227  1993  00A8               	movwf	dignum_apagar@ptrNum
 10228  1994                     l7461:
 10229                           
 10230                           ;fifo.c: 465: void dignum_apagar(unsigned int * ptrNum );fifo.c: 466: {;fifo.c: 467:    
      +                           *ptrNum /= 10;
 10231  1994  300A               	movlw	10
 10232  1995  00A0               	movwf	___lwdiv@divisor
 10233  1996  3000               	movlw	0
 10234  1997  00A1               	movwf	___lwdiv@divisor+1
 10235  1998  0828               	movf	dignum_apagar@ptrNum,w
 10236  1999  0084               	movwf	4
 10237  199A  1383               	bcf	3,7	;select IRP bank0
 10238  199B  0800               	movf	0,w
 10239  199C  00A2               	movwf	___lwdiv@dividend
 10240  199D  0A84               	incf	4,f
 10241  199E  0800               	movf	0,w
 10242  199F  00A3               	movwf	___lwdiv@dividend+1
 10243  19A0  160A  158A  2680  160A  158A  	fcall	___lwdiv
 10244  19A5  1283               	bcf	3,5	;RP0=0, select bank0
 10245  19A6  1303               	bcf	3,6	;RP1=0, select bank0
 10246  19A7  0828               	movf	dignum_apagar@ptrNum,w
 10247  19A8  0084               	movwf	4
 10248  19A9  0820               	movf	?___lwdiv,w
 10249  19AA  1383               	bcf	3,7	;select IRP bank0
 10250  19AB  0080               	movwf	0
 10251  19AC  0A84               	incf	4,f
 10252  19AD  0821               	movf	?___lwdiv+1,w
 10253  19AE  0080               	movwf	0
 10254  19AF                     l403:
 10255  19AF  0008               	return
 10256  19B0                     __end_of_dignum_apagar:
 10257                           
 10258                           	psect	text58
 10259  1E80                     __ptext58:	
 10260 ;; *************** function ___lwdiv *****************
 10261 ;; Defined at:
 10262 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;  divisor         2    0[BANK0 ] unsigned int 
 10265 ;;  dividend        2    2[BANK0 ] unsigned int 
 10266 ;; Auto vars:     Size  Location     Type
 10267 ;;  quotient        2    6[BANK0 ] unsigned int 
 10268 ;;  counter         1    5[BANK0 ] unsigned char 
 10269 ;; Return value:  Size  Location     Type
 10270 ;;                  2    0[BANK0 ] unsigned int 
 10271 ;; Registers used:
 10272 ;;		wreg, status,2, status,0
 10273 ;; Tracked objects:
 10274 ;;		On entry : 0/0
 10275 ;;		On exit  : 0/0
 10276 ;;		Unchanged: 0/0
 10277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10278 ;;      Params:         0       4       0       0       0
 10279 ;;      Locals:         0       3       0       0       0
 10280 ;;      Temps:          0       1       0       0       0
 10281 ;;      Totals:         0       8       0       0       0
 10282 ;;Total ram usage:        8 bytes
 10283 ;; Hardware stack levels used:    1
 10284 ;; Hardware stack levels required when called:    2
 10285 ;; This function calls:
 10286 ;;		Nothing
 10287 ;; This function is called by:
 10288 ;;		_dignum_apagar
 10289 ;; This function uses a non-reentrant model
 10290 ;;
 10291                           
 10292                           
 10293                           ;psect for function ___lwdiv
 10294  1E80                     ___lwdiv:
 10295  1E80                     l7001:	
 10296                           ;incstack = 0
 10297                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10298                           
 10299  1E80  1283               	bcf	3,5	;RP0=0, select bank0
 10300  1E81  1303               	bcf	3,6	;RP1=0, select bank0
 10301  1E82  01A6               	clrf	___lwdiv@quotient
 10302  1E83  01A7               	clrf	___lwdiv@quotient+1
 10303  1E84                     l7003:
 10304  1E84  0820               	movf	___lwdiv@divisor,w
 10305  1E85  0421               	iorwf	___lwdiv@divisor+1,w
 10306  1E86  1903               	btfsc	3,2
 10307  1E87  2E89               	goto	u5301
 10308  1E88  2E8A               	goto	u5300
 10309  1E89                     u5301:
 10310  1E89  2EC1               	goto	l7023
 10311  1E8A                     u5300:
 10312  1E8A                     l7005:
 10313  1E8A  01A5               	clrf	___lwdiv@counter
 10314  1E8B  0AA5               	incf	___lwdiv@counter,f
 10315  1E8C  2E98               	goto	l7011
 10316  1E8D                     l7007:
 10317  1E8D  3001               	movlw	1
 10318  1E8E                     u5315:
 10319  1E8E  1003               	clrc
 10320  1E8F  0DA0               	rlf	___lwdiv@divisor,f
 10321  1E90  0DA1               	rlf	___lwdiv@divisor+1,f
 10322  1E91  3EFF               	addlw	-1
 10323  1E92  1D03               	skipz
 10324  1E93  2E8E               	goto	u5315
 10325  1E94                     l7009:
 10326  1E94  3001               	movlw	1
 10327  1E95  00A4               	movwf	??___lwdiv
 10328  1E96  0824               	movf	??___lwdiv,w
 10329  1E97  07A5               	addwf	___lwdiv@counter,f
 10330  1E98                     l7011:
 10331  1E98  1FA1               	btfss	___lwdiv@divisor+1,7
 10332  1E99  2E9B               	goto	u5321
 10333  1E9A  2E9C               	goto	u5320
 10334  1E9B                     u5321:
 10335  1E9B  2E8D               	goto	l7007
 10336  1E9C                     u5320:
 10337  1E9C                     l7013:
 10338  1E9C  3001               	movlw	1
 10339  1E9D                     u5335:
 10340  1E9D  1003               	clrc
 10341  1E9E  0DA6               	rlf	___lwdiv@quotient,f
 10342  1E9F  0DA7               	rlf	___lwdiv@quotient+1,f
 10343  1EA0  3EFF               	addlw	-1
 10344  1EA1  1D03               	skipz
 10345  1EA2  2E9D               	goto	u5335
 10346  1EA3  0821               	movf	___lwdiv@divisor+1,w
 10347  1EA4  0223               	subwf	___lwdiv@dividend+1,w
 10348  1EA5  1D03               	skipz
 10349  1EA6  2EA9               	goto	u5345
 10350  1EA7  0820               	movf	___lwdiv@divisor,w
 10351  1EA8  0222               	subwf	___lwdiv@dividend,w
 10352  1EA9                     u5345:
 10353  1EA9  1C03               	skipc
 10354  1EAA  2EAC               	goto	u5341
 10355  1EAB  2EAD               	goto	u5340
 10356  1EAC                     u5341:
 10357  1EAC  2EB4               	goto	l7019
 10358  1EAD                     u5340:
 10359  1EAD                     l7015:
 10360  1EAD  0820               	movf	___lwdiv@divisor,w
 10361  1EAE  02A2               	subwf	___lwdiv@dividend,f
 10362  1EAF  0821               	movf	___lwdiv@divisor+1,w
 10363  1EB0  1C03               	skipc
 10364  1EB1  03A3               	decf	___lwdiv@dividend+1,f
 10365  1EB2  02A3               	subwf	___lwdiv@dividend+1,f
 10366  1EB3                     l7017:
 10367  1EB3  1426               	bsf	___lwdiv@quotient,0
 10368  1EB4                     l7019:
 10369  1EB4  3001               	movlw	1
 10370  1EB5                     u5355:
 10371  1EB5  1003               	clrc
 10372  1EB6  0CA1               	rrf	___lwdiv@divisor+1,f
 10373  1EB7  0CA0               	rrf	___lwdiv@divisor,f
 10374  1EB8  3EFF               	addlw	-1
 10375  1EB9  1D03               	skipz
 10376  1EBA  2EB5               	goto	u5355
 10377  1EBB                     l7021:
 10378  1EBB  3001               	movlw	1
 10379  1EBC  02A5               	subwf	___lwdiv@counter,f
 10380  1EBD  1D03               	btfss	3,2
 10381  1EBE  2EC0               	goto	u5361
 10382  1EBF  2EC1               	goto	u5360
 10383  1EC0                     u5361:
 10384  1EC0  2E9C               	goto	l7013
 10385  1EC1                     u5360:
 10386  1EC1                     l7023:
 10387  1EC1  0827               	movf	___lwdiv@quotient+1,w
 10388  1EC2  00A1               	movwf	?___lwdiv+1
 10389  1EC3  0826               	movf	___lwdiv@quotient,w
 10390  1EC4  00A0               	movwf	?___lwdiv
 10391  1EC5                     l1313:
 10392  1EC5  0008               	return
 10393  1EC6                     __end_of___lwdiv:
 10394                           
 10395                           	psect	text59
 10396  1000                     __ptext59:	
 10397 ;; *************** function _addIndicePassos *****************
 10398 ;; Defined at:
 10399 ;;		line 19 in file "fifo.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;		None
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;		None
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  1    wreg      void 
 10406 ;; Registers used:
 10407 ;;		wreg, status,2, status,0
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10413 ;;      Params:         0       0       0       0       0
 10414 ;;      Locals:         0       0       0       0       0
 10415 ;;      Temps:          0       1       0       0       0
 10416 ;;      Totals:         0       1       0       0       0
 10417 ;;Total ram usage:        1 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    2
 10420 ;; This function calls:
 10421 ;;		Nothing
 10422 ;; This function is called by:
 10423 ;;		_main
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427                           
 10428                           ;psect for function _addIndicePassos
 10429  1000                     _addIndicePassos:
 10430  1000                     l7193:	
 10431                           ;incstack = 0
 10432                           ; Regs used in _addIndicePassos: [wreg+status,2+status,0]
 10433                           
 10434                           
 10435                           ;fifo.c: 21:     if(indice_passos < ind_fila)
 10436  1000  1283               	bcf	3,5	;RP0=0, select bank0
 10437  1001  1303               	bcf	3,6	;RP1=0, select bank0
 10438  1002  0867               	movf	_ind_fila,w
 10439  1003  027B               	subwf	_indice_passos,w
 10440  1004  1803               	skipnc
 10441  1005  2807               	goto	u5411
 10442  1006  2808               	goto	u5410
 10443  1007                     u5411:
 10444  1007  280C               	goto	l203
 10445  1008                     u5410:
 10446  1008                     l7195:
 10447                           
 10448                           ;fifo.c: 22:         indice_passos++;
 10449  1008  3001               	movlw	1
 10450  1009  00A0               	movwf	??_addIndicePassos
 10451  100A  0820               	movf	??_addIndicePassos,w
 10452  100B  07FB               	addwf	_indice_passos,f
 10453  100C                     l203:
 10454  100C  0008               	return
 10455  100D                     __end_of_addIndicePassos:
 10456                           
 10457                           	psect	text60
 10458  183C                     __ptext60:	
 10459 ;; *************** function _addContCiclos *****************
 10460 ;; Defined at:
 10461 ;;		line 59 in file "fifo.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;		None
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;		None
 10466 ;; Return value:  Size  Location     Type
 10467 ;;                  1    wreg      void 
 10468 ;; Registers used:
 10469 ;;		wreg
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10475 ;;      Params:         0       0       0       0       0
 10476 ;;      Locals:         0       0       0       0       0
 10477 ;;      Temps:          0       0       0       0       0
 10478 ;;      Totals:         0       0       0       0       0
 10479 ;;Total ram usage:        0 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    2
 10482 ;; This function calls:
 10483 ;;		Nothing
 10484 ;; This function is called by:
 10485 ;;		_main
 10486 ;; This function uses a non-reentrant model
 10487 ;;
 10488                           
 10489                           
 10490                           ;psect for function _addContCiclos
 10491  183C                     _addContCiclos:
 10492  183C                     l7209:	
 10493                           ;incstack = 0
 10494                           ; Regs used in _addContCiclos: [wreg]
 10495                           
 10496                           
 10497                           ;fifo.c: 61:     cont_ciclos++;
 10498  183C  3001               	movlw	1
 10499  183D  07F6               	addwf	_cont_ciclos,f
 10500  183E  1803               	skipnc
 10501  183F  0AF7               	incf	_cont_ciclos+1,f
 10502  1840  3000               	movlw	0
 10503  1841  07F7               	addwf	_cont_ciclos+1,f
 10504  1842                     l225:
 10505  1842  0008               	return
 10506  1843                     __end_of_addContCiclos:
 10507                           
 10508                           	psect	text61
 10509  1EC6                     __ptext61:	
 10510 ;; *************** function ___lmul *****************
 10511 ;; Defined at:
 10512 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul32.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;  multiplier      4    0[BANK0 ] unsigned long 
 10515 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;  product         4    9[BANK0 ] unsigned long 
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  4    0[BANK0 ] unsigned long 
 10520 ;; Registers used:
 10521 ;;		wreg, status,2, status,0
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10527 ;;      Params:         0       8       0       0       0
 10528 ;;      Locals:         0       4       0       0       0
 10529 ;;      Temps:          0       1       0       0       0
 10530 ;;      Totals:         0      13       0       0       0
 10531 ;;Total ram usage:       13 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    2
 10534 ;; This function calls:
 10535 ;;		Nothing
 10536 ;; This function is called by:
 10537 ;;		_main
 10538 ;; This function uses a non-reentrant model
 10539 ;;
 10540                           
 10541                           
 10542                           ;psect for function ___lmul
 10543  1EC6                     ___lmul:
 10544  1EC6                     l7617:	
 10545                           ;incstack = 0
 10546                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10547                           
 10548  1EC6  3000               	movlw	0
 10549  1EC7  1283               	bcf	3,5	;RP0=0, select bank0
 10550  1EC8  1303               	bcf	3,6	;RP1=0, select bank0
 10551  1EC9  00AC               	movwf	___lmul@product+3
 10552  1ECA  3000               	movlw	0
 10553  1ECB  00AB               	movwf	___lmul@product+2
 10554  1ECC  3000               	movlw	0
 10555  1ECD  00AA               	movwf	___lmul@product+1
 10556  1ECE  3000               	movlw	0
 10557  1ECF  00A9               	movwf	___lmul@product
 10558  1ED0                     l7619:
 10559  1ED0  1C20               	btfss	___lmul@multiplier,0
 10560  1ED1  2ED3               	goto	u5871
 10561  1ED2  2ED4               	goto	u5870
 10562  1ED3                     u5871:
 10563  1ED3  2EEB               	goto	l7623
 10564  1ED4                     u5870:
 10565  1ED4                     l7621:
 10566  1ED4  0824               	movf	___lmul@multiplicand,w
 10567  1ED5  07A9               	addwf	___lmul@product,f
 10568  1ED6  0825               	movf	___lmul@multiplicand+1,w
 10569  1ED7  1103               	clrz
 10570  1ED8  1803               	skipnc
 10571  1ED9  3E01               	addlw	1
 10572  1EDA  1903               	skipnz
 10573  1EDB  2EDD               	goto	u5881
 10574  1EDC  07AA               	addwf	___lmul@product+1,f
 10575  1EDD                     u5881:
 10576  1EDD  0826               	movf	___lmul@multiplicand+2,w
 10577  1EDE  1103               	clrz
 10578  1EDF  1803               	skipnc
 10579  1EE0  3E01               	addlw	1
 10580  1EE1  1903               	skipnz
 10581  1EE2  2EE4               	goto	u5882
 10582  1EE3  07AB               	addwf	___lmul@product+2,f
 10583  1EE4                     u5882:
 10584  1EE4  0827               	movf	___lmul@multiplicand+3,w
 10585  1EE5  1103               	clrz
 10586  1EE6  1803               	skipnc
 10587  1EE7  3E01               	addlw	1
 10588  1EE8  1903               	skipnz
 10589  1EE9  2EEB               	goto	u5883
 10590  1EEA  07AC               	addwf	___lmul@product+3,f
 10591  1EEB                     u5883:
 10592  1EEB                     l7623:
 10593  1EEB  3001               	movlw	1
 10594  1EEC  00A8               	movwf	??___lmul
 10595  1EED                     u5895:
 10596  1EED  1003               	clrc
 10597  1EEE  0DA4               	rlf	___lmul@multiplicand,f
 10598  1EEF  0DA5               	rlf	___lmul@multiplicand+1,f
 10599  1EF0  0DA6               	rlf	___lmul@multiplicand+2,f
 10600  1EF1  0DA7               	rlf	___lmul@multiplicand+3,f
 10601  1EF2  0BA8               	decfsz	??___lmul,f
 10602  1EF3  2EED               	goto	u5895
 10603  1EF4                     l7625:
 10604  1EF4  3001               	movlw	1
 10605  1EF5                     u5905:
 10606  1EF5  1003               	clrc
 10607  1EF6  0CA3               	rrf	___lmul@multiplier+3,f
 10608  1EF7  0CA2               	rrf	___lmul@multiplier+2,f
 10609  1EF8  0CA1               	rrf	___lmul@multiplier+1,f
 10610  1EF9  0CA0               	rrf	___lmul@multiplier,f
 10611  1EFA  3EFF               	addlw	-1
 10612  1EFB  1D03               	skipz
 10613  1EFC  2EF5               	goto	u5905
 10614  1EFD  0823               	movf	___lmul@multiplier+3,w
 10615  1EFE  0422               	iorwf	___lmul@multiplier+2,w
 10616  1EFF  0421               	iorwf	___lmul@multiplier+1,w
 10617  1F00  0420               	iorwf	___lmul@multiplier,w
 10618  1F01  1D03               	skipz
 10619  1F02  2F04               	goto	u5911
 10620  1F03  2F05               	goto	u5910
 10621  1F04                     u5911:
 10622  1F04  2ED0               	goto	l7619
 10623  1F05                     u5910:
 10624  1F05                     l7627:
 10625  1F05  082C               	movf	___lmul@product+3,w
 10626  1F06  00A3               	movwf	?___lmul+3
 10627  1F07  082B               	movf	___lmul@product+2,w
 10628  1F08  00A2               	movwf	?___lmul+2
 10629  1F09  082A               	movf	___lmul@product+1,w
 10630  1F0A  00A1               	movwf	?___lmul+1
 10631  1F0B  0829               	movf	___lmul@product,w
 10632  1F0C  00A0               	movwf	?___lmul
 10633  1F0D                     l1055:
 10634  1F0D  0008               	return
 10635  1F0E                     __end_of___lmul:
 10636                           
 10637                           	psect	text62
 10638  136F                     __ptext62:	
 10639 ;; *************** function ___aldiv *****************
 10640 ;; Defined at:
 10641 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\aldiv.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;  divisor         4   13[BANK0 ] long 
 10644 ;;  dividend        4   17[BANK0 ] long 
 10645 ;; Auto vars:     Size  Location     Type
 10646 ;;  quotient        4   24[BANK0 ] long 
 10647 ;;  sign            1   23[BANK0 ] unsigned char 
 10648 ;;  counter         1   22[BANK0 ] unsigned char 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  4   13[BANK0 ] long 
 10651 ;; Registers used:
 10652 ;;		wreg, status,2, status,0
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10658 ;;      Params:         0       8       0       0       0
 10659 ;;      Locals:         0       6       0       0       0
 10660 ;;      Temps:          0       1       0       0       0
 10661 ;;      Totals:         0      15       0       0       0
 10662 ;;Total ram usage:       15 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    2
 10665 ;; This function calls:
 10666 ;;		Nothing
 10667 ;; This function is called by:
 10668 ;;		_main
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           
 10673                           ;psect for function ___aldiv
 10674  136F                     ___aldiv:
 10675  136F                     l7631:	
 10676                           ;incstack = 0
 10677                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10678                           
 10679  136F  1283               	bcf	3,5	;RP0=0, select bank0
 10680  1370  1303               	bcf	3,6	;RP1=0, select bank0
 10681  1371  01B7               	clrf	___aldiv@sign
 10682  1372                     l7633:
 10683  1372  1FB0               	btfss	___aldiv@divisor+3,7
 10684  1373  2B75               	goto	u5921
 10685  1374  2B76               	goto	u5920
 10686  1375                     u5921:
 10687  1375  2B83               	goto	l1106
 10688  1376                     u5920:
 10689  1376                     l7635:
 10690  1376  09AD               	comf	___aldiv@divisor,f
 10691  1377  09AE               	comf	___aldiv@divisor+1,f
 10692  1378  09AF               	comf	___aldiv@divisor+2,f
 10693  1379  09B0               	comf	___aldiv@divisor+3,f
 10694  137A  0AAD               	incf	___aldiv@divisor,f
 10695  137B  1903               	skipnz
 10696  137C  0AAE               	incf	___aldiv@divisor+1,f
 10697  137D  1903               	skipnz
 10698  137E  0AAF               	incf	___aldiv@divisor+2,f
 10699  137F  1903               	skipnz
 10700  1380  0AB0               	incf	___aldiv@divisor+3,f
 10701  1381  01B7               	clrf	___aldiv@sign
 10702  1382  0AB7               	incf	___aldiv@sign,f
 10703  1383                     l1106:
 10704  1383  1FB4               	btfss	___aldiv@dividend+3,7
 10705  1384  2B86               	goto	u5931
 10706  1385  2B87               	goto	u5930
 10707  1386                     u5931:
 10708  1386  2B96               	goto	l7641
 10709  1387                     u5930:
 10710  1387                     l7637:
 10711  1387  09B1               	comf	___aldiv@dividend,f
 10712  1388  09B2               	comf	___aldiv@dividend+1,f
 10713  1389  09B3               	comf	___aldiv@dividend+2,f
 10714  138A  09B4               	comf	___aldiv@dividend+3,f
 10715  138B  0AB1               	incf	___aldiv@dividend,f
 10716  138C  1903               	skipnz
 10717  138D  0AB2               	incf	___aldiv@dividend+1,f
 10718  138E  1903               	skipnz
 10719  138F  0AB3               	incf	___aldiv@dividend+2,f
 10720  1390  1903               	skipnz
 10721  1391  0AB4               	incf	___aldiv@dividend+3,f
 10722  1392                     l7639:
 10723  1392  3001               	movlw	1
 10724  1393  00B5               	movwf	??___aldiv
 10725  1394  0835               	movf	??___aldiv,w
 10726  1395  06B7               	xorwf	___aldiv@sign,f
 10727  1396                     l7641:
 10728  1396  3000               	movlw	0
 10729  1397  00BB               	movwf	___aldiv@quotient+3
 10730  1398  3000               	movlw	0
 10731  1399  00BA               	movwf	___aldiv@quotient+2
 10732  139A  3000               	movlw	0
 10733  139B  00B9               	movwf	___aldiv@quotient+1
 10734  139C  3000               	movlw	0
 10735  139D  00B8               	movwf	___aldiv@quotient
 10736  139E                     l7643:
 10737  139E  0830               	movf	___aldiv@divisor+3,w
 10738  139F  042F               	iorwf	___aldiv@divisor+2,w
 10739  13A0  042E               	iorwf	___aldiv@divisor+1,w
 10740  13A1  042D               	iorwf	___aldiv@divisor,w
 10741  13A2  1903               	skipnz
 10742  13A3  2BA5               	goto	u5941
 10743  13A4  2BA6               	goto	u5940
 10744  13A5                     u5941:
 10745  13A5  2BF3               	goto	l7663
 10746  13A6                     u5940:
 10747  13A6                     l7645:
 10748  13A6  01B6               	clrf	___aldiv@counter
 10749  13A7  0AB6               	incf	___aldiv@counter,f
 10750  13A8  2BB6               	goto	l7649
 10751  13A9                     l7647:
 10752  13A9  3001               	movlw	1
 10753  13AA  00B5               	movwf	??___aldiv
 10754  13AB                     u5955:
 10755  13AB  1003               	clrc
 10756  13AC  0DAD               	rlf	___aldiv@divisor,f
 10757  13AD  0DAE               	rlf	___aldiv@divisor+1,f
 10758  13AE  0DAF               	rlf	___aldiv@divisor+2,f
 10759  13AF  0DB0               	rlf	___aldiv@divisor+3,f
 10760  13B0  0BB5               	decfsz	??___aldiv,f
 10761  13B1  2BAB               	goto	u5955
 10762  13B2  3001               	movlw	1
 10763  13B3  00B5               	movwf	??___aldiv
 10764  13B4  0835               	movf	??___aldiv,w
 10765  13B5  07B6               	addwf	___aldiv@counter,f
 10766  13B6                     l7649:
 10767  13B6  1FB0               	btfss	___aldiv@divisor+3,7
 10768  13B7  2BB9               	goto	u5961
 10769  13B8  2BBA               	goto	u5960
 10770  13B9                     u5961:
 10771  13B9  2BA9               	goto	l7647
 10772  13BA                     u5960:
 10773  13BA                     l7651:
 10774  13BA  3001               	movlw	1
 10775  13BB  00B5               	movwf	??___aldiv
 10776  13BC                     u5975:
 10777  13BC  1003               	clrc
 10778  13BD  0DB8               	rlf	___aldiv@quotient,f
 10779  13BE  0DB9               	rlf	___aldiv@quotient+1,f
 10780  13BF  0DBA               	rlf	___aldiv@quotient+2,f
 10781  13C0  0DBB               	rlf	___aldiv@quotient+3,f
 10782  13C1  0BB5               	decfsz	??___aldiv,f
 10783  13C2  2BBC               	goto	u5975
 10784  13C3                     l7653:
 10785  13C3  0830               	movf	___aldiv@divisor+3,w
 10786  13C4  0234               	subwf	___aldiv@dividend+3,w
 10787  13C5  1D03               	skipz
 10788  13C6  2BD1               	goto	u5985
 10789  13C7  082F               	movf	___aldiv@divisor+2,w
 10790  13C8  0233               	subwf	___aldiv@dividend+2,w
 10791  13C9  1D03               	skipz
 10792  13CA  2BD1               	goto	u5985
 10793  13CB  082E               	movf	___aldiv@divisor+1,w
 10794  13CC  0232               	subwf	___aldiv@dividend+1,w
 10795  13CD  1D03               	skipz
 10796  13CE  2BD1               	goto	u5985
 10797  13CF  082D               	movf	___aldiv@divisor,w
 10798  13D0  0231               	subwf	___aldiv@dividend,w
 10799  13D1                     u5985:
 10800  13D1  1C03               	skipc
 10801  13D2  2BD4               	goto	u5981
 10802  13D3  2BD5               	goto	u5980
 10803  13D4                     u5981:
 10804  13D4  2BE4               	goto	l7659
 10805  13D5                     u5980:
 10806  13D5                     l7655:
 10807  13D5  082D               	movf	___aldiv@divisor,w
 10808  13D6  02B1               	subwf	___aldiv@dividend,f
 10809  13D7  082E               	movf	___aldiv@divisor+1,w
 10810  13D8  1C03               	skipc
 10811  13D9  0F2E               	incfsz	___aldiv@divisor+1,w
 10812  13DA  02B2               	subwf	___aldiv@dividend+1,f
 10813  13DB  082F               	movf	___aldiv@divisor+2,w
 10814  13DC  1C03               	skipc
 10815  13DD  0F2F               	incfsz	___aldiv@divisor+2,w
 10816  13DE  02B3               	subwf	___aldiv@dividend+2,f
 10817  13DF  0830               	movf	___aldiv@divisor+3,w
 10818  13E0  1C03               	skipc
 10819  13E1  0F30               	incfsz	___aldiv@divisor+3,w
 10820  13E2  02B4               	subwf	___aldiv@dividend+3,f
 10821  13E3                     l7657:
 10822  13E3  1438               	bsf	___aldiv@quotient,0
 10823  13E4                     l7659:
 10824  13E4  3001               	movlw	1
 10825  13E5                     u5995:
 10826  13E5  1003               	clrc
 10827  13E6  0CB0               	rrf	___aldiv@divisor+3,f
 10828  13E7  0CAF               	rrf	___aldiv@divisor+2,f
 10829  13E8  0CAE               	rrf	___aldiv@divisor+1,f
 10830  13E9  0CAD               	rrf	___aldiv@divisor,f
 10831  13EA  3EFF               	addlw	-1
 10832  13EB  1D03               	skipz
 10833  13EC  2BE5               	goto	u5995
 10834  13ED                     l7661:
 10835  13ED  3001               	movlw	1
 10836  13EE  02B6               	subwf	___aldiv@counter,f
 10837  13EF  1D03               	btfss	3,2
 10838  13F0  2BF2               	goto	u6001
 10839  13F1  2BF3               	goto	u6000
 10840  13F2                     u6001:
 10841  13F2  2BBA               	goto	l7651
 10842  13F3                     u6000:
 10843  13F3                     l7663:
 10844  13F3  0837               	movf	___aldiv@sign,w
 10845  13F4  1903               	btfsc	3,2
 10846  13F5  2BF7               	goto	u6011
 10847  13F6  2BF8               	goto	u6010
 10848  13F7                     u6011:
 10849  13F7  2C03               	goto	l7667
 10850  13F8                     u6010:
 10851  13F8                     l7665:
 10852  13F8  09B8               	comf	___aldiv@quotient,f
 10853  13F9  09B9               	comf	___aldiv@quotient+1,f
 10854  13FA  09BA               	comf	___aldiv@quotient+2,f
 10855  13FB  09BB               	comf	___aldiv@quotient+3,f
 10856  13FC  0AB8               	incf	___aldiv@quotient,f
 10857  13FD  1903               	skipnz
 10858  13FE  0AB9               	incf	___aldiv@quotient+1,f
 10859  13FF  1903               	skipnz
 10860  1400  0ABA               	incf	___aldiv@quotient+2,f
 10861  1401  1903               	skipnz
 10862  1402  0ABB               	incf	___aldiv@quotient+3,f
 10863  1403                     l7667:
 10864  1403  083B               	movf	___aldiv@quotient+3,w
 10865  1404  00B0               	movwf	?___aldiv+3
 10866  1405  083A               	movf	___aldiv@quotient+2,w
 10867  1406  00AF               	movwf	?___aldiv+2
 10868  1407  0839               	movf	___aldiv@quotient+1,w
 10869  1408  00AE               	movwf	?___aldiv+1
 10870  1409  0838               	movf	___aldiv@quotient,w
 10871  140A  00AD               	movwf	?___aldiv
 10872  140B                     l1116:
 10873  140B  0008               	return
 10874  140C                     __end_of___aldiv:
 10875                           
 10876                           	psect	text63
 10877  19B0                     __ptext63:	
 10878 ;; *************** function _MCP4725 *****************
 10879 ;; Defined at:
 10880 ;;		line 35 in file "MCP4725.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;  Vout            2   28[BANK0 ] unsigned int 
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;		None
 10885 ;; Return value:  Size  Location     Type
 10886 ;;                  1    wreg      void 
 10887 ;; Registers used:
 10888 ;;		wreg, status,2, status,0, pclath, cstack
 10889 ;; Tracked objects:
 10890 ;;		On entry : 0/0
 10891 ;;		On exit  : 0/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10894 ;;      Params:         0       2       0       0       0
 10895 ;;      Locals:         0       0       0       0       0
 10896 ;;      Temps:          0       0       0       0       0
 10897 ;;      Totals:         0       2       0       0       0
 10898 ;;Total ram usage:        2 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; Hardware stack levels required when called:    4
 10901 ;; This function calls:
 10902 ;;		_I2C_stop
 10903 ;;		_dac_init
 10904 ;;		_dac_write
 10905 ;;		_delay
 10906 ;; This function is called by:
 10907 ;;		_main
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           
 10912                           ;psect for function _MCP4725
 10913  19B0                     _MCP4725:
 10914  19B0                     l7611:	
 10915                           ;incstack = 0
 10916                           ; Regs used in _MCP4725: [wreg+status,2+status,0+pclath+cstack]
 10917                           
 10918                           
 10919                           ;MCP4725.c: 35: void MCP4725 (unsigned int Vout);MCP4725.c: 36: {;MCP4725.c: 37:     dac
      +                          _init();
 10920  19B0  160A  158A  25BF  160A  158A  	fcall	_dac_init
 10921                           
 10922                           ;MCP4725.c: 38:     dac_write(Vout);
 10923  19B5  1283               	bcf	3,5	;RP0=0, select bank0
 10924  19B6  1303               	bcf	3,6	;RP1=0, select bank0
 10925  19B7  083D               	movf	MCP4725@Vout+1,w
 10926  19B8  00A5               	movwf	dac_write@code+1
 10927  19B9  083C               	movf	MCP4725@Vout,w
 10928  19BA  00A4               	movwf	dac_write@code
 10929  19BB  160A  158A  263B  160A  158A  	fcall	_dac_write
 10930  19C0                     l7613:
 10931                           
 10932                           ;MCP4725.c: 39:     I2C_stop();
 10933  19C0  160A  158A  206A  160A  158A  	fcall	_I2C_stop
 10934  19C5                     l7615:
 10935                           
 10936                           ;MCP4725.c: 40:     delay(1);
 10937  19C5  3001               	movlw	1
 10938  19C6  1283               	bcf	3,5	;RP0=0, select bank0
 10939  19C7  1303               	bcf	3,6	;RP1=0, select bank0
 10940  19C8  00A0               	movwf	delay@t
 10941  19C9  3000               	movlw	0
 10942  19CA  00A1               	movwf	delay@t+1
 10943  19CB  160A  158A  2138  160A  158A  	fcall	_delay
 10944  19D0                     l885:
 10945  19D0  0008               	return
 10946  19D1                     __end_of_MCP4725:
 10947                           
 10948                           	psect	text64
 10949  1E3B                     __ptext64:	
 10950 ;; *************** function _dac_write *****************
 10951 ;; Defined at:
 10952 ;;		line 25 in file "MCP4725.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;  code            2    4[BANK0 ] unsigned int 
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;		None
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      void 
 10959 ;; Registers used:
 10960 ;;		wreg, status,2, status,0, pclath, cstack
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10966 ;;      Params:         0       2       0       0       0
 10967 ;;      Locals:         0       0       0       0       0
 10968 ;;      Temps:          0       2       0       0       0
 10969 ;;      Totals:         0       4       0       0       0
 10970 ;;Total ram usage:        4 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; Hardware stack levels required when called:    3
 10973 ;; This function calls:
 10974 ;;		_I2C_ack_receive
 10975 ;;		_I2C_tx
 10976 ;;		_delay
 10977 ;; This function is called by:
 10978 ;;		_MCP4725
 10979 ;;		_MCP4725X
 10980 ;; This function uses a non-reentrant model
 10981 ;;
 10982                           
 10983                           
 10984                           ;psect for function _dac_write
 10985  1E3B                     _dac_write:
 10986  1E3B                     l6951:	
 10987                           ;incstack = 0
 10988                           ; Regs used in _dac_write: [wreg+status,2+status,0+pclath+cstack]
 10989                           
 10990                           
 10991                           ;MCP4725.c: 25: void dac_write ( unsigned int code );MCP4725.c: 26: {;MCP4725.c: 27:    
      +                           I2C_tx( code >> 4 );
 10992  1E3B  1283               	bcf	3,5	;RP0=0, select bank0
 10993  1E3C  1303               	bcf	3,6	;RP1=0, select bank0
 10994  1E3D  0825               	movf	dac_write@code+1,w
 10995  1E3E  00A7               	movwf	??_dac_write+1
 10996  1E3F  0824               	movf	dac_write@code,w
 10997  1E40  00A6               	movwf	??_dac_write
 10998  1E41  3004               	movlw	4
 10999  1E42                     u5165:
 11000  1E42  1003               	clrc
 11001  1E43  0CA7               	rrf	??_dac_write+1,f
 11002  1E44  0CA6               	rrf	??_dac_write,f
 11003  1E45  3EFF               	addlw	-1
 11004  1E46  1D03               	skipz
 11005  1E47  2E42               	goto	u5165
 11006  1E48  0826               	movf	??_dac_write,w
 11007  1E49  160A  158A  20B4  160A  158A  	fcall	_I2C_tx
 11008  1E4E                     l6953:
 11009                           
 11010                           ;MCP4725.c: 28:     I2C_ack_receive();
 11011  1E4E  160A  158A  2035  160A  158A  	fcall	_I2C_ack_receive
 11012  1E53                     l6955:
 11013                           
 11014                           ;MCP4725.c: 29:     delay(1);
 11015  1E53  3001               	movlw	1
 11016  1E54  1283               	bcf	3,5	;RP0=0, select bank0
 11017  1E55  1303               	bcf	3,6	;RP1=0, select bank0
 11018  1E56  00A0               	movwf	delay@t
 11019  1E57  3000               	movlw	0
 11020  1E58  00A1               	movwf	delay@t+1
 11021  1E59  160A  158A  2138  160A  158A  	fcall	_delay
 11022  1E5E                     l6957:
 11023                           
 11024                           ;MCP4725.c: 30:     I2C_tx( code << 4);
 11025  1E5E  1283               	bcf	3,5	;RP0=0, select bank0
 11026  1E5F  1303               	bcf	3,6	;RP1=0, select bank0
 11027  1E60  0824               	movf	dac_write@code,w
 11028  1E61  00A6               	movwf	??_dac_write
 11029  1E62  3003               	movlw	3
 11030  1E63                     u5175:
 11031  1E63  1003               	clrc
 11032  1E64  0DA6               	rlf	??_dac_write,f
 11033  1E65  3EFF               	addlw	-1
 11034  1E66  1D03               	skipz
 11035  1E67  2E63               	goto	u5175
 11036  1E68  1003               	clrc
 11037  1E69  0D26               	rlf	??_dac_write,w
 11038  1E6A  160A  158A  20B4  160A  158A  	fcall	_I2C_tx
 11039  1E6F                     l6959:
 11040                           
 11041                           ;MCP4725.c: 31:     I2C_ack_receive();
 11042  1E6F  160A  158A  2035  160A  158A  	fcall	_I2C_ack_receive
 11043                           
 11044                           ;MCP4725.c: 32:     delay(1);
 11045  1E74  3001               	movlw	1
 11046  1E75  1283               	bcf	3,5	;RP0=0, select bank0
 11047  1E76  1303               	bcf	3,6	;RP1=0, select bank0
 11048  1E77  00A0               	movwf	delay@t
 11049  1E78  3000               	movlw	0
 11050  1E79  00A1               	movwf	delay@t+1
 11051  1E7A  160A  158A  2138  160A  158A  	fcall	_delay
 11052  1E7F                     l882:
 11053  1E7F  0008               	return
 11054  1E80                     __end_of_dac_write:
 11055                           
 11056                           	psect	text65
 11057  1DBF                     __ptext65:	
 11058 ;; *************** function _dac_init *****************
 11059 ;; Defined at:
 11060 ;;		line 13 in file "MCP4725.c"
 11061 ;; Parameters:    Size  Location     Type
 11062 ;;		None
 11063 ;; Auto vars:     Size  Location     Type
 11064 ;;		None
 11065 ;; Return value:  Size  Location     Type
 11066 ;;                  1    wreg      void 
 11067 ;; Registers used:
 11068 ;;		wreg, status,2, status,0, pclath, cstack
 11069 ;; Tracked objects:
 11070 ;;		On entry : 0/0
 11071 ;;		On exit  : 0/0
 11072 ;;		Unchanged: 0/0
 11073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11074 ;;      Params:         0       0       0       0       0
 11075 ;;      Locals:         0       0       0       0       0
 11076 ;;      Temps:          0       0       0       0       0
 11077 ;;      Totals:         0       0       0       0       0
 11078 ;;Total ram usage:        0 bytes
 11079 ;; Hardware stack levels used:    1
 11080 ;; Hardware stack levels required when called:    3
 11081 ;; This function calls:
 11082 ;;		_I2C_ack_receive
 11083 ;;		_I2C_start
 11084 ;;		_I2C_tx
 11085 ;;		_delay
 11086 ;; This function is called by:
 11087 ;;		_MCP4725
 11088 ;;		_MCP4725X
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           
 11093                           ;psect for function _dac_init
 11094  1DBF                     _dac_init:
 11095  1DBF                     l6939:	
 11096                           ;incstack = 0
 11097                           ; Regs used in _dac_init: [wreg+status,2+status,0+pclath+cstack]
 11098                           
 11099                           
 11100                           ;MCP4725.c: 15:     I2C_start();
 11101  1DBF  160A  158A  2074  160A  158A  	fcall	_I2C_start
 11102  1DC4                     l6941:
 11103                           
 11104                           ;MCP4725.c: 16:     delay(1);
 11105  1DC4  3001               	movlw	1
 11106  1DC5  1283               	bcf	3,5	;RP0=0, select bank0
 11107  1DC6  1303               	bcf	3,6	;RP1=0, select bank0
 11108  1DC7  00A0               	movwf	delay@t
 11109  1DC8  3000               	movlw	0
 11110  1DC9  00A1               	movwf	delay@t+1
 11111  1DCA  160A  158A  2138  160A  158A  	fcall	_delay
 11112  1DCF                     l6943:
 11113                           
 11114                           ;MCP4725.c: 17:     I2C_tx( 0b11000000 );
 11115  1DCF  30C0               	movlw	192
 11116  1DD0  160A  158A  20B4  160A  158A  	fcall	_I2C_tx
 11117                           
 11118                           ;MCP4725.c: 18:     I2C_ack_receive();
 11119  1DD5  160A  158A  2035  160A  158A  	fcall	_I2C_ack_receive
 11120  1DDA                     l6945:
 11121                           
 11122                           ;MCP4725.c: 19:     delay(1);
 11123  1DDA  3001               	movlw	1
 11124  1DDB  1283               	bcf	3,5	;RP0=0, select bank0
 11125  1DDC  1303               	bcf	3,6	;RP1=0, select bank0
 11126  1DDD  00A0               	movwf	delay@t
 11127  1DDE  3000               	movlw	0
 11128  1DDF  00A1               	movwf	delay@t+1
 11129  1DE0  160A  158A  2138  160A  158A  	fcall	_delay
 11130  1DE5                     l6947:
 11131                           
 11132                           ;MCP4725.c: 20:     I2C_tx( 0b01100000 );
 11133  1DE5  3060               	movlw	96
 11134  1DE6  160A  158A  20B4  160A  158A  	fcall	_I2C_tx
 11135                           
 11136                           ;MCP4725.c: 21:     I2C_ack_receive();
 11137  1DEB  160A  158A  2035  160A  158A  	fcall	_I2C_ack_receive
 11138  1DF0                     l6949:
 11139                           
 11140                           ;MCP4725.c: 22:     delay(1);
 11141  1DF0  3001               	movlw	1
 11142  1DF1  1283               	bcf	3,5	;RP0=0, select bank0
 11143  1DF2  1303               	bcf	3,6	;RP1=0, select bank0
 11144  1DF3  00A0               	movwf	delay@t
 11145  1DF4  3000               	movlw	0
 11146  1DF5  00A1               	movwf	delay@t+1
 11147  1DF6  160A  158A  2138  160A  158A  	fcall	_delay
 11148  1DFB                     l879:
 11149  1DFB  0008               	return
 11150  1DFC                     __end_of_dac_init:
 11151                           
 11152                           	psect	text66
 11153  1938                     __ptext66:	
 11154 ;; *************** function _delay *****************
 11155 ;; Defined at:
 11156 ;;		line 10 in file "delay.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;  t               2    0[BANK0 ] unsigned int 
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      void 
 11163 ;; Registers used:
 11164 ;;		wreg, status,2, status,0
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11170 ;;      Params:         0       2       0       0       0
 11171 ;;      Locals:         0       0       0       0       0
 11172 ;;      Temps:          0       2       0       0       0
 11173 ;;      Totals:         0       4       0       0       0
 11174 ;;Total ram usage:        4 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    2
 11177 ;; This function calls:
 11178 ;;		Nothing
 11179 ;; This function is called by:
 11180 ;;		_dispLCD_init
 11181 ;;		_main
 11182 ;;		_dac_init
 11183 ;;		_dac_write
 11184 ;;		_MCP4725
 11185 ;;		_MCP4725X
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           
 11190                           ;psect for function _delay
 11191  1938                     _delay:
 11192  1938                     l6583:	
 11193                           ;incstack = 0
 11194                           ; Regs used in _delay: [wreg+status,2+status,0]
 11195                           
 11196                           
 11197                           ;delay.c: 10: void delay( unsigned int t );delay.c: 11: {;delay.c: 12:     while( t )
 11198  1938  294C               	goto	l6587
 11199  1939                     l6585:
 11200                           
 11201                           ;delay.c: 13:     {;delay.c: 14:         _delay((unsigned long)((1)*(20000000/4000.0)));
 11202  1939  3007               	movlw	7
 11203  193A  1283               	bcf	3,5	;RP0=0, select bank0
 11204  193B  1303               	bcf	3,6	;RP1=0, select bank0
 11205  193C  00A3               	movwf	??_delay+1
 11206  193D  307C               	movlw	124
 11207  193E  00A2               	movwf	??_delay
 11208  193F                     u6707:
 11209  193F  0BA2               	decfsz	??_delay,f
 11210  1940  293F               	goto	u6707
 11211  1941  0BA3               	decfsz	??_delay+1,f
 11212  1942  293F               	goto	u6707
 11213  1943  0000               	nop
 11214                           
 11215                           ;delay.c: 15:         --t;
 11216  1944  3001               	movlw	1
 11217  1945  1283               	bcf	3,5	;RP0=0, select bank0
 11218  1946  1303               	bcf	3,6	;RP1=0, select bank0
 11219  1947  02A0               	subwf	delay@t,f
 11220  1948  3000               	movlw	0
 11221  1949  1C03               	skipc
 11222  194A  03A1               	decf	delay@t+1,f
 11223  194B  02A1               	subwf	delay@t+1,f
 11224  194C                     l6587:
 11225                           
 11226                           ;delay.c: 12:     while( t )
 11227  194C  1283               	bcf	3,5	;RP0=0, select bank0
 11228  194D  1303               	bcf	3,6	;RP1=0, select bank0
 11229  194E  0820               	movf	delay@t,w
 11230  194F  0421               	iorwf	delay@t+1,w
 11231  1950  1D03               	btfss	3,2
 11232  1951  2953               	goto	u4691
 11233  1952  2954               	goto	u4690
 11234  1953                     u4691:
 11235  1953  2939               	goto	l6585
 11236  1954                     u4690:
 11237  1954                     l35:
 11238  1954  0008               	return
 11239  1955                     __end_of_delay:
 11240                           
 11241                           	psect	text67
 11242  18B4                     __ptext67:	
 11243 ;; *************** function _I2C_tx *****************
 11244 ;; Defined at:
 11245 ;;		line 36 in file "spi_i2c.c"
 11246 ;; Parameters:    Size  Location     Type
 11247 ;;  b               1    wreg     unsigned char 
 11248 ;; Auto vars:     Size  Location     Type
 11249 ;;  b               1    0[BANK0 ] unsigned char 
 11250 ;; Return value:  Size  Location     Type
 11251 ;;                  1    wreg      void 
 11252 ;; Registers used:
 11253 ;;		wreg
 11254 ;; Tracked objects:
 11255 ;;		On entry : 0/0
 11256 ;;		On exit  : 0/0
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11259 ;;      Params:         0       0       0       0       0
 11260 ;;      Locals:         0       1       0       0       0
 11261 ;;      Temps:          0       0       0       0       0
 11262 ;;      Totals:         0       1       0       0       0
 11263 ;;Total ram usage:        1 bytes
 11264 ;; Hardware stack levels used:    1
 11265 ;; Hardware stack levels required when called:    2
 11266 ;; This function calls:
 11267 ;;		Nothing
 11268 ;; This function is called by:
 11269 ;;		_dac_init
 11270 ;;		_dac_write
 11271 ;; This function uses a non-reentrant model
 11272 ;;
 11273                           
 11274                           
 11275                           ;psect for function _I2C_tx
 11276  18B4                     _I2C_tx:
 11277                           
 11278                           ;incstack = 0
 11279                           ; Regs used in _I2C_tx: [wreg]
 11280                           ;I2C_tx@b stored from wreg
 11281  18B4  1283               	bcf	3,5	;RP0=0, select bank0
 11282  18B5  1303               	bcf	3,6	;RP1=0, select bank0
 11283  18B6  00A0               	movwf	I2C_tx@b
 11284  18B7                     l6647:
 11285                           
 11286                           ;spi_i2c.c: 36: void I2C_tx( unsigned char b );spi_i2c.c: 37: {;spi_i2c.c: 38:     SSPBU
      +                          F = b;
 11287  18B7  0820               	movf	I2C_tx@b,w
 11288  18B8  0093               	movwf	19	;volatile
 11289  18B9                     l923:	
 11290                           ;spi_i2c.c: 39:     while( SSPSTATbits.BF );
 11291                           
 11292  18B9  1683               	bsf	3,5	;RP0=1, select bank1
 11293  18BA  1303               	bcf	3,6	;RP1=0, select bank1
 11294  18BB  1814               	btfsc	20,0	;volatile
 11295  18BC  28BE               	goto	u4731
 11296  18BD  28BF               	goto	u4730
 11297  18BE                     u4731:
 11298  18BE  28B9               	goto	l923
 11299  18BF                     u4730:
 11300  18BF                     l926:
 11301  18BF  0008               	return
 11302  18C0                     __end_of_I2C_tx:
 11303                           
 11304                           	psect	text68
 11305  1874                     __ptext68:	
 11306 ;; *************** function _I2C_start *****************
 11307 ;; Defined at:
 11308 ;;		line 22 in file "spi_i2c.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;		None
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;		None
 11313 ;; Return value:  Size  Location     Type
 11314 ;;                  1    wreg      void 
 11315 ;; Registers used:
 11316 ;;		None
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11322 ;;      Params:         0       0       0       0       0
 11323 ;;      Locals:         0       0       0       0       0
 11324 ;;      Temps:          0       0       0       0       0
 11325 ;;      Totals:         0       0       0       0       0
 11326 ;;Total ram usage:        0 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    2
 11329 ;; This function calls:
 11330 ;;		Nothing
 11331 ;; This function is called by:
 11332 ;;		_dac_init
 11333 ;; This function uses a non-reentrant model
 11334 ;;
 11335                           
 11336                           
 11337                           ;psect for function _I2C_start
 11338  1874                     _I2C_start:
 11339  1874                     l6645:	
 11340                           ;incstack = 0
 11341                           ; Regs used in _I2C_start: []
 11342                           
 11343                           
 11344                           ;spi_i2c.c: 24:     SSPCON2bits.SEN = 1;
 11345  1874  1683               	bsf	3,5	;RP0=1, select bank1
 11346  1875  1303               	bcf	3,6	;RP1=0, select bank1
 11347  1876  1411               	bsf	17,0	;volatile
 11348  1877                     l908:	
 11349                           ;spi_i2c.c: 25:     while( !PIR1bits.SSPIF );
 11350                           
 11351  1877  1283               	bcf	3,5	;RP0=0, select bank0
 11352  1878  1D8C               	btfss	12,3	;volatile
 11353  1879  287B               	goto	u4721
 11354  187A  287C               	goto	u4720
 11355  187B                     u4721:
 11356  187B  2877               	goto	l908
 11357  187C                     u4720:
 11358  187C                     l910:
 11359                           
 11360                           ;spi_i2c.c: 26:     PIR1bits.SSPIF = 0;
 11361  187C  118C               	bcf	12,3	;volatile
 11362  187D                     l911:
 11363  187D  0008               	return
 11364  187E                     __end_of_I2C_start:
 11365                           
 11366                           	psect	text69
 11367  1835                     __ptext69:	
 11368 ;; *************** function _I2C_ack_receive *****************
 11369 ;; Defined at:
 11370 ;;		line 56 in file "spi_i2c.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;		None
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;		None
 11375 ;; Return value:  Size  Location     Type
 11376 ;;                  1    wreg      void 
 11377 ;; Registers used:
 11378 ;;		None
 11379 ;; Tracked objects:
 11380 ;;		On entry : 0/0
 11381 ;;		On exit  : 0/0
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11384 ;;      Params:         0       0       0       0       0
 11385 ;;      Locals:         0       0       0       0       0
 11386 ;;      Temps:          0       0       0       0       0
 11387 ;;      Totals:         0       0       0       0       0
 11388 ;;Total ram usage:        0 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:    2
 11391 ;; This function calls:
 11392 ;;		Nothing
 11393 ;; This function is called by:
 11394 ;;		_dac_init
 11395 ;;		_dac_write
 11396 ;; This function uses a non-reentrant model
 11397 ;;
 11398                           
 11399                           
 11400                           ;psect for function _I2C_ack_receive
 11401  1835                     _I2C_ack_receive:
 11402  1835                     l6649:	
 11403                           ;incstack = 0
 11404                           ; Regs used in _I2C_ack_receive: []
 11405                           
 11406  1835                     l944:	
 11407                           ;spi_i2c.c: 58:     while( SSPCON2bits.ACKSTAT );
 11408                           
 11409  1835  1683               	bsf	3,5	;RP0=1, select bank1
 11410  1836  1303               	bcf	3,6	;RP1=0, select bank1
 11411  1837  1B11               	btfsc	17,6	;volatile
 11412  1838  283A               	goto	u4741
 11413  1839  283B               	goto	u4740
 11414  183A                     u4741:
 11415  183A  2835               	goto	l944
 11416  183B                     u4740:
 11417  183B                     l947:
 11418  183B  0008               	return
 11419  183C                     __end_of_I2C_ack_receive:
 11420                           
 11421                           	psect	text70
 11422  186A                     __ptext70:	
 11423 ;; *************** function _I2C_stop *****************
 11424 ;; Defined at:
 11425 ;;		line 41 in file "spi_i2c.c"
 11426 ;; Parameters:    Size  Location     Type
 11427 ;;		None
 11428 ;; Auto vars:     Size  Location     Type
 11429 ;;		None
 11430 ;; Return value:  Size  Location     Type
 11431 ;;                  1    wreg      void 
 11432 ;; Registers used:
 11433 ;;		None
 11434 ;; Tracked objects:
 11435 ;;		On entry : 0/0
 11436 ;;		On exit  : 0/0
 11437 ;;		Unchanged: 0/0
 11438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11439 ;;      Params:         0       0       0       0       0
 11440 ;;      Locals:         0       0       0       0       0
 11441 ;;      Temps:          0       0       0       0       0
 11442 ;;      Totals:         0       0       0       0       0
 11443 ;;Total ram usage:        0 bytes
 11444 ;; Hardware stack levels used:    1
 11445 ;; Hardware stack levels required when called:    2
 11446 ;; This function calls:
 11447 ;;		Nothing
 11448 ;; This function is called by:
 11449 ;;		_MCP4725
 11450 ;;		_MCP4725X
 11451 ;; This function uses a non-reentrant model
 11452 ;;
 11453                           
 11454                           
 11455                           ;psect for function _I2C_stop
 11456  186A                     _I2C_stop:
 11457  186A                     l6961:	
 11458                           ;incstack = 0
 11459                           ; Regs used in _I2C_stop: []
 11460                           
 11461                           
 11462                           ;spi_i2c.c: 43:     SSPCON2bits.PEN = 1;
 11463  186A  1683               	bsf	3,5	;RP0=1, select bank1
 11464  186B  1303               	bcf	3,6	;RP1=0, select bank1
 11465  186C  1511               	bsf	17,2	;volatile
 11466  186D                     l929:	
 11467                           ;spi_i2c.c: 44:     while( !PIR1bits.SSPIF );
 11468                           
 11469  186D  1283               	bcf	3,5	;RP0=0, select bank0
 11470  186E  1D8C               	btfss	12,3	;volatile
 11471  186F  2871               	goto	u5181
 11472  1870  2872               	goto	u5180
 11473  1871                     u5181:
 11474  1871  286D               	goto	l929
 11475  1872                     u5180:
 11476  1872                     l931:
 11477                           
 11478                           ;spi_i2c.c: 45:     PIR1bits.SSPIF = 0;
 11479  1872  118C               	bcf	12,3	;volatile
 11480  1873                     l932:
 11481  1873  0008               	return
 11482  1874                     __end_of_I2C_stop:
 11483                           
 11484                           	psect	text71
 11485  1AA7                     __ptext71:	
 11486 ;; *************** function _I2C_init *****************
 11487 ;; Defined at:
 11488 ;;		line 12 in file "spi_i2c.c"
 11489 ;; Parameters:    Size  Location     Type
 11490 ;;  freq            4   14[BANK0 ] unsigned long 
 11491 ;; Auto vars:     Size  Location     Type
 11492 ;;		None
 11493 ;; Return value:  Size  Location     Type
 11494 ;;                  1    wreg      void 
 11495 ;; Registers used:
 11496 ;;		wreg, status,2, status,0, pclath, cstack
 11497 ;; Tracked objects:
 11498 ;;		On entry : 0/0
 11499 ;;		On exit  : 0/0
 11500 ;;		Unchanged: 0/0
 11501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11502 ;;      Params:         0       4       0       0       0
 11503 ;;      Locals:         0       0       0       0       0
 11504 ;;      Temps:          0       0       0       0       0
 11505 ;;      Totals:         0       4       0       0       0
 11506 ;;Total ram usage:        4 bytes
 11507 ;; Hardware stack levels used:    1
 11508 ;; Hardware stack levels required when called:    3
 11509 ;; This function calls:
 11510 ;;		___lldiv
 11511 ;; This function is called by:
 11512 ;;		_main
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           
 11517                           ;psect for function _I2C_init
 11518  1AA7                     _I2C_init:
 11519  1AA7                     l7601:	
 11520                           ;incstack = 0
 11521                           ; Regs used in _I2C_init: [wreg+status,2+status,0+pclath+cstack]
 11522                           
 11523                           
 11524                           ;spi_i2c.c: 12: void I2C_init( unsigned long freq );spi_i2c.c: 13: {;spi_i2c.c: 14:     
      +                          TRISCbits.TRISC3 = 1;
 11525  1AA7  1683               	bsf	3,5	;RP0=1, select bank1
 11526  1AA8  1303               	bcf	3,6	;RP1=0, select bank1
 11527  1AA9  1587               	bsf	7,3	;volatile
 11528                           
 11529                           ;spi_i2c.c: 15:     TRISCbits.TRISC4 = 1;
 11530  1AAA  1607               	bsf	7,4	;volatile
 11531  1AAB                     l7603:
 11532                           
 11533                           ;spi_i2c.c: 16:     SSPCONbits.SSPM = 0x8;
 11534  1AAB  1283               	bcf	3,5	;RP0=0, select bank0
 11535  1AAC  1303               	bcf	3,6	;RP1=0, select bank0
 11536  1AAD  0814               	movf	20,w	;volatile
 11537  1AAE  39F0               	andlw	-16
 11538  1AAF  3808               	iorlw	8
 11539  1AB0  0094               	movwf	20	;volatile
 11540  1AB1                     l7605:
 11541                           
 11542                           ;spi_i2c.c: 17:     SSPADD = ((20000000>>2) / (freq))-1;
 11543  1AB1  0831               	movf	I2C_init@freq+3,w
 11544  1AB2  00A3               	movwf	___lldiv@divisor+3
 11545  1AB3  0830               	movf	I2C_init@freq+2,w
 11546  1AB4  00A2               	movwf	___lldiv@divisor+2
 11547  1AB5  082F               	movf	I2C_init@freq+1,w
 11548  1AB6  00A1               	movwf	___lldiv@divisor+1
 11549  1AB7  082E               	movf	I2C_init@freq,w
 11550  1AB8  00A0               	movwf	___lldiv@divisor
 11551  1AB9  3000               	movlw	0
 11552  1ABA  00A7               	movwf	___lldiv@dividend+3
 11553  1ABB  304C               	movlw	76
 11554  1ABC  00A6               	movwf	___lldiv@dividend+2
 11555  1ABD  304B               	movlw	75
 11556  1ABE  00A5               	movwf	___lldiv@dividend+1
 11557  1ABF  3040               	movlw	64
 11558  1AC0  00A4               	movwf	___lldiv@dividend
 11559  1AC1  160A  118A  211D  160A  158A  	fcall	___lldiv
 11560  1AC6  1283               	bcf	3,5	;RP0=0, select bank0
 11561  1AC7  1303               	bcf	3,6	;RP1=0, select bank0
 11562  1AC8  0820               	movf	?___lldiv,w
 11563  1AC9  3EFF               	addlw	255
 11564  1ACA  1683               	bsf	3,5	;RP0=1, select bank1
 11565  1ACB  1303               	bcf	3,6	;RP1=0, select bank1
 11566  1ACC  0093               	movwf	19	;volatile
 11567  1ACD                     l7607:
 11568                           
 11569                           ;spi_i2c.c: 18:     SSPSTATbits.SMP = 1;
 11570  1ACD  1794               	bsf	20,7	;volatile
 11571  1ACE                     l7609:
 11572                           
 11573                           ;spi_i2c.c: 19:     SSPCONbits.SSPEN = 1;
 11574  1ACE  1283               	bcf	3,5	;RP0=0, select bank0
 11575  1ACF  1303               	bcf	3,6	;RP1=0, select bank0
 11576  1AD0  1694               	bsf	20,5	;volatile
 11577  1AD1                     l905:
 11578  1AD1  0008               	return
 11579  1AD2                     __end_of_I2C_init:
 11580                           
 11581                           	psect	text72
 11582  111D                     __ptext72:	
 11583 ;; *************** function ___lldiv *****************
 11584 ;; Defined at:
 11585 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\__lldiv.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;  divisor         4    0[BANK0 ] unsigned long 
 11588 ;;  dividend        4    4[BANK0 ] unsigned long 
 11589 ;; Auto vars:     Size  Location     Type
 11590 ;;  quotient        4    9[BANK0 ] unsigned long 
 11591 ;;  counter         1   13[BANK0 ] unsigned char 
 11592 ;; Return value:  Size  Location     Type
 11593 ;;                  4    0[BANK0 ] unsigned long 
 11594 ;; Registers used:
 11595 ;;		wreg, status,2, status,0
 11596 ;; Tracked objects:
 11597 ;;		On entry : 0/0
 11598 ;;		On exit  : 0/0
 11599 ;;		Unchanged: 0/0
 11600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11601 ;;      Params:         0       8       0       0       0
 11602 ;;      Locals:         0       5       0       0       0
 11603 ;;      Temps:          0       1       0       0       0
 11604 ;;      Totals:         0      14       0       0       0
 11605 ;;Total ram usage:       14 bytes
 11606 ;; Hardware stack levels used:    1
 11607 ;; Hardware stack levels required when called:    2
 11608 ;; This function calls:
 11609 ;;		Nothing
 11610 ;; This function is called by:
 11611 ;;		_I2C_init
 11612 ;; This function uses a non-reentrant model
 11613 ;;
 11614                           
 11615                           
 11616                           ;psect for function ___lldiv
 11617  111D                     ___lldiv:
 11618  111D                     l6977:	
 11619                           ;incstack = 0
 11620                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 11621                           
 11622  111D  3000               	movlw	0
 11623  111E  1283               	bcf	3,5	;RP0=0, select bank0
 11624  111F  1303               	bcf	3,6	;RP1=0, select bank0
 11625  1120  00AC               	movwf	___lldiv@quotient+3
 11626  1121  3000               	movlw	0
 11627  1122  00AB               	movwf	___lldiv@quotient+2
 11628  1123  3000               	movlw	0
 11629  1124  00AA               	movwf	___lldiv@quotient+1
 11630  1125  3000               	movlw	0
 11631  1126  00A9               	movwf	___lldiv@quotient
 11632  1127  0823               	movf	___lldiv@divisor+3,w
 11633  1128  0422               	iorwf	___lldiv@divisor+2,w
 11634  1129  0421               	iorwf	___lldiv@divisor+1,w
 11635  112A  0420               	iorwf	___lldiv@divisor,w
 11636  112B  1903               	skipnz
 11637  112C  292E               	goto	u5231
 11638  112D  292F               	goto	u5230
 11639  112E                     u5231:
 11640  112E  297C               	goto	l6997
 11641  112F                     u5230:
 11642  112F                     l6979:
 11643  112F  01AD               	clrf	___lldiv@counter
 11644  1130  0AAD               	incf	___lldiv@counter,f
 11645  1131  293F               	goto	l6983
 11646  1132                     l6981:
 11647  1132  3001               	movlw	1
 11648  1133  00A8               	movwf	??___lldiv
 11649  1134                     u5245:
 11650  1134  1003               	clrc
 11651  1135  0DA0               	rlf	___lldiv@divisor,f
 11652  1136  0DA1               	rlf	___lldiv@divisor+1,f
 11653  1137  0DA2               	rlf	___lldiv@divisor+2,f
 11654  1138  0DA3               	rlf	___lldiv@divisor+3,f
 11655  1139  0BA8               	decfsz	??___lldiv,f
 11656  113A  2934               	goto	u5245
 11657  113B  3001               	movlw	1
 11658  113C  00A8               	movwf	??___lldiv
 11659  113D  0828               	movf	??___lldiv,w
 11660  113E  07AD               	addwf	___lldiv@counter,f
 11661  113F                     l6983:
 11662  113F  1FA3               	btfss	___lldiv@divisor+3,7
 11663  1140  2942               	goto	u5251
 11664  1141  2943               	goto	u5250
 11665  1142                     u5251:
 11666  1142  2932               	goto	l6981
 11667  1143                     u5250:
 11668  1143                     l6985:
 11669  1143  3001               	movlw	1
 11670  1144  00A8               	movwf	??___lldiv
 11671  1145                     u5265:
 11672  1145  1003               	clrc
 11673  1146  0DA9               	rlf	___lldiv@quotient,f
 11674  1147  0DAA               	rlf	___lldiv@quotient+1,f
 11675  1148  0DAB               	rlf	___lldiv@quotient+2,f
 11676  1149  0DAC               	rlf	___lldiv@quotient+3,f
 11677  114A  0BA8               	decfsz	??___lldiv,f
 11678  114B  2945               	goto	u5265
 11679  114C                     l6987:
 11680  114C  0823               	movf	___lldiv@divisor+3,w
 11681  114D  0227               	subwf	___lldiv@dividend+3,w
 11682  114E  1D03               	skipz
 11683  114F  295A               	goto	u5275
 11684  1150  0822               	movf	___lldiv@divisor+2,w
 11685  1151  0226               	subwf	___lldiv@dividend+2,w
 11686  1152  1D03               	skipz
 11687  1153  295A               	goto	u5275
 11688  1154  0821               	movf	___lldiv@divisor+1,w
 11689  1155  0225               	subwf	___lldiv@dividend+1,w
 11690  1156  1D03               	skipz
 11691  1157  295A               	goto	u5275
 11692  1158  0820               	movf	___lldiv@divisor,w
 11693  1159  0224               	subwf	___lldiv@dividend,w
 11694  115A                     u5275:
 11695  115A  1C03               	skipc
 11696  115B  295D               	goto	u5271
 11697  115C  295E               	goto	u5270
 11698  115D                     u5271:
 11699  115D  296D               	goto	l6993
 11700  115E                     u5270:
 11701  115E                     l6989:
 11702  115E  0820               	movf	___lldiv@divisor,w
 11703  115F  02A4               	subwf	___lldiv@dividend,f
 11704  1160  0821               	movf	___lldiv@divisor+1,w
 11705  1161  1C03               	skipc
 11706  1162  0F21               	incfsz	___lldiv@divisor+1,w
 11707  1163  02A5               	subwf	___lldiv@dividend+1,f
 11708  1164  0822               	movf	___lldiv@divisor+2,w
 11709  1165  1C03               	skipc
 11710  1166  0F22               	incfsz	___lldiv@divisor+2,w
 11711  1167  02A6               	subwf	___lldiv@dividend+2,f
 11712  1168  0823               	movf	___lldiv@divisor+3,w
 11713  1169  1C03               	skipc
 11714  116A  0F23               	incfsz	___lldiv@divisor+3,w
 11715  116B  02A7               	subwf	___lldiv@dividend+3,f
 11716  116C                     l6991:
 11717  116C  1429               	bsf	___lldiv@quotient,0
 11718  116D                     l6993:
 11719  116D  3001               	movlw	1
 11720  116E                     u5285:
 11721  116E  1003               	clrc
 11722  116F  0CA3               	rrf	___lldiv@divisor+3,f
 11723  1170  0CA2               	rrf	___lldiv@divisor+2,f
 11724  1171  0CA1               	rrf	___lldiv@divisor+1,f
 11725  1172  0CA0               	rrf	___lldiv@divisor,f
 11726  1173  3EFF               	addlw	-1
 11727  1174  1D03               	skipz
 11728  1175  296E               	goto	u5285
 11729  1176                     l6995:
 11730  1176  3001               	movlw	1
 11731  1177  02AD               	subwf	___lldiv@counter,f
 11732  1178  1D03               	btfss	3,2
 11733  1179  297B               	goto	u5291
 11734  117A  297C               	goto	u5290
 11735  117B                     u5291:
 11736  117B  2943               	goto	l6985
 11737  117C                     u5290:
 11738  117C                     l6997:
 11739  117C  082C               	movf	___lldiv@quotient+3,w
 11740  117D  00A3               	movwf	?___lldiv+3
 11741  117E  082B               	movf	___lldiv@quotient+2,w
 11742  117F  00A2               	movwf	?___lldiv+2
 11743  1180  082A               	movf	___lldiv@quotient+1,w
 11744  1181  00A1               	movwf	?___lldiv+1
 11745  1182  0829               	movf	___lldiv@quotient,w
 11746  1183  00A0               	movwf	?___lldiv
 11747  1184                     l1077:
 11748  1184  0008               	return
 11749  1185                     __end_of___lldiv:
 11750                           
 11751                           	psect	text73
 11752  191B                     __ptext73:	
 11753 ;; *************** function _irq *****************
 11754 ;; Defined at:
 11755 ;;		line 55 in file "main.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;		None
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;		None
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  1    wreg      void 
 11762 ;; Registers used:
 11763 ;;		wreg, status,2, status,0, pclath, cstack
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11769 ;;      Params:         0       0       0       0       0
 11770 ;;      Locals:         0       0       0       0       0
 11771 ;;      Temps:          2       0       0       0       0
 11772 ;;      Totals:         2       0       0       0       0
 11773 ;;Total ram usage:        2 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:    1
 11776 ;; This function calls:
 11777 ;;		_intt1_1ms
 11778 ;; This function is called by:
 11779 ;;		Interrupt level 1
 11780 ;; This function uses a non-reentrant model
 11781 ;;
 11782                           
 11783                           
 11784                           ;psect for function _irq
 11785  191B                     _irq:
 11786  191B                     i1l5317:
 11787                           
 11788                           ;main.c: 57:     INTCONbits.GIE = 0;
 11789  191B  138B               	bcf	11,7	;volatile
 11790                           
 11791                           ;main.c: 58:     if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 11792  191C  1283               	bcf	3,5	;RP0=0, select bank0
 11793  191D  1303               	bcf	3,6	;RP1=0, select bank0
 11794  191E  1C0C               	btfss	12,0	;volatile
 11795  191F  2921               	goto	u395_21
 11796  1920  2922               	goto	u395_20
 11797  1921                     u395_21:
 11798  1921  2930               	goto	i1l5325
 11799  1922                     u395_20:
 11800  1922                     i1l5319:
 11801  1922  1683               	bsf	3,5	;RP0=1, select bank1
 11802  1923  1303               	bcf	3,6	;RP1=0, select bank1
 11803  1924  1C0C               	btfss	12,0	;volatile
 11804  1925  2927               	goto	u396_21
 11805  1926  2928               	goto	u396_20
 11806  1927                     u396_21:
 11807  1927  2930               	goto	i1l5325
 11808  1928                     u396_20:
 11809  1928                     i1l5321:
 11810                           
 11811                           ;main.c: 59:     {;main.c: 60:         PIR1bits.TMR1IF = 0;
 11812  1928  1283               	bcf	3,5	;RP0=0, select bank0
 11813  1929  1303               	bcf	3,6	;RP1=0, select bank0
 11814  192A  100C               	bcf	12,0	;volatile
 11815  192B                     i1l5323:
 11816                           
 11817                           ;main.c: 62:         intt1_1ms();
 11818  192B  160A  158A  22FD  160A  158A  	fcall	_intt1_1ms
 11819  1930                     i1l5325:
 11820                           
 11821                           ;main.c: 64:     INTCONbits.GIE = 1;
 11822  1930  178B               	bsf	11,7	;volatile
 11823  1931                     i1l663:
 11824  1931  0875               	movf	??_irq+1,w
 11825  1932  008A               	movwf	10
 11826  1933  0E74               	swapf	??_irq,w
 11827  1934  0083               	movwf	3
 11828  1935  0EFE               	swapf	btemp,f
 11829  1936  0E7E               	swapf	btemp,w
 11830  1937  0009               	retfie
 11831  1938                     __end_of_irq:
 11832                           
 11833                           	psect	intentry
 11834  0004                     __pintentry:	
 11835                           ;incstack = 0
 11836                           ; Regs used in _irq: [wreg+status,2+status,0+pclath+cstack]
 11837                           
 11838  0004                     interrupt_function:
 11839  007E                     saved_w	set	btemp
 11840  0004  00FE               	movwf	btemp
 11841  0005  0E03               	swapf	3,w
 11842  0006  00F4               	movwf	??_irq
 11843  0007  080A               	movf	10,w
 11844  0008  00F5               	movwf	??_irq+1
 11845  0009  160A  158A  291B   	ljmp	_irq
 11846                           
 11847                           	psect	text74
 11848  1AFD                     __ptext74:	
 11849 ;; *************** function _intt1_1ms *****************
 11850 ;; Defined at:
 11851 ;;		line 5 in file "timer1.c"
 11852 ;; Parameters:    Size  Location     Type
 11853 ;;		None
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;		None
 11856 ;; Return value:  Size  Location     Type
 11857 ;;                  1    wreg      void 
 11858 ;; Registers used:
 11859 ;;		wreg
 11860 ;; Tracked objects:
 11861 ;;		On entry : 0/0
 11862 ;;		On exit  : 0/0
 11863 ;;		Unchanged: 0/0
 11864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11865 ;;      Params:         0       0       0       0       0
 11866 ;;      Locals:         0       0       0       0       0
 11867 ;;      Temps:          4       0       0       0       0
 11868 ;;      Totals:         4       0       0       0       0
 11869 ;;Total ram usage:        4 bytes
 11870 ;; Hardware stack levels used:    1
 11871 ;; This function calls:
 11872 ;;		Nothing
 11873 ;; This function is called by:
 11874 ;;		_irq
 11875 ;; This function uses a non-reentrant model
 11876 ;;
 11877                           
 11878                           
 11879                           ;psect for function _intt1_1ms
 11880  1AFD                     _intt1_1ms:
 11881  1AFD                     i1l5125:	
 11882                           ;incstack = 0
 11883                           ; Regs used in _intt1_1ms: [wreg]
 11884                           
 11885                           
 11886                           ;timer1.c: 7:     TMR1H = ((65536-625)>>8) & 0x00FF;
 11887  1AFD  30FD               	movlw	253
 11888  1AFE  1283               	bcf	3,5	;RP0=0, select bank0
 11889  1AFF  1303               	bcf	3,6	;RP1=0, select bank0
 11890  1B00  008F               	movwf	15	;volatile
 11891                           
 11892                           ;timer1.c: 8:     TMR1L = (65536-625) & 0x00FF;
 11893  1B01  308F               	movlw	143
 11894  1B02  008E               	movwf	14	;volatile
 11895                           
 11896                           ;timer1.c: 10:     if(t1cont)
 11897  1B03  084B               	movf	_t1cont+3,w
 11898  1B04  044A               	iorwf	_t1cont+2,w
 11899  1B05  0449               	iorwf	_t1cont+1,w
 11900  1B06  0448               	iorwf	_t1cont,w
 11901  1B07  1903               	skipnz
 11902  1B08  2B0A               	goto	u371_21
 11903  1B09  2B0B               	goto	u371_20
 11904  1B0A                     u371_21:
 11905  1B0A  2B28               	goto	i1l528
 11906  1B0B                     u371_20:
 11907  1B0B                     i1l5127:
 11908                           
 11909                           ;timer1.c: 11:         --t1cont;
 11910  1B0B  3001               	movlw	1
 11911  1B0C  00F0               	movwf	??_intt1_1ms
 11912  1B0D  3000               	movlw	0
 11913  1B0E  00F1               	movwf	??_intt1_1ms+1
 11914  1B0F  3000               	movlw	0
 11915  1B10  00F2               	movwf	??_intt1_1ms+2
 11916  1B11  3000               	movlw	0
 11917  1B12  00F3               	movwf	??_intt1_1ms+3
 11918  1B13  0870               	movf	??_intt1_1ms,w
 11919  1B14  02C8               	subwf	_t1cont,f
 11920  1B15  0871               	movf	??_intt1_1ms+1,w
 11921  1B16  1C03               	skipc
 11922  1B17  0F71               	incfsz	??_intt1_1ms+1,w
 11923  1B18  2B1A               	goto	u372_25
 11924  1B19  2B1B               	goto	u372_26
 11925  1B1A                     u372_25:
 11926  1B1A  02C9               	subwf	_t1cont+1,f
 11927  1B1B                     u372_26:
 11928  1B1B  0872               	movf	??_intt1_1ms+2,w
 11929  1B1C  1C03               	skipc
 11930  1B1D  0F72               	incfsz	??_intt1_1ms+2,w
 11931  1B1E  2B20               	goto	u372_27
 11932  1B1F  2B21               	goto	u372_28
 11933  1B20                     u372_27:
 11934  1B20  02CA               	subwf	_t1cont+2,f
 11935  1B21                     u372_28:
 11936  1B21  0873               	movf	??_intt1_1ms+3,w
 11937  1B22  1C03               	skipc
 11938  1B23  0F73               	incfsz	??_intt1_1ms+3,w
 11939  1B24  2B26               	goto	u372_29
 11940  1B25  2B27               	goto	u372_20
 11941  1B26                     u372_29:
 11942  1B26  02CB               	subwf	_t1cont+3,f
 11943  1B27                     u372_20:
 11944  1B27  2B29               	goto	i1l530
 11945  1B28                     i1l528:	
 11946                           ;timer1.c: 12:     else
 11947                           
 11948                           
 11949                           ;timer1.c: 13:         T1CONbits.TMR1ON = 0;
 11950  1B28  1010               	bcf	16,0	;volatile
 11951  1B29                     i1l530:
 11952  1B29  0008               	return
 11953  1B2A                     __end_of_intt1_1ms:
 11954  000C                     
 11955                           	psect	functab
 11956  0052                     __pfunctab:
 11957  0052                     __fptable:
 11958  0052                     fptable:
 11959  0052  00FF               	movwf	(btemp+1)& (0+127)
 11960  0053  3000               	movlw	high fptable
 11961  0054  008A               	movwf	10
 11962  0055  087F               	movf	(btemp+1)& (0+127),w
 11963  0056  0782               	addwf	2,f
 11964  0057                     fpbase:
 11965  0057  2857               	goto	fpbase	; Call via a null pointer and you will get stuck here.
 11966  0058                     fp__dispLCD:
 11967  0058  160A  158A  2D83   	ljmp	_dispLCD
 11968  005B                     fp__dispLCD_clr:
 11969  005B                     entry__dispLCD_clr:
 11970  005B  160A  158A  2843   	ljmp	_dispLCD_clr
 11971  005E                     fp__dispLCD_init:
 11972  005E                     entry__dispLCD_init:
 11973  005E  160A  158A  2BB5   	ljmp	_dispLCD_init
 11974  0061                     fp__dispLCD_str:
 11975  0061  160A  158A  2DFC   	ljmp	_dispLCD_str
 11976  0064                     fp__dispLCD_num:
 11977  0064                     entry__dispLCD_num:
 11978  0064  120A  118A  2F1A   	ljmp	_dispLCD_num
 11979  0067                     fp__salvar_receita:
 11980  0067  160A  158A  2CA7   	ljmp	_salvar_receita
 11981  006A                     __end_of__fptable:
 11982  007E                     btemp	set	126	;btemp
 11983  007E                     wtemp0	set	126
 11984                           
 11985                           	psect	config
 11986                           
 11987                           ;Config register CONFIG1 @ 0x2007
 11988                           ;	Oscillator Selection bits
 11989                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
 11990                           ;	Watchdog Timer Enable bit
 11991                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
 11992                           ;	Power-up Timer Enable bit
 11993                           ;	PWRTE = ON, PWRT enabled
 11994                           ;	RE3/MCLR pin function select bit
 11995                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
 11996                           ;	Code Protection bit
 11997                           ;	CP = OFF, Program memory code protection is disabled
 11998                           ;	Data Code Protection bit
 11999                           ;	CPD = OFF, Data memory code protection is disabled
 12000                           ;	Brown Out Reset Selection bits
 12001                           ;	BOREN = OFF, BOR disabled
 12002                           ;	Internal External Switchover bit
 12003                           ;	IESO = OFF, Internal/External Switchover mode is disabled
 12004                           ;	Fail-Safe Clock Monitor Enabled bit
 12005                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
 12006                           ;	Low Voltage Programming Enable bit
 12007                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
 12008                           ;	In-Circuit Debugger Mode bit
 12009                           ;	DEBUG = 0x1, unprogrammed default
 12010  2007                     	org	8199
 12011  2007  20C2               	dw	8386
 12012                           
 12013                           ;Config register CONFIG2 @ 0x2008
 12014                           ;	Brown-out Reset Selection bit
 12015                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
 12016                           ;	Flash Program Memory Self Write Enable bits
 12017                           ;	WRT = OFF, Write protection off
 12018  2008                     	org	8200
 12019  2008  3FFF               	dw	16383
 12020                           
 12021                           	psect	maintext_split_1
 12022  14B9                     l7827:
 12023                           
 12024                           ;main.c: 140:                             {;main.c: 141:                                
      +                           dispLCD_lincol( 2, i );
 12025  14B9  0849               	movf	main@i_882^(0+128),w
 12026  14BA  1283               	bcf	3,5	;RP0=0, select bank0
 12027  14BB  1303               	bcf	3,6	;RP1=0, select bank0
 12028  14BC  00C4               	movwf	??_main
 12029  14BD  0844               	movf	??_main,w
 12030  14BE  00A3               	movwf	dispLCD_lincol@col
 12031  14BF  3002               	movlw	2
 12032  14C0  160A  158A  2476  160A  118A  	fcall	_dispLCD_lincol
 12033                           
 12034                           ;main.c: 142:                                 dispLCD_dataReg( *ptr );
 12035  14C5  1683               	bsf	3,5	;RP0=1, select bank1
 12036  14C6  1303               	bcf	3,6	;RP1=0, select bank1
 12037  14C7  084A               	movf	main@ptr^(0+128),w
 12038  14C8  0084               	movwf	4
 12039  14C9  1383               	bcf	3,7	;select IRP bank0
 12040  14CA  0800               	movf	0,w
 12041  14CB  160A  158A  2445  160A  118A  	fcall	_dispLCD_dataReg
 12042  14D0                     l7829:
 12043                           
 12044                           ;main.c: 143:                                 i++;
 12045  14D0  3001               	movlw	1
 12046  14D1  1283               	bcf	3,5	;RP0=0, select bank0
 12047  14D2  1303               	bcf	3,6	;RP1=0, select bank0
 12048  14D3  00C4               	movwf	??_main
 12049  14D4  0844               	movf	??_main,w
 12050  14D5  1683               	bsf	3,5	;RP0=1, select bank1
 12051  14D6  1303               	bcf	3,6	;RP1=0, select bank1
 12052  14D7  07C9               	addwf	main@i_882^(0+128),f
 12053  14D8                     l7831:
 12054                           
 12055                           ;main.c: 144:                                 delay(50);
 12056  14D8  3032               	movlw	50
 12057  14D9  1283               	bcf	3,5	;RP0=0, select bank0
 12058  14DA  1303               	bcf	3,6	;RP1=0, select bank0
 12059  14DB  00A0               	movwf	delay@t
 12060  14DC  3000               	movlw	0
 12061  14DD  00A1               	movwf	delay@t+1
 12062  14DE  160A  158A  2138  160A  118A  	fcall	_delay
 12063  14E3                     l7833:
 12064                           
 12065                           ;main.c: 145:                             }
 12066  14E3  3001               	movlw	1
 12067  14E4  1283               	bcf	3,5	;RP0=0, select bank0
 12068  14E5  1303               	bcf	3,6	;RP1=0, select bank0
 12069  14E6  00C4               	movwf	??_main
 12070  14E7  0844               	movf	??_main,w
 12071  14E8  1683               	bsf	3,5	;RP0=1, select bank1
 12072  14E9  1303               	bcf	3,6	;RP1=0, select bank1
 12073  14EA  07CA               	addwf	main@ptr^(0+128),f
 12074  14EB                     l7835:
 12075  14EB  084A               	movf	main@ptr^(0+128),w
 12076  14EC  0084               	movwf	4
 12077  14ED  1383               	bcf	3,7	;select IRP bank0
 12078  14EE  0800               	movf	0,w
 12079  14EF  1D03               	btfss	3,2
 12080  14F0  2CF2               	goto	u6131
 12081  14F1  2CF3               	goto	u6130
 12082  14F2                     u6131:
 12083  14F2  2CB9               	goto	l7827
 12084  14F3                     u6130:
 12085  14F3                     l7837:
 12086                           
 12087                           ;main.c: 147:                             setT1(1500);
 12088  14F3  3000               	movlw	0
 12089  14F4  1283               	bcf	3,5	;RP0=0, select bank0
 12090  14F5  1303               	bcf	3,6	;RP1=0, select bank0
 12091  14F6  00A9               	movwf	setT1@c+3
 12092  14F7  3000               	movlw	0
 12093  14F8  00A8               	movwf	setT1@c+2
 12094  14F9  3005               	movlw	5
 12095  14FA  00A7               	movwf	setT1@c+1
 12096  14FB  30DC               	movlw	220
 12097  14FC  00A6               	movwf	setT1@c
 12098  14FD  160A  158A  20C0  160A  118A  	fcall	_setT1
 12099  1502                     l7839:
 12100                           
 12101                           ;main.c: 148:                             estado = 2;
 12102  1502  3002               	movlw	2
 12103  1503  1283               	bcf	3,5	;RP0=0, select bank0
 12104  1504  1303               	bcf	3,6	;RP1=0, select bank0
 12105  1505  00C4               	movwf	??_main
 12106  1506  0844               	movf	??_main,w
 12107  1507  1683               	bsf	3,5	;RP0=1, select bank1
 12108  1508  1303               	bcf	3,6	;RP1=0, select bank1
 12109  1509  00DB               	movwf	main@estado^(0+128)
 12110                           
 12111                           ;main.c: 149:                             break;
 12112  150A  2D19               	goto	u6141
 12113  150B                     l7841:
 12114                           
 12115                           ;main.c: 152:                             if(!statusT1())
 12116  150B  160A  158A  20A9  160A  118A  	fcall	_statusT1
 12117  1510  1283               	bcf	3,5	;RP0=0, select bank0
 12118  1511  1303               	bcf	3,6	;RP1=0, select bank0
 12119  1512  0823               	movf	?_statusT1+3,w
 12120  1513  0422               	iorwf	?_statusT1+2,w
 12121  1514  0421               	iorwf	?_statusT1+1,w
 12122  1515  0420               	iorwf	?_statusT1,w
 12123  1516  1D03               	skipz
 12124  1517  2D19               	goto	u6141
 12125  1518  2D1C               	goto	u6140
 12126  1519                     u6141:
 12127  1519  120A  118A  2D1C   	goto	l8251
 12128  151C                     u6140:
 12129  151C                     l7843:
 12130                           
 12131                           ;main.c: 153:                                 estado = 8;
 12132  151C  3008               	movlw	8
 12133  151D  00C4               	movwf	??_main
 12134  151E  0844               	movf	??_main,w
 12135  151F  1683               	bsf	3,5	;RP0=1, select bank1
 12136  1520  1303               	bcf	3,6	;RP1=0, select bank1
 12137  1521  00DB               	movwf	main@estado^(0+128)
 12138  1522  2D19               	goto	u6141
 12139  1523                     l7845:
 12140                           
 12141                           ;main.c: 172:                             init_atuadores();
 12142  1523  160A  158A  202B  160A  118A  	fcall	_init_atuadores
 12143  1528                     l7847:
 12144                           
 12145                           ;main.c: 173:                             IHM.print("1: INSERIR SEQUENCIA\n"
 12146  1528  3000               	movlw	low (STR_4| (0+32768))
 12147  1529  1283               	bcf	3,5	;RP0=0, select bank0
 12148  152A  1303               	bcf	3,6	;RP1=0, select bank0
 12149  152B  00A8               	movwf	dispLCD_str@str
 12150  152C  3088               	movlw	high (STR_4| (0+32768))
 12151  152D  00A9               	movwf	dispLCD_str@str+1
 12152  152E  1683               	bsf	3,5	;RP0=1, select bank1
 12153  152F  1303               	bcf	3,6	;RP1=0, select bank1
 12154  1530  085F               	movf	(low ((_IHM| 0+1)))^(0+128),w
 12155  1531  120A  118A  2052  160A  118A  	fcall	fptable
 12156  1536                     l7849:
 12157                           
 12158                           ;main.c: 177:                             setT1(1000);
 12159  1536  3000               	movlw	0
 12160  1537  1283               	bcf	3,5	;RP0=0, select bank0
 12161  1538  1303               	bcf	3,6	;RP1=0, select bank0
 12162  1539  00A9               	movwf	setT1@c+3
 12163  153A  3000               	movlw	0
 12164  153B  00A8               	movwf	setT1@c+2
 12165  153C  3003               	movlw	3
 12166  153D  00A7               	movwf	setT1@c+1
 12167  153E  30E8               	movlw	232
 12168  153F  00A6               	movwf	setT1@c
 12169  1540  160A  158A  20C0  160A  118A  	fcall	_setT1
 12170  1545                     l7851:
 12171                           
 12172                           ;main.c: 178:                             estado = 9;
 12173  1545  3009               	movlw	9
 12174  1546  1283               	bcf	3,5	;RP0=0, select bank0
 12175  1547  1303               	bcf	3,6	;RP1=0, select bank0
 12176  1548  00C4               	movwf	??_main
 12177  1549  0844               	movf	??_main,w
 12178  154A  1683               	bsf	3,5	;RP0=1, select bank1
 12179  154B  1303               	bcf	3,6	;RP1=0, select bank1
 12180  154C  00DB               	movwf	main@estado^(0+128)
 12181                           
 12182                           ;main.c: 179:                             break;
 12183  154D  2D19               	goto	u6141
 12184  154E                     l7853:
 12185                           
 12186                           ;main.c: 182:                             if(!statusT1())
 12187  154E  160A  158A  20A9  160A  118A  	fcall	_statusT1
 12188  1553  1283               	bcf	3,5	;RP0=0, select bank0
 12189  1554  1303               	bcf	3,6	;RP1=0, select bank0
 12190  1555  0823               	movf	?_statusT1+3,w
 12191  1556  0422               	iorwf	?_statusT1+2,w
 12192  1557  0421               	iorwf	?_statusT1+1,w
 12193  1558  0420               	iorwf	?_statusT1,w
 12194  1559  1D03               	skipz
 12195  155A  2D5C               	goto	u6151
 12196  155B  2D5D               	goto	u6150
 12197  155C                     u6151:
 12198  155C  2D19               	goto	u6141
 12199  155D                     u6150:
 12200  155D                     l7855:
 12201                           
 12202                           ;main.c: 183:                                 estado = 71;
 12203  155D  3047               	movlw	71
 12204  155E  00C4               	movwf	??_main
 12205  155F  0844               	movf	??_main,w
 12206  1560  1683               	bsf	3,5	;RP0=1, select bank1
 12207  1561  1303               	bcf	3,6	;RP1=0, select bank1
 12208  1562  00DB               	movwf	main@estado^(0+128)
 12209  1563  2D19               	goto	u6141
 12210  1564                     l7857:
 12211                           
 12212                           ;main.c: 187:                             tecla = teclado_borda();
 12213  1564  160A  158A  21F2  160A  118A  	fcall	_teclado_borda
 12214  1569  1283               	bcf	3,5	;RP0=0, select bank0
 12215  156A  1303               	bcf	3,6	;RP1=0, select bank0
 12216  156B  00C4               	movwf	??_main
 12217  156C  0844               	movf	??_main,w
 12218  156D  1683               	bsf	3,5	;RP0=1, select bank1
 12219  156E  1303               	bcf	3,6	;RP1=0, select bank1
 12220  156F  00DD               	movwf	main@tecla^(0+128)
 12221                           
 12222                           ;main.c: 188:                             switch(tecla)
 12223  1570  2D7A               	goto	l7863
 12224  1571                     l7859:
 12225  1571  3003               	movlw	3
 12226  1572  1283               	bcf	3,5	;RP0=0, select bank0
 12227  1573  1303               	bcf	3,6	;RP1=0, select bank0
 12228  1574  00C4               	movwf	??_main
 12229  1575  0844               	movf	??_main,w
 12230  1576  1683               	bsf	3,5	;RP0=1, select bank1
 12231  1577  1303               	bcf	3,6	;RP1=0, select bank1
 12232  1578  00DB               	movwf	main@estado^(0+128)
 12233  1579  2D19               	goto	u6141
 12234  157A                     l7863:
 12235  157A  085D               	movf	main@tecla^(0+128),w
 12236  157B  1283               	bcf	3,5	;RP0=0, select bank0
 12237  157C  1303               	bcf	3,6	;RP1=0, select bank0
 12238  157D  00C4               	movwf	??_main
 12239  157E  01C5               	clrf	??_main+1
 12240                           
 12241                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12242                           ; Switch size 1, requested type "simple"
 12243                           ; Number of cases is 1, Range of values is 0 to 0
 12244                           ; switch strategies available:
 12245                           ; Name         Instructions Cycles
 12246                           ; simple_byte            4     3 (average)
 12247                           ; direct_byte           11     8 (fixed)
 12248                           ; jumptable            260     6 (fixed)
 12249                           ;	Chosen strategy is simple_byte
 12250  157F  0845               	movf	??_main+1,w
 12251  1580  3A00               	xorlw	0	; case 0
 12252  1581  1903               	skipnz
 12253  1582  2D84               	goto	l8915
 12254  1583  2D19               	goto	u6141
 12255  1584                     l8915:
 12256                           
 12257                           ; Switch size 1, requested type "simple"
 12258                           ; Number of cases is 2, Range of values is 49 to 51
 12259                           ; switch strategies available:
 12260                           ; Name         Instructions Cycles
 12261                           ; simple_byte            7     4 (average)
 12262                           ; direct_byte           20    11 (fixed)
 12263                           ; jumptable            263     9 (fixed)
 12264                           ;	Chosen strategy is simple_byte
 12265  1584  0844               	movf	??_main,w
 12266  1585  3A31               	xorlw	49	; case 49
 12267  1586  1903               	skipnz
 12268  1587  2D71               	goto	l7859
 12269  1588  3A02               	xorlw	2	; case 51
 12270  1589  1903               	skipnz
 12271  158A  2D19               	goto	u6141
 12272  158B  2D19               	goto	u6141
 12273  158C                     l7865:
 12274                           
 12275                           ;main.c: 346:                             IHM.clr();
 12276  158C  1683               	bsf	3,5	;RP0=1, select bank1
 12277  158D  1303               	bcf	3,6	;RP1=0, select bank1
 12278  158E  0862               	movf	(low ((_IHM| 0+4)))^(0+128),w
 12279  158F  120A  118A  2052  160A  118A  	fcall	fptable
 12280  1594                     l7867:
 12281                           
 12282                           ;main.c: 347:                             IHM.printpos(0, 0, "   AJUSTE O INICIO  ");
 12283  1594  1283               	bcf	3,5	;RP0=0, select bank0
 12284  1595  1303               	bcf	3,6	;RP1=0, select bank0
 12285  1596  01A8               	clrf	dispLCD@lin
 12286  1597  01A9               	clrf	dispLCD@col
 12287  1598  3087               	movlw	low (STR_5| (0+32768))
 12288  1599  00AA               	movwf	dispLCD@str
 12289  159A  3089               	movlw	high (STR_5| (0+32768))
 12290  159B  00AB               	movwf	dispLCD@str+1
 12291  159C  1683               	bsf	3,5	;RP0=1, select bank1
 12292  159D  1303               	bcf	3,6	;RP1=0, select bank1
 12293  159E  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 12294  159F  120A  118A  2052  160A  118A  	fcall	fptable
 12295  15A4                     l7869:
 12296                           
 12297                           ;main.c: 348:                             IHM.printpos(1, 0, "     DO SISTEMA     ");
 12298  15A4  1283               	bcf	3,5	;RP0=0, select bank0
 12299  15A5  1303               	bcf	3,6	;RP1=0, select bank0
 12300  15A6  01A8               	clrf	dispLCD@lin
 12301  15A7  0AA8               	incf	dispLCD@lin,f
 12302  15A8  01A9               	clrf	dispLCD@col
 12303  15A9  305D               	movlw	low (STR_6| (0+32768))
 12304  15AA  00AA               	movwf	dispLCD@str
 12305  15AB  3089               	movlw	high (STR_6| (0+32768))
 12306  15AC  00AB               	movwf	dispLCD@str+1
 12307  15AD  1683               	bsf	3,5	;RP0=1, select bank1
 12308  15AE  1303               	bcf	3,6	;RP1=0, select bank1
 12309  15AF  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 12310  15B0  120A  118A  2052  160A  118A  	fcall	fptable
 12311  15B5                     l7871:
 12312                           
 12313                           ;main.c: 349:                             estado = 6;
 12314  15B5  3006               	movlw	6
 12315  15B6  1283               	bcf	3,5	;RP0=0, select bank0
 12316  15B7  1303               	bcf	3,6	;RP1=0, select bank0
 12317  15B8  00C4               	movwf	??_main
 12318  15B9  0844               	movf	??_main,w
 12319  15BA  1683               	bsf	3,5	;RP0=1, select bank1
 12320  15BB  1303               	bcf	3,6	;RP1=0, select bank1
 12321  15BC  00DB               	movwf	main@estado^(0+128)
 12322                           
 12323                           ;main.c: 350:                             break;
 12324  15BD  2D19               	goto	u6141
 12325                           
 12326                           	psect	maintext_split_2
 12327  0A01                     l7873:
 12328                           
 12329                           ;main.c: 353:                             IHM.printpos(3,0,"   A   B   C   D    ");
 12330  0A01  3003               	movlw	3
 12331  0A02  00C4               	movwf	??_main
 12332  0A03  0844               	movf	??_main,w
 12333  0A04  00A8               	movwf	dispLCD@lin
 12334  0A05  01A9               	clrf	dispLCD@col
 12335  0A06  3072               	movlw	low (STR_7| (0+32768))
 12336  0A07  00AA               	movwf	dispLCD@str
 12337  0A08  3089               	movlw	high (STR_7| (0+32768))
 12338  0A09  00AB               	movwf	dispLCD@str+1
 12339  0A0A  1683               	bsf	3,5	;RP0=1, select bank1
 12340  0A0B  1303               	bcf	3,6	;RP1=0, select bank1
 12341  0A0C  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 12342  0A0D  120A  118A  2052  120A  158A  	fcall	fptable
 12343  0A12                     l7875:
 12344                           
 12345                           ;main.c: 354:                             dispLCD_lincol(3, 4); dispLCD_dataReg(ler_atua
      +                          dor('A') ? '+' : '-');
 12346  0A12  3004               	movlw	4
 12347  0A13  1283               	bcf	3,5	;RP0=0, select bank0
 12348  0A14  1303               	bcf	3,6	;RP1=0, select bank0
 12349  0A15  00C4               	movwf	??_main
 12350  0A16  0844               	movf	??_main,w
 12351  0A17  00A3               	movwf	dispLCD_lincol@col
 12352  0A18  3003               	movlw	3
 12353  0A19  160A  158A  2476  120A  158A  	fcall	_dispLCD_lincol
 12354  0A1E                     l7877:
 12355  0A1E  3041               	movlw	65
 12356  0A1F  160A  158A  2358  120A  158A  	fcall	_ler_atuador
 12357  0A24  3A00               	xorlw	0
 12358  0A25  1D03               	skipz
 12359  0A26  2A28               	goto	u6161
 12360  0A27  2A29               	goto	u6160
 12361  0A28                     u6161:
 12362  0A28  2A30               	goto	l7881
 12363  0A29                     u6160:
 12364  0A29                     l7879:
 12365  0A29  302D               	movlw	45
 12366  0A2A  1683               	bsf	3,5	;RP0=1, select bank1
 12367  0A2B  1303               	bcf	3,6	;RP1=0, select bank1
 12368  0A2C  00B6               	movwf	_main$893^(0+128)
 12369  0A2D  3000               	movlw	0
 12370  0A2E  00B7               	movwf	(_main$893^(0+128)+1)
 12371  0A2F  2A36               	goto	l7883
 12372  0A30                     l7881:
 12373  0A30  302B               	movlw	43
 12374  0A31  1683               	bsf	3,5	;RP0=1, select bank1
 12375  0A32  1303               	bcf	3,6	;RP1=0, select bank1
 12376  0A33  00B6               	movwf	_main$893^(0+128)
 12377  0A34  3000               	movlw	0
 12378  0A35  00B7               	movwf	(_main$893^(0+128)+1)
 12379  0A36                     l7883:
 12380  0A36  0836               	movf	_main$893^(0+128),w
 12381  0A37  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
 12382  0A3C                     l7885:
 12383                           
 12384                           ;main.c: 355:                             dispLCD_lincol(3, 8);dispLCD_dataReg(ler_atuad
      +                          or('B') ? '+' : '-');
 12385  0A3C  3008               	movlw	8
 12386  0A3D  1283               	bcf	3,5	;RP0=0, select bank0
 12387  0A3E  1303               	bcf	3,6	;RP1=0, select bank0
 12388  0A3F  00C4               	movwf	??_main
 12389  0A40  0844               	movf	??_main,w
 12390  0A41  00A3               	movwf	dispLCD_lincol@col
 12391  0A42  3003               	movlw	3
 12392  0A43  160A  158A  2476  120A  158A  	fcall	_dispLCD_lincol
 12393  0A48                     l7887:
 12394  0A48  3042               	movlw	66
 12395  0A49  160A  158A  2358  120A  158A  	fcall	_ler_atuador
 12396  0A4E  3A00               	xorlw	0
 12397  0A4F  1D03               	skipz
 12398  0A50  2A52               	goto	u6171
 12399  0A51  2A53               	goto	u6170
 12400  0A52                     u6171:
 12401  0A52  2A5A               	goto	l7891
 12402  0A53                     u6170:
 12403  0A53                     l7889:
 12404  0A53  302D               	movlw	45
 12405  0A54  1683               	bsf	3,5	;RP0=1, select bank1
 12406  0A55  1303               	bcf	3,6	;RP1=0, select bank1
 12407  0A56  00B8               	movwf	_main$894^(0+128)
 12408  0A57  3000               	movlw	0
 12409  0A58  00B9               	movwf	(_main$894^(0+128)+1)
 12410  0A59  2A60               	goto	l7893
 12411  0A5A                     l7891:
 12412  0A5A  302B               	movlw	43
 12413  0A5B  1683               	bsf	3,5	;RP0=1, select bank1
 12414  0A5C  1303               	bcf	3,6	;RP1=0, select bank1
 12415  0A5D  00B8               	movwf	_main$894^(0+128)
 12416  0A5E  3000               	movlw	0
 12417  0A5F  00B9               	movwf	(_main$894^(0+128)+1)
 12418  0A60                     l7893:
 12419  0A60  0838               	movf	_main$894^(0+128),w
 12420  0A61  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
 12421  0A66                     l7895:
 12422                           
 12423                           ;main.c: 356:                             dispLCD_lincol(3, 12);dispLCD_dataReg(ler_atua
      +                          dor('C') ? '+' : '-');
 12424  0A66  300C               	movlw	12
 12425  0A67  1283               	bcf	3,5	;RP0=0, select bank0
 12426  0A68  1303               	bcf	3,6	;RP1=0, select bank0
 12427  0A69  00C4               	movwf	??_main
 12428  0A6A  0844               	movf	??_main,w
 12429  0A6B  00A3               	movwf	dispLCD_lincol@col
 12430  0A6C  3003               	movlw	3
 12431  0A6D  160A  158A  2476  120A  158A  	fcall	_dispLCD_lincol
 12432  0A72                     l7897:
 12433  0A72  3043               	movlw	67
 12434  0A73  160A  158A  2358  120A  158A  	fcall	_ler_atuador
 12435  0A78  3A00               	xorlw	0
 12436  0A79  1D03               	skipz
 12437  0A7A  2A7C               	goto	u6181
 12438  0A7B  2A7D               	goto	u6180
 12439  0A7C                     u6181:
 12440  0A7C  2A84               	goto	l7901
 12441  0A7D                     u6180:
 12442  0A7D                     l7899:
 12443  0A7D  302D               	movlw	45
 12444  0A7E  1683               	bsf	3,5	;RP0=1, select bank1
 12445  0A7F  1303               	bcf	3,6	;RP1=0, select bank1
 12446  0A80  00BA               	movwf	_main$895^(0+128)
 12447  0A81  3000               	movlw	0
 12448  0A82  00BB               	movwf	(_main$895^(0+128)+1)
 12449  0A83  2A8A               	goto	l7903
 12450  0A84                     l7901:
 12451  0A84  302B               	movlw	43
 12452  0A85  1683               	bsf	3,5	;RP0=1, select bank1
 12453  0A86  1303               	bcf	3,6	;RP1=0, select bank1
 12454  0A87  00BA               	movwf	_main$895^(0+128)
 12455  0A88  3000               	movlw	0
 12456  0A89  00BB               	movwf	(_main$895^(0+128)+1)
 12457  0A8A                     l7903:
 12458  0A8A  083A               	movf	_main$895^(0+128),w
 12459  0A8B  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
 12460  0A90                     l7905:
 12461                           
 12462                           ;main.c: 357:                             dispLCD_lincol(3, 16);dispLCD_dataReg(ler_atua
      +                          dor('D') ? '+' : '-');
 12463  0A90  3010               	movlw	16
 12464  0A91  1283               	bcf	3,5	;RP0=0, select bank0
 12465  0A92  1303               	bcf	3,6	;RP1=0, select bank0
 12466  0A93  00C4               	movwf	??_main
 12467  0A94  0844               	movf	??_main,w
 12468  0A95  00A3               	movwf	dispLCD_lincol@col
 12469  0A96  3003               	movlw	3
 12470  0A97  160A  158A  2476  120A  158A  	fcall	_dispLCD_lincol
 12471  0A9C                     l7907:
 12472  0A9C  3044               	movlw	68
 12473  0A9D  160A  158A  2358  120A  158A  	fcall	_ler_atuador
 12474  0AA2  3A00               	xorlw	0
 12475  0AA3  1D03               	skipz
 12476  0AA4  2AA6               	goto	u6191
 12477  0AA5  2AA7               	goto	u6190
 12478  0AA6                     u6191:
 12479  0AA6  2AAE               	goto	l7911
 12480  0AA7                     u6190:
 12481  0AA7                     l7909:
 12482  0AA7  302D               	movlw	45
 12483  0AA8  1683               	bsf	3,5	;RP0=1, select bank1
 12484  0AA9  1303               	bcf	3,6	;RP1=0, select bank1
 12485  0AAA  00BC               	movwf	_main$896^(0+128)
 12486  0AAB  3000               	movlw	0
 12487  0AAC  00BD               	movwf	(_main$896^(0+128)+1)
 12488  0AAD  2AB4               	goto	l7913
 12489  0AAE                     l7911:
 12490  0AAE  302B               	movlw	43
 12491  0AAF  1683               	bsf	3,5	;RP0=1, select bank1
 12492  0AB0  1303               	bcf	3,6	;RP1=0, select bank1
 12493  0AB1  00BC               	movwf	_main$896^(0+128)
 12494  0AB2  3000               	movlw	0
 12495  0AB3  00BD               	movwf	(_main$896^(0+128)+1)
 12496  0AB4                     l7913:
 12497  0AB4  083C               	movf	_main$896^(0+128),w
 12498  0AB5  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
 12499  0ABA                     l7915:
 12500                           
 12501                           ;main.c: 358:                             estado = 7;
 12502  0ABA  3007               	movlw	7
 12503  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
 12504  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
 12505  0ABD  00C4               	movwf	??_main
 12506  0ABE  0844               	movf	??_main,w
 12507  0ABF  1683               	bsf	3,5	;RP0=1, select bank1
 12508  0AC0  1303               	bcf	3,6	;RP1=0, select bank1
 12509  0AC1  00DB               	movwf	main@estado^(0+128)
 12510  0AC2                     L12:
 12511                           
 12512                           ;main.c: 359:                             break;
 12513  0AC2  120A  118A  2D1C   	goto	l8251
 12514  0AC5                     l7917:
 12515                           
 12516                           ;main.c: 362:                             tecla = teclado_borda();
 12517  0AC5  160A  158A  21F2  120A  158A  	fcall	_teclado_borda
 12518  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
 12519  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
 12520  0ACC  00C4               	movwf	??_main
 12521  0ACD  0844               	movf	??_main,w
 12522  0ACE  1683               	bsf	3,5	;RP0=1, select bank1
 12523  0ACF  1303               	bcf	3,6	;RP1=0, select bank1
 12524  0AD0  00DD               	movwf	main@tecla^(0+128)
 12525                           
 12526                           ;main.c: 363:                             switch(tecla)
 12527  0AD1  120A  158A  2BA7   	goto	l7957
 12528  0AD4                     l7919:
 12529  0AD4  1683               	bsf	3,5	;RP0=1, select bank1
 12530  0AD5  1303               	bcf	3,6	;RP1=0, select bank1
 12531  0AD6  085D               	movf	main@tecla^(0+128),w
 12532  0AD7  160A  158A  24DA  120A  158A  	fcall	_alt_atuador
 12533  0ADC  3004               	movlw	4
 12534  0ADD  1283               	bcf	3,5	;RP0=0, select bank0
 12535  0ADE  1303               	bcf	3,6	;RP1=0, select bank0
 12536  0ADF  00C4               	movwf	??_main
 12537  0AE0  0844               	movf	??_main,w
 12538  0AE1  00A3               	movwf	dispLCD_lincol@col
 12539  0AE2  3003               	movlw	3
 12540  0AE3  160A  158A  2476  120A  158A  	fcall	_dispLCD_lincol
 12541  0AE8  3041               	movlw	65
 12542  0AE9  160A  158A  2358  120A  158A  	fcall	_ler_atuador
 12543  0AEE  3A00               	xorlw	0
 12544  0AEF  1D03               	skipz
 12545  0AF0  2AF2               	goto	u6201
 12546  0AF1  2AF3               	goto	u6200
 12547  0AF2                     u6201:
 12548  0AF2  2AFA               	goto	l7923
 12549  0AF3                     u6200:
 12550  0AF3                     l7921:
 12551  0AF3  302D               	movlw	45
 12552  0AF4  1683               	bsf	3,5	;RP0=1, select bank1
 12553  0AF5  1303               	bcf	3,6	;RP1=0, select bank1
 12554  0AF6  00BE               	movwf	_main$897^(0+128)
 12555  0AF7  3000               	movlw	0
 12556  0AF8  00BF               	movwf	(_main$897^(0+128)+1)
 12557  0AF9  2B00               	goto	l7925
 12558  0AFA                     l7923:
 12559  0AFA  302B               	movlw	43
 12560  0AFB  1683               	bsf	3,5	;RP0=1, select bank1
 12561  0AFC  1303               	bcf	3,6	;RP1=0, select bank1
 12562  0AFD  00BE               	movwf	_main$897^(0+128)
 12563  0AFE  3000               	movlw	0
 12564  0AFF  00BF               	movwf	(_main$897^(0+128)+1)
 12565  0B00                     l7925:
 12566  0B00  083E               	movf	_main$897^(0+128),w
 12567  0B01  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
 12568  0B06  2AC2               	goto	L12
 12569                           
 12570                           	psect	maintext_split_3
 12571  0B07                     l7927:
 12572  0B07  1683               	bsf	3,5	;RP0=1, select bank1
 12573  0B08  1303               	bcf	3,6	;RP1=0, select bank1
 12574  0B09  085D               	movf	main@tecla^(0+128),w
 12575  0B0A  160A  158A  24DA  120A  158A  	fcall	_alt_atuador
 12576  0B0F  3008               	movlw	8
 12577  0B10  1283               	bcf	3,5	;RP0=0, select bank0
 12578  0B11  1303               	bcf	3,6	;RP1=0, select bank0
 12579  0B12  00C4               	movwf	??_main
 12580  0B13  0844               	movf	??_main,w
 12581  0B14  00A3               	movwf	dispLCD_lincol@col
 12582  0B15  3003               	movlw	3
 12583  0B16  160A  158A  2476  120A  158A  	fcall	_dispLCD_lincol
 12584  0B1B  3042               	movlw	66
 12585  0B1C  160A  158A  2358  120A  158A  	fcall	_ler_atuador
 12586  0B21  3A00               	xorlw	0
 12587  0B22  1D03               	skipz
 12588  0B23  2B25               	goto	u6211
 12589  0B24  2B26               	goto	u6210
 12590  0B25                     u6211:
 12591  0B25  2B2D               	goto	l7931
 12592  0B26                     u6210:
 12593  0B26                     l7929:
 12594  0B26  302D               	movlw	45
 12595  0B27  1683               	bsf	3,5	;RP0=1, select bank1
 12596  0B28  1303               	bcf	3,6	;RP1=0, select bank1
 12597  0B29  00C0               	movwf	_main$898^(0+128)
 12598  0B2A  3000               	movlw	0
 12599  0B2B  00C1               	movwf	(_main$898^(0+128)+1)
 12600  0B2C  2B33               	goto	l7933
 12601  0B2D                     l7931:
 12602  0B2D  302B               	movlw	43
 12603  0B2E  1683               	bsf	3,5	;RP0=1, select bank1
 12604  0B2F  1303               	bcf	3,6	;RP1=0, select bank1
 12605  0B30  00C0               	movwf	_main$898^(0+128)
 12606  0B31  3000               	movlw	0
 12607  0B32  00C1               	movwf	(_main$898^(0+128)+1)
 12608  0B33                     l7933:
 12609  0B33  0840               	movf	_main$898^(0+128),w
 12610  0B34  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
 12611  0B39  2C0C               	goto	u6241
 12612  0B3A                     l7935:
 12613  0B3A  1683               	bsf	3,5	;RP0=1, select bank1
 12614  0B3B  1303               	bcf	3,6	;RP1=0, select bank1
 12615  0B3C  085D               	movf	main@tecla^(0+128),w
 12616  0B3D  160A  158A  24DA  120A  158A  	fcall	_alt_atuador
 12617  0B42  300C               	movlw	12
 12618  0B43  1283               	bcf	3,5	;RP0=0, select bank0
 12619  0B44  1303               	bcf	3,6	;RP1=0, select bank0
 12620  0B45  00C4               	movwf	??_main
 12621  0B46  0844               	movf	??_main,w
 12622  0B47  00A3               	movwf	dispLCD_lincol@col
 12623  0B48  3003               	movlw	3
 12624  0B49  160A  158A  2476  120A  158A  	fcall	_dispLCD_lincol
 12625  0B4E  3043               	movlw	67
 12626  0B4F  160A  158A  2358  120A  158A  	fcall	_ler_atuador
 12627  0B54  3A00               	xorlw	0
 12628  0B55  1D03               	skipz
 12629  0B56  2B58               	goto	u6221
 12630  0B57  2B59               	goto	u6220
 12631  0B58                     u6221:
 12632  0B58  2B60               	goto	l7939
 12633  0B59                     u6220:
 12634  0B59                     l7937:
 12635  0B59  302D               	movlw	45
 12636  0B5A  1683               	bsf	3,5	;RP0=1, select bank1
 12637  0B5B  1303               	bcf	3,6	;RP1=0, select bank1
 12638  0B5C  00C2               	movwf	_main$899^(0+128)
 12639  0B5D  3000               	movlw	0
 12640  0B5E  00C3               	movwf	(_main$899^(0+128)+1)
 12641  0B5F  2B66               	goto	l7941
 12642  0B60                     l7939:
 12643  0B60  302B               	movlw	43
 12644  0B61  1683               	bsf	3,5	;RP0=1, select bank1
 12645  0B62  1303               	bcf	3,6	;RP1=0, select bank1
 12646  0B63  00C2               	movwf	_main$899^(0+128)
 12647  0B64  3000               	movlw	0
 12648  0B65  00C3               	movwf	(_main$899^(0+128)+1)
 12649  0B66                     l7941:
 12650  0B66  0842               	movf	_main$899^(0+128),w
 12651  0B67  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
 12652  0B6C  2C0C               	goto	u6241
 12653  0B6D                     l7943:
 12654  0B6D  1683               	bsf	3,5	;RP0=1, select bank1
 12655  0B6E  1303               	bcf	3,6	;RP1=0, select bank1
 12656  0B6F  085D               	movf	main@tecla^(0+128),w
 12657  0B70  160A  158A  24DA  120A  158A  	fcall	_alt_atuador
 12658  0B75  3010               	movlw	16
 12659  0B76  1283               	bcf	3,5	;RP0=0, select bank0
 12660  0B77  1303               	bcf	3,6	;RP1=0, select bank0
 12661  0B78  00C4               	movwf	??_main
 12662  0B79  0844               	movf	??_main,w
 12663  0B7A  00A3               	movwf	dispLCD_lincol@col
 12664  0B7B  3003               	movlw	3
 12665  0B7C  160A  158A  2476  120A  158A  	fcall	_dispLCD_lincol
 12666  0B81  3044               	movlw	68
 12667  0B82  160A  158A  2358  120A  158A  	fcall	_ler_atuador
 12668  0B87  3A00               	xorlw	0
 12669  0B88  1D03               	skipz
 12670  0B89  2B8B               	goto	u6231
 12671  0B8A  2B8C               	goto	u6230
 12672  0B8B                     u6231:
 12673  0B8B  2B93               	goto	l7947
 12674  0B8C                     u6230:
 12675  0B8C                     l7945:
 12676  0B8C  302D               	movlw	45
 12677  0B8D  1683               	bsf	3,5	;RP0=1, select bank1
 12678  0B8E  1303               	bcf	3,6	;RP1=0, select bank1
 12679  0B8F  00C4               	movwf	_main$900^(0+128)
 12680  0B90  3000               	movlw	0
 12681  0B91  00C5               	movwf	(_main$900^(0+128)+1)
 12682  0B92  2B99               	goto	l7949
 12683  0B93                     l7947:
 12684  0B93  302B               	movlw	43
 12685  0B94  1683               	bsf	3,5	;RP0=1, select bank1
 12686  0B95  1303               	bcf	3,6	;RP1=0, select bank1
 12687  0B96  00C4               	movwf	_main$900^(0+128)
 12688  0B97  3000               	movlw	0
 12689  0B98  00C5               	movwf	(_main$900^(0+128)+1)
 12690  0B99                     l7949:
 12691  0B99  0844               	movf	_main$900^(0+128),w
 12692  0B9A  160A  158A  2445  120A  158A  	fcall	_dispLCD_dataReg
 12693  0B9F  2C0C               	goto	u6241
 12694  0BA0                     l7951:
 12695  0BA0  300A               	movlw	10
 12696  0BA1  00C4               	movwf	??_main
 12697  0BA2  0844               	movf	??_main,w
 12698  0BA3  1683               	bsf	3,5	;RP0=1, select bank1
 12699  0BA4  1303               	bcf	3,6	;RP1=0, select bank1
 12700  0BA5  00DB               	movwf	main@estado^(0+128)
 12701  0BA6  2C0C               	goto	u6241
 12702  0BA7                     l7957:
 12703  0BA7  085D               	movf	main@tecla^(0+128),w
 12704  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
 12705  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
 12706  0BAA  00C4               	movwf	??_main
 12707  0BAB  01C5               	clrf	??_main+1
 12708                           
 12709                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12710                           ; Switch size 1, requested type "simple"
 12711                           ; Number of cases is 1, Range of values is 0 to 0
 12712                           ; switch strategies available:
 12713                           ; Name         Instructions Cycles
 12714                           ; simple_byte            4     3 (average)
 12715                           ; direct_byte           11     8 (fixed)
 12716                           ; jumptable            260     6 (fixed)
 12717                           ;	Chosen strategy is simple_byte
 12718  0BAC  0845               	movf	??_main+1,w
 12719  0BAD  3A00               	xorlw	0	; case 0
 12720  0BAE  1903               	skipnz
 12721  0BAF  2BB1               	goto	l8917
 12722  0BB0  2C0C               	goto	u6241
 12723  0BB1                     l8917:
 12724                           
 12725                           ; Switch size 1, requested type "simple"
 12726                           ; Number of cases is 6, Range of values is 35 to 68
 12727                           ; switch strategies available:
 12728                           ; Name         Instructions Cycles
 12729                           ; simple_byte           19    10 (average)
 12730                           ; direct_byte          113    11 (fixed)
 12731                           ; jumptable            263     9 (fixed)
 12732                           ;	Chosen strategy is simple_byte
 12733  0BB1  0844               	movf	??_main,w
 12734  0BB2  3A23               	xorlw	35	; case 35
 12735  0BB3  1903               	skipnz
 12736  0BB4  2BA0               	goto	l7951
 12737  0BB5  3A09               	xorlw	9	; case 42
 12738  0BB6  120A  118A  1903   	skipnz
 12739  0BB9  2EEA  120A  158A   	goto	L3
 12740  0BBC  3A6B               	xorlw	107	; case 65
 12741  0BBD  1903               	skipnz
 12742  0BBE  2C7B               	goto	L20
 12743  0BBF  3A03               	xorlw	3	; case 66
 12744  0BC0  1903               	skipnz
 12745  0BC1  2B07               	goto	l7927
 12746  0BC2  3A01               	xorlw	1	; case 67
 12747  0BC3  1903               	skipnz
 12748  0BC4  2B3A               	goto	l7935
 12749  0BC5  3A07               	xorlw	7	; case 68
 12750  0BC6  1903               	skipnz
 12751  0BC7  2B6D               	goto	l7943
 12752  0BC8  2C0C               	goto	u6241
 12753  0BC9                     l7959:
 12754                           
 12755                           ;main.c: 377:                             init_cond = salva_atuadores_init();
 12756  0BC9  160A  118A  200D  120A  158A  	fcall	_salva_atuadores_init
 12757  0BCE  1283               	bcf	3,5	;RP0=0, select bank0
 12758  0BCF  1303               	bcf	3,6	;RP1=0, select bank0
 12759  0BD0  00C4               	movwf	??_main
 12760  0BD1  0844               	movf	??_main,w
 12761  0BD2  1683               	bsf	3,5	;RP0=1, select bank1
 12762  0BD3  1303               	bcf	3,6	;RP1=0, select bank1
 12763  0BD4  00C8               	movwf	main@init_cond^(0+128)
 12764  0BD5                     l7961:
 12765                           
 12766                           ;main.c: 378:                             IHM.clr();
 12767  0BD5  0862               	movf	(low ((_IHM| 0+4)))^(0+128),w
 12768  0BD6  120A  118A  2052  120A  158A  	fcall	fptable
 12769  0BDB                     l7963:
 12770                           
 12771                           ;main.c: 379:                             IHM.printpos(0, 0, "  INSIRA OS PASSOS  ");
 12772  0BDB  1283               	bcf	3,5	;RP0=0, select bank0
 12773  0BDC  1303               	bcf	3,6	;RP1=0, select bank0
 12774  0BDD  01A8               	clrf	dispLCD@lin
 12775  0BDE  01A9               	clrf	dispLCD@col
 12776  0BDF  309C               	movlw	low (STR_8| (0+32768))
 12777  0BE0  00AA               	movwf	dispLCD@str
 12778  0BE1  3089               	movlw	high (STR_8| (0+32768))
 12779  0BE2  00AB               	movwf	dispLCD@str+1
 12780  0BE3  1683               	bsf	3,5	;RP0=1, select bank1
 12781  0BE4  1303               	bcf	3,6	;RP1=0, select bank1
 12782  0BE5  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 12783  0BE6  120A  118A  2052  120A  158A  	fcall	fptable
 12784  0BEB                     l7965:
 12785                           
 12786                           ;main.c: 380:                             estado = 14;
 12787  0BEB  300E               	movlw	14
 12788  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
 12789  0BED  1303               	bcf	3,6	;RP1=0, select bank0
 12790  0BEE  00C4               	movwf	??_main
 12791  0BEF  0844               	movf	??_main,w
 12792  0BF0  1683               	bsf	3,5	;RP0=1, select bank1
 12793  0BF1  1303               	bcf	3,6	;RP1=0, select bank1
 12794  0BF2  00DB               	movwf	main@estado^(0+128)
 12795                           
 12796                           ;main.c: 381:                             break;
 12797  0BF3  2C0C               	goto	u6241
 12798  0BF4                     l7967:
 12799                           
 12800                           ;main.c: 384:                             tecla = teclado_borda();
 12801  0BF4  160A  158A  21F2  120A  158A  	fcall	_teclado_borda
 12802  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
 12803  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
 12804  0BFB  00C4               	movwf	??_main
 12805  0BFC  0844               	movf	??_main,w
 12806  0BFD  1683               	bsf	3,5	;RP0=1, select bank1
 12807  0BFE  1303               	bcf	3,6	;RP1=0, select bank1
 12808  0BFF  00DD               	movwf	main@tecla^(0+128)
 12809                           
 12810                           ;main.c: 385:                             switch( tecla )
 12811  0C00  120A  158A  2C87   	goto	l8005
 12812  0C03                     l748:	
 12813                           ;main.c: 389:                                 case 'C':
 12814                           
 12815  0C03                     l7969:
 12816                           
 12817                           ;main.c: 391:                                             if( fifo_disponivel() )
 12818  0C03  160A  158A  2093  120A  158A  	fcall	_fifo_disponivel
 12819  0C08  3A00               	xorlw	0
 12820  0C09  1903               	skipnz
 12821  0C0A  2C0C               	goto	u6241
 12822  0C0B  2C0F               	goto	u6240
 12823  0C0C                     u6241:
 12824  0C0C  120A  118A  2D1C   	goto	l8251
 12825  0C0F                     u6240:
 12826  0C0F                     l7971:
 12827                           
 12828                           ;main.c: 392:                                             {;main.c: 393:                
      +                                                           alt_atuador(tecla);
 12829  0C0F  1683               	bsf	3,5	;RP0=1, select bank1
 12830  0C10  1303               	bcf	3,6	;RP1=0, select bank1
 12831  0C11  085D               	movf	main@tecla^(0+128),w
 12832  0C12  160A  158A  24DA  120A  158A  	fcall	_alt_atuador
 12833                           
 12834                           ;main.c: 394:                                                 fifo_add( ler_atuador(tecl
      +                          a) ? tecla : tecla|0x20 );
 12835  0C17  1683               	bsf	3,5	;RP0=1, select bank1
 12836  0C18  1303               	bcf	3,6	;RP1=0, select bank1
 12837  0C19  085D               	movf	main@tecla^(0+128),w
 12838  0C1A  160A  158A  2358  120A  158A  	fcall	_ler_atuador
 12839  0C1F  3A00               	xorlw	0
 12840  0C20  1D03               	skipz
 12841  0C21  2C23               	goto	u6251
 12842  0C22  2C24               	goto	u6250
 12843  0C23                     u6251:
 12844  0C23  2C2C               	goto	l7975
 12845  0C24                     u6250:
 12846  0C24                     l7973:
 12847  0C24  3020               	movlw	32
 12848  0C25  1683               	bsf	3,5	;RP0=1, select bank1
 12849  0C26  1303               	bcf	3,6	;RP1=0, select bank1
 12850  0C27  045D               	iorwf	main@tecla^(0+128),w
 12851  0C28  00C6               	movwf	_main$905^(0+128)
 12852  0C29  3000               	movlw	0
 12853  0C2A  00C7               	movwf	(_main$905+1)^(0+128)
 12854  0C2B  2C3D               	goto	l7977
 12855  0C2C                     l7975:
 12856  0C2C  1683               	bsf	3,5	;RP0=1, select bank1
 12857  0C2D  1303               	bcf	3,6	;RP1=0, select bank1
 12858  0C2E  085D               	movf	main@tecla^(0+128),w
 12859  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
 12860  0C30  1303               	bcf	3,6	;RP1=0, select bank0
 12861  0C31  00C4               	movwf	??_main
 12862  0C32  01C5               	clrf	??_main+1
 12863  0C33  0844               	movf	??_main,w
 12864  0C34  1683               	bsf	3,5	;RP0=1, select bank1
 12865  0C35  1303               	bcf	3,6	;RP1=0, select bank1
 12866  0C36  00C6               	movwf	_main$905^(0+128)
 12867  0C37  1283               	bcf	3,5	;RP0=0, select bank0
 12868  0C38  1303               	bcf	3,6	;RP1=0, select bank0
 12869  0C39  0845               	movf	??_main+1,w
 12870  0C3A  1683               	bsf	3,5	;RP0=1, select bank1
 12871  0C3B  1303               	bcf	3,6	;RP1=0, select bank1
 12872  0C3C  00C7               	movwf	(_main$905+1)^(0+128)
 12873  0C3D                     l7977:
 12874  0C3D  0846               	movf	_main$905^(0+128),w
 12875  0C3E  160A  158A  23E5  120A  158A  	fcall	_fifo_add
 12876  0C43                     l7979:
 12877                           
 12878                           ;main.c: 395:                                                 estado = 16;
 12879  0C43  3010               	movlw	16
 12880  0C44  1283               	bcf	3,5	;RP0=0, select bank0
 12881  0C45  1303               	bcf	3,6	;RP1=0, select bank0
 12882  0C46  00C4               	movwf	??_main
 12883  0C47  0844               	movf	??_main,w
 12884  0C48  1683               	bsf	3,5	;RP0=1, select bank1
 12885  0C49  1303               	bcf	3,6	;RP1=0, select bank1
 12886  0C4A  00DB               	movwf	main@estado^(0+128)
 12887  0C4B  2C0C               	goto	u6241
 12888  0C4C                     l7981:
 12889                           
 12890                           ;main.c: 399:                                             fifo_indicePrint_inc();
 12891  0C4C  160A  158A  232A  120A  158A  	fcall	_fifo_indicePrint_inc
 12892  0C51  2C43               	goto	l7979
 12893  0C52                     l7985:
 12894                           
 12895                           ;main.c: 403:                                             fifo_indicePrint_dec();
 12896  0C52  160A  158A  209E  120A  158A  	fcall	_fifo_indicePrint_dec
 12897  0C57  2C43               	goto	l7979
 12898  0C58                     l7989:
 12899                           
 12900                           ;main.c: 408:                                             if(fifo_indice() == 2 )
 12901  0C58  160A  158A  2027  120A  158A  	fcall	_fifo_indice
 12902  0C5D  3A02               	xorlw	2
 12903  0C5E  1D03               	skipz
 12904  0C5F  2C61               	goto	u6261
 12905  0C60  2C62               	goto	u6260
 12906  0C61                     u6261:
 12907  0C61  2C65               	goto	l7993
 12908  0C62                     u6260:
 12909  0C62  160A  118A  2D71   	goto	l7859
 12910  0C65                     l7993:
 12911                           
 12912                           ;main.c: 411:                                             {;main.c: 412:                
      +                                                           fifo_delete();
 12913  0C65  160A  158A  275A  120A  158A  	fcall	_fifo_delete
 12914  0C6A  2C43               	goto	l7979
 12915  0C6B                     l7997:
 12916  0C6B  304A               	movlw	74
 12917  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
 12918  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
 12919  0C6E  00C4               	movwf	??_main
 12920  0C6F  0844               	movf	??_main,w
 12921  0C70  1683               	bsf	3,5	;RP0=1, select bank1
 12922  0C71  1303               	bcf	3,6	;RP1=0, select bank1
 12923  0C72  00DB               	movwf	main@estado^(0+128)
 12924  0C73  2C0C               	goto	u6241
 12925  0C74                     l7999:
 12926  0C74  3029               	movlw	41
 12927  0C75  00C4               	movwf	??_main
 12928  0C76  0844               	movf	??_main,w
 12929  0C77  1683               	bsf	3,5	;RP0=1, select bank1
 12930  0C78  1303               	bcf	3,6	;RP1=0, select bank1
 12931  0C79  00DB               	movwf	main@estado^(0+128)
 12932  0C7A  2C0C               	goto	u6241
 12933  0C7B                     L20:
 12934  0C7B                     L19:
 12935  0C7B  120A  118A  2EF9   	ljmp	L14
 12936                           
 12937                           	psect	maintext_split_4
 12938  0C7E                     l8001:
 12939  0C7E  305A               	movlw	90
 12940  0C7F  00C4               	movwf	??_main
 12941  0C80  0844               	movf	??_main,w
 12942  0C81  1683               	bsf	3,5	;RP0=1, select bank1
 12943  0C82  1303               	bcf	3,6	;RP1=0, select bank1
 12944  0C83  00DB               	movwf	main@estado^(0+128)
 12945  0C84                     L31:
 12946  0C84  120A  118A  2D1C   	goto	l8251
 12947  0C87                     l8005:
 12948  0C87  085D               	movf	main@tecla^(0+128),w
 12949  0C88  1283               	bcf	3,5	;RP0=0, select bank0
 12950  0C89  1303               	bcf	3,6	;RP1=0, select bank0
 12951  0C8A  00C4               	movwf	??_main
 12952  0C8B  01C5               	clrf	??_main+1
 12953                           
 12954                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12955                           ; Switch size 1, requested type "simple"
 12956                           ; Number of cases is 1, Range of values is 0 to 0
 12957                           ; switch strategies available:
 12958                           ; Name         Instructions Cycles
 12959                           ; simple_byte            4     3 (average)
 12960                           ; direct_byte           11     8 (fixed)
 12961                           ; jumptable            260     6 (fixed)
 12962                           ;	Chosen strategy is simple_byte
 12963  0C8C  0845               	movf	??_main+1,w
 12964  0C8D  3A00               	xorlw	0	; case 0
 12965  0C8E  1903               	skipnz
 12966  0C8F  2C91               	goto	l8919
 12967  0C90  2C84               	goto	L31
 12968  0C91                     l8919:
 12969                           
 12970                           ; Switch size 1, requested type "simple"
 12971                           ; Number of cases is 10, Range of values is 35 to 68
 12972                           ; switch strategies available:
 12973                           ; Name         Instructions Cycles
 12974                           ; simple_byte           31    16 (average)
 12975                           ; direct_byte          113    11 (fixed)
 12976                           ; jumptable            263     9 (fixed)
 12977                           ;	Chosen strategy is simple_byte
 12978  0C91  0844               	movf	??_main,w
 12979  0C92  3A23               	xorlw	35	; case 35
 12980  0C93  120A  118A  1903   	skipnz
 12981  0C96  2AE0               	goto	L21
 12982  0C97  3A09               	xorlw	9	; case 42
 12983  0C98  120A  158A  1903   	skipnz
 12984  0C9B  2C58               	goto	l7989
 12985  0C9C  3A1A               	xorlw	26	; case 48
 12986  0C9D  1903               	skipnz
 12987  0C9E  2C74               	goto	l7999
 12988  0C9F  3A04               	xorlw	4	; case 52
 12989  0CA0  1903               	skipnz
 12990  0CA1  2C52  120A  158A   	goto	l7985
 12991  0CA4  3A02               	xorlw	2	; case 54
 12992  0CA5  1903               	skipnz
 12993  0CA6  2E09               	goto	L33
 12994  0CA7  3A0F               	xorlw	15	; case 57
 12995  0CA8  1903               	skipnz
 12996  0CA9  2C7E               	goto	l8001
 12997  0CAA  3A78               	xorlw	120	; case 65
 12998  0CAB  120A  158A  1903   	skipnz
 12999  0CAE  2C03               	goto	l748
 13000  0CAF  3A03               	xorlw	3	; case 66
 13001  0CB0  120A  118A  1903   	skipnz
 13002  0CB3  2F05  120A  158A   	goto	L24
 13003  0CB6  3A01               	xorlw	1	; case 67
 13004  0CB7  1903               	skipnz
 13005  0CB8  2E0C               	goto	L34
 13006  0CB9  3A07               	xorlw	7	; case 68
 13007  0CBA  1903               	skipnz
 13008  0CBB  2E0C               	goto	L35
 13009  0CBC  2C84               	goto	L31
 13010  0CBD                     l8007:
 13011                           
 13012                           ;main.c: 426:                             fifo_print();
 13013  0CBD  120A  158A  260F  120A  158A  	fcall	_fifo_print
 13014  0CC2  120A  158A  2BEB   	goto	l7965
 13015  0CC5                     l8011:
 13016                           
 13017                           ;main.c: 431:                             IHM.printpos(3,0,"<  /  >");
 13018  0CC5  3003               	movlw	3
 13019  0CC6  00C4               	movwf	??_main
 13020  0CC7  0844               	movf	??_main,w
 13021  0CC8  00A8               	movwf	dispLCD@lin
 13022  0CC9  01A9               	clrf	dispLCD@col
 13023  0CCA  30F0               	movlw	low (STR_9| (0+32768))
 13024  0CCB  00AA               	movwf	dispLCD@str
 13025  0CCC  3089               	movlw	high (STR_9| (0+32768))
 13026  0CCD  00AB               	movwf	dispLCD@str+1
 13027  0CCE  1683               	bsf	3,5	;RP0=1, select bank1
 13028  0CCF  1303               	bcf	3,6	;RP1=0, select bank1
 13029  0CD0  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 13030  0CD1  120A  118A  2052  120A  158A  	fcall	fptable
 13031                           
 13032                           ;main.c: 432:                             IHM.printv(3, 1,( fifo_indice()-2 ), 2);
 13033  0CD6  3003               	movlw	3
 13034  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
 13035  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
 13036  0CD9  00C4               	movwf	??_main
 13037  0CDA  0844               	movf	??_main,w
 13038  0CDB  00AD               	movwf	dispLCD_num@lin
 13039  0CDC  01AE               	clrf	dispLCD_num@col
 13040  0CDD  0AAE               	incf	dispLCD_num@col,f
 13041  0CDE  160A  158A  2027  120A  158A  	fcall	_fifo_indice
 13042  0CE3  3EFE               	addlw	254
 13043  0CE4  1283               	bcf	3,5	;RP0=0, select bank0
 13044  0CE5  1303               	bcf	3,6	;RP1=0, select bank0
 13045  0CE6  00AF               	movwf	dispLCD_num@num
 13046  0CE7  30FF               	movlw	255
 13047  0CE8  1803               	skipnc
 13048  0CE9  3000               	movlw	0
 13049  0CEA  00B0               	movwf	dispLCD_num@num+1
 13050  0CEB  3002               	movlw	2
 13051  0CEC  00C5               	movwf	??_main+1
 13052  0CED  0845               	movf	??_main+1,w
 13053  0CEE  00B1               	movwf	dispLCD_num@tam
 13054  0CEF  1683               	bsf	3,5	;RP0=1, select bank1
 13055  0CF0  1303               	bcf	3,6	;RP1=0, select bank1
 13056  0CF1  0861               	movf	(low ((_IHM| 0+3)))^(0+128),w
 13057  0CF2  120A  118A  2052  120A  158A  	fcall	fptable
 13058                           
 13059                           ;main.c: 433:                             IHM.printv(3, 4,( fifo_tam()-2 ), 2);
 13060  0CF7  3003               	movlw	3
 13061  0CF8  1283               	bcf	3,5	;RP0=0, select bank0
 13062  0CF9  1303               	bcf	3,6	;RP1=0, select bank0
 13063  0CFA  00C4               	movwf	??_main
 13064  0CFB  0844               	movf	??_main,w
 13065  0CFC  00AD               	movwf	dispLCD_num@lin
 13066  0CFD  3004               	movlw	4
 13067  0CFE  00C5               	movwf	??_main+1
 13068  0CFF  0845               	movf	??_main+1,w
 13069  0D00  00AE               	movwf	dispLCD_num@col
 13070  0D01  160A  158A  201E  120A  158A  	fcall	_fifo_tam
 13071  0D06  3EFE               	addlw	254
 13072  0D07  1283               	bcf	3,5	;RP0=0, select bank0
 13073  0D08  1303               	bcf	3,6	;RP1=0, select bank0
 13074  0D09  00AF               	movwf	dispLCD_num@num
 13075  0D0A  30FF               	movlw	255
 13076  0D0B  1803               	skipnc
 13077  0D0C  3000               	movlw	0
 13078  0D0D  00B0               	movwf	dispLCD_num@num+1
 13079  0D0E  3002               	movlw	2
 13080  0D0F  00C6               	movwf	??_main+2
 13081  0D10  0846               	movf	??_main+2,w
 13082  0D11  00B1               	movwf	dispLCD_num@tam
 13083  0D12  1683               	bsf	3,5	;RP0=1, select bank1
 13084  0D13  1303               	bcf	3,6	;RP1=0, select bank1
 13085  0D14  0861               	movf	(low ((_IHM| 0+3)))^(0+128),w
 13086  0D15  120A  118A  2052  120A  158A  	fcall	fptable
 13087  0D1A                     l8013:
 13088                           
 13089                           ;main.c: 434:                             estado = 11;
 13090  0D1A  300B               	movlw	11
 13091  0D1B  1283               	bcf	3,5	;RP0=0, select bank0
 13092  0D1C  1303               	bcf	3,6	;RP1=0, select bank0
 13093  0D1D  00C4               	movwf	??_main
 13094  0D1E  0844               	movf	??_main,w
 13095  0D1F  1683               	bsf	3,5	;RP0=1, select bank1
 13096  0D20  1303               	bcf	3,6	;RP1=0, select bank1
 13097  0D21  00DB               	movwf	main@estado^(0+128)
 13098                           
 13099                           ;main.c: 435:                             break;
 13100  0D22  2C84               	goto	L31
 13101  0D23                     l8015:
 13102                           
 13103                           ;main.c: 439:                             estado = 70;
 13104  0D23  3046               	movlw	70
 13105  0D24  00C4               	movwf	??_main
 13106  0D25  0844               	movf	??_main,w
 13107  0D26  1683               	bsf	3,5	;RP0=1, select bank1
 13108  0D27  1303               	bcf	3,6	;RP1=0, select bank1
 13109  0D28  00DB               	movwf	main@estado^(0+128)
 13110  0D29                     l8017:
 13111                           
 13112                           ;main.c: 440:                             meAtuadores = 1;
 13113  0D29  01D6               	clrf	main@meAtuadores^(0+128)
 13114  0D2A  0AD6               	incf	main@meAtuadores^(0+128),f
 13115                           
 13116                           ;main.c: 441:                             break;
 13117  0D2B  2C84               	goto	L31
 13118  0D2C                     l8019:
 13119                           
 13120                           ;main.c: 444:                             if( meAtuadores == 3 && botao != 2 )
 13121  0D2C  3003               	movlw	3
 13122  0D2D  1683               	bsf	3,5	;RP0=1, select bank1
 13123  0D2E  1303               	bcf	3,6	;RP1=0, select bank1
 13124  0D2F  0656               	xorwf	main@meAtuadores^(0+128),w
 13125  0D30  1D03               	btfss	3,2
 13126  0D31  2D33               	goto	u6271
 13127  0D32  2D34               	goto	u6270
 13128  0D33                     u6271:
 13129  0D33  2DE5               	goto	l8025
 13130  0D34                     u6270:
 13131  0D34                     l8021:
 13132  0D34  3002               	movlw	2
 13133  0D35  0658               	xorwf	main@botao^(0+128),w
 13134  0D36  1903               	btfsc	3,2
 13135  0D37  2D39               	goto	u6281
 13136  0D38  2D3A               	goto	u6280
 13137  0D39                     u6281:
 13138  0D39  2DE5               	goto	l8025
 13139  0D3A                     u6280:
 13140  0D3A                     l8023:
 13141                           
 13142                           ;main.c: 445:                             {;main.c: 446:                                
      +                           IHM.printpos(0, 0, "       [    ]       ");
 13143  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
 13144  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
 13145  0D3C  01A8               	clrf	dispLCD@lin
 13146  0D3D  01A9               	clrf	dispLCD@col
 13147  0D3E  3033               	movlw	low (STR_10| (0+32768))
 13148  0D3F  00AA               	movwf	dispLCD@str
 13149  0D40  3089               	movlw	high (STR_10| (0+32768))
 13150  0D41  00AB               	movwf	dispLCD@str+1
 13151  0D42  1683               	bsf	3,5	;RP0=1, select bank1
 13152  0D43  1303               	bcf	3,6	;RP1=0, select bank1
 13153  0D44  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 13154  0D45  120A  118A  2052  120A  158A  	fcall	fptable
 13155                           
 13156                           ;main.c: 447:                                 printExec(1, -1);
 13157  0D4A  30FF               	movlw	255
 13158  0D4B  1283               	bcf	3,5	;RP0=0, select bank0
 13159  0D4C  1303               	bcf	3,6	;RP1=0, select bank0
 13160  0D4D  00C4               	movwf	??_main
 13161  0D4E  0844               	movf	??_main,w
 13162  0D4F  00B9               	movwf	printExec@ind
 13163  0D50  3001               	movlw	1
 13164  0D51  160A  118A  26DE  120A  158A  	fcall	_printExec
 13165                           
 13166                           ;main.c: 448:                                 printExec(9, 0);
 13167  0D56  1283               	bcf	3,5	;RP0=0, select bank0
 13168  0D57  1303               	bcf	3,6	;RP1=0, select bank0
 13169  0D58  01B9               	clrf	printExec@ind
 13170  0D59  3009               	movlw	9
 13171  0D5A  160A  118A  26DE  120A  158A  	fcall	_printExec
 13172                           
 13173                           ;main.c: 449:                                 printExec(14, 1);
 13174  0D5F  1283               	bcf	3,5	;RP0=0, select bank0
 13175  0D60  1303               	bcf	3,6	;RP1=0, select bank0
 13176  0D61  01B9               	clrf	printExec@ind
 13177  0D62  0AB9               	incf	printExec@ind,f
 13178  0D63  300E               	movlw	14
 13179  0D64  160A  118A  26DE  120A  158A  	fcall	_printExec
 13180                           
 13181                           ;main.c: 450:                                 IHM.printpos(2, 0, "<  /  > c:          ")
      +                          ;
 13182  0D69  3002               	movlw	2
 13183  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
 13184  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
 13185  0D6C  00C4               	movwf	??_main
 13186  0D6D  0844               	movf	??_main,w
 13187  0D6E  00A8               	movwf	dispLCD@lin
 13188  0D6F  01A9               	clrf	dispLCD@col
 13189  0D70  30F4               	movlw	low (STR_11| (0+32768))
 13190  0D71  00AA               	movwf	dispLCD@str
 13191  0D72  3088               	movlw	high (STR_11| (0+32768))
 13192  0D73  00AB               	movwf	dispLCD@str+1
 13193  0D74  1683               	bsf	3,5	;RP0=1, select bank1
 13194  0D75  1303               	bcf	3,6	;RP1=0, select bank1
 13195  0D76  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 13196  0D77  120A  118A  2052  120A  158A  	fcall	fptable
 13197                           
 13198                           ;main.c: 451:                                 IHM.printv(2, 4,( fifo_indice() - 2 ), 2);
 13199  0D7C  3002               	movlw	2
 13200  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
 13201  0D7E  1303               	bcf	3,6	;RP1=0, select bank0
 13202  0D7F  00C4               	movwf	??_main
 13203  0D80  0844               	movf	??_main,w
 13204  0D81  00AD               	movwf	dispLCD_num@lin
 13205  0D82  3004               	movlw	4
 13206  0D83  00C5               	movwf	??_main+1
 13207  0D84  0845               	movf	??_main+1,w
 13208  0D85  00AE               	movwf	dispLCD_num@col
 13209  0D86  160A  158A  2027  120A  158A  	fcall	_fifo_indice
 13210  0D8B  3EFE               	addlw	254
 13211  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
 13212  0D8D  1303               	bcf	3,6	;RP1=0, select bank0
 13213  0D8E  00AF               	movwf	dispLCD_num@num
 13214  0D8F  30FF               	movlw	255
 13215  0D90  1803               	skipnc
 13216  0D91  3000               	movlw	0
 13217  0D92  00B0               	movwf	dispLCD_num@num+1
 13218  0D93  3002               	movlw	2
 13219  0D94  00C6               	movwf	??_main+2
 13220  0D95  0846               	movf	??_main+2,w
 13221  0D96  00B1               	movwf	dispLCD_num@tam
 13222  0D97  1683               	bsf	3,5	;RP0=1, select bank1
 13223  0D98  1303               	bcf	3,6	;RP1=0, select bank1
 13224  0D99  0861               	movf	(low ((_IHM| 0+3)))^(0+128),w
 13225  0D9A  120A  118A  2052  120A  158A  	fcall	fptable
 13226                           
 13227                           ;main.c: 452:                                 IHM.printv(2, 1, ( getIndicePassos() - 1 )
      +                          , 2);
 13228  0D9F  3002               	movlw	2
 13229  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
 13230  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
 13231  0DA2  00C4               	movwf	??_main
 13232  0DA3  0844               	movf	??_main,w
 13233  0DA4  00AD               	movwf	dispLCD_num@lin
 13234  0DA5  01AE               	clrf	dispLCD_num@col
 13235  0DA6  0AAE               	incf	dispLCD_num@col,f
 13236  0DA7  160A  158A  2020  120A  158A  	fcall	_getIndicePassos
 13237  0DAC  3EFF               	addlw	255
 13238  0DAD  1283               	bcf	3,5	;RP0=0, select bank0
 13239  0DAE  1303               	bcf	3,6	;RP1=0, select bank0
 13240  0DAF  00AF               	movwf	dispLCD_num@num
 13241  0DB0  30FF               	movlw	255
 13242  0DB1  1803               	skipnc
 13243  0DB2  3000               	movlw	0
 13244  0DB3  00B0               	movwf	dispLCD_num@num+1
 13245  0DB4  3002               	movlw	2
 13246  0DB5  00C5               	movwf	??_main+1
 13247  0DB6  0845               	movf	??_main+1,w
 13248  0DB7  00B1               	movwf	dispLCD_num@tam
 13249  0DB8  1683               	bsf	3,5	;RP0=1, select bank1
 13250  0DB9  1303               	bcf	3,6	;RP1=0, select bank1
 13251  0DBA  0861               	movf	(low ((_IHM| 0+3)))^(0+128),w
 13252  0DBB  120A  118A  2052  120A  158A  	fcall	fptable
 13253                           
 13254                           ;main.c: 453:                                 IHM.printv(2, 11, ( getContCiclos() + 1 ),
      +                           5);
 13255  0DC0  3002               	movlw	2
 13256  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
 13257  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
 13258  0DC3  00C4               	movwf	??_main
 13259  0DC4  0844               	movf	??_main,w
 13260  0DC5  00AD               	movwf	dispLCD_num@lin
 13261  0DC6  300B               	movlw	11
 13262  0DC7  00C5               	movwf	??_main+1
 13263  0DC8  0845               	movf	??_main+1,w
 13264  0DC9  00AE               	movwf	dispLCD_num@col
 13265  0DCA  160A  158A  204A  120A  158A  	fcall	_getContCiclos
 13266  0DCF  1283               	bcf	3,5	;RP0=0, select bank0
 13267  0DD0  1303               	bcf	3,6	;RP1=0, select bank0
 13268  0DD1  0820               	movf	?_getContCiclos,w
 13269  0DD2  3E01               	addlw	1
 13270  0DD3  00AF               	movwf	dispLCD_num@num
 13271  0DD4  0821               	movf	?_getContCiclos+1,w
 13272  0DD5  1803               	skipnc
 13273  0DD6  3E01               	addlw	1
 13274  0DD7  3E00               	addlw	0
 13275  0DD8  00B0               	movwf	dispLCD_num@num+1
 13276  0DD9  3005               	movlw	5
 13277  0DDA  00C6               	movwf	??_main+2
 13278  0DDB  0846               	movf	??_main+2,w
 13279  0DDC  00B1               	movwf	dispLCD_num@tam
 13280  0DDD  1683               	bsf	3,5	;RP0=1, select bank1
 13281  0DDE  1303               	bcf	3,6	;RP1=0, select bank1
 13282  0DDF  0861               	movf	(low ((_IHM| 0+3)))^(0+128),w
 13283  0DE0  120A  118A  2052  120A  158A  	fcall	fptable
 13284  0DE5                     l8025:
 13285                           
 13286                           ;main.c: 456:                             if(meAtuadores == 0)
 13287  0DE5  1683               	bsf	3,5	;RP0=1, select bank1
 13288  0DE6  1303               	bcf	3,6	;RP1=0, select bank1
 13289  0DE7  0856               	movf	main@meAtuadores^(0+128),w
 13290  0DE8  1D03               	btfss	3,2
 13291  0DE9  2DEB               	goto	u6291
 13292  0DEA  2DEC               	goto	u6290
 13293  0DEB                     u6291:
 13294  0DEB  2DFA               	goto	l8031
 13295  0DEC                     u6290:
 13296  0DEC                     l8027:
 13297                           
 13298                           ;main.c: 457:                             {;main.c: 458:                                
      +                           estado = 16;
 13299  0DEC  3010               	movlw	16
 13300  0DED  1283               	bcf	3,5	;RP0=0, select bank0
 13301  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
 13302  0DEF  00C4               	movwf	??_main
 13303  0DF0  0844               	movf	??_main,w
 13304  0DF1  1683               	bsf	3,5	;RP0=1, select bank1
 13305  0DF2  1303               	bcf	3,6	;RP1=0, select bank1
 13306  0DF3  00DB               	movwf	main@estado^(0+128)
 13307  0DF4                     l8029:
 13308                           
 13309                           ;main.c: 459:                                 IHM.clr();
 13310  0DF4  0862               	movf	(low ((_IHM| 0+4)))^(0+128),w
 13311  0DF5  120A  118A  2052  120A  158A  	fcall	fptable
 13312  0DFA                     l8031:
 13313                           
 13314                           ;main.c: 461:                             tecla = teclado_borda();
 13315  0DFA  160A  158A  21F2  120A  158A  	fcall	_teclado_borda
 13316  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
 13317  0E00  1303               	bcf	3,6	;RP1=0, select bank0
 13318  0E01  00C4               	movwf	??_main
 13319  0E02  0844               	movf	??_main,w
 13320  0E03  1683               	bsf	3,5	;RP0=1, select bank1
 13321  0E04  1303               	bcf	3,6	;RP1=0, select bank1
 13322  0E05  00DD               	movwf	main@tecla^(0+128)
 13323                           
 13324                           ;main.c: 462:                             switch(tecla)
 13325  0E06  120A  118A  288B   	goto	l8043
 13326  0E09                     L33:
 13327  0E09                     L32:
 13328  0E09  120A  118A  2F02   	ljmp	L23
 13329  0E0C                     L35:
 13330  0E0C                     L34:
 13331  0E0C  120A  118A  2F05   	ljmp	L25
 13332                           
 13333                           	psect	maintext_split_5
 13334  006A                     l771:	
 13335                           ;main.c: 463:                             {;main.c: 464:                                
      +                           case '#':
 13336                           
 13337                           
 13338                           ;main.c: 465:                                     botao = 1;
 13339  006A  1683               	bsf	3,5	;RP0=1, select bank1
 13340  006B  1303               	bcf	3,6	;RP1=0, select bank1
 13341  006C  01D8               	clrf	main@botao^(0+128)
 13342  006D  0AD8               	incf	main@botao^(0+128),f
 13343                           
 13344                           ;main.c: 466:                                     break;
 13345  006E  2D1C               	goto	l8251
 13346  006F                     l8033:
 13347                           
 13348                           ;main.c: 469:                                     botao = 2;
 13349  006F  3002               	movlw	2
 13350  0070  00C4               	movwf	??_main
 13351  0071  0844               	movf	??_main,w
 13352  0072  1683               	bsf	3,5	;RP0=1, select bank1
 13353  0073  1303               	bcf	3,6	;RP1=0, select bank1
 13354  0074  00D8               	movwf	main@botao^(0+128)
 13355                           
 13356                           ;main.c: 470:                                     break;
 13357  0075  2D1C               	goto	l8251
 13358  0076                     l8035:
 13359                           
 13360                           ;main.c: 473:                                     botao = 0;
 13361  0076  1683               	bsf	3,5	;RP0=1, select bank1
 13362  0077  1303               	bcf	3,6	;RP1=0, select bank1
 13363  0078  01D8               	clrf	main@botao^(0+128)
 13364                           
 13365                           ;main.c: 474:                                     break;
 13366  0079  2D1C               	goto	l8251
 13367  007A                     l8037:
 13368                           
 13369                           ;main.c: 477:                                     if(botao == 2)
 13370  007A  3002               	movlw	2
 13371  007B  1683               	bsf	3,5	;RP0=1, select bank1
 13372  007C  1303               	bcf	3,6	;RP1=0, select bank1
 13373  007D  0658               	xorwf	main@botao^(0+128),w
 13374  007E  1D03               	btfss	3,2
 13375  007F  2881               	goto	u6301
 13376  0080  2882               	goto	u6300
 13377  0081                     u6301:
 13378  0081  2D1C               	goto	l8251
 13379  0082                     u6300:
 13380  0082                     l8039:
 13381                           
 13382                           ;main.c: 478:                                         botao = 3;
 13383  0082  3003               	movlw	3
 13384  0083  1283               	bcf	3,5	;RP0=0, select bank0
 13385  0084  1303               	bcf	3,6	;RP1=0, select bank0
 13386  0085  00C4               	movwf	??_main
 13387  0086  0844               	movf	??_main,w
 13388  0087  1683               	bsf	3,5	;RP0=1, select bank1
 13389  0088  1303               	bcf	3,6	;RP1=0, select bank1
 13390  0089  00D8               	movwf	main@botao^(0+128)
 13391  008A  2D1C               	goto	l8251
 13392  008B                     l8043:
 13393  008B  085D               	movf	main@tecla^(0+128),w
 13394  008C  1283               	bcf	3,5	;RP0=0, select bank0
 13395  008D  1303               	bcf	3,6	;RP1=0, select bank0
 13396  008E  00C4               	movwf	??_main
 13397  008F  01C5               	clrf	??_main+1
 13398                           
 13399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13400                           ; Switch size 1, requested type "simple"
 13401                           ; Number of cases is 1, Range of values is 0 to 0
 13402                           ; switch strategies available:
 13403                           ; Name         Instructions Cycles
 13404                           ; simple_byte            4     3 (average)
 13405                           ; direct_byte           11     8 (fixed)
 13406                           ; jumptable            260     6 (fixed)
 13407                           ;	Chosen strategy is simple_byte
 13408  0090  0845               	movf	??_main+1,w
 13409  0091  3A00               	xorlw	0	; case 0
 13410  0092  1903               	skipnz
 13411  0093  2895               	goto	l8921
 13412  0094  2D1C               	goto	l8251
 13413  0095                     l8921:
 13414                           
 13415                           ; Switch size 1, requested type "simple"
 13416                           ; Number of cases is 4, Range of values is 35 to 53
 13417                           ; switch strategies available:
 13418                           ; Name         Instructions Cycles
 13419                           ; simple_byte           13     7 (average)
 13420                           ; direct_byte           68    11 (fixed)
 13421                           ; jumptable            263     9 (fixed)
 13422                           ;	Chosen strategy is simple_byte
 13423  0095  0844               	movf	??_main,w
 13424  0096  3A23               	xorlw	35	; case 35
 13425  0097  1903               	skipnz
 13426  0098  286A               	goto	l771
 13427  0099  3A13               	xorlw	19	; case 48
 13428  009A  1903               	skipnz
 13429  009B  2876               	goto	l8035
 13430  009C  3A01               	xorlw	1	; case 49
 13431  009D  1903               	skipnz
 13432  009E  287A               	goto	l8037
 13433  009F  3A04               	xorlw	4	; case 53
 13434  00A0  1903               	skipnz
 13435  00A1  286F               	goto	l8033
 13436  00A2  2D1C               	goto	l8251
 13437  00A3                     l8045:
 13438                           
 13439                           ;main.c: 484:                             tecla = teclado_borda();
 13440  00A3  160A  158A  21F2  120A  118A  	fcall	_teclado_borda
 13441  00A8  1283               	bcf	3,5	;RP0=0, select bank0
 13442  00A9  1303               	bcf	3,6	;RP1=0, select bank0
 13443  00AA  00C4               	movwf	??_main
 13444  00AB  0844               	movf	??_main,w
 13445  00AC  1683               	bsf	3,5	;RP0=1, select bank1
 13446  00AD  1303               	bcf	3,6	;RP1=0, select bank1
 13447  00AE  00DD               	movwf	main@tecla^(0+128)
 13448  00AF                     l8047:
 13449                           
 13450                           ;main.c: 485:                             if(tecla >= '0' && tecla <= '9')
 13451  00AF  3030               	movlw	48
 13452  00B0  025D               	subwf	main@tecla^(0+128),w
 13453  00B1  1C03               	skipc
 13454  00B2  28B4               	goto	u6311
 13455  00B3  28B5               	goto	u6310
 13456  00B4                     u6311:
 13457  00B4  28E0               	goto	l8057
 13458  00B5                     u6310:
 13459  00B5                     l8049:
 13460  00B5  303A               	movlw	58
 13461  00B6  025D               	subwf	main@tecla^(0+128),w
 13462  00B7  1803               	skipnc
 13463  00B8  28BA               	goto	u6321
 13464  00B9  28BB               	goto	u6320
 13465  00BA                     u6321:
 13466  00BA  28E0               	goto	l8057
 13467  00BB                     u6320:
 13468  00BB                     l8051:
 13469                           
 13470                           ;main.c: 486:                             {;main.c: 487:                                
      +                           dignum_conc(tecla, &num);
 13471  00BB  30D9               	movlw	(low (main@num| 0))& (0+255)
 13472  00BC  1283               	bcf	3,5	;RP0=0, select bank0
 13473  00BD  1303               	bcf	3,6	;RP1=0, select bank0
 13474  00BE  00C4               	movwf	??_main
 13475  00BF  0844               	movf	??_main,w
 13476  00C0  00A6               	movwf	dignum_conc@ptrNum
 13477  00C1  1683               	bsf	3,5	;RP0=1, select bank1
 13478  00C2  1303               	bcf	3,6	;RP1=0, select bank1
 13479  00C3  085D               	movf	main@tecla^(0+128),w
 13480  00C4  160A  158A  2386  120A  118A  	fcall	_dignum_conc
 13481  00C9                     l8053:
 13482                           
 13483                           ;main.c: 488:                                 if(num > 120)
 13484  00C9  3000               	movlw	0
 13485  00CA  1683               	bsf	3,5	;RP0=1, select bank1
 13486  00CB  1303               	bcf	3,6	;RP1=0, select bank1
 13487  00CC  025A               	subwf	(main@num+1)^(0+128),w
 13488  00CD  3079               	movlw	121
 13489  00CE  1903               	skipnz
 13490  00CF  0259               	subwf	main@num^(0+128),w
 13491  00D0  1C03               	skipc
 13492  00D1  28D3               	goto	u6331
 13493  00D2  28D4               	goto	u6330
 13494  00D3                     u6331:
 13495  00D3  28D8               	goto	l779
 13496  00D4                     u6330:
 13497  00D4                     l8055:
 13498                           
 13499                           ;main.c: 489:                                     num = 120;
 13500  00D4  3078               	movlw	120
 13501  00D5  00D9               	movwf	main@num^(0+128)
 13502  00D6  3000               	movlw	0
 13503  00D7  00DA               	movwf	(main@num^(0+128)+1)
 13504  00D8                     l779:
 13505                           
 13506                           ;main.c: 490:                                 estado = 41;
 13507  00D8  3029               	movlw	41
 13508  00D9  1283               	bcf	3,5	;RP0=0, select bank0
 13509  00DA  1303               	bcf	3,6	;RP1=0, select bank0
 13510  00DB  00C4               	movwf	??_main
 13511  00DC  0844               	movf	??_main,w
 13512  00DD  1683               	bsf	3,5	;RP0=1, select bank1
 13513  00DE  1303               	bcf	3,6	;RP1=0, select bank1
 13514  00DF  00DB               	movwf	main@estado^(0+128)
 13515  00E0                     l8057:
 13516                           
 13517                           ;main.c: 492:                             if(tecla == '*')
 13518  00E0  302A               	movlw	42
 13519  00E1  065D               	xorwf	main@tecla^(0+128),w
 13520  00E2  1D03               	btfss	3,2
 13521  00E3  28E5               	goto	u6341
 13522  00E4  28E6               	goto	u6340
 13523  00E5                     u6341:
 13524  00E5  28F4               	goto	l8063
 13525  00E6                     u6340:
 13526  00E6                     l8059:
 13527                           
 13528                           ;main.c: 493:                             {;main.c: 494:                                
      +                           dignum_apagar(&num);
 13529  00E6  30D9               	movlw	(low (main@num| 0))& (0+255)
 13530  00E7  160A  158A  2191  120A  118A  	fcall	_dignum_apagar
 13531  00EC                     l8061:
 13532                           
 13533                           ;main.c: 495:                                 estado = 41;
 13534  00EC  3029               	movlw	41
 13535  00ED  1283               	bcf	3,5	;RP0=0, select bank0
 13536  00EE  1303               	bcf	3,6	;RP1=0, select bank0
 13537  00EF  00C4               	movwf	??_main
 13538  00F0  0844               	movf	??_main,w
 13539  00F1  1683               	bsf	3,5	;RP0=1, select bank1
 13540  00F2  1303               	bcf	3,6	;RP1=0, select bank1
 13541  00F3  00DB               	movwf	main@estado^(0+128)
 13542  00F4                     l8063:
 13543                           
 13544                           ;main.c: 497:                             if(tecla == '#')
 13545  00F4  3023               	movlw	35
 13546  00F5  065D               	xorwf	main@tecla^(0+128),w
 13547  00F6  1D03               	btfss	3,2
 13548  00F7  28F9               	goto	u6351
 13549  00F8  28FA               	goto	u6350
 13550  00F9                     u6351:
 13551  00F9  2D1C               	goto	l8251
 13552  00FA                     u6350:
 13553  00FA                     l8065:
 13554                           
 13555                           ;main.c: 498:                                 estado = 42;
 13556  00FA  302A               	movlw	42
 13557  00FB  1283               	bcf	3,5	;RP0=0, select bank0
 13558  00FC  1303               	bcf	3,6	;RP1=0, select bank0
 13559  00FD  00C4               	movwf	??_main
 13560  00FE  0844               	movf	??_main,w
 13561  00FF  1683               	bsf	3,5	;RP0=1, select bank1
 13562  0100  1303               	bcf	3,6	;RP1=0, select bank1
 13563  0101  00DB               	movwf	main@estado^(0+128)
 13564  0102  2D1C               	goto	l8251
 13565  0103                     l8067:
 13566                           
 13567                           ;main.c: 503:                             IHM.printpos(2, 0, "config tempo:      s");
 13568  0103  3002               	movlw	2
 13569  0104  00C4               	movwf	??_main
 13570  0105  0844               	movf	??_main,w
 13571  0106  00A8               	movwf	dispLCD@lin
 13572  0107  01A9               	clrf	dispLCD@col
 13573  0108  30DB               	movlw	low (STR_12| (0+32768))
 13574  0109  00AA               	movwf	dispLCD@str
 13575  010A  3089               	movlw	high (STR_12| (0+32768))
 13576  010B  00AB               	movwf	dispLCD@str+1
 13577  010C  1683               	bsf	3,5	;RP0=1, select bank1
 13578  010D  1303               	bcf	3,6	;RP1=0, select bank1
 13579  010E  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 13580  010F  120A  118A  2052  120A  118A  	fcall	fptable
 13581                           
 13582                           ;main.c: 504:                             IHM.printv(2, 15, num, 3);
 13583  0114  3002               	movlw	2
 13584  0115  1283               	bcf	3,5	;RP0=0, select bank0
 13585  0116  1303               	bcf	3,6	;RP1=0, select bank0
 13586  0117  00C4               	movwf	??_main
 13587  0118  0844               	movf	??_main,w
 13588  0119  00AD               	movwf	dispLCD_num@lin
 13589  011A  300F               	movlw	15
 13590  011B  00C5               	movwf	??_main+1
 13591  011C  0845               	movf	??_main+1,w
 13592  011D  00AE               	movwf	dispLCD_num@col
 13593  011E  1683               	bsf	3,5	;RP0=1, select bank1
 13594  011F  1303               	bcf	3,6	;RP1=0, select bank1
 13595  0120  085A               	movf	(main@num+1)^(0+128),w
 13596  0121  1283               	bcf	3,5	;RP0=0, select bank0
 13597  0122  1303               	bcf	3,6	;RP1=0, select bank0
 13598  0123  00B0               	movwf	dispLCD_num@num+1
 13599  0124  1683               	bsf	3,5	;RP0=1, select bank1
 13600  0125  1303               	bcf	3,6	;RP1=0, select bank1
 13601  0126  0859               	movf	main@num^(0+128),w
 13602  0127  1283               	bcf	3,5	;RP0=0, select bank0
 13603  0128  1303               	bcf	3,6	;RP1=0, select bank0
 13604  0129  00AF               	movwf	dispLCD_num@num
 13605  012A  3003               	movlw	3
 13606  012B  00C6               	movwf	??_main+2
 13607  012C  0846               	movf	??_main+2,w
 13608  012D  00B1               	movwf	dispLCD_num@tam
 13609  012E  1683               	bsf	3,5	;RP0=1, select bank1
 13610  012F  1303               	bcf	3,6	;RP1=0, select bank1
 13611  0130  0861               	movf	(low ((_IHM| 0+3)))^(0+128),w
 13612  0131  120A  118A  2052  120A  118A  	fcall	fptable
 13613  0136                     l8069:
 13614                           
 13615                           ;main.c: 505:                             estado = 40;
 13616  0136  3028               	movlw	40
 13617  0137  1283               	bcf	3,5	;RP0=0, select bank0
 13618  0138  1303               	bcf	3,6	;RP1=0, select bank0
 13619  0139  00C4               	movwf	??_main
 13620  013A  0844               	movf	??_main,w
 13621  013B  1683               	bsf	3,5	;RP0=1, select bank1
 13622  013C  1303               	bcf	3,6	;RP1=0, select bank1
 13623  013D  00DB               	movwf	main@estado^(0+128)
 13624                           
 13625                           ;main.c: 506:                             break;
 13626  013E  2D1C               	goto	l8251
 13627  013F                     l8071:
 13628                           
 13629                           ;main.c: 509:                             fifo_add_tempo(num);
 13630  013F  1683               	bsf	3,5	;RP0=1, select bank1
 13631  0140  1303               	bcf	3,6	;RP1=0, select bank1
 13632  0141  0859               	movf	main@num^(0+128),w
 13633  0142  160A  158A  2415  120A  118A  	fcall	_fifo_add_tempo
 13634  0147                     l8073:
 13635                           
 13636                           ;main.c: 510:                             IHM.clr();
 13637  0147  1683               	bsf	3,5	;RP0=1, select bank1
 13638  0148  1303               	bcf	3,6	;RP1=0, select bank1
 13639  0149  0862               	movf	(low ((_IHM| 0+4)))^(0+128),w
 13640  014A  120A  118A  2052  120A  118A  	fcall	fptable
 13641  014F                     L26:
 13642  014F  120A  158A  2C43   	goto	l7979
 13643  0152                     l8077:
 13644                           
 13645                           ;main.c: 543:                             tecla = teclado_borda();
 13646  0152  160A  158A  21F2  120A  118A  	fcall	_teclado_borda
 13647  0157  1283               	bcf	3,5	;RP0=0, select bank0
 13648  0158  1303               	bcf	3,6	;RP1=0, select bank0
 13649  0159  00C4               	movwf	??_main
 13650  015A  0844               	movf	??_main,w
 13651  015B  1683               	bsf	3,5	;RP0=1, select bank1
 13652  015C  1303               	bcf	3,6	;RP1=0, select bank1
 13653  015D  00DD               	movwf	main@tecla^(0+128)
 13654  015E                     l8079:
 13655                           
 13656                           ;main.c: 544:                             if(tecla >= '0' && tecla <= '9')
 13657  015E  3030               	movlw	48
 13658  015F  025D               	subwf	main@tecla^(0+128),w
 13659  0160  1C03               	skipc
 13660  0161  2963               	goto	u6361
 13661  0162  2964               	goto	u6360
 13662  0163                     u6361:
 13663  0163  29A4               	goto	l8101
 13664  0164                     u6360:
 13665  0164                     l8081:
 13666  0164  303A               	movlw	58
 13667  0165  025D               	subwf	main@tecla^(0+128),w
 13668  0166  1803               	skipnc
 13669  0167  2969               	goto	u6371
 13670  0168  296A               	goto	u6370
 13671  0169                     u6371:
 13672  0169  29A4               	goto	l8101
 13673  016A                     u6370:
 13674  016A                     l8083:
 13675                           
 13676                           ;main.c: 545:                                {;main.c: 546:                             
      +                              dignum_conc(tecla, &ciclos);
 13677  016A  30D4               	movlw	(low (main@ciclos| 0))& (0+255)
 13678  016B  1283               	bcf	3,5	;RP0=0, select bank0
 13679  016C  1303               	bcf	3,6	;RP1=0, select bank0
 13680  016D  00C4               	movwf	??_main
 13681  016E  0844               	movf	??_main,w
 13682  016F  00A6               	movwf	dignum_conc@ptrNum
 13683  0170  1683               	bsf	3,5	;RP0=1, select bank1
 13684  0171  1303               	bcf	3,6	;RP1=0, select bank1
 13685  0172  085D               	movf	main@tecla^(0+128),w
 13686  0173  160A  158A  2386  120A  118A  	fcall	_dignum_conc
 13687  0178                     l8085:
 13688                           
 13689                           ;main.c: 547:                                 if(ciclos > 10000)
 13690  0178  3027               	movlw	39
 13691  0179  1683               	bsf	3,5	;RP0=1, select bank1
 13692  017A  1303               	bcf	3,6	;RP1=0, select bank1
 13693  017B  0255               	subwf	(main@ciclos+1)^(0+128),w
 13694  017C  3011               	movlw	17
 13695  017D  1903               	skipnz
 13696  017E  0254               	subwf	main@ciclos^(0+128),w
 13697  017F  1C03               	skipc
 13698  0180  2982               	goto	u6381
 13699  0181  2983               	goto	u6380
 13700  0182                     u6381:
 13701  0182  2987               	goto	l786
 13702  0183                     u6380:
 13703  0183                     l8087:
 13704                           
 13705                           ;main.c: 548:                                     ciclos = 10000;
 13706  0183  3010               	movlw	16
 13707  0184  00D4               	movwf	main@ciclos^(0+128)
 13708  0185  3027               	movlw	39
 13709  0186  00D5               	movwf	(main@ciclos^(0+128)+1)
 13710  0187                     l786:
 13711                           
 13712                           ;main.c: 549:                                 estado = 53;
 13713  0187  3035               	movlw	53
 13714  0188  1283               	bcf	3,5	;RP0=0, select bank0
 13715  0189  1303               	bcf	3,6	;RP1=0, select bank0
 13716  018A  00C4               	movwf	??_main
 13717  018B  0844               	movf	??_main,w
 13718  018C  1683               	bsf	3,5	;RP0=1, select bank1
 13719  018D  1303               	bcf	3,6	;RP1=0, select bank1
 13720  018E  00DB               	movwf	main@estado^(0+128)
 13721                           
 13722                           ;main.c: 550:                                 break;
 13723  018F  2D1C               	goto	l8251
 13724  0190                     l790:	
 13725                           ;main.c: 556:                                    case 'C':
 13726                           
 13727  0190                     l8089:
 13728                           
 13729                           ;main.c: 558:                                        dispLCD_clr();
 13730  0190  160A  158A  2043  120A  118A  	fcall	_dispLCD_clr
 13731  0195  294F               	goto	L26
 13732  0196                     l8093:
 13733                           
 13734                           ;main.c: 562:                                        estado = 54;
 13735  0196  3036               	movlw	54
 13736  0197  00C4               	movwf	??_main
 13737  0198  0844               	movf	??_main,w
 13738  0199  1683               	bsf	3,5	;RP0=1, select bank1
 13739  019A  1303               	bcf	3,6	;RP1=0, select bank1
 13740  019B  00DB               	movwf	main@estado^(0+128)
 13741                           
 13742                           ;main.c: 563:                                        break;
 13743  019C  2D1C               	goto	l8251
 13744  019D                     l8095:
 13745                           
 13746                           ;main.c: 565:                                        dignum_apagar(&ciclos);
 13747  019D  30D4               	movlw	(low (main@ciclos| 0))& (0+255)
 13748  019E  160A  158A  2191  120A  118A  	fcall	_dignum_apagar
 13749  01A3  2987               	goto	l786
 13750  01A4                     l8101:
 13751  01A4  085D               	movf	main@tecla^(0+128),w
 13752  01A5  1283               	bcf	3,5	;RP0=0, select bank0
 13753  01A6  1303               	bcf	3,6	;RP1=0, select bank0
 13754  01A7  00C4               	movwf	??_main
 13755  01A8  01C5               	clrf	??_main+1
 13756                           
 13757                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13758                           ; Switch size 1, requested type "simple"
 13759                           ; Number of cases is 1, Range of values is 0 to 0
 13760                           ; switch strategies available:
 13761                           ; Name         Instructions Cycles
 13762                           ; simple_byte            4     3 (average)
 13763                           ; direct_byte           11     8 (fixed)
 13764                           ; jumptable            260     6 (fixed)
 13765                           ;	Chosen strategy is simple_byte
 13766  01A9  0845               	movf	??_main+1,w
 13767  01AA  3A00               	xorlw	0	; case 0
 13768  01AB  1903               	skipnz
 13769  01AC  29AE               	goto	l8923
 13770  01AD  2D1C               	goto	l8251
 13771  01AE                     l8923:
 13772                           
 13773                           ; Switch size 1, requested type "simple"
 13774                           ; Number of cases is 6, Range of values is 35 to 68
 13775                           ; switch strategies available:
 13776                           ; Name         Instructions Cycles
 13777                           ; simple_byte           19    10 (average)
 13778                           ; direct_byte          113    11 (fixed)
 13779                           ; jumptable            263     9 (fixed)
 13780                           ;	Chosen strategy is simple_byte
 13781  01AE  0844               	movf	??_main,w
 13782  01AF  3A23               	xorlw	35	; case 35
 13783  01B0  1903               	skipnz
 13784  01B1  2996               	goto	l8093
 13785  01B2  3A09               	xorlw	9	; case 42
 13786  01B3  1903               	skipnz
 13787  01B4  299D               	goto	l8095
 13788  01B5  3A6B               	xorlw	107	; case 65
 13789  01B6  1903               	skipnz
 13790  01B7  2990               	goto	l790
 13791  01B8  3A03               	xorlw	3	; case 66
 13792  01B9  1903               	skipnz
 13793  01BA  2990               	goto	l8089
 13794  01BB  3A01               	xorlw	1	; case 67
 13795  01BC  1903               	skipnz
 13796  01BD  2990               	goto	l8089
 13797  01BE  3A07               	xorlw	7	; case 68
 13798  01BF  1903               	skipnz
 13799  01C0  2990               	goto	l8089
 13800  01C1  2D1C               	goto	l8251
 13801  01C2                     l8103:
 13802                           
 13803                           ;main.c: 572:                             IHM.clr();
 13804  01C2  1683               	bsf	3,5	;RP0=1, select bank1
 13805  01C3  1303               	bcf	3,6	;RP1=0, select bank1
 13806  01C4  0862               	movf	(low ((_IHM| 0+4)))^(0+128),w
 13807  01C5  120A  118A  2052  120A  118A  	fcall	fptable
 13808  01CA                     l8105:
 13809                           
 13810                           ;main.c: 573:                             IHM.printpos(0, 0, "Ciclos:             ");
 13811  01CA  1283               	bcf	3,5	;RP0=0, select bank0
 13812  01CB  1303               	bcf	3,6	;RP1=0, select bank0
 13813  01CC  01A8               	clrf	dispLCD@lin
 13814  01CD  01A9               	clrf	dispLCD@col
 13815  01CE  30DF               	movlw	low (STR_13| (0+32768))
 13816  01CF  00AA               	movwf	dispLCD@str
 13817  01D0  3088               	movlw	high (STR_13| (0+32768))
 13818  01D1  00AB               	movwf	dispLCD@str+1
 13819  01D2  1683               	bsf	3,5	;RP0=1, select bank1
 13820  01D3  1303               	bcf	3,6	;RP1=0, select bank1
 13821  01D4  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 13822  01D5  120A  118A  2052  120A  118A  	fcall	fptable
 13823  01DA                     l8107:
 13824                           
 13825                           ;main.c: 574:                             IHM.printv(0, 15, ciclos, 5);
 13826  01DA  1283               	bcf	3,5	;RP0=0, select bank0
 13827  01DB  1303               	bcf	3,6	;RP1=0, select bank0
 13828  01DC  01AD               	clrf	dispLCD_num@lin
 13829  01DD  300F               	movlw	15
 13830  01DE  00C4               	movwf	??_main
 13831  01DF  0844               	movf	??_main,w
 13832  01E0  00AE               	movwf	dispLCD_num@col
 13833  01E1  1683               	bsf	3,5	;RP0=1, select bank1
 13834  01E2  1303               	bcf	3,6	;RP1=0, select bank1
 13835  01E3  0855               	movf	(main@ciclos+1)^(0+128),w
 13836  01E4  1283               	bcf	3,5	;RP0=0, select bank0
 13837  01E5  1303               	bcf	3,6	;RP1=0, select bank0
 13838  01E6  00B0               	movwf	dispLCD_num@num+1
 13839  01E7  1683               	bsf	3,5	;RP0=1, select bank1
 13840  01E8  1303               	bcf	3,6	;RP1=0, select bank1
 13841  01E9  0854               	movf	main@ciclos^(0+128),w
 13842  01EA  1283               	bcf	3,5	;RP0=0, select bank0
 13843  01EB  1303               	bcf	3,6	;RP1=0, select bank0
 13844  01EC  00AF               	movwf	dispLCD_num@num
 13845  01ED  3005               	movlw	5
 13846  01EE  00C5               	movwf	??_main+1
 13847  01EF  0845               	movf	??_main+1,w
 13848  01F0  00B1               	movwf	dispLCD_num@tam
 13849  01F1  1683               	bsf	3,5	;RP0=1, select bank1
 13850  01F2  1303               	bcf	3,6	;RP1=0, select bank1
 13851  01F3  0861               	movf	(low ((_IHM| 0+3)))^(0+128),w
 13852  01F4  120A  118A  2052  120A  118A  	fcall	fptable
 13853  01F9                     l8109:
 13854                           
 13855                           ;main.c: 575:                             IHM.printpos(2, 0, "0 - Ciclo continuo  ");
 13856  01F9  3002               	movlw	2
 13857  01FA  1283               	bcf	3,5	;RP0=0, select bank0
 13858  01FB  1303               	bcf	3,6	;RP1=0, select bank0
 13859  01FC  00C4               	movwf	??_main
 13860  01FD  0844               	movf	??_main,w
 13861  01FE  00A8               	movwf	dispLCD@lin
 13862  01FF  01A9               	clrf	dispLCD@col
 13863  0200  30B1               	movlw	low (STR_14| (0+32768))
 13864  0201  00AA               	movwf	dispLCD@str
 13865  0202  3089               	movlw	high (STR_14| (0+32768))
 13866  0203  00AB               	movwf	dispLCD@str+1
 13867  0204  1683               	bsf	3,5	;RP0=1, select bank1
 13868  0205  1303               	bcf	3,6	;RP1=0, select bank1
 13869  0206  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 13870  0207  120A  118A  2052  120A  118A  	fcall	fptable
 13871  020C                     l8111:
 13872                           
 13873                           ;main.c: 576:                             estado = 52;
 13874  020C  3034               	movlw	52
 13875  020D  1283               	bcf	3,5	;RP0=0, select bank0
 13876  020E  1303               	bcf	3,6	;RP1=0, select bank0
 13877  020F  00C4               	movwf	??_main
 13878  0210  0844               	movf	??_main,w
 13879  0211  1683               	bsf	3,5	;RP0=1, select bank1
 13880  0212  1303               	bcf	3,6	;RP1=0, select bank1
 13881  0213  00DB               	movwf	main@estado^(0+128)
 13882                           
 13883                           ;main.c: 577:                             break;
 13884  0214  2D1C               	goto	l8251
 13885  0215                     l8113:
 13886                           
 13887                           ;main.c: 580:                             IHM.print("    DESEJA SALVAR   \n"
 13888  0215  30A1               	movlw	low (STR_15| (0+32768))
 13889  0216  00A8               	movwf	dispLCD_str@str
 13890  0217  3088               	movlw	high (STR_15| (0+32768))
 13891  0218  00A9               	movwf	dispLCD_str@str+1
 13892  0219  1683               	bsf	3,5	;RP0=1, select bank1
 13893  021A  1303               	bcf	3,6	;RP1=0, select bank1
 13894  021B  085F               	movf	(low ((_IHM| 0+1)))^(0+128),w
 13895  021C  120A  118A  2052  120A  118A  	fcall	fptable
 13896  0221                     l8115:
 13897                           
 13898                           ;main.c: 584:                             tecla = teclado_borda();
 13899  0221  160A  158A  21F2  120A  118A  	fcall	_teclado_borda
 13900  0226  1283               	bcf	3,5	;RP0=0, select bank0
 13901  0227  1303               	bcf	3,6	;RP1=0, select bank0
 13902  0228  00C4               	movwf	??_main
 13903  0229  0844               	movf	??_main,w
 13904  022A  1683               	bsf	3,5	;RP0=1, select bank1
 13905  022B  1303               	bcf	3,6	;RP1=0, select bank1
 13906  022C  00DD               	movwf	main@tecla^(0+128)
 13907                           
 13908                           ;main.c: 585:                             switch(tecla)
 13909  022D  2A3B               	goto	l8125
 13910  022E                     l8117:
 13911  022E  304B               	movlw	75
 13912  022F  00C4               	movwf	??_main
 13913  0230  0844               	movf	??_main,w
 13914  0231  1683               	bsf	3,5	;RP0=1, select bank1
 13915  0232  1303               	bcf	3,6	;RP1=0, select bank1
 13916  0233  00DB               	movwf	main@estado^(0+128)
 13917  0234  2D1C               	goto	l8251
 13918  0235                     l8119:
 13919  0235  160A  158A  2043  120A  118A  	fcall	_dispLCD_clr
 13920  023A  2987               	goto	l786
 13921  023B                     l8125:
 13922  023B  085D               	movf	main@tecla^(0+128),w
 13923  023C  1283               	bcf	3,5	;RP0=0, select bank0
 13924  023D  1303               	bcf	3,6	;RP1=0, select bank0
 13925  023E  00C4               	movwf	??_main
 13926  023F  01C5               	clrf	??_main+1
 13927                           
 13928                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13929                           ; Switch size 1, requested type "simple"
 13930                           ; Number of cases is 1, Range of values is 0 to 0
 13931                           ; switch strategies available:
 13932                           ; Name         Instructions Cycles
 13933                           ; simple_byte            4     3 (average)
 13934                           ; direct_byte           11     8 (fixed)
 13935                           ; jumptable            260     6 (fixed)
 13936                           ;	Chosen strategy is simple_byte
 13937  0240  0845               	movf	??_main+1,w
 13938  0241  3A00               	xorlw	0	; case 0
 13939  0242  1903               	skipnz
 13940  0243  2A45               	goto	l8925
 13941  0244  2D1C               	goto	l8251
 13942  0245                     l8925:
 13943                           
 13944                           ; Switch size 1, requested type "simple"
 13945                           ; Number of cases is 2, Range of values is 35 to 42
 13946                           ; switch strategies available:
 13947                           ; Name         Instructions Cycles
 13948                           ; simple_byte            7     4 (average)
 13949                           ; direct_byte           35    11 (fixed)
 13950                           ; jumptable            263     9 (fixed)
 13951                           ;	Chosen strategy is simple_byte
 13952  0245  0844               	movf	??_main,w
 13953  0246  3A23               	xorlw	35	; case 35
 13954  0247  1903               	skipnz
 13955  0248  2A2E               	goto	l8117
 13956  0249  3A09               	xorlw	9	; case 42
 13957  024A  1903               	skipnz
 13958  024B  2A35               	goto	l8119
 13959  024C  2D1C               	goto	l8251
 13960  024D                     l8127:
 13961                           
 13962                           ;main.c: 593:                             IHM.clr();
 13963  024D  1683               	bsf	3,5	;RP0=1, select bank1
 13964  024E  1303               	bcf	3,6	;RP1=0, select bank1
 13965  024F  0862               	movf	(low ((_IHM| 0+4)))^(0+128),w
 13966  0250  120A  118A  2052  120A  118A  	fcall	fptable
 13967  0255                     l8129:
 13968                           
 13969                           ;main.c: 594:                             IHM.print(" ESCOLHA A MEMORIA\n"
 13970  0255  3053               	movlw	low (STR_16| (0+32768))
 13971  0256  1283               	bcf	3,5	;RP0=0, select bank0
 13972  0257  1303               	bcf	3,6	;RP1=0, select bank0
 13973  0258  00A8               	movwf	dispLCD_str@str
 13974  0259  3088               	movlw	high (STR_16| (0+32768))
 13975  025A  00A9               	movwf	dispLCD_str@str+1
 13976  025B  1683               	bsf	3,5	;RP0=1, select bank1
 13977  025C  1303               	bcf	3,6	;RP1=0, select bank1
 13978  025D  085F               	movf	(low ((_IHM| 0+1)))^(0+128),w
 13979  025E  120A  118A  2052  120A  118A  	fcall	fptable
 13980  0263                     l8131:
 13981                           
 13982                           ;main.c: 598:                             estado = 76;
 13983  0263  304C               	movlw	76
 13984  0264  1283               	bcf	3,5	;RP0=0, select bank0
 13985  0265  1303               	bcf	3,6	;RP1=0, select bank0
 13986  0266  00C4               	movwf	??_main
 13987  0267  0844               	movf	??_main,w
 13988  0268  1683               	bsf	3,5	;RP0=1, select bank1
 13989  0269  1303               	bcf	3,6	;RP1=0, select bank1
 13990  026A  00DB               	movwf	main@estado^(0+128)
 13991  026B                     l8133:
 13992                           
 13993                           ;main.c: 601:                             tecla = teclado_borda();
 13994  026B  160A  158A  21F2  120A  118A  	fcall	_teclado_borda
 13995  0270  1283               	bcf	3,5	;RP0=0, select bank0
 13996  0271  1303               	bcf	3,6	;RP1=0, select bank0
 13997  0272  00C4               	movwf	??_main
 13998  0273  0844               	movf	??_main,w
 13999  0274  1683               	bsf	3,5	;RP0=1, select bank1
 14000  0275  1303               	bcf	3,6	;RP1=0, select bank1
 14001  0276  00DD               	movwf	main@tecla^(0+128)
 14002                           
 14003                           ;main.c: 602:                             switch(tecla)
 14004  0277  2AE3               	goto	l8147
 14005  0278                     l807:	
 14006                           ;main.c: 607:                                 case '3':
 14007                           
 14008  0278                     l8135:
 14009                           
 14010                           ;main.c: 614:                                            salvar_dado(10, tecla % 0x30, i
      +                          nit_cond);
 14011  0278  3030               	movlw	48
 14012  0279  00A0               	movwf	___awmod@divisor
 14013  027A  3000               	movlw	0
 14014  027B  00A1               	movwf	___awmod@divisor+1
 14015  027C  1683               	bsf	3,5	;RP0=1, select bank1
 14016  027D  1303               	bcf	3,6	;RP1=0, select bank1
 14017  027E  085D               	movf	main@tecla^(0+128),w
 14018  027F  1283               	bcf	3,5	;RP0=0, select bank0
 14019  0280  1303               	bcf	3,6	;RP1=0, select bank0
 14020  0281  00C4               	movwf	??_main
 14021  0282  01C5               	clrf	??_main+1
 14022  0283  0844               	movf	??_main,w
 14023  0284  00A2               	movwf	___awmod@dividend
 14024  0285  0845               	movf	??_main+1,w
 14025  0286  00A3               	movwf	___awmod@dividend+1
 14026  0287  160A  118A  2067  120A  118A  	fcall	___awmod
 14027  028C  1283               	bcf	3,5	;RP0=0, select bank0
 14028  028D  1303               	bcf	3,6	;RP1=0, select bank0
 14029  028E  0820               	movf	?___awmod,w
 14030  028F  00C6               	movwf	??_main+2
 14031  0290  0846               	movf	??_main+2,w
 14032  0291  00A7               	movwf	salvar_dado@col
 14033  0292  1683               	bsf	3,5	;RP0=1, select bank1
 14034  0293  1303               	bcf	3,6	;RP1=0, select bank1
 14035  0294  0848               	movf	main@init_cond^(0+128),w
 14036  0295  1283               	bcf	3,5	;RP0=0, select bank0
 14037  0296  1303               	bcf	3,6	;RP1=0, select bank0
 14038  0297  00C7               	movwf	??_main+3
 14039  0298  0847               	movf	??_main+3,w
 14040  0299  00A8               	movwf	salvar_dado@data
 14041  029A  300A               	movlw	10
 14042  029B  160A  158A  21D1  120A  118A  	fcall	_salvar_dado
 14043  02A0                     l8137:
 14044                           
 14045                           ;main.c: 615:                                            EEPROM.salvar(tecla % 0x30, fif
      +                          o_adrs() + 2);
 14046  02A0  3030               	movlw	48
 14047  02A1  1283               	bcf	3,5	;RP0=0, select bank0
 14048  02A2  1303               	bcf	3,6	;RP1=0, select bank0
 14049  02A3  00A0               	movwf	___awmod@divisor
 14050  02A4  3000               	movlw	0
 14051  02A5  00A1               	movwf	___awmod@divisor+1
 14052  02A6  1683               	bsf	3,5	;RP0=1, select bank1
 14053  02A7  1303               	bcf	3,6	;RP1=0, select bank1
 14054  02A8  085D               	movf	main@tecla^(0+128),w
 14055  02A9  1283               	bcf	3,5	;RP0=0, select bank0
 14056  02AA  1303               	bcf	3,6	;RP1=0, select bank0
 14057  02AB  00C4               	movwf	??_main
 14058  02AC  01C5               	clrf	??_main+1
 14059  02AD  0844               	movf	??_main,w
 14060  02AE  00A2               	movwf	___awmod@dividend
 14061  02AF  0845               	movf	??_main+1,w
 14062  02B0  00A3               	movwf	___awmod@dividend+1
 14063  02B1  160A  118A  2067  120A  118A  	fcall	___awmod
 14064  02B6  1283               	bcf	3,5	;RP0=0, select bank0
 14065  02B7  1303               	bcf	3,6	;RP1=0, select bank0
 14066  02B8  0820               	movf	?___awmod,w
 14067  02B9  00C6               	movwf	??_main+2
 14068  02BA  0846               	movf	??_main+2,w
 14069  02BB  00A7               	movwf	salvar_receita@adrs
 14070  02BC  160A  158A  201C  120A  118A  	fcall	_fifo_adrs
 14071  02C1  3E02               	addlw	2
 14072  02C2  1283               	bcf	3,5	;RP0=0, select bank0
 14073  02C3  1303               	bcf	3,6	;RP1=0, select bank0
 14074  02C4  00C7               	movwf	??_main+3
 14075  02C5  0847               	movf	??_main+3,w
 14076  02C6  00A8               	movwf	salvar_receita@data
 14077  02C7  1683               	bsf	3,5	;RP0=1, select bank1
 14078  02C8  1303               	bcf	3,6	;RP1=0, select bank1
 14079  02C9  0863               	movf	_EEPROM^(0+128),w
 14080  02CA  120A  118A  2052  120A  118A  	fcall	fptable
 14081  02CF                     l8139:
 14082                           
 14083                           ;main.c: 616:                                            estado = 77;
 14084  02CF  304D               	movlw	77
 14085  02D0  1283               	bcf	3,5	;RP0=0, select bank0
 14086  02D1  1303               	bcf	3,6	;RP1=0, select bank0
 14087  02D2  00C4               	movwf	??_main
 14088  02D3  0844               	movf	??_main,w
 14089  02D4  1683               	bsf	3,5	;RP0=1, select bank1
 14090  02D5  1303               	bcf	3,6	;RP1=0, select bank1
 14091  02D6  00DB               	movwf	main@estado^(0+128)
 14092                           
 14093                           ;main.c: 617:                                            break;
 14094  02D7  2D1C               	goto	l8251
 14095  02D8                     l8141:
 14096  02D8  1683               	bsf	3,5	;RP0=1, select bank1
 14097  02D9  1303               	bcf	3,6	;RP1=0, select bank1
 14098  02DA  0862               	movf	(low ((_IHM| 0+4)))^(0+128),w
 14099  02DB  120A  118A  2052  120A  118A  	fcall	fptable
 14100  02E0                     L21:
 14101  02E0  120A  158A  2C6B   	goto	l7997
 14102  02E3                     l8147:
 14103  02E3  085D               	movf	main@tecla^(0+128),w
 14104  02E4  1283               	bcf	3,5	;RP0=0, select bank0
 14105  02E5  1303               	bcf	3,6	;RP1=0, select bank0
 14106  02E6  00C4               	movwf	??_main
 14107  02E7  01C5               	clrf	??_main+1
 14108                           
 14109                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14110                           ; Switch size 1, requested type "simple"
 14111                           ; Number of cases is 1, Range of values is 0 to 0
 14112                           ; switch strategies available:
 14113                           ; Name         Instructions Cycles
 14114                           ; simple_byte            4     3 (average)
 14115                           ; direct_byte           11     8 (fixed)
 14116                           ; jumptable            260     6 (fixed)
 14117                           ;	Chosen strategy is simple_byte
 14118  02E8  0845               	movf	??_main+1,w
 14119  02E9  3A00               	xorlw	0	; case 0
 14120  02EA  1903               	skipnz
 14121  02EB  2AED               	goto	l8927
 14122  02EC  2D1C               	goto	l8251
 14123  02ED                     l8927:
 14124                           
 14125                           ; Switch size 1, requested type "simple"
 14126                           ; Number of cases is 11, Range of values is 42 to 57
 14127                           ; switch strategies available:
 14128                           ; Name         Instructions Cycles
 14129                           ; simple_byte           34    18 (average)
 14130                           ; direct_byte           59    11 (fixed)
 14131                           ; jumptable            263     9 (fixed)
 14132                           ;	Chosen strategy is simple_byte
 14133  02ED  0844               	movf	??_main,w
 14134  02EE  3A2A               	xorlw	42	; case 42
 14135  02EF  1903               	skipnz
 14136  02F0  2AD8               	goto	l8141
 14137  02F1  3A1A               	xorlw	26	; case 48
 14138  02F2  1903               	skipnz
 14139  02F3  2A78               	goto	l807
 14140  02F4  3A01               	xorlw	1	; case 49
 14141  02F5  1903               	skipnz
 14142  02F6  2A78               	goto	l807
 14143  02F7  3A03               	xorlw	3	; case 50
 14144  02F8  1903               	skipnz
 14145  02F9  2A78               	goto	l8135
 14146  02FA  3A01               	xorlw	1	; case 51
 14147  02FB  1903               	skipnz
 14148  02FC  2A78               	goto	l8135
 14149  02FD  3A07               	xorlw	7	; case 52
 14150  02FE  1903               	skipnz
 14151  02FF  2A78               	goto	l8135
 14152  0300  3A01               	xorlw	1	; case 53
 14153  0301  1903               	skipnz
 14154  0302  2A78               	goto	l8135
 14155  0303  3A03               	xorlw	3	; case 54
 14156  0304  1903               	skipnz
 14157  0305  2A78               	goto	l8135
 14158  0306  3A01               	xorlw	1	; case 55
 14159  0307  1903               	skipnz
 14160  0308  2A78               	goto	l8135
 14161  0309  3A0F               	xorlw	15	; case 56
 14162  030A  1903               	skipnz
 14163  030B  2A78               	goto	l8135
 14164  030C  3A01               	xorlw	1	; case 57
 14165  030D  1903               	skipnz
 14166  030E  2A78               	goto	l8135
 14167  030F  2D1C               	goto	l8251
 14168  0310                     l8149:
 14169                           
 14170                           ;main.c: 624:                             IHM.clr();
 14171  0310  1683               	bsf	3,5	;RP0=1, select bank1
 14172  0311  1303               	bcf	3,6	;RP1=0, select bank1
 14173  0312  0862               	movf	(low ((_IHM| 0+4)))^(0+128),w
 14174  0313  120A  118A  2052  120A  118A  	fcall	fptable
 14175  0318                     l8151:
 14176                           
 14177                           ;main.c: 625:                             for(char i = 0; i <= 3; i++)
 14178  0318  1683               	bsf	3,5	;RP0=1, select bank1
 14179  0319  1303               	bcf	3,6	;RP1=0, select bank1
 14180  031A  01CF               	clrf	main@i_927^(0+128)
 14181  031B                     l8153:
 14182  031B  3004               	movlw	4
 14183  031C  024F               	subwf	main@i_927^(0+128),w
 14184  031D  1C03               	skipc
 14185  031E  2B20               	goto	u6391
 14186  031F  2B21               	goto	u6390
 14187  0320                     u6391:
 14188  0320  2B22               	goto	l8157
 14189  0321                     u6390:
 14190  0321  2B61               	goto	l8175
 14191  0322                     l8157:
 14192                           
 14193                           ;main.c: 626:                             {;main.c: 627:                                
      +                           for(char j = 0; j <= 19; j++)
 14194  0322  01D0               	clrf	main@j_928^(0+128)
 14195  0323                     l8159:
 14196  0323  3014               	movlw	20
 14197  0324  0250               	subwf	main@j_928^(0+128),w
 14198  0325  1C03               	skipc
 14199  0326  2B28               	goto	u6401
 14200  0327  2B29               	goto	u6400
 14201  0328                     u6401:
 14202  0328  2B2A               	goto	l8163
 14203  0329                     u6400:
 14204  0329  2B58               	goto	l8171
 14205  032A                     l8163:
 14206                           
 14207                           ;main.c: 628:                                 {;main.c: 629:                            
      +                                   IHM.printpos(i, j, "\377");
 14208  032A  084F               	movf	main@i_927^(0+128),w
 14209  032B  1283               	bcf	3,5	;RP0=0, select bank0
 14210  032C  1303               	bcf	3,6	;RP1=0, select bank0
 14211  032D  00C4               	movwf	??_main
 14212  032E  0844               	movf	??_main,w
 14213  032F  00A8               	movwf	dispLCD@lin
 14214  0330  1683               	bsf	3,5	;RP0=1, select bank1
 14215  0331  1303               	bcf	3,6	;RP1=0, select bank1
 14216  0332  0850               	movf	main@j_928^(0+128),w
 14217  0333  1283               	bcf	3,5	;RP0=0, select bank0
 14218  0334  1303               	bcf	3,6	;RP1=0, select bank0
 14219  0335  00C5               	movwf	??_main+1
 14220  0336  0845               	movf	??_main+1,w
 14221  0337  00A9               	movwf	dispLCD@col
 14222  0338  30F8               	movlw	low (STR_1| (0+32768))
 14223  0339  00AA               	movwf	dispLCD@str
 14224  033A  3089               	movlw	high (STR_1| (0+32768))
 14225  033B  00AB               	movwf	dispLCD@str+1
 14226  033C  1683               	bsf	3,5	;RP0=1, select bank1
 14227  033D  1303               	bcf	3,6	;RP1=0, select bank1
 14228  033E  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 14229  033F  120A  118A  2052  120A  118A  	fcall	fptable
 14230  0344                     l8165:
 14231                           
 14232                           ;main.c: 630:                                     delay(10);
 14233  0344  300A               	movlw	10
 14234  0345  1283               	bcf	3,5	;RP0=0, select bank0
 14235  0346  1303               	bcf	3,6	;RP1=0, select bank0
 14236  0347  00A0               	movwf	delay@t
 14237  0348  3000               	movlw	0
 14238  0349  00A1               	movwf	delay@t+1
 14239  034A  160A  158A  2138  120A  118A  	fcall	_delay
 14240  034F                     l8167:
 14241                           
 14242                           ;main.c: 631:                                 }
 14243  034F  3001               	movlw	1
 14244  0350  1283               	bcf	3,5	;RP0=0, select bank0
 14245  0351  1303               	bcf	3,6	;RP1=0, select bank0
 14246  0352  00C4               	movwf	??_main
 14247  0353  0844               	movf	??_main,w
 14248  0354  1683               	bsf	3,5	;RP0=1, select bank1
 14249  0355  1303               	bcf	3,6	;RP1=0, select bank1
 14250  0356  07D0               	addwf	main@j_928^(0+128),f
 14251  0357  2B23               	goto	l8159
 14252  0358                     l8171:
 14253                           
 14254                           ;main.c: 632:                             }
 14255  0358  3001               	movlw	1
 14256  0359  1283               	bcf	3,5	;RP0=0, select bank0
 14257  035A  1303               	bcf	3,6	;RP1=0, select bank0
 14258  035B  00C4               	movwf	??_main
 14259  035C  0844               	movf	??_main,w
 14260  035D  1683               	bsf	3,5	;RP0=1, select bank1
 14261  035E  1303               	bcf	3,6	;RP1=0, select bank1
 14262  035F  07CF               	addwf	main@i_927^(0+128),f
 14263  0360  2B1B               	goto	l8153
 14264  0361                     l8175:
 14265                           
 14266                           ;main.c: 634:                             for(char i = 0; i <= 3; i++)
 14267  0361  01D1               	clrf	main@i_930^(0+128)
 14268  0362                     l8177:
 14269  0362  3004               	movlw	4
 14270  0363  0251               	subwf	main@i_930^(0+128),w
 14271  0364  1C03               	skipc
 14272  0365  2B67               	goto	u6411
 14273  0366  2B68               	goto	u6410
 14274  0367                     u6411:
 14275  0367  2B69               	goto	l8181
 14276  0368                     u6410:
 14277  0368  2BA8               	goto	l8199
 14278  0369                     l8181:
 14279                           
 14280                           ;main.c: 635:                             {;main.c: 636:                                
      +                           for(char j = 0; j <= 19; j++)
 14281  0369  01D2               	clrf	main@j_931^(0+128)
 14282  036A                     l8183:
 14283  036A  3014               	movlw	20
 14284  036B  0252               	subwf	main@j_931^(0+128),w
 14285  036C  1C03               	skipc
 14286  036D  2B6F               	goto	u6421
 14287  036E  2B70               	goto	u6420
 14288  036F                     u6421:
 14289  036F  2B71               	goto	l8187
 14290  0370                     u6420:
 14291  0370  2B9F               	goto	l8195
 14292  0371                     l8187:
 14293                           
 14294                           ;main.c: 637:                                 {;main.c: 638:                            
      +                                   IHM.printpos(i, j, " ");
 14295  0371  0851               	movf	main@i_930^(0+128),w
 14296  0372  1283               	bcf	3,5	;RP0=0, select bank0
 14297  0373  1303               	bcf	3,6	;RP1=0, select bank0
 14298  0374  00C4               	movwf	??_main
 14299  0375  0844               	movf	??_main,w
 14300  0376  00A8               	movwf	dispLCD@lin
 14301  0377  1683               	bsf	3,5	;RP0=1, select bank1
 14302  0378  1303               	bcf	3,6	;RP1=0, select bank1
 14303  0379  0852               	movf	main@j_931^(0+128),w
 14304  037A  1283               	bcf	3,5	;RP0=0, select bank0
 14305  037B  1303               	bcf	3,6	;RP1=0, select bank0
 14306  037C  00C5               	movwf	??_main+1
 14307  037D  0845               	movf	??_main+1,w
 14308  037E  00A9               	movwf	dispLCD@col
 14309  037F  30F2               	movlw	low ((STR_13+19)| (0+32768))
 14310  0380  00AA               	movwf	dispLCD@str
 14311  0381  3088               	movlw	high ((STR_13+19)| (0+32768))
 14312  0382  00AB               	movwf	dispLCD@str+1
 14313  0383  1683               	bsf	3,5	;RP0=1, select bank1
 14314  0384  1303               	bcf	3,6	;RP1=0, select bank1
 14315  0385  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 14316  0386  120A  118A  2052  120A  118A  	fcall	fptable
 14317  038B                     l8189:
 14318                           
 14319                           ;main.c: 639:                                     delay(10);
 14320  038B  300A               	movlw	10
 14321  038C  1283               	bcf	3,5	;RP0=0, select bank0
 14322  038D  1303               	bcf	3,6	;RP1=0, select bank0
 14323  038E  00A0               	movwf	delay@t
 14324  038F  3000               	movlw	0
 14325  0390  00A1               	movwf	delay@t+1
 14326  0391  160A  158A  2138  120A  118A  	fcall	_delay
 14327  0396                     l8191:
 14328                           
 14329                           ;main.c: 640:                                 }
 14330  0396  3001               	movlw	1
 14331  0397  1283               	bcf	3,5	;RP0=0, select bank0
 14332  0398  1303               	bcf	3,6	;RP1=0, select bank0
 14333  0399  00C4               	movwf	??_main
 14334  039A  0844               	movf	??_main,w
 14335  039B  1683               	bsf	3,5	;RP0=1, select bank1
 14336  039C  1303               	bcf	3,6	;RP1=0, select bank1
 14337  039D  07D2               	addwf	main@j_931^(0+128),f
 14338  039E  2B6A               	goto	l8183
 14339  039F                     l8195:
 14340                           
 14341                           ;main.c: 641:                             }
 14342  039F  3001               	movlw	1
 14343  03A0  1283               	bcf	3,5	;RP0=0, select bank0
 14344  03A1  1303               	bcf	3,6	;RP1=0, select bank0
 14345  03A2  00C4               	movwf	??_main
 14346  03A3  0844               	movf	??_main,w
 14347  03A4  1683               	bsf	3,5	;RP0=1, select bank1
 14348  03A5  1303               	bcf	3,6	;RP1=0, select bank1
 14349  03A6  07D1               	addwf	main@i_930^(0+128),f
 14350  03A7  2B62               	goto	l8177
 14351  03A8                     l8199:
 14352                           
 14353                           ;main.c: 642:                             IHM.printpos(1, 0, "      SEQUENCIA     ");
 14354  03A8  1283               	bcf	3,5	;RP0=0, select bank0
 14355  03A9  1303               	bcf	3,6	;RP1=0, select bank0
 14356  03AA  01A8               	clrf	dispLCD@lin
 14357  03AB  0AA8               	incf	dispLCD@lin,f
 14358  03AC  01A9               	clrf	dispLCD@col
 14359  03AD  3048               	movlw	low (STR_19| (0+32768))
 14360  03AE  00AA               	movwf	dispLCD@str
 14361  03AF  3089               	movlw	high (STR_19| (0+32768))
 14362  03B0  00AB               	movwf	dispLCD@str+1
 14363  03B1  1683               	bsf	3,5	;RP0=1, select bank1
 14364  03B2  1303               	bcf	3,6	;RP1=0, select bank1
 14365  03B3  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 14366  03B4  120A  118A  2052  120A  118A  	fcall	fptable
 14367                           
 14368                           ;main.c: 643:                             IHM.printpos(2, 0, "        SALVA       ");
 14369  03B9  3002               	movlw	2
 14370  03BA  1283               	bcf	3,5	;RP0=0, select bank0
 14371  03BB  1303               	bcf	3,6	;RP1=0, select bank0
 14372  03BC  00C4               	movwf	??_main
 14373  03BD  0844               	movf	??_main,w
 14374  03BE  00A8               	movwf	dispLCD@lin
 14375  03BF  01A9               	clrf	dispLCD@col
 14376  03C0  3009               	movlw	low (STR_20| (0+32768))
 14377  03C1  00AA               	movwf	dispLCD@str
 14378  03C2  3089               	movlw	high (STR_20| (0+32768))
 14379  03C3  00AB               	movwf	dispLCD@str+1
 14380  03C4  1683               	bsf	3,5	;RP0=1, select bank1
 14381  03C5  1303               	bcf	3,6	;RP1=0, select bank1
 14382  03C6  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 14383  03C7  120A  118A  2052  120A  118A  	fcall	fptable
 14384  03CC                     l8201:
 14385                           
 14386                           ;main.c: 645:                             setT1(1000);
 14387  03CC  3000               	movlw	0
 14388  03CD  1283               	bcf	3,5	;RP0=0, select bank0
 14389  03CE  1303               	bcf	3,6	;RP1=0, select bank0
 14390  03CF  00A9               	movwf	setT1@c+3
 14391  03D0  3000               	movlw	0
 14392  03D1  00A8               	movwf	setT1@c+2
 14393  03D2  3003               	movlw	3
 14394  03D3  00A7               	movwf	setT1@c+1
 14395  03D4  30E8               	movlw	232
 14396  03D5  00A6               	movwf	setT1@c
 14397  03D6  160A  158A  20C0  120A  118A  	fcall	_setT1
 14398  03DB                     l8203:
 14399                           
 14400                           ;main.c: 646:                             estado = 78;
 14401  03DB  304E               	movlw	78
 14402  03DC  1283               	bcf	3,5	;RP0=0, select bank0
 14403  03DD  1303               	bcf	3,6	;RP1=0, select bank0
 14404  03DE  00C4               	movwf	??_main
 14405  03DF  0844               	movf	??_main,w
 14406  03E0  1683               	bsf	3,5	;RP0=1, select bank1
 14407  03E1  1303               	bcf	3,6	;RP1=0, select bank1
 14408  03E2  00DB               	movwf	main@estado^(0+128)
 14409                           
 14410                           ;main.c: 647:                             break;
 14411  03E3  2D1C               	goto	l8251
 14412  03E4                     l8205:
 14413                           
 14414                           ;main.c: 650:                             if(!statusT1())
 14415  03E4  160A  158A  20A9  120A  118A  	fcall	_statusT1
 14416  03E9  1283               	bcf	3,5	;RP0=0, select bank0
 14417  03EA  1303               	bcf	3,6	;RP1=0, select bank0
 14418  03EB  0823               	movf	?_statusT1+3,w
 14419  03EC  0422               	iorwf	?_statusT1+2,w
 14420  03ED  0421               	iorwf	?_statusT1+1,w
 14421  03EE  0420               	iorwf	?_statusT1,w
 14422  03EF  1D03               	skipz
 14423  03F0  2BF2               	goto	u6431
 14424  03F1  2BF3               	goto	u6430
 14425  03F2                     u6431:
 14426  03F2  2D1C               	goto	l8251
 14427  03F3                     u6430:
 14428  03F3  2987               	goto	l786
 14429  03F4                     l8209:
 14430                           
 14431                           ;main.c: 655:                             IHM.printpos(2, 0, "config contrl:     %");
 14432  03F4  3002               	movlw	2
 14433  03F5  00C4               	movwf	??_main
 14434  03F6  0844               	movf	??_main,w
 14435  03F7  00A8               	movwf	dispLCD@lin
 14436  03F8  01A9               	clrf	dispLCD@col
 14437  03F9  30C6               	movlw	low (STR_21| (0+32768))
 14438  03FA  00AA               	movwf	dispLCD@str
 14439  03FB  3089               	movlw	high (STR_21| (0+32768))
 14440  03FC  00AB               	movwf	dispLCD@str+1
 14441  03FD  1683               	bsf	3,5	;RP0=1, select bank1
 14442  03FE  1303               	bcf	3,6	;RP1=0, select bank1
 14443  03FF  0860               	movf	(low ((_IHM| 0+2)))^(0+128),w
 14444  0400  120A  118A  2052  120A  118A  	fcall	fptable
 14445                           
 14446                           ;main.c: 656:                             IHM.printv(2, 15, num, 3);
 14447  0405  3002               	movlw	2
 14448  0406  1283               	bcf	3,5	;RP0=0, select bank0
 14449  0407  1303               	bcf	3,6	;RP1=0, select bank0
 14450  0408  00C4               	movwf	??_main
 14451  0409  0844               	movf	??_main,w
 14452  040A  00AD               	movwf	dispLCD_num@lin
 14453  040B  300F               	movlw	15
 14454  040C  00C5               	movwf	??_main+1
 14455  040D  0845               	movf	??_main+1,w
 14456  040E  00AE               	movwf	dispLCD_num@col
 14457  040F  1683               	bsf	3,5	;RP0=1, select bank1
 14458  0410  1303               	bcf	3,6	;RP1=0, select bank1
 14459  0411  085A               	movf	(main@num+1)^(0+128),w
 14460  0412  1283               	bcf	3,5	;RP0=0, select bank0
 14461  0413  1303               	bcf	3,6	;RP1=0, select bank0
 14462  0414  00B0               	movwf	dispLCD_num@num+1
 14463  0415  1683               	bsf	3,5	;RP0=1, select bank1
 14464  0416  1303               	bcf	3,6	;RP1=0, select bank1
 14465  0417  0859               	movf	main@num^(0+128),w
 14466  0418  1283               	bcf	3,5	;RP0=0, select bank0
 14467  0419  1303               	bcf	3,6	;RP1=0, select bank0
 14468  041A  00AF               	movwf	dispLCD_num@num
 14469  041B  3003               	movlw	3
 14470  041C  00C6               	movwf	??_main+2
 14471  041D  0846               	movf	??_main+2,w
 14472  041E  00B1               	movwf	dispLCD_num@tam
 14473  041F  1683               	bsf	3,5	;RP0=1, select bank1
 14474  0420  1303               	bcf	3,6	;RP1=0, select bank1
 14475  0421  0861               	movf	(low ((_IHM| 0+3)))^(0+128),w
 14476  0422  120A  118A  2052  120A  118A  	fcall	fptable
 14477  0427                     l8211:
 14478                           
 14479                           ;main.c: 657:                             estado = 91;
 14480  0427  305B               	movlw	91
 14481  0428  1283               	bcf	3,5	;RP0=0, select bank0
 14482  0429  1303               	bcf	3,6	;RP1=0, select bank0
 14483  042A  00C4               	movwf	??_main
 14484  042B  0844               	movf	??_main,w
 14485  042C  1683               	bsf	3,5	;RP0=1, select bank1
 14486  042D  1303               	bcf	3,6	;RP1=0, select bank1
 14487  042E  00DB               	movwf	main@estado^(0+128)
 14488                           
 14489                           ;main.c: 658:                             break;
 14490  042F  2D1C               	goto	l8251
 14491  0430                     l8213:
 14492                           
 14493                           ;main.c: 661:                             tecla = teclado_borda();
 14494  0430  160A  158A  21F2  120A  118A  	fcall	_teclado_borda
 14495  0435  1283               	bcf	3,5	;RP0=0, select bank0
 14496  0436  1303               	bcf	3,6	;RP1=0, select bank0
 14497  0437  00C4               	movwf	??_main
 14498  0438  0844               	movf	??_main,w
 14499  0439  1683               	bsf	3,5	;RP0=1, select bank1
 14500  043A  1303               	bcf	3,6	;RP1=0, select bank1
 14501  043B  00DD               	movwf	main@tecla^(0+128)
 14502  043C                     l8215:
 14503                           
 14504                           ;main.c: 662:                             if(tecla >= '0' && tecla <= '9')
 14505  043C  3030               	movlw	48
 14506  043D  025D               	subwf	main@tecla^(0+128),w
 14507  043E  1C03               	skipc
 14508  043F  2C41               	goto	u6441
 14509  0440  2C42               	goto	u6440
 14510  0441                     u6441:
 14511  0441  2C6D               	goto	l8225
 14512  0442                     u6440:
 14513  0442                     l8217:
 14514  0442  303A               	movlw	58
 14515  0443  025D               	subwf	main@tecla^(0+128),w
 14516  0444  1803               	skipnc
 14517  0445  2C47               	goto	u6451
 14518  0446  2C48               	goto	u6450
 14519  0447                     u6451:
 14520  0447  2C6D               	goto	l8225
 14521  0448                     u6450:
 14522  0448                     l8219:
 14523                           
 14524                           ;main.c: 663:                             {;main.c: 664:                                
      +                           dignum_conc(tecla, &num);
 14525  0448  30D9               	movlw	(low (main@num| 0))& (0+255)
 14526  0449  1283               	bcf	3,5	;RP0=0, select bank0
 14527  044A  1303               	bcf	3,6	;RP1=0, select bank0
 14528  044B  00C4               	movwf	??_main
 14529  044C  0844               	movf	??_main,w
 14530  044D  00A6               	movwf	dignum_conc@ptrNum
 14531  044E  1683               	bsf	3,5	;RP0=1, select bank1
 14532  044F  1303               	bcf	3,6	;RP1=0, select bank1
 14533  0450  085D               	movf	main@tecla^(0+128),w
 14534  0451  160A  158A  2386  120A  118A  	fcall	_dignum_conc
 14535  0456                     l8221:
 14536                           
 14537                           ;main.c: 665:                                 if(num > 100)
 14538  0456  3000               	movlw	0
 14539  0457  1683               	bsf	3,5	;RP0=1, select bank1
 14540  0458  1303               	bcf	3,6	;RP1=0, select bank1
 14541  0459  025A               	subwf	(main@num+1)^(0+128),w
 14542  045A  3065               	movlw	101
 14543  045B  1903               	skipnz
 14544  045C  0259               	subwf	main@num^(0+128),w
 14545  045D  1C03               	skipc
 14546  045E  2C60               	goto	u6461
 14547  045F  2C61               	goto	u6460
 14548  0460                     u6461:
 14549  0460  2C65               	goto	l830
 14550  0461                     u6460:
 14551  0461                     l8223:
 14552                           
 14553                           ;main.c: 666:                                     num = 100;
 14554  0461  3064               	movlw	100
 14555  0462  00D9               	movwf	main@num^(0+128)
 14556  0463  3000               	movlw	0
 14557  0464  00DA               	movwf	(main@num^(0+128)+1)
 14558  0465                     l830:
 14559                           
 14560                           ;main.c: 667:                                 estado = 90;
 14561  0465  305A               	movlw	90
 14562  0466  1283               	bcf	3,5	;RP0=0, select bank0
 14563  0467  1303               	bcf	3,6	;RP1=0, select bank0
 14564  0468  00C4               	movwf	??_main
 14565  0469  0844               	movf	??_main,w
 14566  046A  1683               	bsf	3,5	;RP0=1, select bank1
 14567  046B  1303               	bcf	3,6	;RP1=0, select bank1
 14568  046C  00DB               	movwf	main@estado^(0+128)
 14569  046D                     l8225:
 14570                           
 14571                           ;main.c: 669:                             if(tecla == '*')
 14572  046D  302A               	movlw	42
 14573  046E  065D               	xorwf	main@tecla^(0+128),w
 14574  046F  1D03               	btfss	3,2
 14575  0470  2C72               	goto	u6471
 14576  0471  2C73               	goto	u6470
 14577  0472                     u6471:
 14578  0472  2C81               	goto	l8231
 14579  0473                     u6470:
 14580  0473                     l8227:
 14581                           
 14582                           ;main.c: 670:                             {;main.c: 671:                                
      +                           dignum_apagar(&num);
 14583  0473  30D9               	movlw	(low (main@num| 0))& (0+255)
 14584  0474  160A  158A  2191  120A  118A  	fcall	_dignum_apagar
 14585  0479                     l8229:
 14586                           
 14587                           ;main.c: 672:                                 estado = 90;
 14588  0479  305A               	movlw	90
 14589  047A  1283               	bcf	3,5	;RP0=0, select bank0
 14590  047B  1303               	bcf	3,6	;RP1=0, select bank0
 14591  047C  00C4               	movwf	??_main
 14592  047D  0844               	movf	??_main,w
 14593  047E  1683               	bsf	3,5	;RP0=1, select bank1
 14594  047F  1303               	bcf	3,6	;RP1=0, select bank1
 14595  0480  00DB               	movwf	main@estado^(0+128)
 14596  0481                     l8231:
 14597                           
 14598                           ;main.c: 674:                             if(tecla == '#')
 14599  0481  3023               	movlw	35
 14600  0482  065D               	xorwf	main@tecla^(0+128),w
 14601  0483  1D03               	btfss	3,2
 14602  0484  2C86               	goto	u6481
 14603  0485  2C87               	goto	u6480
 14604  0486                     u6481:
 14605  0486  2D1C               	goto	l8251
 14606  0487                     u6480:
 14607  0487                     l8233:
 14608                           
 14609                           ;main.c: 675:                                 estado = 92;
 14610  0487  305C               	movlw	92
 14611  0488  1283               	bcf	3,5	;RP0=0, select bank0
 14612  0489  1303               	bcf	3,6	;RP1=0, select bank0
 14613  048A  00C4               	movwf	??_main
 14614  048B  0844               	movf	??_main,w
 14615  048C  1683               	bsf	3,5	;RP0=1, select bank1
 14616  048D  1303               	bcf	3,6	;RP1=0, select bank1
 14617  048E  00DB               	movwf	main@estado^(0+128)
 14618  048F  2D1C               	goto	l8251
 14619  0490                     l8235:
 14620                           
 14621                           ;main.c: 679:                             fifo_add_control(num);
 14622  0490  1683               	bsf	3,5	;RP0=1, select bank1
 14623  0491  1303               	bcf	3,6	;RP1=0, select bank1
 14624  0492  0859               	movf	main@num^(0+128),w
 14625  0493  160A  158A  22D2  120A  118A  	fcall	_fifo_add_control
 14626  0498  2947               	goto	l8073
 14627  0499                     l8241:
 14628                           
 14629                           ;main.c: 685:                             fifo_add_ciclo(ciclos);
 14630  0499  1683               	bsf	3,5	;RP0=1, select bank1
 14631  049A  1303               	bcf	3,6	;RP1=0, select bank1
 14632  049B  0855               	movf	(main@ciclos+1)^(0+128),w
 14633  049C  1283               	bcf	3,5	;RP0=0, select bank0
 14634  049D  1303               	bcf	3,6	;RP1=0, select bank0
 14635  049E  00A1               	movwf	fifo_add_ciclo@ciclos+1
 14636  049F  1683               	bsf	3,5	;RP0=1, select bank1
 14637  04A0  1303               	bcf	3,6	;RP1=0, select bank1
 14638  04A1  0854               	movf	main@ciclos^(0+128),w
 14639  04A2  1283               	bcf	3,5	;RP0=0, select bank0
 14640  04A3  1303               	bcf	3,6	;RP1=0, select bank0
 14641  04A4  00A0               	movwf	fifo_add_ciclo@ciclos
 14642  04A5  160A  158A  2088  120A  118A  	fcall	_fifo_add_ciclo
 14643  04AA                     l8243:
 14644                           
 14645                           ;main.c: 686:                             estado = 30;
 14646  04AA  301E               	movlw	30
 14647  04AB  1283               	bcf	3,5	;RP0=0, select bank0
 14648  04AC  1303               	bcf	3,6	;RP1=0, select bank0
 14649  04AD  00C4               	movwf	??_main
 14650  04AE  0844               	movf	??_main,w
 14651  04AF  1683               	bsf	3,5	;RP0=1, select bank1
 14652  04B0  1303               	bcf	3,6	;RP1=0, select bank1
 14653  04B1  00DB               	movwf	main@estado^(0+128)
 14654  04B2  286A               	goto	l771
 14655  04B3                     l673:
 14656  04B3                     l8249:
 14657  04B3  1683               	bsf	3,5	;RP0=1, select bank1
 14658  04B4  1303               	bcf	3,6	;RP1=0, select bank1
 14659  04B5  085B               	movf	main@estado^(0+128),w
 14660  04B6  1283               	bcf	3,5	;RP0=0, select bank0
 14661  04B7  1303               	bcf	3,6	;RP1=0, select bank0
 14662  04B8  00C4               	movwf	??_main
 14663  04B9  01C5               	clrf	??_main+1
 14664                           
 14665                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14666                           ; Switch size 1, requested type "simple"
 14667                           ; Number of cases is 1, Range of values is 0 to 0
 14668                           ; switch strategies available:
 14669                           ; Name         Instructions Cycles
 14670                           ; simple_byte            4     3 (average)
 14671                           ; direct_byte           11     8 (fixed)
 14672                           ; jumptable            260     6 (fixed)
 14673                           ;	Chosen strategy is simple_byte
 14674  04BA  0845               	movf	??_main+1,w
 14675  04BB  3A00               	xorlw	0	; case 0
 14676  04BC  1903               	skipnz
 14677  04BD  2CBF               	goto	l8929
 14678  04BE  2D1C               	goto	l8251
 14679  04BF                     l8929:
 14680                           
 14681                           ; Switch size 1, requested type "simple"
 14682                           ; Number of cases is 29, Range of values is 0 to 92
 14683                           ; switch strategies available:
 14684                           ; Name         Instructions Cycles
 14685                           ; simple_byte           88    45 (average)
 14686                           ; jumptable            260     6 (fixed)
 14687                           ;	Chosen strategy is simple_byte
 14688  04BF  0844               	movf	??_main,w
 14689  04C0  3A00               	xorlw	0	; case 0
 14690  04C1  1903               	skipnz
 14691  04C2  2EED               	goto	L5
 14692  04C3  3A01               	xorlw	1	; case 1
 14693  04C4  1903               	skipnz
 14694  04C5  2EE7               	goto	L1
 14695  04C6  3A03               	xorlw	3	; case 2
 14696  04C7  1903               	skipnz
 14697  04C8  2EFC               	goto	L16
 14698  04C9  3A01               	xorlw	1	; case 3
 14699  04CA  1903               	skipnz
 14700  04CB  2EF0               	goto	L7
 14701  04CC  3A05               	xorlw	5	; case 6
 14702  04CD  1903               	skipnz
 14703  04CE  2F0E               	goto	L37
 14704  04CF  3A01               	xorlw	1	; case 7
 14705  04D0  1903               	skipnz
 14706  04D1  2F08               	goto	L28
 14707  04D2  3A0F               	xorlw	15	; case 8
 14708  04D3  1903               	skipnz
 14709  04D4  2EFF               	goto	L18
 14710  04D5  3A01               	xorlw	1	; case 9
 14711  04D6  1903               	skipnz
 14712  04D7  2EF3               	goto	L9
 14713  04D8  3A03               	xorlw	3	; case 10
 14714  04D9  1903               	skipnz
 14715  04DA  2F11               	goto	L39
 14716  04DB  3A01               	xorlw	1	; case 11
 14717  04DC  1903               	skipnz
 14718  04DD  2F0B               	goto	L30
 14719  04DE  3A05               	xorlw	5	; case 14
 14720  04DF  120A  158A  1903   	skipnz
 14721  04E2  2CC5               	goto	l8011
 14722  04E3  3A1E               	xorlw	30	; case 16
 14723  04E4  1903               	skipnz
 14724  04E5  2CBD  120A  118A   	goto	l8007
 14725  04E8  3A0E               	xorlw	14	; case 30
 14726  04E9  1903               	skipnz
 14727  04EA  2F14               	goto	L41
 14728  04EB  3A36               	xorlw	54	; case 40
 14729  04EC  1903               	skipnz
 14730  04ED  28A3               	goto	l8045
 14731  04EE  3A01               	xorlw	1	; case 41
 14732  04EF  1903               	skipnz
 14733  04F0  2903               	goto	l8067
 14734  04F1  3A03               	xorlw	3	; case 42
 14735  04F2  1903               	skipnz
 14736  04F3  293F               	goto	l8071
 14737  04F4  3A1E               	xorlw	30	; case 52
 14738  04F5  1903               	skipnz
 14739  04F6  2952               	goto	l8077
 14740  04F7  3A01               	xorlw	1	; case 53
 14741  04F8  1903               	skipnz
 14742  04F9  29C2               	goto	l8103
 14743  04FA  3A03               	xorlw	3	; case 54
 14744  04FB  1903               	skipnz
 14745  04FC  2C99               	goto	l8241
 14746  04FD  3A70               	xorlw	112	; case 70
 14747  04FE  1903               	skipnz
 14748  04FF  2F17               	goto	L43
 14749  0500  3A01               	xorlw	1	; case 71
 14750  0501  1903               	skipnz
 14751  0502  2EF6               	goto	L11
 14752  0503  3A0D               	xorlw	13	; case 74
 14753  0504  1903               	skipnz
 14754  0505  2A15               	goto	l8113
 14755  0506  3A01               	xorlw	1	; case 75
 14756  0507  1903               	skipnz
 14757  0508  2A4D               	goto	l8127
 14758  0509  3A07               	xorlw	7	; case 76
 14759  050A  1903               	skipnz
 14760  050B  2A6B               	goto	l8133
 14761  050C  3A01               	xorlw	1	; case 77
 14762  050D  1903               	skipnz
 14763  050E  2B10               	goto	l8149
 14764  050F  3A03               	xorlw	3	; case 78
 14765  0510  1903               	skipnz
 14766  0511  2BE4               	goto	l8205
 14767  0512  3A14               	xorlw	20	; case 90
 14768  0513  1903               	skipnz
 14769  0514  2BF4               	goto	l8209
 14770  0515  3A01               	xorlw	1	; case 91
 14771  0516  1903               	skipnz
 14772  0517  2C30               	goto	l8213
 14773  0518  3A07               	xorlw	7	; case 92
 14774  0519  1903               	skipnz
 14775  051A  2C90               	goto	l8235
 14776  051B  2D1C               	goto	l8251
 14777  051C                     l8251:
 14778                           
 14779                           ;main.c: 691:         serialIOscan();
 14780  051C  160A  158A  2548  120A  118A  	fcall	_serialIOscan
 14781                           
 14782                           ;main.c: 693:         switch(meAtuadores)
 14783  0521  2EBB               	goto	l8327
 14784  0522                     l8253:
 14785                           
 14786                           ;main.c: 698:                             resetIndicePassos();
 14787  0522  120A  158A  21FA  120A  118A  	fcall	_resetIndicePassos
 14788  0527                     l8255:
 14789                           
 14790                           ;main.c: 699:                             resetContCiclos();
 14791  0527  160A  158A  2024  120A  118A  	fcall	_resetContCiclos
 14792                           
 14793                           ;main.c: 700:                             meAtuadores = 2;
 14794  052C  3002               	movlw	2
 14795  052D  1283               	bcf	3,5	;RP0=0, select bank0
 14796  052E  1303               	bcf	3,6	;RP1=0, select bank0
 14797  052F  00C4               	movwf	??_main
 14798  0530  0844               	movf	??_main,w
 14799  0531  1683               	bsf	3,5	;RP0=1, select bank1
 14800  0532  1303               	bcf	3,6	;RP1=0, select bank1
 14801  0533  00D6               	movwf	main@meAtuadores^(0+128)
 14802                           
 14803                           ;main.c: 701:                             break;
 14804  0534  2CB3               	goto	l8249
 14805  0535                     l8257:
 14806                           
 14807                           ;main.c: 704:                             auxPasso = fifo_lerPos(getIndicePassos());
 14808  0535  160A  158A  2020  120A  118A  	fcall	_getIndicePassos
 14809  053A  160A  158A  2061  120A  118A  	fcall	_fifo_lerPos
 14810  053F  1283               	bcf	3,5	;RP0=0, select bank0
 14811  0540  1303               	bcf	3,6	;RP1=0, select bank0
 14812  0541  00C4               	movwf	??_main
 14813  0542  0844               	movf	??_main,w
 14814  0543  1683               	bsf	3,5	;RP0=1, select bank1
 14815  0544  1303               	bcf	3,6	;RP1=0, select bank1
 14816  0545  00DC               	movwf	main@auxPasso^(0+128)
 14817  0546                     l8259:
 14818                           
 14819                           ;main.c: 706:                             if(botao == 1 || botao == 3 || botao == 0)
 14820  0546  0358               	decf	main@botao^(0+128),w
 14821  0547  1903               	btfsc	3,2
 14822  0548  2D4A               	goto	u6491
 14823  0549  2D4B               	goto	u6490
 14824  054A                     u6491:
 14825  054A  2D56               	goto	l8265
 14826  054B                     u6490:
 14827  054B                     l8261:
 14828  054B  3003               	movlw	3
 14829  054C  0658               	xorwf	main@botao^(0+128),w
 14830  054D  1903               	btfsc	3,2
 14831  054E  2D50               	goto	u6501
 14832  054F  2D51               	goto	u6500
 14833  0550                     u6501:
 14834  0550  2D56               	goto	l8265
 14835  0551                     u6500:
 14836  0551                     l8263:
 14837  0551  0858               	movf	main@botao^(0+128),w
 14838  0552  1D03               	btfss	3,2
 14839  0553  2D55               	goto	u6511
 14840  0554  2D56               	goto	u6510
 14841  0555                     u6511:
 14842  0555  2CB3               	goto	l673
 14843  0556                     u6510:
 14844  0556                     l8265:
 14845                           
 14846                           ;main.c: 707:                                 meAtuadores = 3;
 14847  0556  3003               	movlw	3
 14848  0557  1283               	bcf	3,5	;RP0=0, select bank0
 14849  0558  1303               	bcf	3,6	;RP1=0, select bank0
 14850  0559  00C4               	movwf	??_main
 14851  055A  0844               	movf	??_main,w
 14852  055B  1683               	bsf	3,5	;RP0=1, select bank1
 14853  055C  1303               	bcf	3,6	;RP1=0, select bank1
 14854  055D  00D6               	movwf	main@meAtuadores^(0+128)
 14855  055E  2CB3               	goto	l8249
 14856  055F                     l8267:
 14857                           
 14858                           ;main.c: 711:                             if(auxPasso <= 0x64 || auxPasso == 0xFE)
 14859  055F  3065               	movlw	101
 14860  0560  1683               	bsf	3,5	;RP0=1, select bank1
 14861  0561  1303               	bcf	3,6	;RP1=0, select bank1
 14862  0562  025C               	subwf	main@auxPasso^(0+128),w
 14863  0563  1C03               	skipc
 14864  0564  2D66               	goto	u6521
 14865  0565  2D67               	goto	u6520
 14866  0566                     u6521:
 14867  0566  2D6D               	goto	l8271
 14868  0567                     u6520:
 14869  0567                     l8269:
 14870  0567  30FE               	movlw	254
 14871  0568  065C               	xorwf	main@auxPasso^(0+128),w
 14872  0569  1D03               	btfss	3,2
 14873  056A  2D6C               	goto	u6531
 14874  056B  2D6D               	goto	u6530
 14875  056C                     u6531:
 14876  056C  2DBE               	goto	l8277
 14877  056D                     u6530:
 14878  056D                     l8271:
 14879                           
 14880                           ;main.c: 712:                             {;main.c: 713:                                
      +                           decodifica(&auxPasso);
 14881  056D  30DC               	movlw	(low (main@auxPasso| 0))& (0+255)
 14882  056E  160A  118A  21EE  120A  118A  	fcall	_decodifica
 14883  0573                     l8273:
 14884                           
 14885                           ;main.c: 714:                                 MCP4725((long)((4095L * auxPasso)/100));
 14886  0573  3000               	movlw	0
 14887  0574  1283               	bcf	3,5	;RP0=0, select bank0
 14888  0575  1303               	bcf	3,6	;RP1=0, select bank0
 14889  0576  00B0               	movwf	___aldiv@divisor+3
 14890  0577  3000               	movlw	0
 14891  0578  00AF               	movwf	___aldiv@divisor+2
 14892  0579  3000               	movlw	0
 14893  057A  00AE               	movwf	___aldiv@divisor+1
 14894  057B  3064               	movlw	100
 14895  057C  00AD               	movwf	___aldiv@divisor
 14896  057D  1683               	bsf	3,5	;RP0=1, select bank1
 14897  057E  1303               	bcf	3,6	;RP1=0, select bank1
 14898  057F  085C               	movf	main@auxPasso^(0+128),w
 14899  0580  1283               	bcf	3,5	;RP0=0, select bank0
 14900  0581  1303               	bcf	3,6	;RP1=0, select bank0
 14901  0582  00C4               	movwf	??_main
 14902  0583  01C5               	clrf	??_main+1
 14903  0584  01C6               	clrf	??_main+2
 14904  0585  01C7               	clrf	??_main+3
 14905  0586  0847               	movf	??_main+3,w
 14906  0587  00A3               	movwf	___lmul@multiplier+3
 14907  0588  0846               	movf	??_main+2,w
 14908  0589  00A2               	movwf	___lmul@multiplier+2
 14909  058A  0845               	movf	??_main+1,w
 14910  058B  00A1               	movwf	___lmul@multiplier+1
 14911  058C  0844               	movf	??_main,w
 14912  058D  00A0               	movwf	___lmul@multiplier
 14913  058E  3000               	movlw	0
 14914  058F  00A7               	movwf	___lmul@multiplicand+3
 14915  0590  3000               	movlw	0
 14916  0591  00A6               	movwf	___lmul@multiplicand+2
 14917  0592  300F               	movlw	15
 14918  0593  00A5               	movwf	___lmul@multiplicand+1
 14919  0594  30FF               	movlw	255
 14920  0595  00A4               	movwf	___lmul@multiplicand
 14921  0596  160A  158A  26C6  120A  118A  	fcall	___lmul
 14922  059B  1283               	bcf	3,5	;RP0=0, select bank0
 14923  059C  1303               	bcf	3,6	;RP1=0, select bank0
 14924  059D  0823               	movf	?___lmul+3,w
 14925  059E  00B4               	movwf	___aldiv@dividend+3
 14926  059F  0822               	movf	?___lmul+2,w
 14927  05A0  00B3               	movwf	___aldiv@dividend+2
 14928  05A1  0821               	movf	?___lmul+1,w
 14929  05A2  00B2               	movwf	___aldiv@dividend+1
 14930  05A3  0820               	movf	?___lmul,w
 14931  05A4  00B1               	movwf	___aldiv@dividend
 14932  05A5  160A  118A  236F  120A  118A  	fcall	___aldiv
 14933  05AA  1283               	bcf	3,5	;RP0=0, select bank0
 14934  05AB  1303               	bcf	3,6	;RP1=0, select bank0
 14935  05AC  082E               	movf	?___aldiv+1,w
 14936  05AD  00BD               	movwf	MCP4725@Vout+1
 14937  05AE  082D               	movf	?___aldiv,w
 14938  05AF  00BC               	movwf	MCP4725@Vout
 14939  05B0  160A  158A  21B0  120A  118A  	fcall	_MCP4725
 14940  05B5                     l8275:
 14941                           
 14942                           ;main.c: 715:                                 meAtuadores = 6;
 14943  05B5  3006               	movlw	6
 14944  05B6  1283               	bcf	3,5	;RP0=0, select bank0
 14945  05B7  1303               	bcf	3,6	;RP1=0, select bank0
 14946  05B8  00C4               	movwf	??_main
 14947  05B9  0844               	movf	??_main,w
 14948  05BA  1683               	bsf	3,5	;RP0=1, select bank1
 14949  05BB  1303               	bcf	3,6	;RP1=0, select bank1
 14950  05BC  00D6               	movwf	main@meAtuadores^(0+128)
 14951                           
 14952                           ;main.c: 716:                             }
 14953  05BD  2CB3               	goto	l8249
 14954  05BE                     l8277:
 14955  05BE  3065               	movlw	101
 14956  05BF  025C               	subwf	main@auxPasso^(0+128),w
 14957  05C0  1C03               	skipc
 14958  05C1  2DC3               	goto	u6541
 14959  05C2  2DC4               	goto	u6540
 14960  05C3                     u6541:
 14961  05C3  2DF7               	goto	l8287
 14962  05C4                     u6540:
 14963  05C4                     l8279:
 14964  05C4  30DD               	movlw	221
 14965  05C5  025C               	subwf	main@auxPasso^(0+128),w
 14966  05C6  1803               	skipnc
 14967  05C7  2DC9               	goto	u6551
 14968  05C8  2DCA               	goto	u6550
 14969  05C9                     u6551:
 14970  05C9  2DF7               	goto	l8287
 14971  05CA                     u6550:
 14972  05CA                     l8281:
 14973                           
 14974                           ;main.c: 718:                             {;main.c: 719:                                
      +                           auxPasso -= 0x64;
 14975  05CA  3064               	movlw	100
 14976  05CB  02DC               	subwf	main@auxPasso^(0+128),f
 14977  05CC                     l8283:
 14978                           
 14979                           ;main.c: 720:                                 setT1(auxPasso * 1000 );
 14980  05CC  085C               	movf	main@auxPasso^(0+128),w
 14981  05CD  1283               	bcf	3,5	;RP0=0, select bank0
 14982  05CE  1303               	bcf	3,6	;RP1=0, select bank0
 14983  05CF  00C4               	movwf	??_main
 14984  05D0  01C5               	clrf	??_main+1
 14985  05D1  0844               	movf	??_main,w
 14986  05D2  00A0               	movwf	___wmul@multiplier
 14987  05D3  0845               	movf	??_main+1,w
 14988  05D4  00A1               	movwf	___wmul@multiplier+1
 14989  05D5  30E8               	movlw	232
 14990  05D6  00A2               	movwf	___wmul@multiplicand
 14991  05D7  3003               	movlw	3
 14992  05D8  00A3               	movwf	___wmul@multiplicand+1
 14993  05D9  160A  158A  2280  120A  118A  	fcall	___wmul
 14994  05DE  1283               	bcf	3,5	;RP0=0, select bank0
 14995  05DF  1303               	bcf	3,6	;RP1=0, select bank0
 14996  05E0  0820               	movf	?___wmul,w
 14997  05E1  00A6               	movwf	setT1@c
 14998  05E2  0821               	movf	?___wmul+1,w
 14999  05E3  00A7               	movwf	setT1@c+1
 15000  05E4  3000               	movlw	0
 15001  05E5  1BA7               	btfsc	setT1@c+1,7
 15002  05E6  30FF               	movlw	255
 15003  05E7  00A8               	movwf	setT1@c+2
 15004  05E8  00A9               	movwf	setT1@c+3
 15005  05E9  160A  158A  20C0  120A  118A  	fcall	_setT1
 15006  05EE                     l8285:
 15007                           
 15008                           ;main.c: 721:                                 meAtuadores = 4;
 15009  05EE  3004               	movlw	4
 15010  05EF  1283               	bcf	3,5	;RP0=0, select bank0
 15011  05F0  1303               	bcf	3,6	;RP1=0, select bank0
 15012  05F1  00C4               	movwf	??_main
 15013  05F2  0844               	movf	??_main,w
 15014  05F3  1683               	bsf	3,5	;RP0=1, select bank1
 15015  05F4  1303               	bcf	3,6	;RP1=0, select bank1
 15016  05F5  00D6               	movwf	main@meAtuadores^(0+128)
 15017                           
 15018                           ;main.c: 722:                             }
 15019  05F6  2CB3               	goto	l8249
 15020  05F7                     l8287:
 15021                           
 15022                           ;main.c: 724:                             {;main.c: 725:                                
      +                           decodifica(&auxPasso);
 15023  05F7  30DC               	movlw	(low (main@auxPasso| 0))& (0+255)
 15024  05F8  160A  118A  21EE  120A  118A  	fcall	_decodifica
 15025                           
 15026                           ;main.c: 726:                                 set_passo(auxPasso, vetorOut);
 15027  05FD  30D7               	movlw	(low (main@vetorOut| 0))& (0+255)
 15028  05FE  1283               	bcf	3,5	;RP0=0, select bank0
 15029  05FF  1303               	bcf	3,6	;RP1=0, select bank0
 15030  0600  00C4               	movwf	??_main
 15031  0601  0844               	movf	??_main,w
 15032  0602  00A0               	movwf	set_passo@ptr
 15033  0603  1683               	bsf	3,5	;RP0=1, select bank1
 15034  0604  1303               	bcf	3,6	;RP1=0, select bank1
 15035  0605  085C               	movf	main@auxPasso^(0+128),w
 15036  0606  160A  118A  20C2  120A  118A  	fcall	_set_passo
 15037  060B                     l8289:
 15038                           
 15039                           ;main.c: 727:                                 meAtuadores = 5;
 15040  060B  3005               	movlw	5
 15041  060C  1283               	bcf	3,5	;RP0=0, select bank0
 15042  060D  1303               	bcf	3,6	;RP1=0, select bank0
 15043  060E  00C4               	movwf	??_main
 15044  060F  0844               	movf	??_main,w
 15045  0610  1683               	bsf	3,5	;RP0=1, select bank1
 15046  0611  1303               	bcf	3,6	;RP1=0, select bank1
 15047  0612  00D6               	movwf	main@meAtuadores^(0+128)
 15048  0613  2CB3               	goto	l8249
 15049  0614                     l8291:
 15050                           
 15051                           ;main.c: 732:                             if(!statusT1())
 15052  0614  160A  158A  20A9  120A  118A  	fcall	_statusT1
 15053  0619  1283               	bcf	3,5	;RP0=0, select bank0
 15054  061A  1303               	bcf	3,6	;RP1=0, select bank0
 15055  061B  0823               	movf	?_statusT1+3,w
 15056  061C  0422               	iorwf	?_statusT1+2,w
 15057  061D  0421               	iorwf	?_statusT1+1,w
 15058  061E  0420               	iorwf	?_statusT1,w
 15059  061F  1D03               	skipz
 15060  0620  2E22               	goto	u6561
 15061  0621  2E23               	goto	u6560
 15062  0622                     u6561:
 15063  0622  2CB3               	goto	l673
 15064  0623                     u6560:
 15065  0623  2DB5               	goto	l8275
 15066  0624                     l8295:
 15067                           
 15068                           ;main.c: 737:                             if(ler_sensor(auxPasso, vetorIn))
 15069  0624  30D3               	movlw	(low (main@vetorIn| 0))& (0+255)
 15070  0625  00C4               	movwf	??_main
 15071  0626  0844               	movf	??_main,w
 15072  0627  00A0               	movwf	ler_sensor@ptr
 15073  0628  1683               	bsf	3,5	;RP0=1, select bank1
 15074  0629  1303               	bcf	3,6	;RP1=0, select bank1
 15075  062A  085C               	movf	main@auxPasso^(0+128),w
 15076  062B  160A  158A  27A7  120A  118A  	fcall	_ler_sensor
 15077  0630  3A00               	xorlw	0
 15078  0631  1903               	skipnz
 15079  0632  2E34               	goto	u6571
 15080  0633  2E35               	goto	u6570
 15081  0634                     u6571:
 15082  0634  2CB3               	goto	l673
 15083  0635                     u6570:
 15084  0635  2DB5               	goto	l8275
 15085  0636                     l8299:
 15086                           
 15087                           ;main.c: 742:                             if(botao == 3)
 15088  0636  3003               	movlw	3
 15089  0637  1683               	bsf	3,5	;RP0=1, select bank1
 15090  0638  1303               	bcf	3,6	;RP1=0, select bank1
 15091  0639  0658               	xorwf	main@botao^(0+128),w
 15092  063A  1D03               	btfss	3,2
 15093  063B  2E3D               	goto	u6581
 15094  063C  2E3E               	goto	u6580
 15095  063D                     u6581:
 15096  063D  2E46               	goto	l855
 15097  063E                     u6580:
 15098  063E                     l8301:
 15099                           
 15100                           ;main.c: 743:                             {;main.c: 744:                                
      +                           botao = 2;
 15101  063E  3002               	movlw	2
 15102  063F  1283               	bcf	3,5	;RP0=0, select bank0
 15103  0640  1303               	bcf	3,6	;RP1=0, select bank0
 15104  0641  00C4               	movwf	??_main
 15105  0642  0844               	movf	??_main,w
 15106  0643  1683               	bsf	3,5	;RP0=1, select bank1
 15107  0644  1303               	bcf	3,6	;RP1=0, select bank1
 15108  0645  00D8               	movwf	main@botao^(0+128)
 15109  0646                     l855:	
 15110                           ;main.c: 745:                             }
 15111                           
 15112                           
 15113                           ;main.c: 746:                             meAtuadores = 7;
 15114  0646  3007               	movlw	7
 15115  0647  1283               	bcf	3,5	;RP0=0, select bank0
 15116  0648  1303               	bcf	3,6	;RP1=0, select bank0
 15117  0649  00C4               	movwf	??_main
 15118  064A  0844               	movf	??_main,w
 15119  064B  1683               	bsf	3,5	;RP0=1, select bank1
 15120  064C  1303               	bcf	3,6	;RP1=0, select bank1
 15121  064D  00D6               	movwf	main@meAtuadores^(0+128)
 15122                           
 15123                           ;main.c: 748:                             break;
 15124  064E  2CB3               	goto	l8249
 15125  064F                     l8303:
 15126                           
 15127                           ;main.c: 751:                             addIndicePassos();
 15128  064F  160A  118A  2000  120A  118A  	fcall	_addIndicePassos
 15129  0654                     l8305:
 15130                           
 15131                           ;main.c: 752:                             if(getIndicePassos() < fifo_indice())
 15132  0654  160A  158A  2027  120A  118A  	fcall	_fifo_indice
 15133  0659  1283               	bcf	3,5	;RP0=0, select bank0
 15134  065A  1303               	bcf	3,6	;RP1=0, select bank0
 15135  065B  00C4               	movwf	??_main
 15136  065C  160A  158A  2020  120A  118A  	fcall	_getIndicePassos
 15137  0661  1283               	bcf	3,5	;RP0=0, select bank0
 15138  0662  1303               	bcf	3,6	;RP1=0, select bank0
 15139  0663  00C5               	movwf	??_main+1
 15140  0664  0844               	movf	??_main,w
 15141  0665  0245               	subwf	??_main+1,w
 15142  0666  1803               	skipnc
 15143  0667  2E69               	goto	u6591
 15144  0668  2E6A               	goto	u6590
 15145  0669                     u6591:
 15146  0669  2E73               	goto	l8309
 15147  066A                     u6590:
 15148  066A                     l8307:
 15149                           
 15150                           ;main.c: 753:                                 meAtuadores = 2;
 15151  066A  3002               	movlw	2
 15152  066B  1283               	bcf	3,5	;RP0=0, select bank0
 15153  066C  1303               	bcf	3,6	;RP1=0, select bank0
 15154  066D  00C4               	movwf	??_main
 15155  066E  0844               	movf	??_main,w
 15156  066F  1683               	bsf	3,5	;RP0=1, select bank1
 15157  0670  1303               	bcf	3,6	;RP1=0, select bank1
 15158  0671  00D6               	movwf	main@meAtuadores^(0+128)
 15159  0672  2CB3               	goto	l8249
 15160  0673                     l8309:
 15161                           
 15162                           ;main.c: 755:                             {;main.c: 756:                                
      +                           addContCiclos();
 15163  0673  160A  158A  203C  120A  118A  	fcall	_addContCiclos
 15164  0678                     l8311:
 15165                           
 15166                           ;main.c: 757:                                 meAtuadores = 8;
 15167  0678  3008               	movlw	8
 15168  0679  1283               	bcf	3,5	;RP0=0, select bank0
 15169  067A  1303               	bcf	3,6	;RP1=0, select bank0
 15170  067B  00C4               	movwf	??_main
 15171  067C  0844               	movf	??_main,w
 15172  067D  1683               	bsf	3,5	;RP0=1, select bank1
 15173  067E  1303               	bcf	3,6	;RP1=0, select bank1
 15174  067F  00D6               	movwf	main@meAtuadores^(0+128)
 15175  0680  2CB3               	goto	l8249
 15176  0681                     l8313:
 15177                           
 15178                           ;main.c: 762:                             if((botao != 0) && ((getContCiclos() < getCicl
      +                          os()) || (getCiclos() == 0)))
 15179  0681  1683               	bsf	3,5	;RP0=1, select bank1
 15180  0682  1303               	bcf	3,6	;RP1=0, select bank1
 15181  0683  0858               	movf	main@botao^(0+128),w
 15182  0684  1903               	btfsc	3,2
 15183  0685  2E87               	goto	u6601
 15184  0686  2E88               	goto	u6600
 15185  0687                     u6601:
 15186  0687  2EB7               	goto	l8323
 15187  0688                     u6600:
 15188  0688                     l8315:
 15189  0688  160A  158A  204A  120A  118A  	fcall	_getContCiclos
 15190  068D  1283               	bcf	3,5	;RP0=0, select bank0
 15191  068E  1303               	bcf	3,6	;RP1=0, select bank0
 15192  068F  0820               	movf	?_getContCiclos,w
 15193  0690  00C4               	movwf	??_main
 15194  0691  0821               	movf	?_getContCiclos+1,w
 15195  0692  00C5               	movwf	??_main+1
 15196  0693  160A  158A  2155  120A  118A  	fcall	_getCiclos
 15197  0698  1283               	bcf	3,5	;RP0=0, select bank0
 15198  0699  1303               	bcf	3,6	;RP1=0, select bank0
 15199  069A  0821               	movf	?_getCiclos+1,w
 15200  069B  0245               	subwf	??_main+1,w
 15201  069C  1D03               	skipz
 15202  069D  2EA0               	goto	u6615
 15203  069E  0820               	movf	?_getCiclos,w
 15204  069F  0244               	subwf	??_main,w
 15205  06A0                     u6615:
 15206  06A0  1C03               	skipc
 15207  06A1  2EA3               	goto	u6611
 15208  06A2  2EA4               	goto	u6610
 15209  06A3                     u6611:
 15210  06A3  2EB1               	goto	l8319
 15211  06A4                     u6610:
 15212  06A4                     l8317:
 15213  06A4  160A  158A  2155  120A  118A  	fcall	_getCiclos
 15214  06A9  1283               	bcf	3,5	;RP0=0, select bank0
 15215  06AA  1303               	bcf	3,6	;RP1=0, select bank0
 15216  06AB  0820               	movf	?_getCiclos,w
 15217  06AC  0421               	iorwf	?_getCiclos+1,w
 15218  06AD  1D03               	btfss	3,2
 15219  06AE  2EB0               	goto	u6621
 15220  06AF  2EB1               	goto	u6620
 15221  06B0                     u6621:
 15222  06B0  2EB7               	goto	l8323
 15223  06B1                     u6620:
 15224  06B1                     l8319:
 15225                           
 15226                           ;main.c: 763:                             {;main.c: 764:                                
      +                           resetIndicePassos();
 15227  06B1  120A  158A  21FA  120A  118A  	fcall	_resetIndicePassos
 15228  06B6  2E6A               	goto	l8307
 15229  06B7                     l8323:
 15230                           
 15231                           ;main.c: 768:                             {;main.c: 769:                                
      +                           meAtuadores = 0;
 15232  06B7  1683               	bsf	3,5	;RP0=1, select bank1
 15233  06B8  1303               	bcf	3,6	;RP1=0, select bank1
 15234  06B9  01D6               	clrf	main@meAtuadores^(0+128)
 15235  06BA  2CB3               	goto	l8249
 15236  06BB                     l8327:
 15237  06BB  1683               	bsf	3,5	;RP0=1, select bank1
 15238  06BC  1303               	bcf	3,6	;RP1=0, select bank1
 15239  06BD  0856               	movf	main@meAtuadores^(0+128),w
 15240  06BE  1283               	bcf	3,5	;RP0=0, select bank0
 15241  06BF  1303               	bcf	3,6	;RP1=0, select bank0
 15242  06C0  00C4               	movwf	??_main
 15243  06C1  01C5               	clrf	??_main+1
 15244                           
 15245                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15246                           ; Switch size 1, requested type "simple"
 15247                           ; Number of cases is 1, Range of values is 0 to 0
 15248                           ; switch strategies available:
 15249                           ; Name         Instructions Cycles
 15250                           ; simple_byte            4     3 (average)
 15251                           ; direct_byte           11     8 (fixed)
 15252                           ; jumptable            260     6 (fixed)
 15253                           ;	Chosen strategy is simple_byte
 15254  06C2  0845               	movf	??_main+1,w
 15255  06C3  3A00               	xorlw	0	; case 0
 15256  06C4  1903               	skipnz
 15257  06C5  2EC7               	goto	l8931
 15258  06C6  2CB3               	goto	l8249
 15259  06C7                     l8931:
 15260                           
 15261                           ; Switch size 1, requested type "simple"
 15262                           ; Number of cases is 9, Range of values is 0 to 8
 15263                           ; switch strategies available:
 15264                           ; Name         Instructions Cycles
 15265                           ; simple_byte           28    15 (average)
 15266                           ; direct_byte           35     8 (fixed)
 15267                           ; jumptable            260     6 (fixed)
 15268                           ;	Chosen strategy is simple_byte
 15269  06C7  0844               	movf	??_main,w
 15270  06C8  3A00               	xorlw	0	; case 0
 15271  06C9  1903               	skipnz
 15272  06CA  2CB3               	goto	l8249
 15273  06CB  3A01               	xorlw	1	; case 1
 15274  06CC  1903               	skipnz
 15275  06CD  2D22               	goto	l8253
 15276  06CE  3A03               	xorlw	3	; case 2
 15277  06CF  1903               	skipnz
 15278  06D0  2D35               	goto	l8257
 15279  06D1  3A01               	xorlw	1	; case 3
 15280  06D2  1903               	skipnz
 15281  06D3  2D5F               	goto	l8267
 15282  06D4  3A07               	xorlw	7	; case 4
 15283  06D5  1903               	skipnz
 15284  06D6  2E14               	goto	l8291
 15285  06D7  3A01               	xorlw	1	; case 5
 15286  06D8  1903               	skipnz
 15287  06D9  2E24               	goto	l8295
 15288  06DA  3A03               	xorlw	3	; case 6
 15289  06DB  1903               	skipnz
 15290  06DC  2E36               	goto	l8299
 15291  06DD  3A01               	xorlw	1	; case 7
 15292  06DE  1903               	skipnz
 15293  06DF  2E4F               	goto	l8303
 15294  06E0  3A0F               	xorlw	15	; case 8
 15295  06E1  1903               	skipnz
 15296  06E2  2E81               	goto	l8313
 15297  06E3  2CB3               	goto	l8249
 15298  06E4  120A  118A  280C   	ljmp	start
 15299  06E7                     L1:
 15300  06E7                     __end_of_main:
 15301  06E7  160A  118A  2EA9   	ljmp	l7819
 15302  06EA                     L3:
 15303  06EA                     L2:
 15304  06EA  160A  118A  2D1C   	ljmp	l7843
 15305  06ED                     L5:
 15306  06ED                     L4:
 15307  06ED  160A  118A  2E14   	ljmp	l7771
 15308  06F0                     L7:
 15309  06F0                     L6:
 15310  06F0  160A  118A  2D8C   	ljmp	l7865
 15311  06F3                     L9:
 15312  06F3                     L8:
 15313  06F3  160A  118A  2D4E   	ljmp	l7853
 15314  06F6                     L11:
 15315  06F6                     L10:
 15316  06F6  160A  118A  2D64   	ljmp	l7857
 15317  06F9                     L14:
 15318  06F9                     L13:
 15319  06F9  120A  158A  2AD4   	ljmp	l7919
 15320  06FC                     L16:
 15321  06FC                     L15:
 15322  06FC  160A  118A  2D0B   	ljmp	l7841
 15323  06FF                     L18:
 15324  06FF                     L17:
 15325  06FF  160A  118A  2D23   	ljmp	l7845
 15326  0702                     L23:
 15327  0702                     L22:
 15328  0702  120A  158A  2C4C   	ljmp	l7981
 15329  0705                     L25:
 15330  0705                     L24:
 15331  0705  120A  158A  2C03   	ljmp	l7969
 15332  0708                     L28:
 15333  0708                     L27:
 15334  0708  120A  158A  2AC5   	ljmp	l7917
 15335  070B                     L30:
 15336  070B                     L29:
 15337  070B  120A  158A  2BF4   	ljmp	l7967
 15338  070E                     L37:
 15339  070E                     L36:
 15340  070E  120A  158A  2A01   	ljmp	l7873
 15341  0711                     L39:
 15342  0711                     L38:
 15343  0711  120A  158A  2BC9   	ljmp	l7959
 15344  0714                     L41:
 15345  0714                     L40:
 15346  0714  120A  158A  2D23   	ljmp	l8015
 15347  0717                     L43:
 15348  0717                     L42:
 15349  0717  120A  158A  2D2C   	ljmp	l8019

Data Sizes:
    Strings     506
    Constant    0
    Data        49
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     40      72
    BANK1            80     62      74
    BANK3            96      0      36
    BANK2            96      0       0

Pointer List with Targets:

    S122$1$1	PTR unsigned char  size(1) Largest target is 0

    S122$3$0	PTR unsigned char  size(1) Largest target is 0

    S122$0$1	PTR unsigned char  size(1) Largest target is 18
		 -> fila(BANK0[18]), 

    S665$1$0	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_16(CODE[78]), STR_15(CODE[62]), STR_4(CODE[83]), 

    S665$2$2	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_21(CODE[21]), STR_20(CODE[21]), STR_19(CODE[21]), STR_18(CODE[2]), 
		 -> STR_17(CODE[2]), STR_14(CODE[21]), STR_13(CODE[21]), STR_12(CODE[21]), 
		 -> STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[8]), STR_8(CODE[21]), 
		 -> STR_7(CODE[21]), STR_6(CODE[21]), STR_5(CODE[21]), STR_3(CODE[21]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    main@ptr	PTR unsigned char  size(1) Largest target is 20
		 -> main@lema(BANK1[20]), 

    S665$clr	PTR FTN()void  size(1) Largest target is 1
		 -> dispLCD_clr(), 

    IHM.clr	PTR FTN()void  size(1) Largest target is 1
		 -> dispLCD_clr(), 

    S665$printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD_num(), 

    IHM.printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD_num(), 

    S665$printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD(), 

    IHM.printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD(), 

    S665$print	PTR FTN(PTR const unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD_str(), 

    IHM.print	PTR FTN(PTR const unsigned char ,)void  size(1) Largest target is 1
		 -> dispLCD_str(), 

    S665$init	PTR FTN()void  size(1) Largest target is 1
		 -> dispLCD_init(), 

    IHM.init	PTR FTN()void  size(1) Largest target is 1
		 -> dispLCD_init(), 

    initSerialIO@ptrOut	PTR unsigned char  size(1) Largest target is 1
		 -> main@vetorOut(BANK1[1]), 

    initSerialIO@ptrIn	PTR unsigned char  size(1) Largest target is 1
		 -> main@vetorIn(BANK1[1]), 

    ptrSerialOut	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), main@vetorOut(BANK1[1]), 

    ptrSerialIn	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), main@vetorIn(BANK1[1]), 

    dignum_apagar@ptrNum	PTR unsigned int  size(1) Largest target is 2
		 -> main@ciclos(BANK1[2]), main@num(BANK1[2]), 

    dignum_conc@ptrNum	PTR unsigned int  size(1) Largest target is 2
		 -> main@ciclos(BANK1[2]), main@num(BANK1[2]), 

    decodifica@d	PTR unsigned char  size(1) Largest target is 18
		 -> main@auxPasso(BANK1[1]), printExec@passo(BANK0[1]), fifo_print@comando(BANK0[1]), fila(BANK0[18]), 

    codifica@dado	PTR unsigned char  size(2) Largest target is 512
		 -> fifo_add_control@c(BANK0[1]), fifo_add_tempo@t(BANK0[1]), fifo_add@passo(BANK0[1]), RAM(DATA[512]), 

    sp__fifo_adrs	PTR unsigned char  size(1) Largest target is 18
		 -> fila(BANK0[18]), 

    salva_atuadores_init@pt	PTR unsigned char  size(1) Largest target is 4
		 -> salva_atuadores_init@condi_init(BANK0[4]), 

    salvar_receita@data	PTR unsigned char  size(1) Largest target is 18
		 -> fila(BANK0[18]), 

    S122$formatar	PTR FTN()void  size(1) Largest target is 1
		 -> formatar_receitas(), 

    EEPROM.formatar	PTR FTN()void  size(1) Largest target is 1
		 -> formatar_receitas(), 

    S122$livre	PTR FTN(PTR unsigned char ,)void  size(1) Largest target is 1
		 -> receita_livre(), 

    EEPROM.livre	PTR FTN(PTR unsigned char ,)void  size(1) Largest target is 1
		 -> receita_livre(), 

    S122$deletar	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> deletar_receita(), 

    EEPROM.deletar	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> deletar_receita(), 

    S122$buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(1) Largest target is 1
		 -> buscar_receita(), 

    EEPROM.buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(1) Largest target is 1
		 -> buscar_receita(), 

    S122$salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(1) Largest target is 1
		 -> salvar_receita(), 

    EEPROM.salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(1) Largest target is 1
		 -> salvar_receita(), 

    dispLCD_str@str	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_16(CODE[78]), STR_15(CODE[62]), STR_4(CODE[83]), 

    dispLCD@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_21(CODE[21]), STR_20(CODE[21]), STR_19(CODE[21]), STR_18(CODE[2]), 
		 -> STR_17(CODE[2]), STR_14(CODE[21]), STR_13(CODE[21]), STR_12(CODE[21]), 
		 -> STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[8]), STR_8(CODE[21]), 
		 -> STR_7(CODE[21]), STR_6(CODE[21]), STR_5(CODE[21]), STR_3(CODE[21]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    ler_sensor@ptr	PTR unsigned char  size(1) Largest target is 1
		 -> main@vetorIn(BANK1[1]), 

    set_passo@ptr	PTR unsigned char  size(1) Largest target is 1
		 -> main@vetorOut(BANK1[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _irq in COMMON

    _irq->_intt1_1ms

Critical Paths under _main in BANK0

    _main->_printExec
    _teclado_borda->_teclado_scan
    _setT1->___wmul
    _serialIOscan->_serialIObyteShift
    _salvar_receita->___awmod
    _salvar_dado->___awmod
    _salva_atuadores_init->_ler_atuador
    _printExec->_dispLCD_num
    _posAtual->_fifo_lerPos
    _dispLCD_num->_dignum_tam
    _fifo_print->___awdiv
    _fifo_delete->_fifo_alinharPrint
    _fifo_add_tempo->_fifo_alinharPrint
    _fifo_add_control->_fifo_alinharPrint
    _fifo_add->_fifo_alinharPrint
    _fifo_alinharPrint->_dignum_tam
    _dignum_tam->___awdiv
    _dispLCD_str->_dispLCD_lincol
    _dispLCD_init->_delay
    _dispLCD_clr->_dispLCD_instReg
    _dispLCD->_dispLCD_lincol
    _dispLCD_lincol->_dispLCD_instReg
    _dignum_conc->___wmul
    _dignum_apagar->___lwdiv
    ___aldiv->___lmul
    _MCP4725->___aldiv
    _dac_write->_delay
    _dac_init->_delay
    _I2C_init->___lldiv

Critical Paths under _irq in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _irq in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _irq in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _irq in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                85    85      0   79571
                                             36 BANK0      4     4      0
                                              0 BANK1     62    62      0
                           _I2C_init
                            _MCP4725
                            ___aldiv
                            ___awmod
                             ___lmul
                             ___wmul
                      _addContCiclos
                    _addIndicePassos
                        _alt_atuador
                         _decodifica
                              _delay
                      _dignum_apagar
                        _dignum_conc
                            _dispLCD *
                        _dispLCD_clr *
                    _dispLCD_dataReg
                       _dispLCD_init
                     _dispLCD_lincol
                        _dispLCD_num *
                        _dispLCD_str *
                           _fifo_add
                     _fifo_add_ciclo
                   _fifo_add_control
                     _fifo_add_tempo
                          _fifo_adrs
                        _fifo_delete
                    _fifo_disponivel
                        _fifo_indice
               _fifo_indicePrint_dec
               _fifo_indicePrint_inc
                        _fifo_lerPos
                         _fifo_print
                           _fifo_tam
                          _getCiclos
                      _getContCiclos
                    _getIndicePassos
                       _initSerialIO
                     _init_atuadores
                        _ler_atuador
                         _ler_sensor
                          _printExec
                    _resetContCiclos
                  _resetIndicePassos
               _salva_atuadores_init
                        _salvar_dado
                     _salvar_receita *
                       _serialIOscan
                              _setT1
                          _set_passo
                           _statusT1
                      _teclado_borda
                       _teclado_init
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_borda                                        3     3      0     340
                                              7 BANK0      3     3      0
                       _teclado_scan
 ---------------------------------------------------------------------------------
 (2) _teclado_scan                                         7     7      0     204
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _statusT1                                             4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _set_passo                                            4     3      1     369
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _setT1                                                4     0      4     391
                                              6 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _serialIOscan                                         6     6      0     300
                                              4 BANK0      6     6      0
                  _serialIObyteShift
                       _serialIOload
 ---------------------------------------------------------------------------------
 (2) _serialIOload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialIObyteShift                                    4     4      0     167
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _salvar_receita                                       7     5      2    1349
                                              7 BANK0      7     5      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
                          _fifo_adrs (ARG)
 ---------------------------------------------------------------------------------
 (1) _salvar_dado                                          7     5      2    1300
                                              7 BANK0      7     5      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _end_receita                                          4     2      2     571
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         2     1      1     422
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _salva_atuadores_init                                 8     8      0     355
                                              3 BANK0      8     8      0
                        _ler_atuador
 ---------------------------------------------------------------------------------
 (2) _ler_atuador                                          3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetIndicePassos                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _resetContCiclos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printExec                                           11    10      1   15248
                                             25 BANK0     11    10      1
                         _decodifica
                         _dignum_tam
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _dispLCD_num
                           _posAtual
 ---------------------------------------------------------------------------------
 (2) _posAtual                                             3     3      0      99
                                              1 BANK0      3     3      0
                        _fifo_lerPos
                    _getIndicePassos
 ---------------------------------------------------------------------------------
 (3) _getIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fifo_lerPos                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _dispLCD_num                                         12     7      5    8970
                                             13 BANK0     12     7      5
                            ___awdiv
                            ___awmod
                         _dignum_tam (ARG)
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _fifo_indice (ARG)
                           _fifo_tam (ARG)
                      _getContCiclos (ARG)
                    _getIndicePassos (ARG)
 ---------------------------------------------------------------------------------
 (1) _ler_sensor                                           4     3      1     369
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_atuadores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSerialIO                                         4     2      2     309
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _getContCiclos                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getCiclos                                            6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _fifo_tam                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_print                                          10    10      0    7140
                                              9 BANK0     10    10      0
                            ___awdiv
                            ___awmod
                         _decodifica
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1693
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_inc                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_dec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_indice                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_disponivel                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_delete                                          2     2      0    4506
                                             19 BANK0      2     2      0
                        _alt_atuador
                           _codifica
                         _decodifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _decodifica                                           3     3      0     727
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _alt_atuador                                          3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _fifo_adrs                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_add_tempo                                       2     2      0    3907
                                             19 BANK0      2     2      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_control                                     2     2      0    3876
                                             19 BANK0      2     2      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_ciclo                                       3     1      2     152
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add                                             2     2      0    3907
                                             19 BANK0      2     2      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _fifo_alinharPrint                                    6     6      0    2985
                                             13 BANK0      6     6      0
                         _dignum_tam
 ---------------------------------------------------------------------------------
 (2) _dignum_tam                                           4     2      2    2527
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1705
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _codifica                                             5     3      2     763
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _dispLCD_str                                          5     3      2    2093
                                              8 BANK0      5     3      2
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (1) _dispLCD_init                                         0     0      0    1542
                              _delay
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD_clr                                          0     0      0     248
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD                                              6     2      4    5439
                                              8 BANK0      6     2      4
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) _dispLCD_lincol                                       5     4      1    1703
                                              3 BANK0      5     4      1
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (4) _dispLCD_instReg                                      3     3      0     248
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _dispLCD_dataReg                                      2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _dignum_conc                                          6     5      1     859
                                              6 BANK0      6     5      1
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     496
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _dignum_apagar                                        1     1      0     591
                                              8 BANK0      1     1      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _addIndicePassos                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _addContCiclos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     625
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _MCP4725                                              2     0      2    4487
                                             28 BANK0      2     0      2
                           _I2C_stop
                            ___aldiv (ARG)
                             ___lmul (ARG)
                           _dac_init
                          _dac_write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_write                                            4     2      2    1657
                                              4 BANK0      4     2      2
                    _I2C_ack_receive
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_init                                             0     0      0    1325
                    _I2C_ack_receive
                          _I2C_start
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                4     2      2    1294
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _I2C_tx                                               1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ack_receive                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             4     0      4     542
                                             14 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     421
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _irq                                                  2     2      0       0
                                              4 COMMON     2     2      0
                          _intt1_1ms
 ---------------------------------------------------------------------------------
 (6) _intt1_1ms                                            4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     ___lldiv
   _MCP4725
     _I2C_stop
     ___aldiv (ARG)
       ___lmul (ARG)
     ___lmul (ARG)
     _dac_init (ARG)
       _I2C_ack_receive
       _I2C_start
       _I2C_tx
       _delay
     _dac_write (ARG)
       _I2C_ack_receive
       _I2C_tx
       _delay
     _delay (ARG)
   ___aldiv
     ___lmul (ARG)
   ___awmod
   ___lmul
   ___wmul
   _addContCiclos
   _addIndicePassos
   _alt_atuador
   _decodifica
   _delay
   _dignum_apagar
     ___lwdiv
   _dignum_conc
     ___wmul
   _dispLCD *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _dispLCD_clr *
     _dispLCD_instReg
   _dispLCD_dataReg *
   _dispLCD_init *
     _delay
     _dispLCD_instReg
   _dispLCD_lincol *
     _dispLCD_instReg
   _dispLCD_num *
     ___awdiv
     ___awmod
     _dignum_tam (ARG)
       ___awdiv
     _dispLCD_dataReg (ARG)
     _dispLCD_lincol (ARG)
       _dispLCD_instReg
     _fifo_indice (ARG)
     _fifo_tam (ARG)
     _getContCiclos (ARG)
     _getIndicePassos (ARG)
   _dispLCD_str *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_add *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_ciclo *
   _fifo_add_control *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_tempo *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_adrs *
   _fifo_delete *
     _alt_atuador
     _codifica
     _decodifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_disponivel *
   _fifo_indice *
   _fifo_indicePrint_dec *
   _fifo_indicePrint_inc *
   _fifo_lerPos *
   _fifo_print *
     ___awdiv
     ___awmod
     _decodifica
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_tam *
   _getCiclos *
   _getContCiclos *
   _getIndicePassos *
   _initSerialIO *
   _init_atuadores *
   _ler_atuador *
   _ler_sensor *
   _printExec *
     _decodifica
     _dignum_tam
       ___awdiv
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
     _dispLCD_num
       ___awdiv
       ___awmod
       _dignum_tam (ARG)
         ___awdiv
       _dispLCD_dataReg (ARG)
       _dispLCD_lincol (ARG)
         _dispLCD_instReg
       _fifo_indice (ARG)
       _fifo_tam (ARG)
       _getContCiclos (ARG)
       _getIndicePassos (ARG)
     _posAtual
       _fifo_lerPos
       _getIndicePassos
   _resetContCiclos *
   _resetIndicePassos *
   _salva_atuadores_init *
     _ler_atuador
   _salvar_dado *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
   _salvar_receita *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
     _fifo_adrs (ARG)
   _serialIOscan *
     _serialIObyteShift
     _serialIOload
   _setT1 *
     ___wmul (ARG)
   _set_passo *
   _statusT1 *
   _teclado_borda *
     _teclado_scan
   _teclado_init *
   _timer1_init *

 _irq (ROOT)
   _intt1_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      24       9       37.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     3E      4A       7       92.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     28      48       5       90.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C2      12        0.0%
ABS                  0      0      C2       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Mon Nov 15 10:55:52 2021

            ??_fifo_add_control 0033                   dac_write@code 0024                ??_fifo_add_tempo 0033  
 __size_of_fifo_indicePrint_dec 000B   __size_of_fifo_indicePrint_inc 002E                               pc 0002  
                   _SSPSTATbits 0094                              l13 111C                              l18 1FFF  
                            l35 1954                              l60 1C75                              l71 1BE4  
                            l57 12EA                              l68 1CA6                              l92 07B1  
                            l77 1DBE                              l94 07FE                              l97 1849  
                  ___awdiv@sign 0026         __end_of_dispLCD_dataReg 1C76                              fsr 0004  
           ___wmul@multiplicand 0022                    printExec@col 0042                    printExec@ind 0039  
                salvar_dado@col 0027                  salvar_dado@aux 002C              __size_of_I2C_start 000A  
                           l105 1E3A                             l210 1821                             l203 100C  
                           l213 0A00                             l141 1903                             l222 1826  
                           l135 198A                             l400 1BB4                             l216 1972  
                           l232 1B85                             l225 1842                             l241 1CDE  
                           l137 198E                             l306 14B8                             l138 1990  
                           l154 19F1                             l146 1CD9                             l403 19AF  
                           l243 1CE5                             l219 1850                             l420 136E  
                           l244 1CEC                             l324 126B                             l341 1892  
                           l245 1CF3                             l334 1C44                             l246 1D10  
                           l350 181F                             l423 191A                             l431 17FF  
                           l416 1348                             l344 182A                             l256 105A  
                           l409 1A35                             l329 1C14                             l281 181D  
                           l361 18A8                             l249 182F                             l338 1AFC  
                           l258 1066                             l347 189D                             l275 1869  
                           l460 1A63                             l357 1B57                             l373 0FF9  
                           l461 1A6C                             l533 18DC                             l462 1A6D  
                           l287 1FA6                             l439 17FF                             l471 1D82  
                           l384 0F8E                             l464 1A7D                             l456 1834  
                           l536 18CB                             l465 1A7F                             l481 1858  
                           l474 1D47                             l539 18B3                             l491 1F59  
                           l397 0FFF                             l910 187C                             l830 0465  
                           l911 187D                             l807 0278                             l496 1A0D  
                           l680 16A4                             l905 1AD1                             l497 1A12  
                           l673 04B3                             l931 1872                             l923 18B9  
                           l771 006A                             l932 1873                             l908 1877  
                           l748 0C03                             l926 18BF                             l790 0190  
                           l855 0646                             l944 1835                             l929 186D  
                           l882 1E7F                             l786 0187                             l947 183B  
                           l779 00D8                             l885 19D0                             l879 1DFB  
                           _IHM 00DE                             _irq 191B                             fsr0 0004  
                           indf 0000         __end_of_dispLCD_instReg 12EB                    ___awmod@sign 0026  
               __end_of_MCP4725 19D1                 salvar_dado@data 0028                 salvar_dado@adrs 002B  
              alt_atuador@tecla 0022                            l1041 1A8E                            l1106 1383  
                          l1043 1AA6                            l1116 140B                            l1055 1F0D  
                          l1207 10C1                            l1313 1EC5                            l1077 1184  
                          l1194 11ED                            l7001 1E80                            l7011 1E98  
                          l7003 1E84                            l7021 1EBB                            l7013 1E9C  
                          l7005 1E8A                            l4461 1F12                            l7015 1EAD  
                          l7007 1E8D                            l7023 1EC1                            l7031 10CB  
                          l7017 1EB3                            l7009 1E94                            l7121 1BB5  
                          l7105 1FDB                            l7113 1FDD                            l7041 10ED  
                          l7033 10D3                            l4481 1F53                            l4473 1F25  
                          l4465 1F19                            l8001 0C7E                            l7019 1EB4  
                          l7131 1BBE                            l7123 1BB8                            l7203 184A  
                          l7211 182B                            l7043 10F2                            l7035 10D8  
                          l7027 10C5                            l4475 1F34                            l4467 1F24  
                          l4459 1F0E                            l8011 0CC5                            l6501 127D  
                          l7141 1BD2                            l7133 1BBF                            l7125 1BBB  
                          l7301 1827                            l7221 1038                            l7213 100D  
                          l7037 10E0                            l7029 10C6                            l4477 1F49  
                          l4485 1F58                            l8101 01A4                            l8021 0D34  
                          l8013 0D1A                            l8005 0C87                            l6511 129E  
                          l6503 1283                            l7151 1D94                            l7143 1BD8  
                          l7135 1BC0                            l7127 1BBC                            l7063 1FB1  
                          l7055 1FAA                            l7207 1824                            l7231 105E  
                          l7223 1047                            l7215 1017                            l7039 10E5  
                          l7047 10FA                            l4479 1F4D                            l8111 020C  
                          l8103 01C2                            l8031 0DFA                            l8023 0D3A  
                          l8015 0D23                            l8007 0CBD                            l7209 183C  
                          l6601 1C62                            l6521 12BD                            l6513 12A7  
                          l6505 1289                            l7153 1DA2                            l7145 1BDE  
                          l7137 1BC3                            l7129 1BBD                            l7161 1DFC  
                          l7305 1893                            l7321 1B53                            l7313 1B2A  
                          l7401 0F32                            l7081 1FC3                            l7057 1FAB  
                          l7233 1060                            l7225 1048                            l7217 1022  
                          l8201 03CC                            l8113 0215                            l8105 01CA  
                          l8033 006F                            l8025 0DE5                            l8017 0D29  
                          l6603 1C6A                            l6531 12CF                            l6515 12A8  
                          l6523 12C0                            l6507 1294                            l6611 1C80  
                          l7155 1DAA                            l7147 1D83                            l7139 1BCC  
                          l7171 1E1F                            l7163 1DFF                            l7251 1F73  
                          l7243 1F5A                            l7323 189E                            l7315 1B32  
                          l7403 0F4B                            l7331 0E18                            l7075 1FBD  
                          l7235 1065                            l7227 104D                            l7219 102D  
                          l8211 0427                            l8203 03DB                            l8131 0263  
                          l8115 0221                            l8107 01DA                            l8051 00BB  
                          l8035 0076                            l8043 008B                            l8027 0DEC  
                          l8019 0D2C                            l6605 1C72                            l6533 12D5  
                          l6525 12C1                            l6517 12B5                            l6509 129B  
                          l6613 1C85                            l7157 1DAE                            l7149 1D89  
                          l7165 1E07                            l7173 1E27                            l6541 1188  
                          l7261 1BF3                            l7253 1F9A                            l7245 1F61  
                          l7325 18A6                            l7317 1B44                            l7421 0F95  
                          l7405 0F51                            l7413 0F7B                            l7341 0E3B  
                          l7333 0E1F                            l7309 181E                            l7093 1FCF  
                          l7069 1FB7                            l6701 0744                            l7501 17B8  
                          l7229 1055                            l8301 063E                            l8221 0456  
                          l8213 0430                            l8205 03E4                            l8141 02D8  
                          l8133 026B                            l8117 022E                            l8125 023B  
                          l8109 01F9                            l8061 00EC                            l8053 00C9  
                          l8045 00A3                            l8037 007A                            l8029 0DF4  
                          l6535 12E0                            l6527 12C9                            l6519 12B6  
                          l6607 1C79                            l7159 1843                            l7167 1E0D  
                          l6551 119C                            l6543 118C                            l7263 1BFD  
                          l7271 1C18                            l7239 181C                            l7247 1F67  
                          l7255 1FA1                            l7319 1B4B                            l7423 0F9B  
                          l7415 0F81                            l7407 0F67                            l7351 0E57  
                          l7343 0E3F                            l7335 0E26                            l7327 0E0F  
                          l7087 1FC9                            l6711 0784                            l6703 075B  
                          l7511 17D4                            l7503 17BD                            l7191 19E6  
                          l7183 1CBC                            l7175 1CA7                            l8311 0678  
                          l8303 064F                            l8231 0481                            l8223 0461  
                          l8215 043C                            l8151 0318                            l8135 0278  
                          l8127 024D                            l8119 0235                            l8071 013F  
                          l8063 00F4                            l8055 00D4                            l8047 00AF  
                          l8039 0082                            l7601 1AA7                            l7193 1000  
                          l6537 12E7                            l6529 12CA                            l6609 1C7B  
                          l6617 1C8A                            l7169 1E14                            l6561 11B2  
                          l6553 11A0                            l6545 1191                            l6641 1A34  
                          l6633 1A13                            l7265 1C07                            l7257 1BE8  
                          l7281 1C3B                            l7273 1C1E                            l6801 120F  
                          l7249 1F69                            l7441 0FDF                            l7425 0F9F  
                          l7417 0F87                            l7409 0F6E                            l7361 0E85  
                          l7353 0E5D                            l7345 0E44                            l7337 0E2C  
                          l7329 0E14                            l6721 07F1                            l6705 075D  
                          l6713 0788                            l6625 1820                            l7513 17F8  
                          l7505 17C1                            l7185 1CCD                            l7177 1CBB  
                          l7521 1D58                            l8313 0681                            l8305 0654  
                          l8241 0499                            l8233 0487                            l8217 0442  
                          l8225 046D                            l8209 03F4                            l8153 031B  
                          l8137 02A0                            l8129 0255                            l8081 0164  
                          l8073 0147                            l8065 00FA                            l8049 00B5  
                          l8057 00E0                            ?_irq 0070                            l7603 1AAB  
                          l7611 19B0                            l7195 1008                            l6619 1C9D  
                          l6571 11D2                            l6563 11B6                            l6555 11A2  
                          l6547 1193                            l6539 1185                            l6635 1A17  
                          l7267 1C0B                            l7259 1BEE                            l7291 1AEF  
                          l7275 1C23                            l7283 1C3F                            l6811 1232  
                          l6803 1216                            l6651 1067                            l7443 0FE5  
                          l7427 0FA4                            l7419 0F8E                            l7435 0FAF  
                          l7371 0EC6                            l7355 0E63                            l7363 0E8B  
                          l7347 0E47                            l7451 0FF9                            l7339 0E33  
                          l7531 1D20                            l7099 1FD5                            l6715 079C  
                          l6707 0770                            l7507 17C8                            l6731 1989  
                          l6723 1976                            l7187 1CD3                            l7523 1D73  
                          l7515 1D48                            l8315 0688                            l8323 06B7  
                          l8307 066A                            l8243 04AA                            l8235 0490  
                          l8227 0473                            l8219 0448                            l8171 0358  
                          l8163 032A                            l8139 02CF                            l8147 02E3  
                          l8083 016A                            l8067 0103                            l8059 00E6  
                          l8251 051C                            l7605 1AB1                            l6645 1874  
                          l7613 19C0                            l7621 1ED4                            l7461 1994  
                          l6573 11D9                            l6565 11BA                            l6557 11A8  
                          l6549 1197                            l6637 1A2A                            l7269 1C0F  
                          l7293 1AF3                            l7285 1AD5                            l7277 1C2D  
                          l6813 1239                            l6805 121D                            l6661 1079  
                          l6653 106A                            l7445 0FEC                            l7429 0FA8  
                          l7437 0FD3                            l7381 0EE6                            l7373 0ECD  
                          l7365 0E91                            l7357 0E79                            l7349 0E4D  
                          l7541 1D2D                            l7533 1D21                            l6717 07A4  
                          l6709 077E                            l6629 1864                            l7509 17CE  
                          l7197 09FA                            l6725 1977                            l6733 18F0  
                          l7189 19D4                            l7525 1D77                            l7517 1D4F  
                          l8317 06A4                            l8309 0673                            l8261 054B  
                          l8253 0522                            l8229 0479                            l8181 0369  
                          l8165 0344                            l8157 0322                            l8149 0310  
                          l8093 0196                            l8085 0178                            l8077 0152  
                          l8069 0136                            l7607 1ACD                            l6647 18B7  
                          l6583 1938                            l7615 19C5                            l7631 136F  
                          l7623 1EEB                            l6591 1C49                            l6831 1424  
                          l6567 11CB                            l6559 11AB                            l6575 11DF  
                          l6639 1A2E                            l6903 1367                            l7287 1ADB  
                          l7295 1AF7                            l7279 1C37                            l6815 1240  
                          l6807 1224                            l6671 1092                            l6663 107E  
                          l6655 106E                            l7447 0FF2                            l7439 0FD9  
                          l7391 0F04                            l7383 0EEC                            l7367 0EAA  
                          l7359 0E7F                            l7199 1955                            l7551 1D3F  
                          l7543 1D30                            l7535 1D24                            l6719 07AB  
                          l6911 1907                            l7471 1708                            l7463 16E1  
                          l6751 1B62                            l6727 1981                            l7527 1D7D  
                          l7519 1D54                            l8319 06B1                            l8271 056D  
                          l8263 0551                            l8255 0527                            l8327 06BB  
                          l8191 0396                            l8183 036A                            l8167 034F  
                          l8159 0323                            l8175 0361                            l8095 019D  
                          l8087 0183                            l8079 015E                            l7609 1ACE  
                          l6649 1835                            l6585 1939                            l7641 1396  
                          l7633 1372                            l7625 1EF4                            l7617 1EC6  
                          l6593 1C56                            l6497 126F                            l6841 1456  
                          l6833 142E                            l6825 140F                            l6577 11E4  
                          l6569 11D1                            l6905 136B                            l7297 1888  
                          l7289 1AE5                            l6809 122B                            l6673 1096  
                          l6665 1084                            l6681 10B3                            l6657 1073  
                          l7393 0F1A                            l7385 0EF2                            l7369 0EB0  
                          l7377 0EDA                            l7553 1D42                            l7545 1D33  
                          l7537 1D27                            l7529 1D14                            l6913 1919  
                          l7481 1743                            l7473 170C                            l7465 16EC  
                          l6745 1B5F                            l6737 1B5B                            l6729 1984  
                          l6921 1A61                            l7561 1854                            l8281 05CA  
                          l8273 0573                            l8265 0556                            l8257 0535  
                          l8177 0362                            l8089 0190                            l7801 1665  
                          l8249 04B3                            l6587 194C                            l7651 13BA  
                          l7643 139E                            l7635 1376                            l7627 1F05  
                          l7619 1ED0                            l7459 1B89                            l6595 1C57  
                          l6499 1270                            l6851 147E                            l6843 1460  
                          l6835 1438                            l6827 1410                            l6579 11E9  
                          l7299 188E                            l6819 1244                            l6683 10B8  
                          l6675 10A0                            l6667 1087                            l6659 1075  
                          l7395 0F20                            l7387 0EF8                            l7379 0EE0  
                          l7555 1D45                            l7547 1D36                            l7539 1D2A  
                          l6691 0725                            l7483 1749                            l7491 178B  
                          l7475 1730                            l7467 16F1                            l6763 1B6D  
                          l6739 1B5C                            l6771 1B6F                            l6931 1A76  
                          l6923 1A64                            l7571 1A09                            l7563 19F2  
                          l8291 0614                            l8283 05CC                            l8275 05B5  
                          l8267 055F                            l8259 0546                            l8195 039F  
                          l8187 0371                            l7811 1692                            l7803 1666  
                          l6941 1DC4                            l7661 13ED                            l7653 13C3  
                          l7645 13A6                            l7637 1387                            l6597 1C5E  
                          l6589 1C48                            l6845 146A                            l6837 1442  
                          l6829 141A                            l6685 10BD                            l6677 10A6  
                          l6669 108E                            l7397 0F26                            l7389 0EFE  
                          l7557 1D46                            l7549 1D3C                            l6693 072A  
                          l6909 1907                            l7493 1791                            l7485 175C  
                          l7469 16F7                            l7477 1737                            l6757 1B67  
                          l6925 1A6A                            l6933 1A78                            l6917 1830  
                          l7565 19F5                            l7581 18D2                            l8285 05EE  
                          l8277 05BE                            l8269 0567                            l8189 038B  
                          l7901 0A84                            l7821 16B8                            l6943 1DCF  
                          l6951 1E3B                            l7655 13D5                            l7647 13A9  
                          l7663 13F3                            l7639 1392                            l6599 1C61  
                          l6847 1474                            l6839 144C                            l6855 14A5  
                          l6871 12EE                            l6783 1CFA                            l6791 11F1  
                          l6679 10AD                            l7399 0F2C                            l6695 072F  
                          l7495 1797                            l7487 1760                            l7479 173D  
                          l6935 1A7E                            l6927 1A71                            l6919 1A5D  
                          l7567 19FF                            l7559 1851                            l7591 18DB  
                          l7583 18D4                            l7575 18CC                            l8295 0624  
                          l8279 05C4                            l8287 05F7                            l8199 03A8  
                          l7911 0AAE                            l7903 0A8A                            l7831 14D8  
                          l7823 16D0                            l7815 169B                            l7807 166D  
                          l7751 15E9                            l6961 186A                            l6945 1DDA  
                          l6953 1E4E                            l7665 13F8                            l7657 13E3  
                          l7649 13B6                            l6881 1308                            l6873 12F3  
                          l6697 0739                            l6689 071A                            l7497 17A9  
                          l7489 1784                            l6929 1A75                            l7593 18C0  
                          l7569 1A04                            l7585 18D6                            l7577 18CF  
                          l8289 060B                            l7921 0AF3                            l7913 0AB4  
                          l7905 0A90                            l7841 150B                            l7833 14E3  
                          l7825 16D3                            l7809 1687                            l7761 1603  
                          l7753 15EA                            l7745 15BE                            l6947 1DE5  
                          l6939 1DBF                            l6955 1E53                            l7667 1403  
                          l7659 13E4                            l6971 1A9C                            l6963 1A80  
                          l6891 133E                            l6883 131A                            l6779 1CDD  
                          l6795 11FB                            l6699 073F                            l7499 17B2  
                          l7595 18CA                            l7587 18D7                            l7579 18D1  
                          l8299 0636                            l7931 0B2D                            l7923 0AFA  
                          l7915 0ABA                            l7907 0A9C                            l7851 1545  
                          l7843 151C                            l7827 14B9                            l7835 14EB  
                          l7819 16A9                            l7771 1614                            l7763 1604  
                          l7755 15EB                            l7747 15E6                            l6981 1132  
                          l6949 1DF0                            l6957 1E5E                            l6973 1AA2  
                          l6965 1A84                            l6893 1344                            l6885 1320  
                          l6877 12FA                            l6869 12EB                            l6797 1203  
                          l7597 18A9                            l7589 18DA                            l7941 0B66  
                          l7933 0B33                            l7925 0B00                            l7917 0AC5  
                          l7909 0AA7                            l7853 154E                            l7845 1523  
                          l7837 14F3                            l7829 14D0                            l7773 1617  
                          l7765 160C                            l7757 15EC                            l7749 15E6  
                          l6991 116C                            l6983 113F                            l6959 1E6F  
                          l6967 1A88                            l6895 134E                            l6887 1326  
                          l6879 1302                            l6799 1208                            l7951 0BA0  
                          l7943 0B6D                            l7935 0B3A                            l7927 0B07  
                          l7919 0AD4                            l7871 15B5                            l7863 157A  
                          l7855 155D                            l7847 1528                            l7839 1502  
                          l7791 1654                            l7783 1626                            l7767 160E  
                          l7759 15FB                            l6993 116D                            l6985 1143  
                          l6977 111D                            l6969 1A95                            l6897 1360  
                          l6889 1338                            l8921 0095                            l7961 0BD5  
                          l7945 0B8C                            l7937 0B59                            l7929 0B26  
                          l7881 0A30                            l7873 0A01                            l7865 158C  
                          l7857 1564                            l7849 1536                            l7785 1640  
                          l7777 161E                            l7769 1610                            l6995 1176  
                          l6987 114C                            l6979 112F                            l8931 06C7  
                          l8923 01AE                            l7971 0C0F                            l7963 0BDB  
                          l7947 0B93                            l7939 0B60                            l7891 0A5A  
                          l7883 0A36                            l7875 0A12                            l7867 1594  
                          l8915 1584                            l7859 1571                            l7787 164B  
                          l7779 161F                            l7795 165D                            l6989 115E  
                          l6997 117C                            l8941 124E                            l8933 1102  
                          l8925 0245                            l7981 0C4C                            l7973 0C24  
                          l7965 0BEB                            l8917 0BB1                            l7949 0B99  
                          l7957 0BA7                            l7893 0A60                            l7885 0A3C  
                          l7877 0A1E                            l7869 15A4                            l7797 165E  
                          l8943 1D02                            l8935 1B77                            l8927 02ED  
                          l8919 0C91                            l7975 0C2C                            l7967 0BF4  
                          l7959 0BC9                            l7895 0A66                            l7887 0A48  
                          l7879 0A29         __end_of_getIndicePassos 1822                            l8945 148B  
                          l8937 1FE5                            l8929 04BF                            l7993 0C65  
                          l7985 0C52                            l7977 0C3D                            l7969 0C03  
                          l7897 0A72                            l7889 0A53                            l8947 14AD  
                          l8939 0FB9                            l7979 0C43                            l7899 0A7D  
                          l8949 1C92                            l7997 0C6B                            l7989 0C58  
                          l7999 0C74                            STR_1 09F8                            STR_2 08F2  
                          STR_3 091E                            STR_4 0800                            STR_5 0987  
                          STR_6 095D                            STR_7 0972                            STR_8 099C  
                          STR_9 09F0                            u5000 1CF8                            u5001 1CF6  
                          u5100 1344                            u5020 11FA                            u5101 1343  
                          u5021 11F9                            u5110 134E                            u5014 1CF9  
                          u5030 1203                            u5111 134D                            u5031 1202  
                          u6000 13F3                            u5040 141A                            u5120 1366  
                          u6001 13F2                            u5041 1419                            u5121 1365  
                          u6010 13F8                            u5050 12F9                            u5130 1A6A  
                          u6011 13F7                            u5051 12F8                            u5131 1A69  
                          u5300 1E8A                            u5220 1AA2                            u5060 1308  
                          u5140 1A71                            u6100 1664                            u5301 1E89  
                          u5221 1AA1                            u5205 1A8F                            u5061 1307  
                          u5141 1A70                            u6101 1663                            u5230 112F  
                          u5070 1320                            u5150 1A7D                            u6110 166C  
                          u5231 112E                            u5215 1A96                            u5071 131F  
                          u5151 1A7C                            u6111 166B                            u5320 1E9C  
                          u4600 1197                            u5080 1326                            u5400 1CD9  
                          u6200 0AF3                            u6120 16C2                            u5321 1E9B  
                          u4601 1196                            u5081 1325                            u5401 1CD8  
                          u6201 0AF2                            u5250 1143                            u5410 1008  
                          u4530 1283                            u4610 11A8                            u5090 133E  
                          u6210 0B26                            u6130 14F3                            u5251 1142  
                          u5411 1007                            u5315 1E8E                            u4531 1282  
                          u4611 11A7                            u5091 133D                            u6211 0B25  
                          u6131 14F2                            u5180 1872                            u5340 1EAD  
                          u4540 1289                            u5500 1C1E                            u2940 1F18  
                          u6300 0082                            u6220 0B59                            u6140 151C  
                          u5245 1134                            u5181 1871                            u5165 1E42  
                          u5341 1EAC                            u4541 1288                            u4525 1273  
                          u5501 1C1D                            u2941 1F17                            u6301 0081  
                          u6221 0B58                            u6141 1519                            u5270 115E  
                          u5190 1A88                            u4550 12A7                            u4630 11BA  
                          u4710 1A34                            u5510 1C23                            u5430 1055  
                          u6310 00B5                            u6230 0B8C                            u6150 155D  
                          u5271 115D                            u5175 1E63                            u5335 1E9D  
                          u5191 1A87                            u4551 12A6                            u4631 11B9  
                          u4711 1A33                            u5511 1C22                            u5431 1054  
                          u6311 00B4                            u6231 0B8B                            u6151 155C  
                          u4720 187C                            u5360 1EC1                            u5520 1ADB  
                          u4800 10A0                            u5600 0E4D                            u5440 1065  
                          u6400 0329                            u6320 00BB                            u6240 0C0F  
                          u6160 0A29                            u6080 161D                            u5265 1145  
                          u4721 187B                            u5361 1EC0                            u5345 1EA9  
                          u4705 1C4C                            u4625 11AC                            u5521 1ADA  
                          u4801 109F                            u5601 0E4C                            u5425 195F  
                          u5441 1064                            u6401 0328                            u6321 00BA  
                          u6241 0C0C                            u6161 0A28                            u6081 161C  
                          u5290 117C                            u4730 18BF                            u4570 12CF  
                          u5370 1DBE                            u4650 11CB                            u5450 1F61  
                          u5530 189C                            u5610 0E57                            u2970 1F34  
                          u2954 1F1F                            u6410 0368                            u6330 00D4  
                          u6250 0C24                            u6170 0A53                            u6090 1625  
                          u5291 117B                            u5275 115A                            u4731 18BE  
                          u5355 1EB5                            u4571 12CE                            u5371 1DBD  
                          u4651 11CA                            u5451 1F60                            u5531 189A  
                          u5611 0E56                            u2971 1F33                            u2955 1F1D  
                          u6411 0367                            u6331 00D3                            u6251 0C23  
                          u6171 0A52                            u6091 1624                            u4740 183B  
                          u4580 12D5                            u5380 1E0D                            u5460 1F67  
                          u5540 189D                            u4820 10B3                            u5700 0F87  
                          u5620 0E7F                            u4900 07A4                            u2964 1F2B  
                          u6500 0551                            u6420 0370                            u6340 00E6  
                          u6260 0C62                            u6180 0A7D                            u5285 116E  
                          u4741 183A                            u4581 12D4                            u4565 12AB  
                          u5381 1E0C                            u4645 11BB                            u5461 1F66  
                          u4821 10B2                            u4805 109C                            u5701 0F86  
                          u5621 0E7E                            u4901 07A3                            u2965 1F29  
                          u6501 0550                            u6421 036F                            u6341 00E5  
                          u6261 0C61                            u6181 0A7C                            u5390 1E3A  
                          u4670 11DF                            u4590 118C                            u5470 1F73  
                          u5550 1B32                            u4830 10B8                            u4750 106E  
                          u5710 0F9F                            u5630 0E91                            u4910 07AB  
                          u2990 1F53                            u6510 0556                            u6430 03F3  
                          u6350 00FA                            u6270 0D34                            u6190 0AA7  
                          u5391 1E39                            u4671 11DE                            u4655 11C7  
                          u4591 118B                            u5471 1F72                            u5551 1B31  
                          u4831 10B7                            u4815 10A7                            u4751 106D  
                          u5711 0F9E                            u5631 0E90                            u4911 07AA  
                          u2991 1F52                            u6511 0555                            u6431 03F2  
                          u6351 00F9                            u6271 0D33                            u6191 0AA6  
                          u4680 11E4                            u5480 1BEE                            u5560 1B44  
                          u4760 1079                            u5720 0FD9                            u5640 0EE0  
                          u4920 07FE                            u4840 0721                            u5800 1791  
                          u6600 0688                            u6520 0567                            u6440 0442  
                          u6360 0164                            u6280 0D3A                            u4681 11E3  
                          u4665 11D3                            u5481 1BED                            u5561 1B43  
                          u4761 1078                            u5721 0FD8                            u5641 0EDF  
                          u4921 07FD                            u4841 071F                            u5801 1790  
                          u2985 1F37                            u6601 0687                            u6521 0566  
                          u6441 0441                            u6361 0163                            u6281 0D39  
                          u4690 1954                            u5490 1BF3                            u5570 18A6  
                          u4770 1084                            u5730 0FFF                            u5650 0EE6  
                          u4850 0722                            u5810 1797                            u4930 198E  
                          u6610 06A4                            u6530 056D                            u6450 0448  
                          u6370 016A                            u6290 0DEC                            u4691 1953  
                          u5491 1BF2                            u5571 18A5                            u4771 1083  
                          u5731 0FFE                            u5651 0EE5                            u5811 1796  
                          u4931 198D                            u6611 06A3                            u6531 056C  
                          u6451 0447                            u6371 0169                            u6291 0DEB  
                          u4940 1CE3                            u5660 0EF8                            u5580 0E26  
                          u4860 072A                            u5820 17B8                            u5740 16F1  
                          u6620 06B1                            u6540 05C4                            u6460 0461  
                          u6380 0183                            u4941 1CE1                            u5565 1B40  
                          u5661 0EF7                            u5581 0E25                            u4925 07FA  
                          u4861 0729                            u5821 17B7                            u5741 16F0  
                          u6621 06B0                            u6541 05C3                            u6461 0460  
                          u6381 0182                            u5910 1F05                            u4790 1096  
                          u5670 0F20                            u5590 0E44                            u4870 075B  
                          u5830 17CE                            u5750 16F7                            u6550 05CA  
                          u6470 0473                            u6390 0321                            u5911 1F04  
                          u4791 1095                            u5671 0F1F                            u5591 0E43  
                          u4871 075A                            u5831 17CD                            u5751 16F6  
                          u6615 06A0                            u6551 05C9                            u6471 0472  
                          u6391 0320                            u5920 1376                            u4960 1CEA  
                          u5680 0F32                            u4880 077D                            u5760 1708  
                          u5840 1D7D                            u6560 0623                            u6480 0487  
                          u5921 1375                            u5905 1EF5                            u4961 1CE8  
                          u4785 1088                            u5681 0F31                            u4881 077C  
                          u5761 1707                            u5841 1D7C                            u6561 0622  
                          u6481 0486                            u5930 1387                            u4954 1CE4  
                          u5690 0F81                            u4890 079C                            u5770 173D  
                          u5850 1A04                            u6570 0635                            u6490 054B  
                          u6707 193F                            u5931 1386                            u5691 0F80  
                          u4891 079B                            u5771 173C                            u5851 1A03  
                          u6571 0634                            u6491 054A                            u5940 13A6  
                          u4980 1CF1                            u5780 1743                            u5860 1A09  
                          u6580 063E                            u5941 13A5                            u6637 128F  
                          u4981 1CEF                            u4885 0779                            u5781 1742  
                          u5861 1A08                            u6581 063D                            u5870 1ED4  
                          u4974 1CEB                            u5790 175C                            u6590 066A  
                          u5871 1ED3                            u6647 1298                            u4895 0798  
                          u5791 175B                            u6591 0669                            u5960 13BA  
                          u5961 13B9                            u5881 1EDD                            u6657 12BA  
                          u5882 1EE4                            u4994 1CF2                            u5955 13AB  
                          u5883 1EEB                            u6667 12DB                            u5980 13D5  
                          u5981 13D4                            u6677 12E4                            u5975 13BC  
                          u5895 1EED                            u6687 1C5B                            u5985 13D1  
                          u6697 1C6F                            u5995 13E5                            _fila 0054  
                          _main 15BE                            btemp 007E                  ?_addContCiclos 0070  
              __end_of_I2C_init 1AD2                     main@vetorIn 00D3                            start 000C  
       __size_of_salvar_receita 0033               fp__salvar_receita 0067                __end_of_I2C_stop 1874  
             _formatar_receitas 0000                    ?_ler_atuador 0070                  printExec@passo 0043  
  __end_of_salva_atuadores_init 1067                           ??_irq 0074                 _addIndicePassos 1000  
          __end_of_EEPROM_write 1991                    main@auxPasso 00DC                 __end_of___aldiv 140C  
                         ?_main 0070                 __end_of___awdiv 11EE                           _EEADR 010D  
                         STR_10 0933                           _EEDAT 010C                           STR_11 08F4  
                         STR_12 09DB                           STR_20 0909                           STR_21 09C6  
                         STR_13 08DF                           STR_14 09B1                           STR_15 08A1  
                         STR_16 0853                           STR_17 09F8                           STR_18 08F2  
                         STR_19 0948                 __end_of___awmod 10C2                 __end_of___lldiv 1185  
               ___awdiv@divisor 0020                 __end_of___lwdiv 1EC6                           i1l530 1B29  
                         i1l528 1B28                           i1l663 1931                 ___awdiv@counter 0025  
                         _TMR1H 000F                           _TMR1L 000E                           _PORTD 0008  
                         _TRISD 0088             ___lmul@multiplicand 0024                 __end_of_dispLCD 1DBF  
             ??_fifo_disponivel 0020           __end_of_teclado_borda 1A13                           _delay 1938  
                         _setT1 18C0                 salvar_receita@i 002D                           main@i 00CB  
                         main@j 00CC                           fpbase 0057                           pclath 000A  
               _I2C_ack_receive 1835                    main@vetorOut 00D7                           status 0003  
             __end_of_I2C_start 187E                           wtemp0 007E                   _indice_passos 007B  
          __end_of_dispLCD_init 1BE5                 __initialization 000F                    __end_of_main 06E7  
              ?_dispLCD_dataReg 0070                          ??_main 0044                       ??_MCP4725 003E  
                 ?_initSerialIO 0020            __size_of_dispLCD_clr 0007            __size_of_dispLCD_num 00E5  
          __size_of_dispLCD_str 003F            __size_of_alt_atuador 0037                ?_dispLCD_instReg 0070  
                        ?_delay 0020                    ?_salvar_dado 0027                          ?_setT1 0026  
                        _EEADRH 010F                          _EECON2 018D                ___awdiv@dividend 0022  
                        _I2C_tx 18B4            __size_of_dignum_conc 002F                          _ANSELH 0189  
                        _EEPROM 00E3                ?_getIndicePassos 0070                          i1l5125 1AFD  
                        i1l5127 1B0B                          i1l5321 1928                          i1l5323 192B  
                        i1l5325 1930                          i1l5317 191B                          i1l5319 1922  
          __size_of_fifo_delete 004D                          u371_20 1B0B                          u371_21 1B0A  
              __end_of_dac_init 1DFC                          u372_20 1B27                          u372_25 1B1A  
                        u372_26 1B1B                          u372_27 1B20                          u372_28 1B21  
                        u372_29 1B26                 ??_addContCiclos 0020                          u395_20 1922  
                        u395_21 1921                          u396_20 1928                          u396_21 1927  
          __size_of_end_receita 0014            __size_of_fifo_indice 0004            __size_of_fifo_lerPos 0009  
                        _SSPADD 0093                          _SSPBUF 0013                __end_of__fptable 006A  
                 main@init_cond 00C8                 ler_sensor@passo 0023                __end_of_codifica 14B9  
              __end_of_fifo_add 1C15                __end_of_fifo_tam 1820         __end_of_addIndicePassos 100D  
                        _t1cont 0048                          ___lmul 1EC6                       ??___aldiv 0035  
                        ___wmul 1A80                       ??___awdiv 0024                       ??___awmod 0024  
                        _ciclos 0078                       ??___lldiv 0028               _fifo_alinharPrint 12EB  
                  ?_timer1_init 0070                       ??___lwdiv 0024                          delay@t 0020  
              ___awdiv@quotient 0027                          _teclas 01A4                 ___awmod@divisor 0020  
            ?_fifo_alinharPrint 0070                       ??_dispLCD 002C                 ___awmod@counter 0025  
                ??_initSerialIO 0022               entry__dispLCD_clr 005B               entry__dispLCD_num 0064  
                        fptable 0052                  _buscar_receita 0000                __end_of_posAtual 191B  
                        setT1@c 0026                    __pdataCOMMON 007B                          fptotal 000C  
                        saved_w 007E                       ?_I2C_init 002E             ??_fifo_alinharPrint 002D  
                     ?_I2C_stop 0070         __end_of_I2C_ack_receive 183C           __end_of_getContCiclos 1851  
              __end_of_statusT1 18B4          salva_atuadores_init@pt 0028            _salva_atuadores_init 100D  
       __end_of__initialization 004E               _serialIObyteShift 1A5A                  _salvar_receita 1CA7  
       __size_of_dispLCD_lincol 0031              ?_serialIObyteShift 0070              __size_of_dac_write 0045  
     __end_of_fifo_alinharPrint 136F                  __pcstackCOMMON 0070           __size_of_EEPROM_write 001E  
      __size_of_resetContCiclos 0003                    __pidataBANK0 1822                    __pidataBANK1 187E  
                  __pidataBANK3 1A36                   __end_of_delay 1955                   __end_of_setT1 18CC  
             fifo_add_control@c 0034            __size_of_ler_atuador 002E             ??_serialIObyteShift 0020  
            __size_of_getCiclos 001E       __size_of_fifo_add_control 002B               initSerialIO@ptrIn 0023  
            __size_of_fifo_adrs 0002                         I2C_tx@b 0020                      ??_I2C_init 0032  
  __end_of_fifo_indicePrint_dec 18A9                      ??_I2C_stop 0020    __end_of_fifo_indicePrint_inc 1B58  
                       ??_delay 0022                         ??_setT1 002A              teclado_borda@tecla 0029  
                       ?_I2C_tx 0070           ?_salva_atuadores_init 0070                      __pbssBANK0 0048  
                    __pbssBANK1 00E8           __size_of_dispLCD_init 0030       __end_of_serialIObyteShift 1A80  
        __end_of_salvar_receita 1CDA                      _decodifica 11EE                   ?_teclado_init 0070  
                 ?_teclado_scan 0070              __size_of_intt1_1ms 002D                    _EEPROM_write 1973  
              teclado_borda@aux 0028           __end_of_dignum_apagar 19B0                      __pmaintext 15BE  
              ?_addIndicePassos 0070                  main@contPassos 00B4                         ?___lmul 0020  
                       ?___wmul 0020                      __pintentry 0004                 _fifo_disponivel 1893  
                ___lmul@product 0029         serialIObyteShift@dataIn 0021                      _dignum_tam 1A13  
            __size_of_set_passo 005B                         _MCP4725 19B0                       ?_dac_init 0070  
                    _fifo_print 0E0F              __size_of_printExec 0122                         _LCDbits 0006  
                  _dispLCD_init 1BB5                ?_I2C_ack_receive 0070               __end_of_dac_write 1E80  
                     ?_codifica 0020                       ?_fifo_add 0070                       ?_fifo_tam 0070  
               __size_of_I2C_tx 000C                      __stringtab 1800            __size_of_salvar_dado 0021  
                ??_teclado_init 0020                  ??_teclado_scan 0020                 ?_salvar_receita 0027  
                 ?_serialIOload 0070                   ?_serialIOscan 0070               __end_of_getCiclos 1973  
          __end_of_initSerialIO 1D48                     posAtual@ind 0022                EEPROM_write@addr 0021  
              EEPROM_write@data 0020               __end_of_fifo_adrs 181E                       ?_posAtual 0070  
                     _I2C_start 1874      __size_of_fifo_alinharPrint 0084                         ___aldiv 136F  
                       ___awdiv 1185                 __size_of___lmul 0048                         ___awmod 1067  
                    _ler_sensor 1FA7                         ___lldiv 111D                 __size_of___wmul 0027  
       __size_of_init_atuadores 0005                         ___lwdiv 1E80                       ?_statusT1 0020  
                     _ANSELbits 0188                         _dispLCD 1D83            __size_of_timer1_init 0011  
                       __ptext1 18CC                         __ptext2 1851                         __ptext3 19F2  
                       __ptext4 1F0E                         __ptext5 18A9                         __ptext6 10C2  
                       __ptext7 18C0                         __ptext8 1D48                         __ptext9 1830  
                 teclado_scan@c 0026                   teclado_scan@l 0025                      ??_dac_init 0024  
             __end_of_intt1_1ms 1B2A               ??_resetContCiclos 0020                         _atuador 007A  
       __size_of_fifo_add_ciclo 000B                       _T1CONbits 0010                    __size_of_irq 001D  
       __size_of_fifo_add_tempo 0030                ___awmod@dividend 0022               salvar_receita@aux 002B  
              ___aldiv@dividend 0031                   _receita_livre 0000                      ??_codifica 0022  
        ??_salva_atuadores_init 0023                      ??_fifo_add 0033                      ??_fifo_tam 0020  
                       main@aux 00B5                         clrloop0 185A                         main@num 00D9  
                       main@ptr 00CA              entry__dispLCD_init 005E            end_of_initialization 004E  
                ??_serialIOload 0020                  ??_serialIOscan 0024      __size_of_serialIObyteShift 0026  
                   ?_decodifica 0070                  dispLCD_num@col 002E                  dispLCD_num@div 0037  
                dispLCD_num@lin 002D                  dispLCD_num@tam 0031                  dispLCD_num@num 002F  
                _dispLCD_lincol 1C76               __end_of_set_passo 111D                  dispLCD_str@lin 002B  
                dispLCD_str@str 0028                      dispLCD@col 0029                 ___lldiv@divisor 0020  
                    dispLCD@lin 0028                      dispLCD@pos 002D                      dispLCD@str 002A  
       __end_of_fifo_disponivel 189E               __end_of_printExec 1800                 ___lldiv@counter 002D  
                    ??_posAtual 0021                      ?_I2C_start 0070                    I2C_init@freq 002E  
          _fifo_indicePrint_dec 189E                ___aldiv@quotient 0038            _fifo_indicePrint_inc 1B2A  
                       psplit$0 150063                         psplit$1 630064                         psplit$2 640065  
                       psplit$3 650066                         psplit$4 660067          __size_of_teclado_borda 0021  
                  __pstringtext 0800              fifo_alinharPrint@i 0031                      ??_statusT1 0024  
                 ??_dispLCD_clr 0023                   ??_dispLCD_num 0032                   ??_dispLCD_str 002A  
                 ??_alt_atuador 0020                     ?_dignum_tam 0029                       _PORTAbits 0005  
              _fifo_add_control 1AD2                     ?_fifo_print 0070                      fp__dispLCD 0058  
                 ??_dignum_conc 0027                       _TRISAbits 0085                       _TRISBbits 0086  
                     _TRISCbits 0087        __size_of_dispLCD_dataReg 0031                   ??_fifo_delete 0033  
          pnum$maintext_split_1 0063            pnum$maintext_split_2 0064            pnum$maintext_split_3 0065  
          pnum$maintext_split_4 0066            pnum$maintext_split_5 0067                   ??_end_receita 0022  
                 ??_fifo_indice 0020                   ??_fifo_lerPos 0020               __size_of_I2C_init 002B  
             __size_of_I2C_stop 000A                   _teclaAnterior 0050          __end_of_dispLCD_lincol 1CA7  
                __end_of_I2C_tx 18C0        __size_of_dispLCD_instReg 007F                      main@ciclos 00D4  
           dignum_apagar@ptrNum 0028                      main@estado 00DB           __end_of_addContCiclos 1843  
      __size_of_getIndicePassos 0002           ?_fifo_indicePrint_dec 0070           ?_fifo_indicePrint_inc 0070  
                   ?_ler_sensor 0020                  __end_of___lmul 1F0E                  __end_of___wmul 1AA7  
                 __pidataCOMMON 07FF                  set_passo@passo 0023            __end_of_teclado_init 1859  
          __end_of_teclado_scan 1F5A             __size_of_decodifica 007E             start_initialization 000F  
           __end_of_dispLCD_clr 184A                   posAtual@passo 0023             __end_of_dispLCD_num 07FF  
           __end_of_dispLCD_str 1E3B             __end_of_alt_atuador 1D11                     __end_of_irq 1938  
                 _teclado_borda 19F2                        ??_I2C_tx 0020           __size_of_initSerialIO 0037  
               fifo_add_tempo@t 0034                 ?_dispLCD_lincol 0023             __end_of_dignum_conc 1BB5  
            initSerialIO@length 0021             __size_of_dignum_tam 0023             __end_of_fifo_delete 1FA7  
            initSerialIO@ptrOut 0020             __end_of_end_receita 1904             __end_of_fifo_indice 182B  
           __end_of_fifo_lerPos 186A             __size_of_fifo_print 01F1                ?_fifo_disponivel 0070  
             dispLCD_lincol@col 0023               dispLCD_lincol@aux 0027               dispLCD_lincol@lin 0026  
                   ??_I2C_start 0020                 main@meAtuadores 00D6                   ??_ler_atuador 0020  
                      ??___lmul 0028                        ??___wmul 0024                  _init_atuadores 182B  
        __size_of_getContCiclos 0007                      init_fetch0 18DD                     __pdataBANK0 0066  
                   __pdataBANK1 00DE                     __pdataBANK3 0190            __end_of_serialIOload 1835  
          __end_of_serialIOscan 1D83                        ?_MCP4725 003C                  _fifo_add_ciclo 1888  
              ler_atuador@tecla 0022                    _initSerialIO 1D11                  _fifo_add_tempo 1C15  
                   __pbssCOMMON 0076                       ___latbits 0002               __size_of_dac_init 003D  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0                ??_salvar_receita 0029  
                ?_teclado_borda 0070               __size_of__fptable 0018             __size_of_ler_sensor 0059  
             __size_of_codifica 00AD               __size_of_fifo_add 0030                       _dac_write 1E3B  
             __size_of_fifo_tam 0002                 _deletar_receita 0000               ??_dispLCD_dataReg 0020  
        ??_fifo_indicePrint_dec 0020          ??_fifo_indicePrint_inc 0020                ___lwdiv@dividend 0022  
        __end_of_init_atuadores 1830                 _resetContCiclos 1824                       _getCiclos 1955  
             ??_dispLCD_instReg 0020                       __pfunctab 0052                        ?___aldiv 002D  
                      ?___awdiv 0020               __size_of_posAtual 0017                        ?___awmod 0020  
                      ?___lldiv 0020                        ?___lwdiv 0020                       _fifo_adrs 181C  
                 serialIOscan@i 0029                   serialIOscan@j 0028          __end_of_fifo_add_ciclo 1893  
                   _dispLCD_clr 1843                     _dispLCD_num 071A                     _dispLCD_str 1DFC  
             ??_getIndicePassos 0020          __end_of_fifo_add_tempo 1C45                        ?_dispLCD 0028  
                     __pstrings 1800                     _alt_atuador 1CDA             __end_of_ler_atuador 1B86  
             __size_of_statusT1 000B        __size_of_addIndicePassos 000D                       _ind_print 0066  
                      _I2C_init 1AA7        serialIObyteShift@dataBit 0023                        _I2C_stop 186A  
        __size_of_dignum_apagar 001F                     _dignum_conc 1B86        serialIObyteShift@dataOut 0022  
                     _intt1_1ms 1AFD                   ??_salvar_dado 0029                ___lwdiv@quotient 0026  
                 _getContCiclos 184A                  __size_of_delay 001D                     _fifo_delete 1F5A  
                __size_of_setT1 000C                     _end_receita 18F0                     _fifo_indice 1827  
                   _fifo_lerPos 1861                      ?_dac_write 0024                    ??_decodifica 0020  
             teclado_scan@tecla 0024                  _fifo_print$392 002C                 ___aldiv@divisor 002D  
             interrupt_function 0004                 ___aldiv@counter 0036                  ___wmul@product 0024  
      __size_of_I2C_ack_receive 0007        __end_of_fifo_add_control 1AFD                       clear_ram0 1859  
                      _PIE1bits 008C                        _PIR1bits 000C                 ?_init_atuadores 0070  
                      _SERIALIO 0005                      ?_getCiclos 0020                       _set_passo 10C2  
         __size_of_teclado_init 0008                       main@F1509 0190                       main@F1483 00E9  
                     main@F1485 00E8           __size_of_teclado_scan 004C                  dignum_conc@dig 002B  
                 ??_timer1_init 0020                      ?_fifo_adrs 0070                       _printExec 16DE  
              dispLCD_dataReg@d 0021                 ?_fifo_add_ciclo 0020                    ??_dignum_tam 002B  
                   _cont_ciclos 0076                 ?_fifo_add_tempo 0070                     __stringbase 1812  
                     main@i_930 00D1                       main@i_927 00CF                       main@i_882 00C9  
             ___wmul@multiplier 0020                       main@i_876 00CD                       main@j_931 00D2  
                     main@j_928 00D0                       main@j_877 00CE             fifo_print@completar 002E  
                  ??_fifo_print 0029              __end_of_decodifica 126C                __size_of_MCP4725 0021  
                     main@botao 00D8                     _lenSerialIO 0051                 ??_teclado_borda 0027  
                     main@tecla 00DD                      ?_intt1_1ms 0070                  ?_getContCiclos 0020  
             _resetIndicePassos 09FA               ___lmul@multiplier 0020   __size_of_salva_atuadores_init 005A  
            ?_resetIndicePassos 0070         __end_of_resetContCiclos 1827                    _teclado_init 1851  
           __end_of_salvar_dado 19F2                    _teclado_scan 1F0E                      _EECON1bits 018C  
            __end_of_dignum_tam 1A36             ??_resetIndicePassos 0020                   _dignum_apagar 1991  
                 ler_sensor@ptr 0020              __end_of_fifo_print 1000                      ?_set_passo 0020  
         __size_of_serialIOload 0005           __size_of_serialIOscan 003B                    getCiclos@aux 0024  
              dispLCD_instReg@i 0022                     _ler_atuador 1B58                    ??_ler_sensor 0021  
                    ?_printExec 0039                __size_of___aldiv 009D                    pnum$maintext 0015  
              __size_of___awdiv 0069                __size_of___awmod 005B                __size_of___lldiv 0068  
              __size_of___lwdiv 0046                 fp__dispLCD_init 005E                dispLCD_num@sinal 0036  
         fifo_alinharPrint@cont 0030              __end_of__stringtab 1812                        _dac_init 1DBF  
              __size_of_dispLCD 003C             __end_of_timer1_init 18DD                        __fptable 0052  
     __end_of_resetIndicePassos 0A01                     decodifica@d 0022                        _main$900 00C4  
                      _main$905 00C6                        _main$893 00B6                        _main$894 00B8  
                      _main$895 00BA                        _main$896 00BC                        _main$897 00BE  
                      _main$898 00C0                        _main$899 00C2                ??_dispLCD_lincol 0024  
               ___lwdiv@divisor 0020                 ___lwdiv@counter 0025                        _codifica 140C  
                      __ptext10 1A5A                        __ptext11 1CA7                        __ptext20 1904  
                      __ptext12 19D1                        __ptext21 1820                        __ptext13 18F0  
                      __ptext30 0E0F                        __ptext22 1861                        __ptext14 1973  
                      __ptext31 1067                        __ptext23 071A                        __ptext15 100D  
                      __ptext40 1C15                        __ptext32 1B2A                        __ptext24 1FA7  
                      __ptext16 1B58                        __ptext41 1AD2                        __ptext33 189E  
                      __ptext25 182B                        __ptext17 09FA                        __ptext50 1843  
                      __ptext42 1888                        __ptext34 1827                        __ptext26 1D11  
                      __ptext18 1824                        __ptext51 1D83                        __ptext43 1BE5  
                      __ptext35 1893                        __ptext27 184A                        __ptext19 16DE  
                      __ptext60 183C                        __ptext52 1C76                        __ptext44 12EB  
                      __ptext36 1F5A                        __ptext28 1955                        __ptext61 1EC6  
                      __ptext53 126C                        __ptext45 1A13                        __ptext37 11EE  
                      __ptext29 181E                        __ptext70 186A                        __ptext62 136F  
                      __ptext54 1C45                        __ptext46 1185                        __ptext38 1CDA  
                      __ptext71 1AA7                        __ptext63 19B0                        __ptext55 1B86  
                      __ptext47 140C                        __ptext39 181C                        __ptext72 111D  
                      __ptext64 1E3B                        __ptext56 1A80                        __ptext48 1DFC  
                      __ptext73 191B                        __ptext65 1DBF                        __ptext57 1991  
                      __ptext49 1BB5                        __ptext74 1AFD                        __ptext66 1938  
                      __ptext58 1E80                        __ptext67 18B4                        __ptext59 1000  
                      __ptext68 1874                        __ptext69 1835                        _fifo_add 1BE5  
             ??_addIndicePassos 0020                        _fifo_tam 181E                        _ind_fila 0067  
                   ??_dac_write 0026              __end_of_ler_sensor 2000                   ?_EEPROM_write 0020  
                  _serialIOload 1830                    _serialIOscan 1D48                   __size_of_main F129  
            salvar_receita@data 0028              salvar_receita@adrs 0027                  ?_dignum_apagar 0070  
                      _posAtual 1904                    dispLCD_str@c 002C                     ??_getCiclos 0022  
                 _printExec$417 0040               ??_I2C_ack_receive 0020                     ??_fifo_adrs 0020  
            fifo_print@indPrint 002F                   fifo_add@passo 0034                        _statusT1 18A9  
                   MCP4725@Vout 003C                   dignum_tam@tam 002C                   dignum_tam@num 0029  
                      main@lema 00A0                    set_passo@ptr 0020  salva_atuadores_init@condi_init 0024  
               ??_getContCiclos 0022                      _INTCONbits 000B                   ?_dispLCD_init 0070  
        __size_of_addContCiclos 0007                    codifica@dado 0020                 _dispLCD_dataReg 1C45  
                  codifica@tipo 0024                     ??_intt1_1ms 0070                        init_ram0 18E1  
                   _salvar_dado 19D1                  fp__dispLCD_clr 005B                  fp__dispLCD_num 0064  
                fp__dispLCD_str 0061                 dispLCD_num@size 0035            fifo_alinharPrint@aux 0032  
               _dispLCD_instReg 126C                        intlevel1 0052                  ??_EEPROM_write 0021  
              ?_resetContCiclos 0070                ___lldiv@dividend 0024                 _getIndicePassos 1820  
             dignum_conc@ptrNum 0026                       stringcode 180A                     ??_set_passo 0021  
             fifo_print@comando 0032                     ??_printExec 003A        salva_atuadores_init@F108 004C  
                   _timer1_init 18CC                    _ptrSerialOut 0052                    ?_dispLCD_clr 0070  
                  ?_dispLCD_num 002D                    ?_dispLCD_str 0028        __size_of_fifo_disponivel 000B  
                  ?_alt_atuador 0070        salva_atuadores_init@dado 0029            fifo_add_ciclo@ciclos 0020  
      salva_atuadores_init@mask 002A                  ??_dispLCD_init 0024                ___lldiv@quotient 0029  
    __size_of_resetIndicePassos 0007                        stringtab 1800                    ___aldiv@sign 0037  
                  ?_dignum_conc 0026                    end_receita@x 0020                     _SSPCON2bits 0091  
              fifo_print@atraso 0031                    ?_fifo_delete 0070                     _ptrSerialIn 0053  
                  fifo_lerPos@i 0020                    ?_end_receita 0020                    ?_fifo_indice 0070  
                  ?_fifo_lerPos 0070                ??_init_atuadores 0020                 ??_dignum_apagar 0028  
                    _SSPCONbits 0014               ?_fifo_add_control 0070                   _addContCiclos 183C  
              ??_fifo_add_ciclo 0022                     fifo_print@i 0030  
